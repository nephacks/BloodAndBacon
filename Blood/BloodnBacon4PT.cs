using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Net;
using SkinnedModel;
using Steamworks;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

#pragma warning disable CS0219
#pragma warning disable CS0649
#pragma warning disable CS0414
#pragma warning disable CS0169
#nullable disable
namespace Blood
{
  public class BloodnBacon4PT : GameScreen
  {
    private const int maxGamers = 2;
    private const int maxLocalGamers = 1;
    private float aa = -22.6f;
    private float bb = 42.5f;
    private float cc = 1.8f;
    private bool notSaved = true;
    private int buttonsmash;
    private int globalSeed;
    private int hostcode1;
    private int hostcode2;
    private int hostcode3;
    private int hostcodeSend = -1;
    private bool hostcodeSent;
    private bool lampON;
    private int gType = 42;
    private int mType = 43;
    private int hType = 44;
    private int pType = 45;
    private bool playalone = true;
    private bool tunnelCheats;
    private bool tunnelDebug;
    private bool tunneldebug2;
    private bool tunnelAvoidDamage;
    private float liteRot;
    private bool tunneladd;
    private bool drawDaFarm;
    private int totalzots = 65;
    private float bulletMapWidth = 300f;
    private float bulletMapHite = 2400f;
    public AudioListener audiolistener;
    public AudioEmitter audioemitter;
    private Vector2 lastPlayerPos = Vector2.Zero;
    private int cogFlash;
    private int cogShake;
    private int mazeid;
    private bool showTunnelArrow;
    private Vector3 m_center = new Vector3(2566f, 0.0f, 2800f);
    private Vector3 m_location;
    private float m_xx;
    private float m_yy;
    private float m_oldx;
    private float m_oldy;
    private Color[] colorList = new Color[7]
    {
      new Color(237, 28, 36, (int) byte.MaxValue),
      new Color(242, 212, 0, (int) byte.MaxValue),
      new Color(0, 171, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, 140, 0, (int) byte.MaxValue),
      new Color(0, 245, 0, (int) byte.MaxValue),
      Color.Orange,
      Color.SlateGray
    };
    private Color hostblue = new Color(0, 78, (int) byte.MaxValue, (int) byte.MaxValue);
    private float divver;
    private float divver2;
    private float offxx;
    private float offyy;
    private float width0 = 250f;
    private float hite0 = 250f;
    private float widthG = 250f;
    private float hiteG = 250f;
    private float miniLerp;
    private float x0 = 50f;
    private float y0 = 220f;
    private int ww0 = 300;
    private int hh0 = 300;
    private int minimapCounter;
    private Rectangle rr5 = new Rectangle(0, 0, 0, 0);
    private bool teleportExists;
    private Vector3 teleportA;
    private Vector3 teleportB;
    private Vector3 wall1Pos;
    private int int_0;
    private int int_1;
    private bool bool_0;
    private bool bool_1;
    private Texture2D minimap1;
    private Texture2D minimapReveal;
    private Texture2D combineTexture;
    private Texture2D eraseblob;
    private Texture2D eraseframe1;
    private List<Vector2> eraseBlobList = new List<Vector2>();
    private BloodnBacon4PT.blobbo tempblob;
    private List<BloodnBacon4PT.blobbo> twinBlobList = new List<BloodnBacon4PT.blobbo>();
    private float twinBlobScale = 1f;
    private Rectangle gen_Rect = new Rectangle(0, 1261, 52, 52);
    private Rectangle ammo_Rect = new Rectangle(3, 1261, 52, 52);
    private Rectangle goggle_Rect = new Rectangle(57, 1261, 52, 52);
    private Rectangle flash2_Rect = new Rectangle(111, 1261, 52, 52);
    private Rectangle flash3_Rect = new Rectangle(165, 1261, 52, 52);
    private Rectangle map_Rect = new Rectangle(219, 1261, 52, 52);
    private Rectangle key_Rect = new Rectangle(273, 1261, 52, 52);
    private Rectangle gun_Rect = new Rectangle(273, 1323, 52, 52);
    private Rectangle peruvian_Rect = new Rectangle(327, 1261, 52, 52);
    private Rectangle tweed_Rect = new Rectangle(381, 1261, 52, 52);
    private Rectangle bowler_Rect = new Rectangle(435, 1261, 52, 52);
    private Rectangle cog_Rect = new Rectangle(489, 1261, 52, 52);
    private Rectangle cog_Rect2 = new Rectangle(489, 1206, 52, 52);
    private Rectangle almanac_Rect = new Rectangle(543, 1261, 52, 52);
    private Rectangle flash1_Rect = new Rectangle(597, 1261, 52, 52);
    private Rectangle redskull_Rect = new Rectangle(651, 1261, 52, 52);
    private Rectangle bluskull_Rect = new Rectangle(705, 1261, 52, 52);
    private Rectangle grnskull_Rect = new Rectangle(759, 1261, 52, 52);
    private Rectangle tusk_Rect = new Rectangle(813, 1261, 52, 52);
    private BloodnBacon4PT.hole door1;
    private BloodnBacon4PT.hole cryptdoor;
    private BloodnBacon4PT.hole cryptdoor2;
    private bool atGolem;
    private bool atCrypt;
    private bool atCrypt2;
    private int inFarm = 1;
    private Model enemyProxy;
    private Model webProxy;
    private Texture2D enemyTexture;
    private Texture2D enemyDeadTexture;
    private Texture2D goggleHud;
    private Texture2D webTexture;
    private Texture2D redex;
    private Texture2D angrymoon;
    private Texture2D tunnelshadowZero;
    private Model model_0;
    private Model tracer2;
    private float traceWave;
    private List<Matrix> x1anim;
    private Model tumbler;
    private Model cryptdoorModel;
    private Model cryptdoorModel3;
    private Model cryptdoorTriangle;
    private Model cryptdoorTriangle3;
    private Model tunnelDoor;
    private Model tunnelDoorP;
    private Model tunnelDoorH;
    private Model tunnelDoorTri;
    private Model hiddenDoorTri;
    private Model tunnel1;
    private Model tunnel02heights;
    private Model tunnel02Triangle;
    private Model twinModel;
    private bool twinFound;
    private bool twinshot;
    private Vector3 twinDestiny;
    private float? twindist = new float?(1000f);
    private Vector3 twinPosition;
    private Matrix twinRot;
    private List<string> twinactionList = new List<string>();
    private bool twinActNow = true;
    private int twinactionTimer = 600;
    private int twinactionindex;
    private int twinbase;
    private Texture2D twinTexture;
    private Texture2D twinOrigTexture;
    private float[] twinJaw;
    private bool atTwin;
    private bool atTwinFar;
    private bool lookatTwin;
    private int twinJawIndex;
    private bool twinDialog1Loaded;
    private int talktwinIndex = -1;
    private SoundEffects twinDialog1;
    private float twinlook;
    private Effect twinSkin;
    private string[] dialogueTwin = new string[102]
    {
      "twin_skull01",
      "twin_skull02",
      "twin_skull03",
      "twin_skull04",
      "twin_skull05",
      "twin_skull06",
      "twin_skull07",
      "twin_skull08",
      "twin_skull09",
      "twin_skull10",
      "twin_skull11",
      "twin_skull12",
      "twin_skull13",
      "twin_skull14",
      "twin_skull15",
      "twin_skull16",
      "twin_power01",
      "twin_power02",
      "twin_power03",
      "twin_power04",
      "twin_power05",
      "twin_power06",
      "twin_power07",
      "twin_power08",
      "twin_power09",
      "twin_power10",
      "twin_power11",
      "twin_power12",
      "twin_story1",
      "twin_story2",
      "twin_story3",
      "twin_story4",
      "twin_story5",
      "twin_story6",
      "twin_story7",
      "twin_story8",
      "twin_alt1",
      "twin_alt2",
      "twin_alt3",
      "twin_alt4",
      "twin_alt5",
      "twin_alt6",
      "twin_alt7",
      "twin_alt8",
      "twin_abuse1",
      "twin_abuse2",
      "twin_abuse3",
      "twin_abuse4",
      "twin_abuse5",
      "twin_abuse6",
      "twin_abuse7",
      "twin_abuse8",
      "twin_abuse9",
      "twin_alt9",
      "twin_skull17",
      "twin_skull8a",
      "twin_story9",
      "twin_mum01",
      "twin_mum02",
      "twin_mum03",
      "twin_mum04",
      "twin_mum05",
      "twin_mum06",
      "twin_mum07",
      "twin_mum08",
      "twin_mum09",
      "twin_mum10",
      "twin_mum11",
      "twin_found1",
      "twin_found2",
      "twin_found3",
      "twin_mrblue",
      "twin_mrgreen",
      "twin_mrred",
      "twin_bother01",
      "twin_bother02",
      "twin_bother03",
      "twin_bother04",
      "twin_bother05",
      "twin_bother06",
      "twin_bother07",
      "twin_bother08",
      "twin_bother09",
      "twin_bother10",
      "twin_bother11",
      "twin_bother12",
      "twin_bother13",
      "twin_foundtusk1",
      "twin_foundtusk2",
      "twin_foundtusk3",
      "twin_tusk01",
      "twin_tusk02",
      "twin_tusk03",
      "twin_tusk04",
      "twin_tusk05",
      "twin_tusk05a",
      "twin_tusk08",
      "twin_tusk09",
      "twin_tusk06",
      "twin_tusk07",
      "twin_tusk10",
      "twin_tusk11"
    };
    private List<int> tuskStory = new List<int>()
    {
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101
    };
    private List<int> botherStory = new List<int>()
    {
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86
    };
    private List<int> skullStory = new List<int>()
    {
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      55,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      54
    };
    private List<int> powerStory = new List<int>()
    {
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    };
    private List<int> twinStory = new List<int>()
    {
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      56
    };
    private List<int> twinAlt = new List<int>()
    {
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      53
    };
    private List<int> twinAbuse = new List<int>()
    {
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52
    };
    private List<int> twinMumble = new List<int>()
    {
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67
    };
    private int twinbotherIndex;
    private bool twinTalk;
    private int twinTalki = -1;
    private int twinTalkaction;
    private int twinTalkval1;
    private int twinargueIndex;
    private int twintalkIndex;
    private int twinNextLine = -1;
    private int twinNextaction = -1;
    private int twinWaitTimer1 = 1950;
    private int twinskullIndex;
    private int twintuskIndex;
    private int twinpowerIndex;
    private int twinstoryIndex;
    private int twinaltIndex;
    private int twinstandingtired = 450;
    private int twinstorychoice = 1;
    private SoundEffect enemydie;
    private SoundEffect skullplunge;
    private SoundEffect grow;
    private SoundEffect giveitem;
    private skullkins orange;
    private BloodnBacon4PT.emitters emitx;
    private List<BloodnBacon4PT.emitters> skullemit = new List<BloodnBacon4PT.emitters>();
    private List<BloodnBacon4PT.emitters> skulldrop = new List<BloodnBacon4PT.emitters>();
    private Effect tunnelEffect;
    private Effect cryptEffect;
    private SoundEffect creak;
    private SoundEffect vaultrise;
    private SoundEffect vaultopen;
    private SoundEffect cackle3;
    private SoundEffect seen;
    private SoundEffect seen4;
    private SoundEffect deathyell;
    private SoundEffect hillbilly;
    private int hillbillyTime;
    private bool atanyPhoto;
    private BloodnBacon4PT.interact tempi;
    private List<BloodnBacon4PT.interact> photo = new List<BloodnBacon4PT.interact>();
    private SoundEffect specialTalka;
    private SoundEffect specialTalkb;
    private List<BloodnBacon4PT.myDoor> combo = new List<BloodnBacon4PT.myDoor>();
    private List<BloodnBacon4PT.myDoor> plain = new List<BloodnBacon4PT.myDoor>();
    private List<BloodnBacon4PT.myDoor> hidden = new List<BloodnBacon4PT.myDoor>();
    private BloodnBacon4PT.myDoor tempCombo;
    private float maryPitch;
    private int[] maryPitchList = new int[106]
    {
      3,
      2,
      1,
      2,
      3,
      3,
      3,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      2,
      1,
      2,
      3,
      3,
      3,
      2,
      2,
      3,
      2,
      1,
      3,
      2,
      1,
      2,
      3,
      3,
      3,
      2,
      2,
      2,
      3,
      4,
      4,
      3,
      2,
      1,
      2,
      3,
      3,
      3,
      2,
      2,
      3,
      2,
      1,
      3,
      2,
      1,
      2,
      3,
      3,
      3,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      2,
      1,
      2,
      3,
      4,
      4,
      2,
      2,
      3,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      6,
      7,
      8,
      8,
      5,
      5,
      5,
      5,
      9,
      4,
      9,
      6,
      5,
      7,
      8,
      8,
      7,
      4,
      5,
      6,
      8,
      8,
      1,
      9,
      8
    };
    private int maryIndex = 1;
    private float[] maryPitches = new float[10]
    {
      -0.6f,
      -0.15f,
      0.0f,
      0.15f,
      0.4f,
      0.5f,
      0.7f,
      0.82f,
      0.95f,
      1f
    };
    private int fallTimer;
    private bool haveCogs;
    private bool haveCryptKey;
    private bool haveCryptMap;
    private bool haveEntranceKey;
    private int haveCryptMapCount;
    private bool shootEye1;
    private bool shootEye2;
    private bool cryptLock = true;
    private bool cryptLock2 = true;
    private Vector3 crypt1location = new Vector3(1220f, 10f, 4547f);
    private Vector3 crypt2location = new Vector3(2884f, 10f, 4780f);
    private int cryptLockMove;
    private int cryptLockMove2;
    private Vector3 cryptTrans = new Vector3(1345f, 0.0f, 4482f);
    private Vector3 cryptTrans2 = new Vector3(2819f, 0.0f, 4654f);
    private Matrix cryptMatrix;
    private Matrix cryptMatrix2;
    private float[,] tunnelheights;
    private BoundingBox farmTunnelTrig;
    private BoundingBox tunnelTrig1;
    private BoundingBox tunnelTrig2;
    private BoundingBox tunnelTrig3;
    private bool inExcavation;
    private bool atFlashlight1;
    private bool atFlashlight2;
    private bool atFlashlight3;
    private bool atAmmobox;
    private bool atGoggles;
    private bool atExitkey;
    private bool atCogs;
    private bool atMap;
    private bool atRedSkull1;
    private bool atRedSkull2;
    private bool atRedSkull3;
    private bool atTusk1;
    private bool atTusk2;
    private bool atTusk3;
    private bool atDisplayCase;
    private bool atDisplayCase2;
    private bool wearingGoggles;
    private int explosiveCount;
    private float lowestDepth = 230f;
    private int flashlightIndex;
    private float flashlightDepth = 100f;
    private Texture2D flashlightSpot;
    private Texture2D flashlightSpot0;
    private Texture2D flashlightSpot1;
    private Texture2D flashlightSpot2;
    private Texture2D flashlightSpot3;
    private Texture2D[] flashlightPack;
    private Texture2D texture2D_0;
    private Texture2D tunnelRGBdoor;
    private Texture2D tunnelRGBstairs;
    private Texture2D tunnelShadow;
    private Texture2D tunnelShadowb;
    private Texture2D cryptRGB;
    private Texture2D cryptShadow;
    private Texture2D gogglesTexture;
    private bool useAlt;
    private int minimapLevel;
    private int minimapLevelsaved = -1;
    private float[,] farmheights;
    private Matrix enemyProj = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(80f), 1.78f, 1f, 3000f);
    private int attackWaite;
    private bool enemySchedulethisFrame;
    public BlendState customBlend2 = new BlendState()
    {
      ColorSourceBlend = Blend.DestinationAlpha,
      ColorBlendFunction = BlendFunction.Add,
      ColorDestinationBlend = Blend.SourceAlpha,
      AlphaSourceBlend = Blend.One,
      AlphaBlendFunction = BlendFunction.Add,
      AlphaDestinationBlend = Blend.Zero
    };
    private bool crypt1netsend;
    private bool crypt1bnetsend;
    private bool crypt2netsend;
    private bool crypt2bnetsend;
    private int tunnelDoorNetnum = -1;
    private int skullemitNetSendNum = -1;
    private int skulldropNetSendNum = -1;
    private int sendTumbler = -1;
    private int tumblerIndex;
    private int tumblerSlot;
    private int tumblerState;
    private float introSpeed = 1.5f;
    private bool hardened = true;
    private bool leavingGame;
    private SoundEffect dumbsound;
    private ulong wearebeingliftedIndex;
    private int xtend;
    private int totalPlayers = 2;
    private bool remotelight;
    private int remotelightindex;
    private Vector3 light1 = Vector3.Normalize(new Vector3(0.4f, -0.7f, 1f));
    private Vector3 light2 = Vector3.Normalize(new Vector3(0.4f, -0.7f, -1f));
    private List<CSteamID> deletePlayers = new List<CSteamID>();
    private List<CSteamID> addedPlayers = new List<CSteamID>();
    private CSteamID thisLobbyID = new CSteamID();
    private CSteamID mysteamID = new CSteamID();
    private CSteamID HostOwner = new CSteamID();
    public List<dummyOwner> remPlayer = new List<dummyOwner>();
    private Vector3[] startpositions = new Vector3[12]
    {
      new Vector3(3530f, 0.0f, 4560f),
      new Vector3(3530f, 0.0f, 4610f),
      new Vector3(3530f, 0.0f, 4645f),
      new Vector3(3490f, 0.0f, 4560f),
      new Vector3(3490f, 0.0f, 4610f),
      new Vector3(3490f, 0.0f, 4645f),
      new Vector3(3410f, 0.0f, 4560f),
      new Vector3(3410f, 0.0f, 4610f),
      new Vector3(3410f, 0.0f, 4645f),
      new Vector3(3500f, 0.0f, 4560f),
      new Vector3(3500f, 0.0f, 4610f),
      new Vector3(3500f, 0.0f, 4645f)
    };
    private Vector3 hostPosition = new Vector3(3340f, 0.0f, 4600f);
    private Vector3 clientPosition = new Vector3(3500f, 0.0f, 4600f);
    private int ridingboar = -1;
    private int alternateCam;
    private int bossindex = 1;
    private int enemyindex = 1;
    private int playerfollowIndex;
    private Vector2 gg = Vector2.Zero;
    private float[] miniBossDam = new float[5]
    {
      1f,
      1f,
      0.72f,
      0.5f,
      0.4f
    };
    private bool delayinput;
    public Callback<P2PSessionRequest_t> connectRequest;
    private bool sendInfo;
    private int sendInfoCounter;
    private bool ExitFlag;
    private bool hitUs;
    private bool hitOpponent;
    private Matrix mymatrix;
    private int mybloodColor;
    private int sendmybloodColor;
    private int remBloodColor;
    private Matrix hudMatrix = Matrix.Identity;
    private int paintballColor = 1;
    private SoundEffect zombie;
    private SoundEffect ring;
    private bool loader;
    private bool loaderFlag1;
    private bool loaderFlag2;
    private bool keyboardRunToggle;
    private int ridewave;
    private bool kickme;
    private bool farmerLastSpeech;
    private int fakeDay;
    private int fakeToggle;
    private bool walletOpen;
    private int fovTimer;
    private float writingLocalFade;
    private float writingRemoteFade;
    private bool writingToday;
    private Texture2D barnWrite;
    private Model writingModel1;
    private Effect writeEffect;
    private string[] writingWall = new string[34]
    {
      "",
      "we are innocent",
      "beware the greedy piggy",
      "you created us",
      "the farmer did this",
      "dont eat the grain",
      "let us inside",
      "beware the fence",
      "cruel are the humans",
      "the grinder is fear",
      "suffering and pain",
      "death is near",
      "they will come for you",
      "leave this place",
      "play with scissors",
      "we learned from you",
      "lung cancer",
      "the farmer lies",
      "he eats his own kind",
      "we are watching you",
      "we know the truth",
      "you cannot win",
      "death by stampede",
      "kill the farmer",
      "kill the murderer",
      "farmer eats the grAin",
      "drown in vomit",
      "joseph adams",
      "we will never die",
      "we will return",
      "death is imminent",
      "death is certain",
      "death is imminent",
      "death is ours"
    };
    private int[] writingDays = new int[31]
    {
      0,
      5,
      10,
      14,
      18,
      25,
      28,
      30,
      33,
      38,
      40,
      44,
      45,
      49,
      50,
      53,
      56,
      68,
      70,
      71,
      72,
      74,
      75,
      81,
      83,
      85,
      89,
      90,
      92,
      99,
      100
    };
    private int outData;
    private int inData;
    private int dataCounter;
    private int dataCounter2;
    private TimeSpan elapsedTime = TimeSpan.Zero;
    private ContentManager contentTalk;
    private ContentManager conModel;
    private float distcheck = 100f;
    private int piglimit;
    private Random netRR;
    private bool metalToday;
    private bool saveWarning;
    private bool easyWarning;
    private int easyFail;
    private int pigChoice = -1;
    private int pigChoice2 = -1;
    private Rectangle[] diffRect = new Rectangle[5]
    {
      new Rectangle(58, 755, 57, 29),
      new Rectangle(144, 755, 83, 29),
      new Rectangle(250, 755, 57, 29),
      new Rectangle(0, 0, 0, 0),
      new Rectangle(0, 0, 0, 0)
    };
    private SoundEffectInstance metalwalk;
    private SoundEffectInstance metalwalk2;
    private Texture2D[] sprayTexture;
    public bool particlesLoaded;
    public ParticleSystem sparks;
    public ParticleSystem sparks2;
    public ParticleSystem bits;
    public ParticleSystem humanblood;
    public ParticleSystem headblood;
    public ParticleSystem debrisblood;
    public ParticleSystem debrisFire;
    public ParticleSystem rocks;
    public ParticleSystem dots;
    public ParticleSystem blood;
    public ParticleSystem bloodg;
    private Color[] fireColor = new Color[20]
    {
      Color.Red,
      Color.Orange,
      Color.Blue,
      Color.Green,
      Color.Yellow,
      Color.Purple,
      new Color(202, 244, 0),
      new Color((int) byte.MaxValue, 190, 48),
      new Color((int) byte.MaxValue, 150, 58),
      new Color((int) byte.MaxValue, 238, 83),
      new Color(0, 201, 241),
      new Color(0, 124, 199),
      new Color(0, 80, 181),
      new Color(81, 171, 71),
      new Color(27, 130, 22),
      new Color(240, 20, 150),
      new Color(218, 32, 0),
      new Color(175, 0, 92),
      new Color((int) byte.MaxValue, 1, 64),
      new Color(73, 56, 136)
    };
    private int debrisTimer = 160;
    private int crashTimer;
    private bool overRide;
    private bool emptyGun;
    private multiply multi = new multiply();
    private SoundEffect deathMusic;
    private SoundEffect crickets;
    private ScreenManager sc;
    private ContentManager Content;
    private int breakPoint = 350;
    private int breakPoint2 = 50;
    private bool courtesy;
    private bool exploded;
    private bool blackHole;
    private float weaponGrabTimer = 1f;
    private Vector2 hitHud = new Vector2(100f, 320f);
    private int altitude = -1;
    private Vector2 altitudeHud = new Vector2(100f, 190f);
    private float altitudeAnimate = 1f;
    private float altitudeTimer;
    private int multiHitPointer = -1;
    private float multiHitAnimate = 1f;
    private List<int> multiHitID = new List<int>();
    private List<int> multiHitValue = new List<int>();
    private List<float> multiHitTimer = new List<float>();
    private List<int> multiHitIndex = new List<int>();
    private List<int> multiHitType = new List<int>();
    private int farmerGlitchCount;
    private float chamberRot;
    private float chamberSpin;
    private bool[] remPlayerFlashlight = new bool[4];
    private int cycle = 1;
    private int maxdist = 5290000;
    private float BossDistance = 20000f;
    private BloodnBacon4PT.Flare[] flares = new BloodnBacon4PT.Flare[5]
    {
      new BloodnBacon4PT.Flare(0.1f, 1f, new Color(50, 50, 150), "texture\\flare1"),
      new BloodnBacon4PT.Flare(1.4f, 2f, new Color(150, 80, 80), "texture\\flare1"),
      new BloodnBacon4PT.Flare(0.65f, 1f, new Color(155, 60, 60), "texture\\flare2"),
      new BloodnBacon4PT.Flare(2f, 2f, new Color(155, 90, 60), "texture\\flare2"),
      new BloodnBacon4PT.Flare(3.8f, 4f, new Color(125, 45, 47), "texture\\flare3")
    };
    private Vector3 topCorner = new Vector3(73f, 244f, 245f);
    private Vector3 bottomCorner = new Vector3(-65f, 45f, -170f);
    private float delay;
    private int launchTime;
    private int lasttimeDelay;
    private float victoryMusic = 1f;
    private bool weAreOutdoors;
    private bool drawBossMeter;
    private int dummyIndex;
    private int afterClock = -200;
    private int preClock;
    private bool enemyDied;
    private int tipCount;
    private bool makeitGlow;
    private int playerdownGlow = -1;
    private bool playerGlow;
    private bool weaponGlow;
    private Vector2 grinderLoc;
    private SoundEffect primaryCock;
    private SoundEffect secondaryCock;
    private SoundEffect primBang;
    private SoundEffect primMuffle;
    private SoundEffect secBang;
    private SoundEffect secMuffle;
    private SoundEffect primDry;
    private SoundEffect secDry;
    private int whichPlayer;
    private float radius1;
    private float gunfiredRadius1;
    private float gunfiredDest1;
    private int gunfiredChase1;
    private int weaponGlowIndex;
    private bool weaponIsGlowing;
    private float weaponGlowDist;
    private bool shockScheduled;
    private bool shatterScheduled;
    private Vector3[] fencePoint;
    private int[] handtype = new int[250];
    private Vector3[] pos0;
    private Vector3[] pos1;
    private Curve camCurveX = new Curve();
    private Curve camCurveY = new Curve();
    private Curve camCurveZ = new Curve();
    private Curve lookCurveX = new Curve();
    private Curve lookCurveY = new Curve();
    private Curve lookCurveZ = new Curve();
    private float x1 = 3145f;
    private float x2 = 3730f;
    private float z1 = 4465f;
    private float z2 = 4785f;
    private BloodnBacon4PT.npcanim farmerAnim;
    private BloodnBacon4PT.npcanim twinAnim;
    private BloodnBacon4PT.npcanim twinAnimOld;
    private Thread backgroundThread;
    private EventWaitHandle backgroundThreadExit;
    private bool isBusy;
    private List<int> loads = new List<int>();
    private int currentKeyframe;
    private TimeSpan currentTimeValue;
    private int ageOffset;
    private int startGame;
    private int tickOffset;
    private Vector2 vv1;
    private Vector2 vv2;
    private Vector3 v1;
    private Vector3 v2;
    private Vector3 v3;
    private Vector3 vZero = Vector3.Zero;
    private Matrix m1;
    private Matrix m2;
    private Matrix m3;
    private Matrix m4;
    private float f1;
    private float f2;
    private float f3;
    private NetworkGamer sender;
    private readonly Random[] myrr = new Random[1];
    private readonly Random[] genRandomX = new Random[1];
    private bool hitOne;
    private float grinderVol;
    private float Gunleft;
    private float GunupForce;
    private Vector3 GunvelocShell;
    private Vector3 GunInherit;
    private Matrix Gunoffspin;
    private bool isTrialMode;
    private int[] daystartLock = new int[102]
    {
      0,
      0,
      2,
      4,
      6,
      8,
      54,
      12,
      14,
      16,
      18,
      20,
      22,
      24,
      26,
      28,
      30,
      55,
      34,
      36,
      50,
      64,
      66,
      68,
      70,
      72,
      56,
      74,
      76,
      78,
      18,
      80,
      82,
      84,
      86,
      57,
      88,
      90,
      92,
      94,
      51,
      96,
      98,
      100,
      102,
      58,
      104,
      106,
      22,
      24,
      18,
      26,
      36,
      64,
      66,
      68,
      54,
      70,
      72,
      74,
      52,
      76,
      78,
      80,
      82,
      84,
      55,
      86,
      88,
      90,
      18,
      92,
      94,
      96,
      98,
      56,
      100,
      102,
      104,
      106,
      53,
      22,
      24,
      26,
      36,
      57,
      64,
      66,
      68,
      70,
      18,
      72,
      74,
      76,
      78,
      58,
      80,
      82,
      84,
      86,
      38,
      40
    };
    private int[] dayendLock = new int[102]
    {
      0,
      1,
      3,
      5,
      7,
      9,
      59,
      13,
      15,
      17,
      19,
      21,
      23,
      25,
      27,
      29,
      31,
      60,
      35,
      37,
      46,
      65,
      67,
      69,
      71,
      73,
      61,
      75,
      77,
      79,
      42,
      81,
      83,
      85,
      87,
      62,
      89,
      91,
      93,
      95,
      47,
      97,
      99,
      101,
      103,
      63,
      105,
      107,
      23,
      25,
      43,
      29,
      37,
      65,
      67,
      69,
      59,
      71,
      73,
      75,
      48,
      77,
      79,
      81,
      83,
      85,
      60,
      87,
      89,
      91,
      44,
      93,
      95,
      97,
      99,
      61,
      101,
      103,
      105,
      107,
      49,
      23,
      25,
      29,
      37,
      62,
      65,
      67,
      69,
      71,
      45,
      73,
      75,
      77,
      79,
      63,
      81,
      83,
      85,
      87,
      39,
      41
    };
    private string[] dialogueName = new string[178]
    {
      "day1intro",
      "day1end",
      "day2intro",
      "day2end",
      "day3intro",
      "day3end",
      "day4intro",
      "day4end",
      "day5intro",
      "day5end",
      "day6intro",
      "day6end",
      "day7intro",
      "day7end",
      "day8intro",
      "day8end",
      "day9intro",
      "day9end",
      "day10intro",
      "day10end",
      "day11intro",
      "day11end",
      "day12intro",
      "day12end",
      "day13intro",
      "day13end",
      "day14intro",
      "day14end",
      "day15intro",
      "day15end",
      "day16intro",
      "day16end",
      "day18intro",
      "day18end",
      "day18intro",
      "day18end",
      "day19intro",
      "day19end",
      "day100intro",
      "day100end",
      "day101intro",
      "day101end",
      "cuttydead4",
      "cuttydead2",
      "cuttydead3",
      "cuttydead1",
      "princessdead4",
      "princessdead2",
      "princessdead3",
      "princessdead1",
      "princessintro1",
      "princessintro2",
      "princessintro3",
      "princessintro4",
      "revenge1intro",
      "revenge2intro",
      "revenge3intro",
      "revenge4intro",
      "revenge5intro",
      "revenge1end",
      "revenge2end",
      "revenge3end",
      "revenge4end",
      "revenge5end",
      "gen1start",
      "gen1end",
      "gen2start",
      "gen2end",
      "gen3start",
      "gen3end",
      "gen4start",
      "gen4end",
      "gen5start",
      "gen5end",
      "gen6start",
      "gen6end",
      "gen7start",
      "gen7end",
      "gen8start",
      "gen8end",
      "gen9start",
      "gen9end",
      "gen10start",
      "gen10end",
      "gen11start",
      "gen11end",
      "gen12start",
      "gen12end",
      "gen13start",
      "gen13end",
      "gen14start",
      "gen14end",
      "gen15start",
      "gen15end",
      "gen16start",
      "gen16end",
      "gen17start",
      "gen17end",
      "gen18start",
      "gen18end",
      "gen19start",
      "gen19end",
      "gen20start",
      "gen20end",
      "gen21start",
      "gen21end",
      "trialstart2",
      "gen22end",
      "trialstart1",
      "trialend1",
      "trialstart2",
      "trialend2",
      "trialstart3",
      "trialstart3",
      "payforit1",
      "payforit2",
      "payforit3",
      "princess1",
      "flashlight1",
      "flashlight2",
      "stopstaring",
      "shootme1",
      "grenades1",
      "shootme2",
      "shootme3",
      "shootme4",
      "flashlight3",
      "flashlight4",
      "shootme5",
      "shootme6",
      "shootme7",
      "flashlight5",
      "flashlight6",
      "flashlight7",
      "milkme1",
      "milkme2",
      "milkme3",
      "milkme4",
      "grenades3",
      "grenades4",
      "skulls",
      "shootme8",
      "balls1",
      "balls2",
      "shootleg1",
      "shootleg2",
      "blurry2",
      "hello1",
      "hello2",
      "hello4",
      "kissingtire1",
      "kissingtire2",
      "kissingtire4",
      "phone1",
      "phone2",
      "phone4",
      "rhinestone",
      "blurry1",
      "redsuntrickshot",
      "redsun1",
      "redsun2",
      "redsun3",
      "redsun4",
      "wavetophat",
      "wavetractor",
      "wavepumpkin",
      "wavesunhat",
      "wavemacarthur",
      "waveushanka",
      "wavegerman",
      "wavewizard",
      "wavegasmask",
      "waveelfhat",
      "xdidnthurt1",
      "xfaceshot2",
      "xgasp1",
      "xgasp2",
      "xgasp3"
    };
    private int trialStart = 108;
    private int comments = 117;
    private List<int> talkFlashlight = new List<int>()
    {
      118,
      119,
      126,
      (int) sbyte.MaxValue,
      131,
      132,
      133
    };
    private List<int> talkGrenades = new List<int>()
    {
      120,
      122,
      138,
      139
    };
    private List<int> talkShootMe = new List<int>()
    {
      121,
      123,
      124,
      125,
      128,
      129,
      130
    };
    private List<int> talkMilkMe = new List<int>()
    {
      134,
      135,
      136,
      137
    };
    private int shootmeCounter;
    private int shootmeTotalCount;
    private int totalGrenadedrop;
    private int grenadeCounter;
    private int flashlightCounter;
    private int milkmeCounter;
    private int talkIndex = -1;
    private int talkDayIndex;
    private SoundEffects farmerDialog1;
    private bool bool_2;
    private float[] farmerJaw;
    private int mouthamt = 8;
    private bool skullexposed;
    private int skullhit;
    private int skullTotal = 250;
    private bool farmerGonnaSpit;
    private bool farmerGonnaBleed;
    private bool farmerGonnaBleedMouth;
    private int farmerJawIndex = -1;
    private float talkAverage;
    private float talkSmooth;
    private float twinTalkSmooth;
    private float twinTalkAverage;
    private float farmerlook;
    private float farmerFrame1;
    private Cutty4[] cuttyBoss;
    private Princess4[] princess;
    private int lastBoarAlive = -1;
    private int oddnumLando;
    private Ray cursorRay;
    private Vector3 min;
    private Vector3 max;
    private float? distCheck;
    private List<int> parts;
    private int[] s;
    private int vibroTimer;
    private float vibroTimerAmt;
    private int grinderVibro;
    private float grinderVibroAmt;
    private bool boarSchedulethisFrame;
    private int attackWait;
    private int spookWait;
    private int crumbleWait;
    private int homingWait = 600;
    private int homingWait2 = 600;
    private bool stunStrike;
    private int stunCount;
    private int chompCount;
    private Vector2 hitVel;
    private float slowDown = 1f;
    private bool leftBumperGlow;
    private static StringBuilder needsHelpBuild = new StringBuilder(64, 64);
    private static StringBuilder closehelpBuild = new StringBuilder(64, 64);
    private static StringBuilder helpingUpBuild = new StringBuilder(64, 64);
    private string gamerName = "Player1";
    private static StringBuilder atDoorBuild = new StringBuilder(32, 32);
    private static StringBuilder atPump1Build = new StringBuilder(32, 32);
    private static StringBuilder atPump2Build = new StringBuilder(32, 32);
    private static StringBuilder atKissingBuild = new StringBuilder(52, 52);
    private static StringBuilder atPumpBusyBuild = new StringBuilder(32, 32);
    private static StringBuilder atLobbyBuild = new StringBuilder(52, 52);
    private static StringBuilder atgrinderBuild = new StringBuilder(52, 52);
    private static StringBuilder needbloodBuild = new StringBuilder(32, 32);
    private static StringBuilder reloadBuild = new StringBuilder(32, 32);
    private static StringBuilder atLever1Build = new StringBuilder(44, 44);
    private static StringBuilder atLever2Build = new StringBuilder(44, 44);
    private static StringBuilder atLever3Build = new StringBuilder(44, 44);
    private static StringBuilder atDoorLockedBuild = new StringBuilder(40, 40);
    private static StringBuilder atFarmerBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupMilkBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupAmmoBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupHulkBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupRocketBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupFullBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupGrenBuild = new StringBuilder(40, 40);
    private static StringBuilder pickupPillBuild = new StringBuilder(40, 40);
    private static StringBuilder pickWeaponBuild = new StringBuilder(40, 40);
    private static StringBuilder liftingFriendBuild = new StringBuilder(40, 40);
    private static StringBuilder coltammoBuild = new StringBuilder(40, 40);
    private static StringBuilder akammoBuild = new StringBuilder(40, 40);
    private static StringBuilder akmagBuild = new StringBuilder(40, 40);
    private static StringBuilder memo2 = new StringBuilder(75, 75);
    private Color memocolor = Color.White;
    private static StringBuilder memo = new StringBuilder(75, 75);
    private int memoTimer;
    private int memoIcon;
    private bool memoHigh;
    private static StringBuilder dpad = new StringBuilder(44, 44);
    private int dpadTimer;
    private int dpadCount;
    private static StringBuilder my_stringbuilder = new StringBuilder(64, 64);
    private static StringBuilder myScore = new StringBuilder(32, 32);
    private static StringBuilder remScore = new StringBuilder(32, 32);
    private static StringBuilder pigsalive = new StringBuilder(32, 32);
    private static StringBuilder whatday = new StringBuilder(32, 32);
    private static StringBuilder surviveT = new StringBuilder(12, 12);
    private static StringBuilder survive4 = new StringBuilder(12, 12);
    private static StringBuilder survive3 = new StringBuilder(12, 12);
    private static StringBuilder survive2 = new StringBuilder(12, 12);
    private static StringBuilder survive1 = new StringBuilder(12, 12);
    private string[] myFrac = new string[60]
    {
      "00",
      "01",
      "02",
      "03",
      "04",
      "05",
      "06",
      "07",
      "08",
      "09",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "39",
      "40",
      "41",
      "42",
      "43",
      "44",
      "45",
      "46",
      "47",
      "48",
      "49",
      "50",
      "51",
      "52",
      "53",
      "54",
      "55",
      "56",
      "57",
      "58",
      "59"
    };
    private static StringBuilder packets = new StringBuilder(64, 64);
    private int clockSec = -1;
    private int clockMin = -1;
    private int ClockHr = -1;
    private Vector2 clockPos;
    private int realFrac;
    private int realSec;
    private int realMin;
    private int realHr;
    private bool overrideDay;
    private Color skyColor = new Color(125, 125, 150, (int) byte.MaxValue);
    private Color greyDay = new Color(125, 125, 150, (int) byte.MaxValue);
    private Color colorDay = new Color(125, 125, 150, (int) byte.MaxValue);
    private Color[] healthBar = new Color[8]
    {
      new Color((int) byte.MaxValue, 0, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, 10, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, 30, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, 160, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, 200, 0, (int) byte.MaxValue),
      new Color((int) byte.MaxValue, (int) byte.MaxValue, 0, (int) byte.MaxValue),
      new Color(50, (int) byte.MaxValue, 0, (int) byte.MaxValue),
      new Color(0, (int) byte.MaxValue, 0, (int) byte.MaxValue)
    };
    private float adjustAX;
    private float adjustAY;
    private float adjustAZ;
    private float adjustBX;
    private float adjustBY;
    private float adjustBZ;
    private float adjustCX;
    private float adjustCY;
    private float adjustCZ;
    private int adjuster;
    private float adjusterY;
    private float adjusterX;
    private float adjusterZ;
    private float float_0;
    private float float_1;
    private float float_2;
    private float float_3;
    private float float_4;
    private float float_5;
    private int adjustIndex = 1;
    private bool showAdjust;
    private bool editCam;
    private float camradian;
    private float camheight;
    private Vector3 vector3_0;
    private Vector3 camlookpos3rd;
    private float old_camradian;
    private float old_camheight;
    private Vector3 old_campos3rd;
    private Vector3 old_camlookpos3rd;
    private int int_2;
    private string[] string_0 = new string[7]
    {
      "Camera 2",
      "Camera 3",
      "Shoulder View",
      "TopDown View",
      "Wide View",
      "Boot View",
      "Side View"
    };
    private float[] camradianArray = new float[7]
    {
      0.0f,
      0.0f,
      -1.725f,
      -1.568f,
      -1.52f,
      -1.53f,
      -3.09f
    };
    private float[] camheightArray = new float[7]
    {
      0.0f,
      0.0f,
      2.95f,
      1.95f,
      2.84f,
      3.29f,
      2.97f
    };
    private Vector3[] camposArray = new Vector3[7]
    {
      new Vector3(0.0f, 0.0f, 0.0f),
      new Vector3(0.0f, 0.0f, 0.0f),
      new Vector3(-21.53f, 48.7f, 15.2f),
      new Vector3(-80f, 812f, 0.0f),
      new Vector3(-148.7f, 102.14f, -45.337f),
      new Vector3(-16.93f, 4.429f, 9.4f),
      new Vector3(12f, 47f, 28.6f)
    };
    private Vector3[] camlookArray = new Vector3[7]
    {
      new Vector3(0.0f, 0.0f, 0.0f),
      new Vector3(0.0f, 0.0f, 0.0f),
      new Vector3(172.4f, 10.25f, -14.95f),
      new Vector3(-61f, 766f, 0.0f),
      new Vector3(-100.9f, 87.3f, -43.009f),
      new Vector3(32.485f, 11.98f, 11.296f),
      new Vector3(15f, 38.7f, -20.6f)
    };
    private int camIndex;
    private bool freeze;
    private int echoTime;
    private int syncTimeout;
    private float triptime;
    private int verifytime;
    private Vector2 dirInput = Vector2.Zero;
    private float depthWorld = 2900f;
    private float flicker1 = 1.2f;
    private float flicker2 = 1f;
    private int techniWorld = 2;
    private int techniBoar = 1;
    private Vector3 gunpos1World = Vector3.Zero;
    private Vector3 lightPos2 = Vector3.Zero;
    private Matrix matrix_0 = Matrix.Identity;
    private Matrix matrix_1 = Matrix.Identity;
    private Matrix myProjWorld = Matrix.Identity;
    private Rectangle rect_alivebody;
    private Rectangle rect_corpse;
    private Rectangle rect_aliveCheat;
    private Rectangle rect_alivebodyRemote;
    private Rectangle rect_lando = new Rectangle(689, 549, (int) byte.MaxValue, 89);
    private Rectangle rect_skel = new Rectangle(689, 634, (int) byte.MaxValue, 84);
    private Rectangle rect_johnny = new Rectangle(959, 549, (int) byte.MaxValue, 89);
    private Rectangle rect_viking = new Rectangle(959, 634, (int) byte.MaxValue, 84);
    private Rectangle rect_farmer = new Rectangle(400, 634, (int) byte.MaxValue, 89);
    private Rectangle rect_daisy = new Rectangle(400, 720, (int) byte.MaxValue, 89);
    private Rectangle rect_johnnycorpse = new Rectangle(689, 262, (int) byte.MaxValue, 89);
    private Rectangle rect_landoCheat = new Rectangle(0, 840, (int) byte.MaxValue, 89);
    private Rectangle rect_skelCheat = new Rectangle(0, 925, (int) byte.MaxValue, 84);
    private Rectangle rect_johnnyCheat = new Rectangle(272, 840, (int) byte.MaxValue, 89);
    private Rectangle rect_vikingCheat = new Rectangle(272, 925, (int) byte.MaxValue, 84);
    private Rectangle rect_farmerCheat = new Rectangle(543, 840, (int) byte.MaxValue, 89);
    private Rectangle rect_daisyCheat = new Rectangle(543, 925, (int) byte.MaxValue, 89);
    private Rectangle rect_man1 = new Rectangle(814, 840, (int) byte.MaxValue, 89);
    private Rectangle rect_man1Cheat = new Rectangle(814, 925, (int) byte.MaxValue, 89);
    private Rectangle rect_straw = new Rectangle(1085, 840, (int) byte.MaxValue, 89);
    private Rectangle rect_strawCheat = new Rectangle(1085, 925, (int) byte.MaxValue, 89);
    private Rectangle rect_robot = new Rectangle(1085, 1028, (int) byte.MaxValue, 89);
    private Rectangle rect_robotCheat = new Rectangle(1085, 1113, (int) byte.MaxValue, 89);
    private Rectangle rect_golem = new Rectangle(814, 1028, (int) byte.MaxValue, 89);
    private Rectangle rect_golemCheat = new Rectangle(814, 1113, (int) byte.MaxValue, 89);
    private Rectangle rect_astro = new Rectangle(543, 1028, (int) byte.MaxValue, 89);
    private Rectangle rect_astroCheat = new Rectangle(543, 1113, (int) byte.MaxValue, 89);
    private Color grn1 = new Color(156, 220, 55, (int) byte.MaxValue);
    private Color grn2 = new Color(190, (int) byte.MaxValue, 155, (int) byte.MaxValue);
    private Rectangle rect_ak = new Rectangle(1112, 210, 106, 77);
    private Rectangle rect_scar = new Rectangle(1242, 210, 106, 77);
    private Rectangle rect_shottie = new Rectangle(1112, 110, 106, 77);
    private Rectangle rect_m16 = new Rectangle(1113, 14, 106, 77);
    private Rectangle rect_smg = new Rectangle(1245, 110, 106, 77);
    private Rectangle rect_rocket = new Rectangle(1244, 14, 106, 77);
    private Rectangle rect_p90 = new Rectangle(687, 452, 106, 77);
    private Rectangle rect_paintball = new Rectangle(1002, 288, 103, 45);
    private Rectangle rect_pistol = new Rectangle(1112, 288, 103, 45);
    private Rectangle rect_indie = new Rectangle(1242, 288, 103, 45);
    private Rectangle rect_deagle = new Rectangle(1242, 378, 103, 45);
    private Rectangle[] weaponBox = new Rectangle[21];
    private Rectangle rect_death = new Rectangle(1046, 481, 166, 23);
    private Rectangle rect_health = new Rectangle(1046, 504, 166, 23);
    private Rectangle rect_milk = new Rectangle(844, 481, 166, 23);
    private Rectangle rect_Fader = new Rectangle(844, 466, 165, 11);
    private Rectangle rect_Crosshair1 = new Rectangle(606, 32, 66, 66);
    private Rectangle rect_Crosshair2 = new Rectangle(529, 32, 66, 66);
    private Rectangle rect_Abutton = new Rectangle(719, 34, 30, 30);
    private Rectangle rect_Bbutton = new Rectangle(755, 34, 30, 30);
    private Rectangle rect_Blue = new Rectangle(793, 34, 30, 30);
    private Rectangle rect_Xbutton = new Rectangle(776, 75, 30, 30);
    private Rectangle rect_Wbutton = new Rectangle(991, 34, 30, 30);
    private Rectangle rect_Ybutton = new Rectangle(831, 34, 30, 30);
    private Rectangle rect_Bulb = new Rectangle(871, 34, 30, 30);
    private Rectangle rect_Lock = new Rectangle(910, 34, 30, 30);
    private Rectangle rect_Lock2 = new Rectangle(952, 75, 30, 30);
    private Rectangle rect_Exclaim = new Rectangle(951, 34, 30, 30);
    private Rectangle rect_Timer = new Rectangle(1220, 662, 147, 147);
    private Rectangle rect_sskull = new Rectangle(829, 72, 35, 35);
    private Rectangle rect_player = new Rectangle(949, 108, 35, 35);
    private Rectangle rect_playerHost = new Rectangle(989, 108, 35, 35);
    private Rectangle rect_Asterisk = new Rectangle(1028, 30, 53, 51);
    private Rectangle rect_Star = new Rectangle(909, 74, 32, 32);
    private Rectangle[] rect_choice = new Rectangle[8]
    {
      new Rectangle(1028, 30, 53, 51),
      new Rectangle(1028, 30, 53, 51),
      new Rectangle(909, 74, 32, 32),
      new Rectangle(830, 74, 32, 32),
      new Rectangle(951, 34, 30, 30),
      new Rectangle(994, 75, 30, 30),
      new Rectangle(699, 76, 58, 30),
      new Rectangle(1031, 81, 44, 39)
    };
    private Rectangle rect_flashon = new Rectangle(1238, 350, 28, 26);
    private Rectangle rect_flashoff = new Rectangle(1210, 350, 28, 26);
    private Rectangle rect_dpad = new Rectangle(1121, 353, 83, 82);
    private Rectangle rect_dpad2 = new Rectangle(1033, 353, 83, 82);
    private Rectangle rect_grenade3 = new Rectangle(1113, 378, 24, 28);
    private Rectangle rect_grenade4 = new Rectangle(1115, 380, 20, 20);
    private Rectangle rect_milk3 = new Rectangle(1138, 378, 24, 28);
    private Rectangle rect_milk4 = new Rectangle(1140, 380, 20, 20);
    private Rectangle rect_hulk3 = new Rectangle(1163, 378, 24, 28);
    private Rectangle rect_hulk4 = new Rectangle(1165, 380, 20, 20);
    private Rectangle rect_pill3 = new Rectangle(1188, 378, 24, 28);
    private Rectangle rect_pill4 = new Rectangle(1190, 380, 20, 20);
    private Rectangle rect_rescue = new Rectangle(27, 332, 375, 49);
    private Rectangle rect_beinglifted = new Rectangle(27, 418, 375, 49);
    private Rectangle rect_rescuebar = new Rectangle(56, 388, 325, 18);
    private Rectangle cuttyHealthBar = new Rectangle(30, 390, 344, 18);
    private Rectangle cuttyHearts = new Rectangle(82, 268, 302, 49);
    private Rectangle[] cuttyBreaks = new Rectangle[10]
    {
      new Rectangle(482, 262, 80, 70),
      new Rectangle(562, 262, 80, 70),
      new Rectangle(482, 332, 80, 70),
      new Rectangle(562, 332, 80, 70),
      new Rectangle(482, 402, 80, 70),
      new Rectangle(562, 402, 80, 70),
      new Rectangle(482, 472, 80, 70),
      new Rectangle(562, 472, 80, 70),
      new Rectangle(482, 542, 80, 70),
      new Rectangle(562, 542, 80, 70)
    };
    private Rectangle cuttyHealthBarSlim = new Rectangle(30, 390, 344, 10);
    private Rectangle cuttyMeter = new Rectangle(27, 10, 432, 72);
    private Rectangle cuttyMeter2 = new Rectangle(595, 149, 432, 72);
    private Rectangle cuttyDoubleMeter = new Rectangle(27, 100, 432, 72);
    private Rectangle cuttyTripleMeter = new Rectangle(27, 184, 440, 72);
    private bool boarDropTrigger;
    private bool boarTriggerSent;
    private List<int> boarSeed = new List<int>();
    private List<int> boarDropTimer = new List<int>();
    private Matrix cubeMatrix;
    private BoundingBox mybox;
    private float spinner;
    private Matrix spinnerTransform = Matrix.Identity;
    private bool GrinderOn;
    private float grinderSpinUp;
    private int grinderRuntime = 600;
    private float grinderTimer;
    private Vector3 grinderMin = new Vector3(1534f, 81f, 1419f);
    private Vector3 grinderMax = new Vector3(1680f, 167f, 1440f);
    private float oldbloodLevel;
    private int buttonTimer;
    private Vector2 buttonsRowMin = new Vector2(1537.877f, 121.587f);
    private Vector2 buttonsRowMax = new Vector2(1681.908f, 143.185f);
    private float button1x = 1561.771f;
    private float button2x = 1585.5f;
    private float button3x = 1609.428f;
    private float button4x = 1633.187f;
    private float button5x = 1657.028f;
    private Vector2 startButtonMin = new Vector2(1594.327f, 80.582f);
    private Vector2 startButtonMax = new Vector2(1623.763f, 101.523f);
    private int lastButton = -1;
    private int button1state;
    private int button2state;
    private int button3state;
    private int button4state;
    private int button5state;
    private int button6state;
    private int button7state;
    private int int_3;
    private int int_4;
    private int int_5;
    private int int_6;
    private int int_7;
    private int int_8;
    private float lastBloodValue;
    private bool pickupGlow;
    private int pickupType = -1;
    private int pickupIndex = -1;
    private float pickupDist;
    private float pickupDot;
    private bool lightON;
    private bool leftFoot;
    private bool rightFoot;
    private bool leftFoot2;
    private bool rightFoot2;
    private Vector3 triNormal;
    private Vector3 adjNormal;
    private float gunShake = 400f;
    private Vector3 camshake = Vector3.Zero;
    private float camshaker;
    private Vector2 shootOffset = Vector2.Zero;
    private RenderTarget2D glowTarget;
    private RenderTarget2D target1;
    private RenderTarget2D target2;
    private RenderTarget2D maptarget1;
    private RenderTarget2D maptarget2;
    private RenderTarget2D mapCombineTarget1;
    private RenderTarget2D mapCombineTarget2;
    private RenderTarget2D twinSplat1;
    private RenderTarget2D twinSplat2;
    private int targetchoice;
    private int twintargetchoice;
    private bool nightTextureSet;
    private Matrix moonMatrix;
    private Matrix moonScale;
    private bool moonExists;
    private bool specialMoon;
    private Effect buildingLight;
    private Effect reflectEffect;
    private Effect muzzleEffect;
    private Effect buildingEffect;
    private Effect effect_0;
    private Effect barnEffect;
    private Effect barnRemEffect;
    private Effect blastEffect;
    private Effect mountainEffect;
    private Effect dayEffect;
    private Effect nightEffect;
    private Effect waterEffect;
    private Effect laserEffect;
    private Effect glowEffect;
    private Effect preglowEffect;
    private Effect grassEffect;
    private Effect cloudEffect;
    private Effect moonEffect;
    private Effect crazyEffect;
    private Effect mirvEffect;
    private Effect solidSkin;
    private Effect quickSkin1;
    private Effect quickSkin2;
    private Effect farmerSkin;
    private float glowDistance;
    private ParticleSystem electric;
    private ParticleSystem gunsmoke;
    private ParticleSystem farmerspit;
    private ParticleSystem lampGlow;
    private ParticleSystem rocketsmoke;
    public static RasterizerState wires = new RasterizerState()
    {
      CullMode = CullMode.None,
      FillMode = FillMode.WireFrame
    };
    public static BlendState Difference = new BlendState()
    {
      ColorSourceBlend = Blend.InverseDestinationColor,
      ColorDestinationBlend = Blend.InverseSourceAlpha,
      ColorBlendFunction = BlendFunction.Add,
      AlphaSourceBlend = Blend.SourceAlpha,
      AlphaDestinationBlend = Blend.InverseSourceAlpha
    };
    private Cursor cursor;
    private Cursor genCursor;
    private Cursor oppCursor;
    private Texture2D ttWorld;
    private Texture2D ttWorld2;
    private Texture2D button;
    private Texture2D reflectionMap;
    private Texture2D bloodhit;
    private Texture2D splat1;
    private Texture2D splat2;
    private Texture2D splat3;
    private Texture2D splat4;
    private Texture2D spotTexture;
    private Texture2D crosshair;
    private Texture2D barnRGB;
    private Texture2D barnShadow;
    private Texture2D burster;
    private Texture2D electrify;
    private Texture2D player1Texture;
    private Texture2D whiteNPCdead;
    private Texture2D farmerTexture;
    private Texture2D texture2D_1;
    private Texture2D overlay;
    private Texture2D mountTexture;
    private Texture2D grassTexture;
    private Texture2D texture2D_2;
    private Texture2D buildingShadow;
    private static RasterizerState WireFrame = new RasterizerState()
    {
      FillMode = FillMode.WireFrame,
      CullMode = CullMode.None
    };
    private VertexPositionColor[] pickedTriangle = new VertexPositionColor[3]
    {
      new VertexPositionColor(Vector3.Zero, Color.Blue),
      new VertexPositionColor(Vector3.Zero, Color.Blue),
      new VertexPositionColor(Vector3.Zero, Color.Blue)
    };
    private VertexPositionColor[] adjTriangle = new VertexPositionColor[3]
    {
      new VertexPositionColor(Vector3.Zero, Color.Red),
      new VertexPositionColor(Vector3.Zero, Color.Red),
      new VertexPositionColor(Vector3.Zero, Color.Red)
    };
    private BloodnBacon4PT.hitStream hitstreamTemp = new BloodnBacon4PT.hitStream();
    private static VertexDeclaration vd2 = new VertexDeclaration(new VertexElement[6]
    {
      new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 0),
      new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
      new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
      new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
      new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
      new VertexElement(68, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4)
    });
    private BloodnBacon4PT.hole farm;
    private BloodnBacon4PT.hole door;
    private BloodnBacon4PT.hole hudsplats;
    private BloodnBacon4PT.hole grinderButton;
    private BloodnBacon4PT.hole grenExplosion;
    private BloodnBacon4PT.hole mirvExplosion;
    private static VertexDeclaration instanceDec = new VertexDeclaration(new VertexElement[5]
    {
      new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 0),
      new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
      new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
      new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
      new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0)
    });
    private BloodnBacon4PT.humans myhead;
    private BloodnBacon4PT.humans mychest;
    private BloodnBacon4PT.humans mytorso;
    private BloodnBacon4PT.humans leftarm;
    private BloodnBacon4PT.humans lefthand;
    private BloodnBacon4PT.humans leftleg;
    private BloodnBacon4PT.humans leftfoot;
    private BloodnBacon4PT.humans rightarm;
    private BloodnBacon4PT.humans righthand;
    private BloodnBacon4PT.humans rightleg;
    private BloodnBacon4PT.humans rightfoot;
    private Effect humanEffect;
    private BloodnBacon4PT.instancedObject[] tempInstance = new BloodnBacon4PT.instancedObject[1];
    private BloodnBacon4PT.shell primShell;
    private BloodnBacon4PT.shell secondShell;
    private BloodnBacon4PT.shell primShell_rem;
    private BloodnBacon4PT.shell secondShell_rem;
    private BloodnBacon4PT.shell head;
    private BloodnBacon4PT.shell leg;
    private BloodnBacon4PT.shell body;
    private BloodnBacon4PT.shell butt;
    private BloodnBacon4PT.shell carnage;
    private BloodnBacon4PT.shell charro;
    private BloodnBacon4PT.shell pigbone;
    private BloodnBacon4PT.shell chain;
    private BloodnBacon4PT.shell chain2;
    private BloodnBacon4PT.shell zolt;
    private Matrix[] charroTrans;
    private int[] charroBone;
    private Matrix[] zoltOrigTrans;
    private Vector3[] zoltPos;
    private ropeDupe chainRope;
    private ropeDupe chainRope2;
    private BloodnBacon4PT.pickup milk;
    private BloodnBacon4PT.pickup bulletbox;
    private BloodnBacon4PT.pickup hulkcan;
    private BloodnBacon4PT.pickup pill;
    private BloodnBacon4PT.pickup rocket;
    private BloodnBacon4PT.pickup grenade;
    private BloodnBacon4PT.pickup grenadeThrow;
    private BloodnBacon4PT.pickup debris;
    private BloodnBacon4PT.goreDrop pigchunk;
    private BloodnBacon4PT.liveShell revolver;
    private BloodnBacon4PT.streak mirvs1;
    private BloodnBacon4PT.streak mirvs2;
    public Model mirvModel;
    public Texture2D mirvTexture;
    private BloodnBacon4PT.atari pim1;
    private BloodnBacon4PT.atari pim2;
    private static VertexDeclaration vd = new VertexDeclaration(new VertexElement[9]
    {
      new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
      new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
      new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
      new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4),
      new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
      new VertexElement(68, VertexElementFormat.Single, VertexElementUsage.Fog, 1),
      new VertexElement(72, VertexElementFormat.Single, VertexElementUsage.Fog, 2),
      new VertexElement(76, VertexElementFormat.Single, VertexElementUsage.Fog, 3),
      new VertexElement(80, VertexElementFormat.Single, VertexElementUsage.Fog, 4)
    });
    private BloodnBacon4PT.skinstream tempySkin = new BloodnBacon4PT.skinstream();
    private BloodnBacon4PT.skinstream[] tempySkinArray = new BloodnBacon4PT.skinstream[1];
    private readonly VertexBufferBinding[] _vertexBufferBindings = new VertexBufferBinding[2];
    private BloodnBacon4PT.conductor tempConduct = new BloodnBacon4PT.conductor();
    private BloodnBacon4PT.npc boar;
    private static VertexDeclaration simpleVD = new VertexDeclaration(new VertexElement[6]
    {
      new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
      new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
      new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
      new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4),
      new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
      new VertexElement(68, VertexElementFormat.Single, VertexElementUsage.Fog, 1)
    });
    private BloodnBacon4PT.simpleNPC bat;
    private BloodnBacon4PT.simplestream flySkin = new BloodnBacon4PT.simplestream();
    private bool batsLoaded;
    private Effect flyEffect;
    private Vector3[] batpath1 = new Vector3[88]
    {
      new Vector3(1401.39856f, 59.07461f, 792.7249f),
      new Vector3(1451.43579f, 59.07461f, 1058.73645f),
      new Vector3(1647.18872f, 59.07461f, 1205.55115f),
      new Vector3(1802.35864f, 59.07461f, 1444.27417f),
      new Vector3(1766.55017f, 59.07461f, 1694.93323f),
      new Vector3(1539.76331f, 59.07461f, 1778.48633f),
      new Vector3(1396.52954f, 36.1330261f, 1575.57178f),
      new Vector3(1527.82715f, 26.24611f, 1492.0188f),
      new Vector3(1706.86938f, 59.07461f, 1587.50793f),
      new Vector3(1659.12488f, 59.07461f, 1909.78394f),
      new Vector3(1372.65723f, 59.07461f, 2005.27319f),
      new Vector3(1074.25354f, 137.917267f, 1945.59241f),
      new Vector3(1014.57275f, 135.726517f, 1802.35864f),
      new Vector3(859.4028f, 10.0051384f, 1432.338f),
      new Vector3(704.232849f, 105.7583f, 1229.42346f),
      new Vector3(262.5953f, 38.9080544f, 1133.9342f),
      new Vector3(-310.3399f, 59.07461f, 1145.87036f),
      new Vector3(-620.6798f, 59.07461f, 1277.16809f),
      new Vector3(-895.211243f, 59.07461f, 1527.82715f),
      new Vector3(-1348.78491f, 204.785065f, 1492.0188f),
      new Vector3(-1492.0188f, 154.655792f, 1133.9342f),
      new Vector3(-1301.04028f, 59.07461f, 823.59436f),
      new Vector3(-441.637543f, 59.07461f, 835.5305f),
      new Vector3(-250.659149f, 59.07461f, 966.8281f),
      new Vector3(-59.680748f, 59.07461f, 919.083557f),
      new Vector3(-23.8723f, 59.07461f, 692.2967f),
      new Vector3(-167.1061f, 59.07461f, 513.254456f),
      new Vector3(-477.445984f, 59.07461f, 477.445984f),
      new Vector3(-716.169f, 132.214569f, 346.148346f),
      new Vector3(-728.105164f, 20.2498779f, 47.7446f),
      new Vector3(-381.9568f, 160.3486f, -250.659149f),
      new Vector3(-107.425346f, 162.0617f, -59.680748f),
      new Vector3(226.78685f, 207.242249f, 274.531433f),
      new Vector3(931.0197f, 59.07461f, 155.169952f),
      new Vector3(1145.87036f, 59.07461f, -214.8507f),
      new Vector3(1301.04028f, 59.07461f, -346.148346f),
      new Vector3(1575.57178f, 59.07461f, -322.276062f),
      new Vector3(1742.67786f, 59.07461f, -226.78685f),
      new Vector3(1862.03943f, 83.47444f, -155.169952f),
      new Vector3(1862.03943f, 30.44263f, 47.7446f),
      new Vector3(1718.80554f, 120.7612f, 214.8507f),
      new Vector3(1432.338f, 59.07461f, 238.722992f),
      new Vector3(1363.27368f, 45.33218f, 0.0f),
      new Vector3(1503.95483f, 59.07461f, -405.8291f),
      new Vector3(1527.82715f, 59.07461f, -632.615967f),
      new Vector3(1289.10425f, 155.567017f, -881.8526f),
      new Vector3(799.722046f, 59.07461f, -751.9774f),
      new Vector3(632.615967f, 59.07461f, -453.5737f),
      new Vector3(537.1268f, 59.07461f, -274.531433f),
      new Vector3(274.531433f, 59.07461f, -286.4676f),
      new Vector3(0.0f, 59.07461f, -728.105164f),
      new Vector3(-47.7446f, 59.07461f, -1384.59338f),
      new Vector3(-286.4676f, 277.9821f, -1635.25256f),
      new Vector3(-513.254456f, 224.530762f, -1742.67786f),
      new Vector3(-704.232849f, 59.07461f, -1587.50793f),
      new Vector3(-608.743652f, 190.1679f, -1277.16809f),
      new Vector3(-572.9352f, 59.07461f, -990.700439f),
      new Vector3(-692.2967f, 59.07461f, -620.6798f),
      new Vector3(-895.211243f, 59.07461f, -429.7014f),
      new Vector3(-1074.25354f, 59.07461f, -537.1268f),
      new Vector3(-1217.4873f, 149.072861f, -847.4666f),
      new Vector3(-1384.59338f, 59.07461f, -978.7643f),
      new Vector3(-1826.231f, 59.07461f, -990.700439f),
      new Vector3(-2121.10522f, 41.0997124f, -756.3156f),
      new Vector3(-2244.26587f, 59.07461f, -322.815247f),
      new Vector3(-2239.658f, 59.07461f, 95.2196f),
      new Vector3(-2191.10449f, 59.07461f, 235.463226f),
      new Vector3(-1993.337f, 59.07461f, 179.042252f),
      new Vector3(-2060.88525f, 59.07461f, -8.945985f),
      new Vector3(-2315.613f, 59.07461f, -23.8723f),
      new Vector3(-2351.42163f, 131.1286f, 274.531433f),
      new Vector3(-2112.69849f, 59.07461f, 692.2967f),
      new Vector3(-1706.86938f, 59.07461f, 799.722046f),
      new Vector3(-1086.1897f, 59.07461f, 572.9352f),
      new Vector3(-1014.57275f, 59.07461f, 393.892944f),
      new Vector3(-895.211243f, 59.07461f, -47.7446f),
      new Vector3(-584.871338f, 59.07461f, -334.2122f),
      new Vector3(-179.042252f, 59.07461f, -393.892944f),
      new Vector3(131.297653f, 59.07461f, -190.9784f),
      new Vector3(298.403748f, 59.07461f, 381.9568f),
      new Vector3(310.3399f, 59.07461f, 716.169f),
      new Vector3(692.2967f, 59.07461f, 823.59436f),
      new Vector3(942.9559f, 59.07461f, 656.4882f),
      new Vector3(1053.06677f, 59.07461f, 546.377258f),
      new Vector3(1284.47888f, 59.07461f, 635.9467f),
      new Vector3(1401.39856f, 59.07461f, 792.7249f),
      new Vector3(1451.43579f, 59.07461f, 1058.73645f),
      new Vector3(1647.18872f, 59.07461f, 1205.55115f)
    };
    private float[] sphereScale = new float[18]
    {
      95f,
      70f,
      70f,
      80f,
      80f,
      100f,
      100f,
      70f,
      145f,
      145f,
      145f,
      145f,
      145f,
      145f,
      145f,
      70f,
      80f,
      80f
    };
    private Effect enemyEffect;
    private enemynpc enemy1;
    private BloodnBacon4PT.npcWeb web;
    private float headRot;
    private float headTilt;
    private float oldHeadTilt;
    private Vector3 campos = new Vector3(3000f, 300f, 3000f);
    private Vector3 camlookpos = new Vector3(3200f, 300f, 3000f);
    private Vector3 camuppy = Vector3.Up;
    private Vector3 autoCampos;
    private Vector3 autoCamlook;
    private float autoCamHeight = -3.9f;
    private float autoCamrotate = 1f;
    private float autoCamDistance = 150f;
    private float autoCamRadius = 150f;
    private float oldCamrotate = 1f;
    private int timeFrame;
    private int newTickoffset;
    private Random rr;
    private SpriteBatch spriteBatch;
    private SpriteFont font;
    private SpriteFont font2;
    private SpriteFont bloodFont;
    private SpriteFont ammoLargeFont;
    private SpriteFont ammoLargerFont;
    private SpriteFont ammoMedium;
    private SpriteFont ammoMedium2;
    private SpriteFont ammoFont;
    private SpriteFont ammoSmallFont;
    private SpriteFont ammoSmallestFont;
    private SpriteFont ammoLargestFont;
    private SpriteFont buttonFont;
    private GamePadState gamePad;
    private GamePadState prevState;
    private KeyboardState keyState;
    private KeyboardState prevkeyState;
    private MouseState mouseState;
    private MouseState prevMouse;
    private PlayerIndex playerIndex;
    private NetworkSession networkSession;
    private PacketWriter packetWriter = new PacketWriter();
    private PacketReader packetReader = new PacketReader();
    private string errorMessage = "";
    private int framesBetweenPackets = 7;
    private int framesSinceLastSend;
    private bool sendPacketThisFrame;
    private localPlayer myPlayer;
    private Model mountain;
    private Model cube;
    private Model buttonModel;
    private Matrix mymm;
    private Matrix mymm2;
    private Model localModel;
    private Model farmerModel;
    private Model coltpistol;
    private Model ak47;
    private Model blueLaser;
    private Model farmTriangles;
    private Model barnTriangles;
    private Model doorTriangles;
    private Model farmBuilding;
    private Model barnBuilding;
    private Model trees;
    private Model grass;
    private Model clouds;
    private Model clouds0;
    private Model explosionDecal;
    private Texture2D cloudTexture;
    private bool cloudsLoaded;
    private float cloudDarkness = 0.9f;
    private Vector4[] muzzleRect;
    private Vector4[] blastRect;
    private float localClean;
    private bool localCleanOn;
    private int localID;
    private Matrix buildingMatrix;
    private Matrix barnDoorMatrix;
    private bool atFarmer;
    private bool lookatFarmer;
    private bool atPig;
    private bool atBarnDoor;
    private bool atKissing;
    private bool atGrinder;
    private bool viewGrinder;
    private bool atLobby;
    private int atLobbyTimer;
    private bool atPump1;
    private bool atPump2;
    private bool viewPump2;
    private bool viewPump1;
    private int localPump;
    private int int_9 = 12;
    private int int_10 = 12;
    private float waterRamp1;
    private float waterRamp2;
    private bool atLever;
    private int leverLevel;
    private float leverRamp;
    private int leverTimer;
    private int shockDelay;
    private int shatterDelay;
    private int shatterBigCount;
    private bool remBonus;
    private bool barnDoorOpen;
    private bool barnDoorLocked = true;
    private bool barnTriangle = true;
    private int barnDoorState;
    private Vector3 barnDoorslide = Vector3.Zero;
    private float[,] heights;
    private Matrix view = Matrix.Identity;
    private Matrix proj = Matrix.Identity;
    private float maxdistance = 8000f;
    private float maxdistTimer;
    private float mindistance = 3.6f;
    private float lensOffset;
    private Matrix gunView = Matrix.Identity;
    private Matrix gunProj = Matrix.Identity;
    private Matrix remgunView = Matrix.Identity;
    private AnimationPlayer[] npc1;
    private AnimationPlayer[] npc2;
    private AnimationPlayer[] farmer1;
    private AnimationPlayer[] twin1;
    private int bitmap;
    private float grid;
    private float unit;
    private SoundEffect crash;
    private List<BloodnBacon4PT.fireEvent> fireEvents = new List<BloodnBacon4PT.fireEvent>();
    private List<BloodnBacon4PT.streakCopy> fireTail = new List<BloodnBacon4PT.streakCopy>();
    private BloodnBacon4PT.paintBody player1Paint;

    private void Form1_KeyDown(object sender, FormClosingEventArgs e)
    {
      this.closeallSessions();
      SteamAPI.Shutdown();
      this.leavingGame = true;
      this.exitNicer();
    }

    public BloodnBacon4PT(NetworkSession networkSession)
    {
      this.networkSession = networkSession;
      this.TransitionOnTime = TimeSpan.FromSeconds(0.0);
      this.TransitionOffTime = TimeSpan.FromSeconds(0.0);
      this.backgroundThread = new Thread(new ThreadStart(this.BackgroundWorkerThread));
      this.backgroundThread.Name = "fuckerThread";
      this.backgroundThreadExit = (EventWaitHandle) new ManualResetEvent(false);
    }

    public override void LoadContent()
    {
      GC.Collect();
      this.sc = this.ScreenManager;
      this.sc.tunnelMode = false;
      this.sc.crosshair1[0].texture = this.sc.basicCrosshair1;
      if (this.sc.tunnelDay.Contains(this.sc.currentDay))
      {
        this.tunneladd = true;
        this.mazeid = this.sc.tunnelDay.IndexOf(this.sc.currentDay);
        this.sc.goldKeys.initTunnelItems();
        this.audioemitter = new AudioEmitter();
        this.audiolistener = new AudioListener();
        this.audioemitter.Position = new Vector3(0.0f, 0.0f, 0.0f);
        this.audiolistener.Position = new Vector3(0.0f, 0.0f, 0.0f);
        if (this.tunnelCheats)
        {
          this.sc.developer = true;
          this.sc.goggles = 1;
          this.sc.goldKeys.keyGoggles = false;
          this.sc.exitkey[0] = 1;
          this.sc.exitkey[1] = 1;
          this.sc.exitkey[2] = 1;
          this.sc.exitkey[3] = 1;
          this.sc.exitkey[4] = 1;
          this.sc.exitkey[5] = 1;
          this.sc.flashlight1 = 1;
          this.sc.goldKeys.keyFlashlight1 = false;
          this.sc.flashlight2 = 1;
          this.sc.goldKeys.keyFlashlight2 = false;
          this.sc.flashlight3 = 1;
          this.sc.goldKeys.keyFlashlight3 = false;
          for (int index = 0; index < this.sc.ammobox1.Length; ++index)
          {
            this.sc.ammobox1[index] = 1;
            this.sc.ammobox2[index] = 1;
            this.sc.ammobox3[index] = 1;
            this.sc.ammoboxCount += this.sc.ammobox1[index] + this.sc.ammobox2[index] + this.sc.ammobox3[index];
            if (this.sc.ammoboxCount > 10)
              this.sc.ammoboxCount = 10;
          }
          this.haveEntranceKey = true;
        }
      }
      if (!this.sc.bool_0)
      {
        this.sc.bool_0 = true;
        this.sc.echoCOMMANDS();
      }
      this.sc.drwhoCount = 0;
      this.sc.friended = false;
      ((Form) Control.FromHandle(this.sc.Game.Window.Handle)).FormClosing += new FormClosingEventHandler(this.Form1_KeyDown);
      for (int index = 0; index < 250; ++index)
        this.handtype[index] = 0;
      this.handtype[0] = 1;
      this.handtype[1] = 1;
      this.handtype[2] = 1;
      this.handtype[3] = 1;
      this.handtype[4] = 1;
      this.handtype[5] = 1;
      this.handtype[6] = 2;
      this.handtype[7] = 2;
      this.handtype[8] = 2;
      this.handtype[9] = 2;
      this.handtype[10] = 2;
      this.handtype[11] = 2;
      this.handtype[12] = 2;
      this.handtype[13] = 2;
      this.handtype[14] = 2;
      this.handtype[15] = 2;
      this.handtype[16] = 1;
      this.handtype[17] = 1;
      this.handtype[18] = 2;
      this.handtype[18] = 2;
      this.handtype[19] = 2;
      this.handtype[20] = 2;
      this.sc.isLoading = true;
      this.leavingGame = false;
      this.hudMatrix = Matrix.CreateScale((float) this.sc.screenSize.Width / (float) this.sc.origSize.Width, (float) this.sc.screenSize.Height / (float) this.sc.origSize.Height, 1f);
      this.sc.refreshList();
      if (this.sc.usingMouse)
        this.sc.getXkey();
      else
        this.sc.myXkey = "X";
      this.contentTalk = new ContentManager((System.IServiceProvider) this.ScreenManager.Game.Services, "ABCDE4");
      this.conModel = new ContentManager((System.IServiceProvider) this.ScreenManager.Game.Services, "ABCDE2");
      this.sc.resetColors();
      this.sc.showVideoSetup = false;
      this.sc.walletHintShow = false;
      this.sc.deathcamHint = false;
      this.sc.myTimer = 5000f;
      Randoms.initRandom(7);
      int millisecondsTimeout = 0;
      this.sc.loadMoment = "";
      this.rr = new Random();
      if (this.sc.host)
        this.globalSeed = this.rr.Next(1, 250);
      this.spriteBatch = new SpriteBatch(this.sc.GraphicsDevice);
      if (this.Content == null)
        this.Content = new ContentManager((System.IServiceProvider) this.sc.Game.Services, "Content");
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Original Assets";
      if (!this.sc.loadMainModels)
        this.sc.mainModels();
      if (!this.sc.bossLoaded)
        this.sc.loadBoss();
      if (!this.sc.walletLoaded)
        this.sc.loadWallet();
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Original Assets --- done";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section A ";
      this.sc.gameSeed = this.sc.currentDay;
      this.netRR = new Random(this.sc.gameSeed);
      this.sc.gameState = 0;
      this.sc.gameSpectate = 0;
      int num1 = 1;
      if (this.sc.currentDay < 6)
        num1 = this.rr.Next(1, 3);
      if (this.sc.currentDay > 5 && this.sc.currentDay < 11)
        num1 = this.rr.Next(3, 5);
      if (this.sc.currentDay > 10)
        num1 = this.rr.Next(1, 6);
      this.sc.startMusic = this.Content.Load<SoundEffect>("audio\\startMusic" + (object) num1);
      BloodnBacon4PT.whatday.Length = 0;
      BloodnBacon4PT.whatday.Append("DAY ");
      BloodnBacon4PT.whatday.Concat(this.sc.currentDay);
      this.talkDayIndex = this.sc.currentDay >= this.daystartLock.Length ? this.daystartLock[this.daystartLock.Length - 1] : this.daystartLock[this.sc.currentDay];
      CultureInfo invariantCulture1 = CultureInfo.InvariantCulture;
      StreamReader streamReader1 = new StreamReader("ABCDE3/" + (object) this.sc.currentDay + ".txt");
      if (this.sc.totalPlayers == 4)
        streamReader1 = new StreamReader("ABCDE3/4mode/" + (object) this.sc.currentDay + ".txt");
      this.sc.dayTime = streamReader1.ReadLine();
      this.sc.realDarkness = (float) int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.realMoon = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.realMoon = this.rr.Next(0, 8);
      if (this.sc.dayTime != "pm")
        this.sc.realMoon = 0;
      Random random = new Random(this.sc.currentDay + 230);
      float radians = (float) random.Next(0, 3200) / 1000f + (float) this.rr.Next(-40, 40) / 100f;
      this.moonExists = true;
      Vector3 vector3_1 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(radians));
      this.moonMatrix = Matrix.CreateRotationX((float) random.Next(10, 50) / 100f) * Matrix.CreateRotationY((float) (-(double) radians + 3.1400001049041748));
      this.moonScale = Matrix.CreateScale((float) random.Next(50, 90));
      float num2 = (float) random.Next(60, 400) / 100f;
      this.sc.moontype = new Vector3(vector3_1.X, -0.02f, vector3_1.Z) * num2;
      if (this.sc.currentDay != 10 && this.sc.currentDay != 30 && this.sc.currentDay != 50)
      {
        this.sc.realDarkness = Math.Max(this.sc.realDarkness / 10f, num2 / 15f);
      }
      else
      {
        this.moonExists = false;
        this.sc.moontype = new Vector3(vector3_1.X, 0.0f, vector3_1.Z);
        this.sc.realDarkness += (float) this.rr.Next(0, 8) / 10f;
        this.sc.realDarkness /= 10f;
      }
      if (this.sc.dayTime != "pm")
        this.sc.moontype = new Vector3(0.0f, 0.1f, -0.3f);
      this.sc.revengeDay = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.cheat_Invincible = false;
      this.sc.cheat_skipday = false;
      this.sc.myplayerCheats = false;
      if (this.sc.revengeDay > 0)
      {
        this.sc.cheat_AllExplode = true;
        this.sc.cheat_FastFiring = true;
        this.sc.cheat_InfiniteAmmo = true;
      }
      else
      {
        this.sc.cheat_AllExplode = false;
        this.sc.cheat_FastFiring = false;
        this.sc.cheat_InfiniteAmmo = false;
      }
      this.sc.grinder_Supply = new int[6]
      {
        100,
        50,
        50,
        3,
        2,
        2
      };
      this.sc.grinderYesterday = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.grinderToday = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.bloodLevel = (float) int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.fencecharge = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.previousWeapons = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.weaponEndofDay = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      int[] numArray1 = new int[42]
      {
        0,
        2,
        10,
        10,
        10,
        10,
        11,
        11,
        11,
        11,
        11,
        27,
        27,
        27,
        27,
        27,
        27,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) byte.MaxValue
      };
      int[] numArray2 = new int[42]
      {
        0,
        10,
        10,
        10,
        10,
        11,
        11,
        11,
        11,
        11,
        27,
        27,
        27,
        27,
        27,
        27,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        123,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) sbyte.MaxValue,
        (int) byte.MaxValue,
        (int) byte.MaxValue
      };
      if (this.sc.currentDay >= 1 && this.sc.currentDay <= 41)
      {
        this.sc.previousWeapons = numArray1[this.sc.currentDay];
        this.sc.weaponEndofDay = numArray2[this.sc.currentDay];
      }
      if (this.sc.currentDay >= 21)
        this.sc.previousWeapons += 256;
      if (this.sc.currentDay >= 20)
        this.sc.weaponEndofDay += 256;
      if (this.sc.currentDay >= 30)
        this.sc.previousWeapons += 512;
      if (this.sc.currentDay >= 29)
        this.sc.weaponEndofDay += 512;
      this.sc.weaponUnlock_bits(this.sc.previousWeapons);
      this.sc.boar1Variant = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2Variant = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_6 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarCount = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      if (this.sc.cheat_noenemies)
      {
        this.sc.int_6 = 3;
        this.sc.boarCount = 3;
      }
      this.sc.int_7 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_8 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.headless1Percent = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.headless2Percent = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1explode = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1shottie = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2explode = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2shottie = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1Borders = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_0 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_2 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1Rot = float.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.float_0 = float.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_4 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_9 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_10 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1MinSize = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1MaxSize = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1GiantOdds = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1TinyOdds = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_11 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar1TurnRate = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2Borders = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_1 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_3 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2Rot = float.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.float_1 = float.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_5 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_12 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_13 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2MinSize = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2MaxSize = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2GiantOdds = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2TinyOdds = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.int_14 = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boar2TurnRate = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarPercent[0] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarDistance[0] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarHomingLimit[0] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarPercent[1] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarDistance[1] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarHomingLimit[1] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarPercent[2] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarDistance[2] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      this.sc.boarHomingLimit[2] = int.Parse(streamReader1.ReadLine(), (IFormatProvider) invariantCulture1);
      streamReader1.Close();
      streamReader1.Dispose();
      this.princess = new Princess4[0];
      this.sc.redContrast = 128;
      this.sc.contrastBU = 128;
      Princess4.cuttyCount = 0;
      if (this.sc.currentDay == 20)
      {
        this.princess = new Princess4[1];
        this.princess[0] = new Princess4(3, "Princess Blubbergut", false);
        Princess4.cuttyCount = 1;
      }
      if (this.sc.currentDay == 40)
      {
        this.princess = new Princess4[1];
        this.princess[0] = new Princess4(4, "Princess Grizelda", false);
        Princess4.cuttyCount = 1;
      }
      if (this.sc.currentDay == 60)
      {
        this.princess = new Princess4[1];
        this.princess[0] = new Princess4(5, "Princess LardAss", false);
        Princess4.cuttyCount = 1;
      }
      if (this.sc.currentDay == 80)
      {
        this.princess = new Princess4[1];
        this.princess[0] = new Princess4(6, "Princess GiggleSnort", false);
        Princess4.cuttyCount = 1;
      }
      if (this.sc.currentDay == 100)
      {
        this.princess = new Princess4[1];
        this.princess[0] = new Princess4(7, "Princess ScabbyAss", false);
        Princess4.cuttyCount = 1;
      }
      this.cuttyBoss = new Cutty4[0];
      Cutty4.allplayersReady = false;
      Cutty4.cuttyDoneSpeech = false;
      Cutty4.someoneTalking = false;
      Cutty4.gonnaHealindex = -1;
      Cutty4.homingLocal = -1;
      Cutty4.speeches = 0;
      Cutty4.cuttyCount = 0;
      Cutty4.bit = (byte) 0;
      if (this.sc.currentDay == 10)
      {
        this.cuttyBoss = new Cutty4[1];
        this.cuttyBoss[0] = new Cutty4(0, 3, "Greedy Piggy", 1600);
        Cutty4.cuttyCount = 1;
      }
      if (this.sc.currentDay == 30)
      {
        this.cuttyBoss = new Cutty4[2];
        this.cuttyBoss[0] = new Cutty4(0, 13, "Brethren Sow", 1800);
        this.cuttyBoss[1] = new Cutty4(1, 14, "Brethren Sow", 1800);
        Cutty4.cuttyCount = 2;
        this.bossHandicap(1, this.netRR.Next(3, 10), this.netRR.Next(3, 10));
      }
      if (this.sc.currentDay == 50)
      {
        this.cuttyBoss = new Cutty4[2];
        this.cuttyBoss[0] = new Cutty4(0, 4, "The Greys", 1300);
        this.cuttyBoss[1] = new Cutty4(1, 5, "The Greys", 1100);
        Cutty4.cuttyCount = 2;
      }
      if (this.sc.currentDay == 70)
      {
        this.cuttyBoss = new Cutty4[3];
        this.cuttyBoss[0] = new Cutty4(0, 0, "Undead Three", 1300);
        this.cuttyBoss[1] = new Cutty4(1, 1, "Undead Three", 1400);
        this.cuttyBoss[2] = new Cutty4(2, 2, "Undead Three", 1500);
        Cutty4.cuttyCount = 3;
        this.bossHandicap(0, this.netRR.Next(2, 8), this.netRR.Next(5, 15));
        this.bossHandicap(1, this.netRR.Next(6, 12), this.netRR.Next(5, 20));
        this.bossHandicap(2, this.netRR.Next(6, 12), this.netRR.Next(5, 20));
        this.sc.bloodLevel += (float) (this.netRR.Next(3, 6) * 40);
      }
      if (this.sc.currentDay == 90)
      {
        this.cuttyBoss = new Cutty4[2];
        this.cuttyBoss[0] = new Cutty4(0, 11, "Sour Sows", 1300);
        this.cuttyBoss[1] = new Cutty4(1, 12, "Sour Sows", 1200);
        this.bossHandicap(1, this.netRR.Next(6, 12), this.netRR.Next(5, 20));
        this.sc.bloodLevel += (float) (this.netRR.Next(2, 4) * 40);
        Cutty4.cuttyCount = 2;
      }
      if (this.sc.currentDay == 100)
      {
        this.cuttyBoss = new Cutty4[3];
        this.cuttyBoss[0] = new Cutty4(0, 8, "Unfair Death", 1300);
        this.cuttyBoss[1] = new Cutty4(1, 6, "Unfair Death", 1100);
        this.cuttyBoss[2] = new Cutty4(2, 7, "Unfair Death", 1000);
        Cutty4.cuttyCount = 3;
        this.bossHandicap(0, this.netRR.Next(10, 20), this.netRR.Next(5, 15));
        this.bossHandicap(1, this.netRR.Next(10, 20), this.netRR.Next(10, 20));
        this.bossHandicap(2, this.netRR.Next(10, 20), this.netRR.Next(10, 20));
        this.sc.bloodLevel += (float) (this.netRR.Next(3, 7) * 40);
      }
      CultureInfo invariantCulture2 = CultureInfo.InvariantCulture;
      int num3 = this.sc.currentDay;
      if (num3 > 32)
        num3 = this.netRR.Next(1, 33);
      StreamReader streamReader2;
      if (Princess4.cuttyCount == 1)
      {
        int num4 = this.netRR.Next(1, 5);
        if ((double) this.princess[0].cuttyRot == 1.7000000476837158)
          num4 = this.netRR.Next(5, 10);
        streamReader2 = new StreamReader("ABCDE3/camBoss" + (object) num4 + ".txt");
      }
      else
        streamReader2 = this.tunneladd ? new StreamReader("ABCDE3/camMoveTunnel" + (object) this.netRR.Next(1, 6) + ".txt") : new StreamReader("ABCDE3/camMove" + (object) num3 + ".txt");
      this.pos0 = new Vector3[11];
      this.pos1 = new Vector3[11];
      for (int index = 0; index < 11; ++index)
      {
        string s1 = streamReader2.ReadLine();
        string s2 = streamReader2.ReadLine();
        string s3 = streamReader2.ReadLine();
        string s4 = streamReader2.ReadLine();
        string s5 = streamReader2.ReadLine();
        string s6 = streamReader2.ReadLine();
        try
        {
          this.pos0[index].X = float.Parse(s1, (IFormatProvider) invariantCulture2);
          this.pos0[index].Y = float.Parse(s2, (IFormatProvider) invariantCulture2);
          this.pos0[index].Z = float.Parse(s3, (IFormatProvider) invariantCulture2);
          this.pos1[index].X = float.Parse(s4, (IFormatProvider) invariantCulture2);
          this.pos1[index].Y = float.Parse(s5, (IFormatProvider) invariantCulture2);
          this.pos1[index].Z = float.Parse(s6, (IFormatProvider) invariantCulture2);
        }
        catch
        {
          this.pos0[index].X = 0.0f;
          this.pos0[index].Y = 0.0f;
          this.pos0[index].Z = 0.0f;
          this.pos1[index].X = 0.0f;
          this.pos1[index].Y = 0.0f;
          this.pos1[index].Z = 0.0f;
        }
      }
      streamReader2.Close();
      streamReader2.Dispose();
      for (int index = 0; index < this.pos0.Length; ++index)
      {
        float position = (float) index / ((float) this.pos0.Length - 1f);
        this.camCurveX.Keys.Add(new CurveKey(position, this.pos0[index].X + 3000f));
        this.camCurveY.Keys.Add(new CurveKey(position, this.pos0[index].Y));
        this.camCurveZ.Keys.Add(new CurveKey(position, this.pos0[index].Z + 3000f));
      }
      for (int index = 0; index < this.pos1.Length; ++index)
      {
        float position = (float) index / ((float) this.pos1.Length - 1f);
        this.lookCurveX.Keys.Add(new CurveKey(position, this.pos1[index].X + 3000f));
        this.lookCurveY.Keys.Add(new CurveKey(position, this.pos1[index].Y));
        this.lookCurveZ.Keys.Add(new CurveKey(position, this.pos1[index].Z + 3000f));
      }
      this.SetTangents(ref this.camCurveX, ref this.camCurveY, ref this.camCurveZ);
      this.SetTangents(ref this.lookCurveX, ref this.lookCurveY, ref this.lookCurveZ);
      this.bitmap = 200;
      this.grid = 6000f;
      this.unit = 30f;
      this.grinderLoc = new Vector2((float) ((double) this.grid / 2.0 - 820.0), (float) ((double) this.grid / 2.0 - 1665.0));
      dupeItem.bitmap = this.bitmap;
      dupeItem.unit = this.unit;
      invDupe.bitmap = this.bitmap;
      invDupe.unit = this.unit;
      humanPart.bitmap = this.bitmap;
      humanPart.unit = this.unit;
      boarDupe.bitmap = this.bitmap;
      boarDupe.unit = this.unit;
      boarDupe.Grid = this.grid;
      skullkins.bitmap = this.bitmap;
      skullkins.unit = this.unit;
      skullDupe.bitmap = this.bitmap;
      skullDupe.unit = this.unit;
      enemyDupe.isChasing = -1;
      enemyDupe.bitmap = this.bitmap;
      enemyDupe.unit = this.unit;
      enemyDupe.Grid = this.grid;
      enemynpc.bitmap = this.bitmap;
      enemynpc.unit = this.unit;
      enemynpc.Grid = this.grid;
      Princess4.bitmap = this.bitmap;
      Princess4.unit = this.unit;
      Princess4.Grid = this.grid;
      Cutty4.bitmap = this.bitmap;
      Cutty4.unit = this.unit;
      Cutty4.Grid = this.grid;
      chunkDupe.bitmap = this.bitmap;
      chunkDupe.unit = this.unit;
      explodeDupe.bitmap = this.bitmap;
      explodeDupe.unit = this.unit;
      vomitDupe.bitmap = this.bitmap;
      vomitDupe.unit = this.unit;
      localPlayer.Unit = this.unit;
      localPlayer.bitmap = this.bitmap;
      localPlayer.Grid = this.grid;
      localPlayer.pType = this.pType;
      this.ammoFont = this.Content.Load<SpriteFont>("font\\ammo");
      this.ammoSmallFont = this.Content.Load<SpriteFont>("font\\ammosmall");
      this.ammoSmallestFont = this.Content.Load<SpriteFont>("font\\ammosmall2");
      this.ammoMedium = this.Content.Load<SpriteFont>("font\\ammomedium");
      this.ammoMedium2 = this.Content.Load<SpriteFont>("font\\ammomedium2");
      this.ammoLargeFont = this.Content.Load<SpriteFont>("font\\ammolarge");
      this.ammoLargerFont = this.Content.Load<SpriteFont>("font\\ammolarger");
      this.ammoLargestFont = this.sc.grungeFont;
      this.bloodFont = this.Content.Load<SpriteFont>("font\\bloodFont");
      this.font = this.Content.Load<SpriteFont>("font\\Font");
      this.font2 = this.Content.Load<SpriteFont>("font\\Font2");
      this.fencePoint = new Vector3[34];
      this.fencePoint[0] = new Vector3(180.190231f, 10.4164886f, -231.212311f);
      this.fencePoint[1] = new Vector3(254.721848f, 9.680529f, -193.139221f);
      this.fencePoint[2] = new Vector3(216.4421f, 10.655632f, -211.429626f);
      this.fencePoint[3] = new Vector3(276.726135f, 11.7075014f, -156.096786f);
      this.fencePoint[4] = new Vector3(298.201172f, 10.655632f, -133.982666f);
      this.fencePoint[5] = new Vector3(304.063629f, 9.389657f, -105.901787f);
      this.fencePoint[6] = new Vector3(329.1702f, 11.0880718f, -78.258255f);
      this.fencePoint[7] = new Vector3(342.924347f, 10.1254005f, -56.70394f);
      this.fencePoint[8] = new Vector3(348.792755f, 10.6202421f, -13.8870153f);
      this.fencePoint[9] = new Vector3(335.676941f, 10.655632f, 25.1192436f);
      this.fencePoint[10] = new Vector3(326.986481f, 10.6347132f, 57.4291458f);
      this.fencePoint[11] = new Vector3(315.034332f, 10.5028963f, 87.5193558f);
      this.fencePoint[12] = new Vector3(297.57962f, 9.984394f, 116.579056f);
      this.fencePoint[13] = new Vector3(265.019867f, 9.9757185f, 146.837891f);
      this.fencePoint[14] = new Vector3(238.8875f, 11.098464f, 174.729691f);
      this.fencePoint[15] = new Vector3(195.885483f, 10.2730026f, 195.773651f);
      this.fencePoint[16] = new Vector3(147.983246f, 10.1092529f, 213.4756f);
      this.fencePoint[17] = new Vector3(-200.393112f, 19.4318142f, 202.738922f);
      this.fencePoint[18] = new Vector3(-265.831f, 9.094147f, 156.8573f);
      this.fencePoint[19] = new Vector3(-233.191391f, 10.1755066f, 176.9114f);
      this.fencePoint[20] = new Vector3(-291.820374f, 9.098072f, 124.999f);
      this.fencePoint[21] = new Vector3(-312.555176f, 9.887634f, 96.88414f);
      this.fencePoint[22] = new Vector3(-315.914551f, 10.1755066f, 70.3745f);
      this.fencePoint[23] = new Vector3(-336.915771f, 9.571495f, 43.929554f);
      this.fencePoint[24] = new Vector3(-342.8301f, 10.1755066f, 14.1049032f);
      this.fencePoint[25] = new Vector3(-353.415863f, 6.12675762f, -22.5789452f);
      this.fencePoint[26] = new Vector3(-338.4383f, 9.911839f, -65.31933f);
      this.fencePoint[27] = new Vector3(-329.1495f, 9.392441f, -100.569351f);
      this.fencePoint[28] = new Vector3(-310.104767f, 10.1755066f, -125.262283f);
      this.fencePoint[29] = new Vector3(-285.111176f, 15.6020689f, -152.323929f);
      this.fencePoint[30] = new Vector3(-256.461182f, 10.1755066f, -181.183685f);
      this.fencePoint[31] = new Vector3(-225.830963f, 18.61523f, -205.972519f);
      this.fencePoint[32] = new Vector3(-183.628723f, 10.1755066f, -220.551956f);
      this.fencePoint[33] = new Vector3(-134.973663f, 10.1186752f, -235.79895f);
      this.weaponBox[0] = this.rect_indie;
      this.weaponBox[2] = this.rect_pistol;
      this.weaponBox[4] = this.rect_deagle;
      this.weaponBox[6] = this.rect_ak;
      this.weaponBox[8] = this.rect_shottie;
      this.weaponBox[10] = this.rect_m16;
      this.weaponBox[12] = this.rect_smg;
      this.weaponBox[14] = this.rect_rocket;
      this.weaponBox[16] = this.rect_paintball;
      this.weaponBox[18] = this.rect_p90;
      this.weaponBox[20] = this.rect_scar;
      this.zombie = this.Content.Load<SoundEffect>("audio//zombie");
      this.ring = this.Content.Load<SoundEffect>("audio//telephone");
      this.tempySkinArray = new BloodnBacon4PT.skinstream[1];
      this.tempInstance = new BloodnBacon4PT.instancedObject[1];
      if ((this.sc.boar1Variant == 3 || this.sc.boar2Variant == 3) && !this.tunneladd)
      {
        this.metalToday = true;
        this.metalwalk = this.Content.Load<SoundEffect>("audio\\metalWalk7").CreateInstance();
        this.metalwalk2 = this.Content.Load<SoundEffect>("audio\\metalWalk8").CreateInstance();
        this.pigChoice = -1;
        this.pigChoice2 = -1;
        this.metalwalk.IsLooped = true;
        this.metalwalk.Volume = 0.0f;
        this.metalwalk.Play();
        this.metalwalk2.IsLooped = true;
        this.metalwalk2.Volume = 0.0f;
        this.metalwalk2.Play();
      }
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section A --- done";
      this.farmerJaw = new float[2500];
      this.farmerAnim.animCount = -1f;
      this.farmerAnim.animTween = 0.0f;
      this.farmerAnim.animList = new List<int>();
      this.farmerAnim.animClip = -1;
      this.farmerAnim.animMax = 0;
      this.farmerAnim.animMin = 0;
      this.farmerAnim.animLoop = 0;
      if (this.sc.currentDay == 101 || this.sc.currentDay == 1)
      {
        this.bat = new BloodnBacon4PT.simpleNPC();
        this.bat.alive = (ushort) 0;
        this.bat.model1 = this.Content.Load<Model>("npc\\butterfly");
        this.bat.data = this.bat.model1.Tag as SkinningDataX;
        this.makeImage(this.bat.data.Bones, this.bat.data.Width, this.bat.data.Hite, ref this.bat.bitmap);
        this.bat.model1Texture = this.Content.Load<Texture2D>("npc\\butterflyTexture");
        this.bat.max = 150;
        this.bat.dupe = new List<batDupe>(this.bat.max);
        this.bat.dupe.Capacity = 150;
        this.bat.display1 = new BloodnBacon4PT.simplestream[this.bat.max];
        this.bat.buffer1 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.simpleVD, this.bat.max, BufferUsage.WriteOnly);
        this.flyEffect = this.Content.Load<Effect>("effects\\EffectFly");
        batDupe.sics = new List<int>(2 * (this.bat.data.Clips.Length + 1));
        batDupe.sics.Add(this.bat.data.Clips[0]);
        batDupe.sics.Add(0);
        for (int index = 1; index < this.bat.data.Clips.Length; ++index)
        {
          batDupe.sics.Add(this.bat.data.Clips[index] - this.bat.data.Clips[index - 1]);
          batDupe.sics.Add(this.bat.data.Clips[index - 1]);
        }
        this.addbats();
        this.bat.eff = this.flyEffect;
        this.bat.eff.Parameters["BoneDelta"].SetValue(1f / (float) this.bat.data.Width);
        this.bat.eff.Parameters["RowDelta"].SetValue(1f / (float) this.bat.data.Hite);
        this.bat.eff.Parameters["AnimationTexture"].SetValue((Texture) this.bat.bitmap);
        this.batsLoaded = true;
      }
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section C ";
      this.parts = new List<int>(5);
      this.s = new int[5];
      this.boar = new BloodnBacon4PT.npc();
      this.boar.alive = (ushort) 0;
      this.boar.alive2 = (ushort) 55555;
      this.boar.data = this.sc.boar1basicModel.Tag as SkinningDataX;
      this.makeImage(this.boar.data.Bones, this.boar.data.Width, this.boar.data.Hite, ref this.boar.bitmap);
      this.chooseModel(this.sc.boar1Variant, ref this.boar.boar1Texture, ref this.boar.model1, ref this.boar.model2);
      this.chooseModel(this.sc.boar2Variant, ref this.boar.boar2Texture, ref this.boar.model3, ref this.boar.model4);
      this.boar.skelmodel = this.sc.boarSkel;
      this.boar.charModel = this.sc.charModel;
      this.boar.zombieModel = this.sc.zombieModel;
      this.boar.boneTexture = this.Content.Load<Texture2D>("texture\\bonee");
      this.boar.charTexture = this.Content.Load<Texture2D>("texture\\charred");
      this.boar.max = 1200;
      this.boar.dupe = new List<boarDupe>(this.boar.max);
      this.boar.dupe.Capacity = 1200;
      this.boar.display1 = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.display2 = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.display3 = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.display4 = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.displayS = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.displayC = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.displayZ = new BloodnBacon4PT.skinstream[this.boar.max];
      this.boar.buffer1 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.buffer2 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.buffer3 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.buffer4 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.bufferS = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.bufferC = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.bufferZ = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.boar.max, BufferUsage.WriteOnly);
      this.boar.uv = new Vector3[9];
      this.boar.uv[0] = new Vector3(55f, 55f, 150f);
      this.boar.uv[0] = new Vector3(0.01f, 0.01f, 4f);
      this.boar.uv[1] = new Vector3(0.427f, 0.195f, 3f);
      this.boar.uv[2] = new Vector3(0.575f, 0.195f, 3f);
      this.boar.uv[3] = new Vector3(0.414f, 0.480000019f, 3f);
      this.boar.uv[4] = new Vector3(0.58f, 0.480000019f, 3f);
      this.boar.uv[5] = new Vector3(0.381f, 0.348999977f, 4f);
      this.boar.uv[6] = new Vector3(0.618f, 0.356f, 4f);
      this.boar.uv[7] = new Vector3(0.5f, 0.06f, 3f);
      this.boar.uv[8] = new Vector3(0.5f, 0.58f, 3f);
      this.boar.targ = new Matrix[8];
      this.boar.targ[0] = Matrix.CreateTranslation(new Vector3(1f, 131f, -124f));
      this.boar.targ[1] = Matrix.CreateTranslation(new Vector3(-36.3f, 157.6f, 155.7f));
      this.boar.targ[2] = Matrix.CreateTranslation(new Vector3(29f, 157.5f, 155.7f));
      this.boar.targ[3] = Matrix.CreateTranslation(new Vector3(-8f, 131.4f, -55f));
      this.boar.targ[4] = Matrix.CreateTranslation(new Vector3(8f, 131.4f, -55f));
      this.boar.targ[5] = Matrix.CreateTranslation(new Vector3(-30f, 164f, 50f));
      this.boar.targ[6] = Matrix.CreateTranslation(new Vector3(30f, 164f, 50f));
      this.boar.targ[7] = Matrix.CreateTranslation(new Vector3(-1f, 124f, 232f));
      this.boar.bone = new int[8]
      {
        2,
        7,
        7,
        24,
        19,
        16,
        12,
        10
      };
      this.nightEffect = this.Content.Load<Effect>("effects\\Effect1night");
      this.dayEffect = this.Content.Load<Effect>("effects\\Effect1");
      this.boar.eff = !(this.sc.dayTime == "pm") ? this.dayEffect : this.nightEffect;
      for (int index = 0; index < 9; ++index)
        this.boar.eff.Parameters["v" + index.ToString()].SetValue(this.boar.uv[index]);
      this.splat1 = this.Content.Load<Texture2D>("texture\\splat1");
      this.splat2 = this.Content.Load<Texture2D>("texture\\splat2");
      this.splat3 = this.Content.Load<Texture2D>("texture\\splat3");
      this.sprayTexture = new Texture2D[5];
      this.sprayTexture[0] = this.Content.Load<Texture2D>("particles\\blood2");
      this.sprayTexture[1] = this.Content.Load<Texture2D>("particles\\purple");
      this.sprayTexture[2] = this.Content.Load<Texture2D>("particles\\orange");
      this.sprayTexture[3] = this.Content.Load<Texture2D>("particles\\blue");
      this.sprayTexture[4] = this.Content.Load<Texture2D>("particles\\green");
      this.boar.eff.Parameters["BoneDelta"].SetValue(1f / (float) this.boar.data.Width);
      this.boar.eff.Parameters["RowDelta"].SetValue(1f / (float) this.boar.data.Hite);
      this.boar.eff.Parameters["AnimationTexture"].SetValue((Texture) this.boar.bitmap);
      this.boar.eff.Parameters["gDiffuse"].SetValue((Texture) this.sc.spotTexture);
      this.boar.eff.Parameters["hole1"].SetValue((Texture) this.splat1);
      this.boar.conductor = new List<BloodnBacon4PT.conductor>(200);
      this.boar.explodelist = new List<int>(15);
      this.boar.shockList = new List<int>(15);
      this.boar.shatterList = new List<int>(15);
      this.boar.npcDist = 20000f;
      boarDupe.sics = new List<int>(2 * (this.boar.data.Clips.Length + 1));
      boarDupe.sics.Add(this.boar.data.Clips[0]);
      boarDupe.sics.Add(0);
      for (int index = 1; index < this.boar.data.Clips.Length; ++index)
      {
        boarDupe.sics.Add(this.boar.data.Clips[index] - this.boar.data.Clips[index - 1]);
        boarDupe.sics.Add(this.boar.data.Clips[index - 1]);
      }
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section C --- done";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load MUSIC D ";
      if (this.sc.dayTime == "pm")
      {
        this.sc.mainTheme = Cutty4.cuttyCount <= 0 ? this.Content.Load<SoundEffect>("audio\\theSatiate") : this.Content.Load<SoundEffect>("audio\\theunlight");
      }
      else
      {
        this.sc.mainTheme = this.Content.Load<SoundEffect>("audio\\Corncob");
        if (this.sc.currentDay == 101)
          this.sc.mainTheme = this.Content.Load<SoundEffect>("audio\\Ambler");
      }
      this.sc.corncobMusic = this.sc.mainTheme.CreateInstance();
      this.sc.corncobMusic.IsLooped = true;
      this.sc.corncobMusic.Pause();
      this.sc.corncobMusic.Volume = this.sc.mv;
      this.sc.gameMusicPlaying = false;
      this.victoryMusic = 1f;
      this.deathMusic = this.Content.Load<SoundEffect>("audio//deathMusic");
      this.sc.crickets.Pause();
      this.proj = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(58f), 1.78f, 3f, this.maxdistance);
      this.gunProj = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(58f), 1.78f, 3f, this.maxdistance);
      this.buildingMatrix = Matrix.CreateTranslation(this.grid / 2f, 0.0f, this.grid / 2f);
      this.barnDoorMatrix = this.buildingMatrix;
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load MUSIC D -->  DONE";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Barns";
      if (!this.sc.barnsLoaded)
        this.sc.loadBarns();
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Barns -->  DONE";
      int num5 = 0;
      if (this.sc.viewGarbage)
      {
        num5 = (int) GC.GetTotalMemory(false) / 1024;
        this.sc.loadMoment = "Load Mountains Buildings";
      }
      if (!this.sc.mountainBuildingLoaded)
        this.sc.loadMountBuilding();
      if (this.sc.dayTime == "pm")
      {
        this.grassTexture = this.sc.grassTexture;
        this.texture2D_2 = this.sc.buildingRGBNight;
        this.buildingShadow = this.sc.buildingShadowNight;
      }
      else
      {
        this.grassTexture = this.sc.grassTexture;
        this.texture2D_2 = this.sc.texture2D_0;
        this.buildingShadow = this.sc.buildingShadow;
      }
      if (this.sc.viewGarbage)
      {
        this.sc.loadMoment = "Load Mountains Buildings --> Done" + ((int) GC.GetTotalMemory(false) / 1024 - num5).ToString();
        Thread.Sleep(3000);
      }
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Gun Textures";
      if (!this.sc.loadGuns)
        this.sc.loadGUNS();
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Gun Textures -->  DONE";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section E ";
      this.cube = this.sc.cube;
      this.explosionDecal = this.sc.explosionDecal;
      this.buttonModel = this.sc.buttonModel;
      this.grass = this.sc.grass;
      this.trees = this.sc.trees;
      int num6 = this.rr.Next(110, 166);
      this.greyDay = new Color(num6, num6, num6, (int) byte.MaxValue);
      this.colorDay = new Color(116, 140, this.rr.Next(160, 200), (int) byte.MaxValue);
      this.cloudsLoaded = this.sc.dayTime != "pm" && this.sc.currentDay % 3 == 0 || this.sc.currentDay == 101;
      this.sc.mustarDay = false;
      if (this.cloudsLoaded)
      {
        this.clouds = this.Content.Load<Model>("Models//cloud1");
        this.clouds0 = this.Content.Load<Model>("Models//cloud2");
        int num7 = this.rr.Next(0, 4);
        this.cloudTexture = this.Content.Load<Texture2D>("texture//clouds");
        if (num7 == 0)
          this.cloudTexture = this.Content.Load<Texture2D>("texture//clouds1");
        if (num7 == 1)
          this.cloudTexture = this.Content.Load<Texture2D>("texture//clouds2");
        if (num7 == 2)
          this.cloudTexture = this.Content.Load<Texture2D>("texture//clouds3");
        if (num7 == 3)
          this.cloudTexture = this.Content.Load<Texture2D>("texture//clouds4");
        this.cloudDarkness = (float) this.rr.Next(50, 80) / 100f;
        this.cloudsLoaded = true;
        if (this.rr.Next(1, 100) < 4)
        {
          this.colorDay = new Color(160, 166, 100, (int) byte.MaxValue);
          this.cloudDarkness = 0.3f;
          this.sc.mustarDay = true;
          this.sc.goldKeys.resetBlimp();
        }
      }
      if (this.tunneladd)
      {
        this.farmBuilding = this.sc.farmBuilding3;
        this.farmTriangles = this.sc.farmTriangles3;
      }
      else
      {
        this.farmBuilding = this.sc.farmBuilding;
        this.farmTriangles = this.sc.farmTriangles;
      }
      this.barnTriangles = this.sc.barnTriangles;
      this.doorTriangles = this.sc.doorTriangles;
      this.barnBuilding = this.sc.barnBuilding;
      this.mountain = this.sc.mountain;
      this.reflectionMap = this.sc.reflectionMap;
      this.spotTexture = this.sc.spotTexture;
      this.crosshair = this.sc.crosshair;
      this.burster = this.sc.burster;
      this.electrify = this.sc.electrify;
      this.barnRGB = this.sc.barnRGB;
      this.barnShadow = this.sc.barnShadow;
      this.blueLaser = this.sc.blueLaser;
      this.overlay = this.sc.overlay;
      this.button = this.sc.button;
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Section E --- done";
      this.farmerModel = this.sc.farmerModel;
      this.farmerTexture = this.sc.farmerTexture;
      this.player1Texture = this.sc.whiteNPCTexture;
      this.texture2D_1 = this.sc.texture2D_13;
      this.whiteNPCdead = this.sc.whiteNPCdead;
      this.localModel = this.sc.whiteNPCModel;
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Big Models";
      this.quickSkin1 = this.Content.Load<Effect>("effects/quickSkin1");
      this.quickSkin1.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
      this.quickSkin1.Parameters["Dead"].SetValue((Texture) this.whiteNPCdead);
      this.quickSkin2 = this.Content.Load<Effect>("effects/quickSkin2");
      this.quickSkin2.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
      this.quickSkin2.Parameters["Dead"].SetValue((Texture) this.whiteNPCdead);
      this.player1Paint.index = new List<int>();
      this.player1Paint.x = new List<float>();
      this.player1Paint.z = new List<float>();
      SkinningData tag1 = this.farmerModel.Tag as SkinningData;
      this.farmer1 = new AnimationPlayer[8];
      this.farmer1[0] = new AnimationPlayer(tag1);
      this.farmer1[0].StartClip(tag1.AnimationClips["farmer"]);
      this.farmer1[1] = new AnimationPlayer(tag1);
      this.farmer1[1].StartClip(tag1.AnimationClips["wave"]);
      this.farmer1[2] = new AnimationPlayer(tag1);
      this.farmer1[2].StartClip(tag1.AnimationClips["pat"]);
      this.farmer1[3] = new AnimationPlayer(tag1);
      this.farmer1[3].StartClip(tag1.AnimationClips["nose"]);
      this.farmer1[4] = new AnimationPlayer(tag1);
      this.farmer1[4].StartClip(tag1.AnimationClips["kick"]);
      this.farmer1[5] = new AnimationPlayer(tag1);
      this.farmer1[5].StartClip(tag1.AnimationClips["convulse1"]);
      this.farmer1[6] = new AnimationPlayer(tag1);
      this.farmer1[6].StartClip(tag1.AnimationClips["vomit"]);
      this.farmer1[7] = new AnimationPlayer(tag1);
      this.farmer1[7].StartClip(tag1.AnimationClips["vomit2"]);
      SkinningData tag2 = this.sc.whiteNPCModel.Tag as SkinningData;
      remotePlayer4.bonecount = tag2.BindPose.Count;
      this.npc1 = new AnimationPlayer[19];
      this.npc2 = new AnimationPlayer[19];
      string[] strArray1 = new string[19]
      {
        "walk",
        "wait",
        "strafe",
        "reloadpistol",
        "reloadak",
        "switch",
        "melee",
        "rise",
        "fall",
        "lay",
        "helping",
        "die",
        "clean",
        "throw",
        "milk",
        "flail",
        "jump",
        "pump",
        "reload"
      };
      for (int index = 0; index < 19; ++index)
      {
        this.npc1[index] = new AnimationPlayer(tag2);
        AnimationClip animationClip1 = tag2.AnimationClips[strArray1[index]];
        this.npc1[index].StartClip(animationClip1);
        this.npc2[index] = new AnimationPlayer(tag2);
        AnimationClip animationClip2 = tag2.AnimationClips[strArray1[index]];
        this.npc2[index].StartClip(animationClip2);
      }
      this.cursor = new Cursor();
      this.cursor.LoadContent(this.Content, this.sc.GraphicsDevice, ref this.farmTriangles, ref this.doorTriangles, ref this.barnTriangles);
      this.cursor.addTriangles();
      this.oppCursor = new Cursor();
      this.oppCursor.LoadContent(this.Content, this.sc.GraphicsDevice, ref this.farmTriangles, ref this.doorTriangles, ref this.barnTriangles);
      this.oppCursor.addTriangles();
      this.genCursor = new Cursor();
      this.genCursor.LoadContent(this.Content, this.sc.GraphicsDevice, ref this.farmTriangles, ref this.doorTriangles, ref this.barnTriangles);
      this.genCursor.addTriangles();
      this.farmerSkin = this.Content.Load<Effect>("effects\\farmerSkin");
      this.farmerSkin.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
      this.farmerSkin.Parameters["Texture"].SetValue((Texture) this.farmerTexture);
      this.farmerSkin.Parameters["Dead"].SetValue((Texture) this.farmerTexture);
      this.solidSkin = this.Content.Load<Effect>("effects/SolidSkinEffect");
      this.solidSkin.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
      this.waterEffect = this.Content.Load<Effect>("effects\\waterEffect");
      this.waterEffect.Parameters["Texture"].SetValue((Texture) this.sc.waterTexture);
      this.crazyEffect = this.Content.Load<Effect>("effects\\crazyShader");
      this.grassEffect = this.Content.Load<Effect>("effects\\GrassEffect");
      this.grassEffect.Parameters["Texture"].SetValue((Texture) this.grassTexture);
      this.cloudEffect = this.Content.Load<Effect>("effects\\cloudEffect");
      this.moonEffect = this.Content.Load<Effect>("effects\\cloudEffect");
      this.reflectEffect = this.Content.Load<Effect>("effects\\Reflect2");
      this.reflectEffect.Parameters["ReflectionMap"].SetValue((Texture) this.reflectionMap);
      this.mirvModel = this.Content.Load<Model>("Models\\mirvModel");
      this.mirvTexture = this.Content.Load<Texture2D>("texture\\mirv");
      this.mirvEffect = this.Content.Load<Effect>("effects\\mirvEffect");
      this.mirvEffect.Parameters["Texture"].SetValue((Texture) this.mirvTexture);
      foreach (BloodnBacon4PT.Flare flare in this.flares)
        flare.Texture = this.Content.Load<Texture2D>(flare.TextureName);
      this.buildingLight = this.Content.Load<Effect>("effects\\buildingsLight");
      if (this.sc.dayTime == "pm")
      {
        this.buildingEffect = this.Content.Load<Effect>("effects\\buildingsPM");
        this.buildingEffect.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_2);
        this.buildingEffect.Parameters["shadTexture"].SetValue((Texture) this.buildingShadow);
      }
      else
      {
        this.buildingEffect = this.Content.Load<Effect>("effects\\buildings");
        this.buildingEffect.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_2);
        this.buildingEffect.Parameters["shadTexture"].SetValue((Texture) this.buildingShadow);
      }
      this.buildingEffect.Parameters["moon"].SetValue(this.sc.moontype);
      this.effect_0 = this.Content.Load<Effect>("effects\\buildingsPMrem");
      this.effect_0.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_2);
      this.effect_0.Parameters["shadTexture"].SetValue((Texture) this.buildingShadow);
      this.effect_0.Parameters["moon"].SetValue(this.sc.moontype);
      this.nightTextureSet = true;
      this.barnEffect = this.Content.Load<Effect>("effects\\barns");
      this.barnRemEffect = this.Content.Load<Effect>("effects\\barnsrem");
      this.barnEffect.Parameters["rgbTexture"].SetValue((Texture) this.barnRGB);
      this.barnEffect.Parameters["Texture2"].SetValue((Texture) this.barnShadow);
      this.barnRemEffect.Parameters["rgbTexture"].SetValue((Texture) this.barnRGB);
      this.barnRemEffect.Parameters["Texture2"].SetValue((Texture) this.barnShadow);
      this.blastEffect = this.Content.Load<Effect>("effects\\blasts");
      this.blastEffect.Parameters["Texture"].SetValue((Texture) this.sc.blasts);
      this.muzzleEffect = this.Content.Load<Effect>("effects\\muzzles");
      this.muzzleEffect.Parameters["Texture"].SetValue((Texture) this.sc.muzzles);
      this.laserEffect = this.Content.Load<Effect>("effects\\LaserEffect");
      this.preglowEffect = this.Content.Load<Effect>("effects\\preGlow");
      this.glowEffect = this.Content.Load<Effect>("effects\\glowEffect");
      float num8 = 30f;
      Vector2[] vector2Array = new Vector2[12];
      for (int index = 0; index < 12; ++index)
        vector2Array[index] = new Vector2((float) Math.Sin((double) MathHelper.ToRadians((float) index * num8)), -1.3f * (float) Math.Cos((double) MathHelper.ToRadians((float) (190.0 + (double) index * (double) num8))));
      this.glowEffect.Parameters["offsets"].SetValue(vector2Array);
      this.glowEffect.CurrentTechnique = this.glowEffect.Techniques["EdgeDetect"];
      if (this.tunneladd)
      {
        string assetName = "tunnel0" + this.mazeid.ToString();
        this.tunnel1 = this.conModel.Load<Model>(assetName);
        this.tunnel02Triangle = this.conModel.Load<Model>(assetName + "triangle");
        this.tunnel02heights = this.conModel.Load<Model>(assetName + "collide");
        this.model_0 = this.Content.Load<Model>("models//x1animation2");
        this.tracer2 = this.conModel.Load<Model>("tracer2");
        this.cryptdoorTriangle = this.Content.Load<Model>("models//cryptDoorTriangles");
        this.cryptdoorTriangle3 = this.Content.Load<Model>("models//cryptDoorTriangles2");
        this.vaultrise = this.Content.Load<SoundEffect>("audio//vaultRise");
        this.creak = this.Content.Load<SoundEffect>("audio//creak");
        this.vaultopen = this.Content.Load<SoundEffect>("audio//vaultopen3");
        this.cackle3 = this.Content.Load<SoundEffect>("audio//caldCackle3");
        this.seen = this.Content.Load<SoundEffect>("audio//seen3");
        this.seen4 = this.Content.Load<SoundEffect>("audio//seen4");
        this.deathyell = this.Content.Load<SoundEffect>("audio//deathyell");
        this.hillbilly = this.Content.Load<SoundEffect>("audio//hillbilly");
        this.enemydie = this.Content.Load<SoundEffect>("audio//enemyDie1");
        this.skullplunge = this.Content.Load<SoundEffect>("audio//skullemit");
        this.grow = this.Content.Load<SoundEffect>("astro\\Audio\\grow");
        this.giveitem = this.Content.Load<SoundEffect>("audio//giveitem");
        try
        {
          ModelBone bone = this.tunnel1.Bones["wall1"];
          this.wall1Pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          Vector3 scale;
          bone.Transform.Decompose(out scale, out Quaternion _, out Vector3 _);
          this.int_0 = (int) scale.X;
          this.int_1 = (int) scale.Z;
          this.bool_0 = true;
          this.bool_1 = false;
        }
        catch
        {
        }
        try
        {
          Vector3 vector3_2 = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["tta"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          Vector3 vector3_3 = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["ttb"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.teleportA = vector3_2;
          this.teleportB = vector3_3;
          this.teleportExists = true;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["kt1"];
          Vector3 vector3_4 = Vector3.Transform(Vector3.Zero, bone.Transform);
          this.twinPosition = Vector3.Transform(Vector3.Zero, bone.Transform * Matrix.CreateTranslation(3000f, 0.0f, 3000f));
          this.twinRot = bone.Transform * Matrix.CreateTranslation(-vector3_4.X, -vector3_4.Y, -vector3_4.Z);
          this.twinFound = true;
        }
        catch
        {
        }
        if (this.twinFound)
        {
          if (this.sc.localLoad)
          {
            this.twinModel = this.conModel.Load<Model>("twinBind1");
            this.twinTexture = this.Content.Load<Texture2D>("texture//FarmerTwin01");
          }
          else
          {
            this.twinModel = this.sc.twinModel;
            this.twinTexture = this.sc.twinTexture;
          }
          this.twinOrigTexture = this.Content.Load<Texture2D>("texture//FarmerTwin01");
          this.twinSkin = this.Content.Load<Effect>("effects\\TwinSkin");
          this.twinSkin.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
          this.twinSkin.Parameters["Texture"].SetValue((Texture) this.twinTexture);
          SkinningData tag3 = this.twinModel.Tag as SkinningData;
          this.twin1 = new AnimationPlayer[15];
          this.twin1[0] = new AnimationPlayer(tag3);
          this.twin1[0].StartClip(tag3.AnimationClips["sitlaugh"]);
          this.twin1[1] = new AnimationPlayer(tag3);
          this.twin1[1].StartClip(tag3.AnimationClips["sit2stand"]);
          this.twin1[2] = new AnimationPlayer(tag3);
          this.twin1[2].StartClip(tag3.AnimationClips["standlaugh"]);
          this.twin1[3] = new AnimationPlayer(tag3);
          this.twin1[3].StartClip(tag3.AnimationClips["stand2sit"]);
          this.twin1[4] = new AnimationPlayer(tag3);
          this.twin1[4].StartClip(tag3.AnimationClips["sitcry"]);
          this.twin1[5] = new AnimationPlayer(tag3);
          this.twin1[5].StartClip(tag3.AnimationClips["jumpup"]);
          this.twin1[6] = new AnimationPlayer(tag3);
          this.twin1[6].StartClip(tag3.AnimationClips["sittalk"]);
          this.twin1[7] = new AnimationPlayer(tag3);
          this.twin1[7].StartClip(tag3.AnimationClips["standargue"]);
          this.twin1[8] = new AnimationPlayer(tag3);
          this.twin1[8].StartClip(tag3.AnimationClips["gangum"]);
          this.twin1[9] = new AnimationPlayer(tag3);
          this.twin1[9].StartClip(tag3.AnimationClips["standtalk"]);
          this.twin1[10] = new AnimationPlayer(tag3);
          this.twin1[10].StartClip(tag3.AnimationClips["asskick"]);
          this.twin1[11] = new AnimationPlayer(tag3);
          this.twin1[11].StartClip(tag3.AnimationClips["dickkick"]);
          this.twin1[12] = new AnimationPlayer(tag3);
          this.twin1[12].StartClip(tag3.AnimationClips["power1"]);
          this.twin1[13] = new AnimationPlayer(tag3);
          this.twin1[13].StartClip(tag3.AnimationClips["power2"]);
          this.twin1[14] = new AnimationPlayer(tag3);
          this.twin1[14].StartClip(tag3.AnimationClips["dance4"]);
          this.twinJaw = new float[2500];
          this.twinAnim.animList = new List<int>();
          this.twinAnim.animList.Clear();
          for (int index = 0; index < 31; ++index)
            this.twinAnim.animList.Add(index);
          this.twinactionList.Add("sitlaugh");
          this.twinActNow = true;
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 0;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.animLoop = 1000;
          this.twinAnim.animMax = 495;
          this.twinactionindex = this.twinAnim.animClip;
          this.twinAnimOld.looped = true;
          this.twinAnimOld.animCount = 0.0f;
          this.twinAnimOld.animTween = 1f;
          this.twinAnimOld.animClip = 0;
          this.twinAnimOld.animMax = 0;
          this.twinAnimOld.animMin = 0;
          this.twinAnimOld.animLoop = 1000;
          this.twinJawIndex = -1;
          this.talktwinIndex = -1;
          this.buildbotherStory();
        }
        this.cube = this.Content.Load<Model>("models//cube");
        this.redex = this.Content.Load<Texture2D>("texture//redEx");
        this.tunnelshadowZero = this.Content.Load<Texture2D>("texture//tunnelShadowZero");
        this.angrymoon = this.Content.Load<Texture2D>("texture//angrymoon");
        this.goggleHud = this.Content.Load<Texture2D>("texture//goggleHud");
        this.enemyTexture = this.Content.Load<Texture2D>("texture//enemyTexture2");
        this.enemyDeadTexture = this.Content.Load<Texture2D>("texture//enemyTexture4");
        this.webProxy = this.Content.Load<Model>("models//cobweb2");
        this.webTexture = this.Content.Load<Texture2D>("texture//aweb1");
        int[] numArray3 = new int[7]
        {
          0,
          156,
          270,
          144,
          192,
          186,
          78
        };
        string[] strArray2 = new string[9]
        {
          "",
          "1902 Our Farm is under construction...Frame\nwas built in Chilcotton, Canada. This giant\npig farm was completed summer of 1903. During\nconstruction 2 helpers got buried alive in dirt. ",
          "My fat wife with my birthday present,\nShe was not big boned she was enormous.\nHer bones creaked when she walked, and\nshe just cooked some carrot cassarole. ",
          "Shit on a shingle that's my tractor,\nJust won the 1908 Tractor Pull awards\nand, a really neat tractor cap as a prize...\nThese were some of my best days alive. ",
          "Twin brother came down to visit me,\nhe claims that I copied his farm down to the\nlast nail. What an arrogant asshole he is. I\nhad big argument after this photo was taken. ",
          "Princess won first prize again, she\nis the cutest pig I ever saw, but after a while\nshe got into the feed and gained some weight.\nShe won 3 years in a row. ",
          "snaf eht rof si etadpu sihT.troppus doog\neht lla rof noitaicerppa hcum dna emag siht\nekil yllaer tsum uoy neewollah yppah a evah",
          null,
          null
        };
        for (int index = 0; index < 9; ++index)
        {
          try
          {
            this.tempi = new BloodnBacon4PT.interact();
            this.tempi.photo1Matrix = this.tunnel1.Bones["photo" + index.ToString()].Transform * Matrix.CreateTranslation(3000f, 0.0f, 3000f);
            this.tempi.vector3_0 = Vector3.Transform(Vector3.Zero, this.tempi.photo1Matrix);
            this.tempi.foundPhoto1 = true;
            this.tempi.length = numArray3[index];
            this.tempi.info = strArray2[index];
            this.tempi.indexer = index;
            this.tempi.photo1 = this.Content.Load<Model>("models//photo1bu");
            this.tempi.photo1Texture = this.Content.Load<Texture2D>("texture//frame" + index.ToString());
            this.tempi.soundEffect_0 = this.Content.Load<SoundEffect>("audio//photoTalk" + index.ToString());
            this.photo.Add(this.tempi);
          }
          catch
          {
          }
        }
        BloodnBacon4PT.interact.atPhotoTimer = 0;
        this.specialTalka = this.Content.Load<SoundEffect>("audio//photoTalk3a");
        this.specialTalkb = this.Content.Load<SoundEffect>("audio//photoTalk3b");
        this.tunnelDoor = this.Content.Load<Model>("models//tunnelDoor2");
        this.tunnelDoorP = this.Content.Load<Model>("models//tunnelDoor3");
        this.tunnelDoorH = this.Content.Load<Model>("models//hiddenDoor");
        this.hiddenDoorTri = this.Content.Load<Model>("models//hidden1Tri");
        this.tunnelDoorTri = this.Content.Load<Model>("models//door1Triangle");
        this.tumbler = this.Content.Load<Model>("models//tunnelTumbler2");
        string str = this.mazeid.ToString();
        this.texture2D_0 = this.Content.Load<Texture2D>("texture//tunnelRGB" + str);
        this.tunnelRGBstairs = this.Content.Load<Texture2D>("texture//tunnelRGBstairs" + str);
        this.tunnelShadow = this.Content.Load<Texture2D>("texture//tunnelShadowMaze" + str);
        this.useAlt = false;
        this.minimap1 = this.Content.Load<Texture2D>("texture//minimap" + str);
        this.eraseblob = this.Content.Load<Texture2D>("texture//miniblob1");
        this.eraseframe1 = this.Content.Load<Texture2D>("texture//miniblob2");
        this.minimapReveal = new Texture2D(this.sc.GraphicsDevice, 1, 1);
        this.minimapReveal.SetData<Color>(new Color[1]
        {
          Color.Transparent
        });
        this.combineTexture = new Texture2D(this.sc.GraphicsDevice, 1, 1);
        this.combineTexture.SetData<Color>(new Color[1]
        {
          Color.Transparent
        });
        this.tunnelRGBdoor = this.mazeid > 1 ? this.Content.Load<Texture2D>("texture//tunnelRGBdoors1") : this.Content.Load<Texture2D>("texture//tunnelRGBdoors2");
        this.flashlightSpot0 = this.Content.Load<Texture2D>("texture//spotTexture0");
        this.flashlightSpot1 = this.Content.Load<Texture2D>("texture//spotTexture1");
        this.flashlightSpot2 = this.Content.Load<Texture2D>("texture//spotTexture2");
        this.flashlightSpot3 = this.Content.Load<Texture2D>("texture//spotTexture3");
        this.flashlightPack = new Texture2D[4];
        this.flashlightPack[0] = this.flashlightSpot0;
        this.flashlightPack[1] = this.flashlightSpot1;
        this.flashlightPack[2] = this.flashlightSpot2;
        this.flashlightPack[3] = this.flashlightSpot3;
        this.flashlightIndex = 0;
        this.spotTexture = this.flashlightSpot0;
        this.flashlightDepth = this.lowestDepth;
        this.tunnelEffect = this.Content.Load<Effect>("effects\\buildingsTunnel");
        this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_0);
        this.tunnelEffect.Parameters["shadTexture"].SetValue((Texture) this.tunnelShadow);
        this.cryptdoorModel = this.Content.Load<Model>("models//cryptDoor2");
        this.cryptdoorModel3 = this.Content.Load<Model>("models//cryptDoor3");
        this.cryptRGB = this.Content.Load<Texture2D>("texture//cryptdoorRGB2");
        if (this.sc.dayTime == "pm")
          this.cryptRGB = this.Content.Load<Texture2D>("texture//cryptdoorRGB2pm");
        this.cryptShadow = this.Content.Load<Texture2D>("texture//cryptdoorShad");
        this.cryptEffect = this.Content.Load<Effect>("effects\\buildingsCryptDoor");
        this.cryptEffect.Parameters["rgbTexture"].SetValue((Texture) this.cryptRGB);
        this.cryptEffect.Parameters["shadTexture"].SetValue((Texture) this.cryptShadow);
        this.cryptEffect.Parameters["moon"].SetValue(this.sc.moontype * 0.1f);
        this.cursor.addTunnel2(this.tunnel02Triangle, ref this.tunnelDoorTri, ref this.hiddenDoorTri, ref this.cryptdoorTriangle, ref this.cryptdoorTriangle3);
        this.oppCursor.addTunnel2(this.tunnel02Triangle, ref this.tunnelDoorTri, ref this.hiddenDoorTri, ref this.cryptdoorTriangle, ref this.cryptdoorTriangle3);
        this.genCursor.addTunnel2(this.tunnel02Triangle, ref this.tunnelDoorTri, ref this.hiddenDoorTri, ref this.cryptdoorTriangle, ref this.cryptdoorTriangle3);
        SoundEffect.DistanceScale = 120f;
        this.webInstancing();
        int num9 = 0;
        int num10 = 0;
        for (int index1 = 1; index1 < 15; ++index1)
        {
          try
          {
            string boneName = "w" + index1.ToString();
            Vector3 vector3_5 = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones[boneName].Transform);
            Matrix matrix = this.tunnel1.Bones[boneName].Transform * Matrix.CreateTranslation(-vector3_5.X, -vector3_5.Y, -vector3_5.Z);
            this.web.dupe.Add(new webDupe(0, 0, vector3_5 + new Vector3(3000f, 0.0f, 3000f), 1, 1, this.timeFrame, this.sc, this.sc.dayTime, 1, false));
            int index2 = this.web.dupe.Count - 1;
            this.web.dupe[index2].myRot2 = matrix;
            this.web.dupe[index2].scale = 1f;
            this.web.dupe[index2].defaultClip = num9;
            this.web.dupe[index2].clip1 = 0;
            this.web.dupe[index2].clip2 = 0;
            this.web.dupe[index2].tint = (float) num10;
            ++num9;
            if (num9 > 4)
              num9 = 0;
            ++num10;
            if (num10 > 3)
              num10 = 0;
          }
          catch
          {
          }
        }
      }
      this.pim1 = new BloodnBacon4PT.atari();
      this.pim1.mirvVeloc = 0.0f;
      this.pim1.mirvPos = Vector3.Zero;
      this.pim1.mirvOld = Vector3.Zero;
      this.pim1.mirvAge = 0.0f;
      this.pim1.mirvUp = 0.0f;
      this.pim1.mirvTwist = 0.0f;
      this.pim1.mirvBank = 0.0f;
      this.pim1.mirvUpLock = 0.0f;
      this.pim1.mirvGoUp = false;
      this.pim1.mirvMoving = false;
      this.pim1.mirvLevel = false;
      this.pim1.mirvSeeStreaks = false;
      this.pim1.mirvStreakTimer = 0;
      this.pim1.mirvFader = 1f;
      this.pim2 = new BloodnBacon4PT.atari();
      this.pim2.mirvVeloc = 0.0f;
      this.pim2.mirvPos = Vector3.Zero;
      this.pim2.mirvOld = Vector3.Zero;
      this.pim2.mirvAge = 0.0f;
      this.pim2.mirvUp = 0.0f;
      this.pim2.mirvTwist = 0.0f;
      this.pim2.mirvBank = 0.0f;
      this.pim2.mirvUpLock = 0.0f;
      this.pim2.mirvGoUp = false;
      this.pim2.mirvMoving = false;
      this.pim2.mirvLevel = false;
      this.pim2.mirvSeeStreaks = false;
      this.pim2.mirvStreakTimer = 0;
      this.pim2.mirvFader = 1f;
      this.zolt = new BloodnBacon4PT.shell();
      this.zolt.max = 0;
      this.zolt.maxCapacity = 10;
      this.zolt.index = 0;
      this.zolt.model1 = this.Content.Load<Model>("Models//zolt");
      this.zolt.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, 10, BufferUsage.WriteOnly);
      this.zolt.displayList = new BloodnBacon4PT.instancedObject[10];
      this.zolt.stream = new BloodnBacon4PT.instancedObject[10];
      this.zoltPos = new Vector3[10];
      this.zoltOrigTrans = new Matrix[10];
      this.zoltOrigTrans[0] = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationX(0.0f) * Matrix.CreateRotationY(0.974879146f) * Matrix.CreateRotationZ(0.0f) * Matrix.CreateTranslation(-229.8192f, 18.373497f, 180.916061f);
      this.zoltOrigTrans[1] = Matrix.CreateScale(1f, 1f, 0.8542798f) * Matrix.CreateRotationX(-0.0349605456f) * Matrix.CreateRotationY(0.219140828f) * Matrix.CreateRotationZ(0.0458192751f) * Matrix.CreateTranslation(-344.937561f, 13.7743473f, 8.921518f);
      this.zoltOrigTrans[2] = Matrix.CreateScale(1.49466455f, 1.881312f, 1.7691226f) * Matrix.CreateRotationX(-3.35842f) * Matrix.CreateRotationY(0.425519139f) * Matrix.CreateRotationZ(-3.53381443f) * Matrix.CreateTranslation(-317.1821f, 15.2523127f, -91.83311f);
      this.zoltOrigTrans[3] = Matrix.CreateScale(1f, 1f, 0.96949327f) * Matrix.CreateRotationX(-3.090393f) * Matrix.CreateRotationY(0.841079235f) * Matrix.CreateRotationZ(-3.049993f) * Matrix.CreateTranslation(-253.447571f, 21.8638382f, -183.0003f);
      this.zoltOrigTrans[4] = Matrix.CreateScale(1.7497834f, 2.38336062f, 3.82781577f) * Matrix.CreateRotationX(-0.9836564f) * Matrix.CreateRotationY(1.53998327f) * Matrix.CreateRotationZ(-0.979831159f) * Matrix.CreateTranslation(26.3546658f, 18.94087f, -234.467316f);
      this.zoltOrigTrans[5] = Matrix.CreateScale(1.02065921f, 1.28468859f, 1.01819158f) * Matrix.CreateRotationX(0.0172955021f) * Matrix.CreateRotationY(3.95537829f) * Matrix.CreateRotationZ(0.05316963f) * Matrix.CreateTranslation(245.97551f, 13.72614f, -184.5534f);
      this.zoltOrigTrans[6] = Matrix.CreateScale(1.02065921f, 1.28468859f, 0.9977296f) * Matrix.CreateRotationX(-3.107363f) * Matrix.CreateRotationY(0.07839446f) * Matrix.CreateRotationZ(-3.085488f) * Matrix.CreateTranslation(339.333557f, 15.458847f, -17.68018f);
      this.zoltOrigTrans[7] = Matrix.CreateScale(1.02065921f, 1.28468859f, 1.33646965f) * Matrix.CreateRotationX(-3.10024381f) * Matrix.CreateRotationY(0.599959552f) * Matrix.CreateRotationZ(-3.064815f) * Matrix.CreateTranslation(296.060425f, 12.8824863f, 101.309113f);
      this.zoltOrigTrans[8] = Matrix.CreateScale(1.35451508f, 1.78963614f, 1.1892699f) * Matrix.CreateRotationX(3.14855671f) * Matrix.CreateRotationY(1.18148232f) * Matrix.CreateRotationZ(3.13300562f) * Matrix.CreateTranslation(193.66983f, 16.6284618f, 192.79985f);
      this.zoltOrigTrans[9] = Matrix.CreateScale(1.8099252f, 2.2306385f, 4.28897142f) * Matrix.CreateRotationX(-0.7206252f) * Matrix.CreateRotationY(1.53228974f) * Matrix.CreateRotationZ(-0.7309227f) * Matrix.CreateTranslation(-22.4829121f, 21.5028687f, 206.870255f);
      for (int index = 0; index < this.zolt.maxCapacity; ++index)
      {
        this.zoltOrigTrans[index] *= Matrix.CreateTranslation(3000f, -6f, 3000f);
        this.zolt.stream[index].Trans = this.zoltOrigTrans[index];
        this.zolt.stream[index].tint = (float) this.rr.Next(3, 6);
      }
      this.zolt.index = this.zolt.maxCapacity;
      this.zolt.max = this.zolt.maxCapacity;
      this.carnage = new BloodnBacon4PT.shell();
      this.carnage.max = 0;
      this.carnage.maxCapacity = 300;
      this.carnage.index = 0;
      this.carnage.model1 = this.Content.Load<Model>("Models//chunk");
      this.carnage.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, 300, BufferUsage.WriteOnly);
      this.carnage.displayList = new BloodnBacon4PT.instancedObject[300];
      this.carnage.dupe = new dupeItem[300];
      for (int i = 0; i < 300; ++i)
        this.carnage.dupe[i] = new dupeItem(i);
      this.carnage.stream = new BloodnBacon4PT.instancedObject[300];
      this.pigbone = new BloodnBacon4PT.shell();
      this.pigbone.max = 0;
      this.pigbone.maxCapacity = 300;
      this.pigbone.index = 0;
      this.pigbone.model1 = this.Content.Load<Model>("Models//chunkbone");
      this.pigbone.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.pigbone.maxCapacity, BufferUsage.WriteOnly);
      this.pigbone.displayList = new BloodnBacon4PT.instancedObject[this.pigbone.maxCapacity];
      this.pigbone.dupe = new dupeItem[this.pigbone.maxCapacity];
      for (int index = 0; index < this.pigbone.maxCapacity; ++index)
        this.pigbone.dupe[index] = new dupeItem(index + 27090);
      this.pigbone.stream = new BloodnBacon4PT.instancedObject[this.pigbone.maxCapacity];
      this.charro = new BloodnBacon4PT.shell();
      this.charro.max = 0;
      this.charro.maxCapacity = 300;
      this.charro.index = 0;
      this.charro.model1 = this.Content.Load<Model>("Models//chunkchar");
      this.charro.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, 300, BufferUsage.WriteOnly);
      this.charro.displayList = new BloodnBacon4PT.instancedObject[300];
      this.charro.dupe = new dupeItem[300];
      for (int i = 0; i < 300; ++i)
        this.charro.dupe[i] = new dupeItem(i);
      this.charro.stream = new BloodnBacon4PT.instancedObject[300];
      this.charroTrans = new Matrix[55];
      this.charroBone = new int[55];
      this.charroTrans[0] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-0.418296963f) * Matrix.CreateRotationY(-0.209999472f) * Matrix.CreateRotationZ(-3.14164186f) * Matrix.CreateTranslation(-4.445108f, 110.664108f, 224.412521f);
      this.charroBone[0] = 7;
      this.charroTrans[1] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(0.0f) * Matrix.CreateRotationY(0.0f) * Matrix.CreateRotationZ(0.0f) * Matrix.CreateTranslation(45.3890457f, 16.03827f, 89.6358948f);
      this.charroBone[1] = 14;
      this.charroTrans[2] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-0.0291814748f) * Matrix.CreateRotationY(-0.158285826f) * Matrix.CreateRotationZ(3.0353086f) * Matrix.CreateTranslation(14.2831144f, 100.449982f, 153.302277f);
      this.charroBone[2] = 7;
      this.charroTrans[3] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-0.0291814748f) * Matrix.CreateRotationY(-0.158285826f) * Matrix.CreateRotationZ(3.0353086f) * Matrix.CreateTranslation(13.3208513f, 104.772949f, 181.630051f);
      this.charroBone[3] = 7;
      this.charroTrans[4] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-3.38839817f) * Matrix.CreateRotationY(-0.2806182f) * Matrix.CreateRotationZ(-0.3173786f) * Matrix.CreateTranslation(-17.12956f, 104.228622f, 121.28875f);
      this.charroBone[4] = 7;
      this.charroTrans[5] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-3.27711034f) * Matrix.CreateRotationY(-0.2721238f) * Matrix.CreateRotationZ(-0.648705542f) * Matrix.CreateTranslation(-24.6311951f, 107.346855f, 152.9083f);
      this.charroBone[5] = 7;
      this.charroTrans[6] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-0.2692229f) * Matrix.CreateRotationY(-0.344033122f) * Matrix.CreateRotationZ(3.02065873f) * Matrix.CreateTranslation(-20.1951313f, 108.019577f, 184.74f);
      this.charroBone[6] = 7;
      this.charroTrans[7] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(-0.0291814748f) * Matrix.CreateRotationY(-0.158285826f) * Matrix.CreateRotationZ(3.0353086f) * Matrix.CreateTranslation(15.2760172f, 101.894f, 120.591736f);
      this.charroBone[7] = 7;
      this.charroTrans[8] = Matrix.CreateScale(18.2867546f, 18.2867546f, 18.2867546f) * Matrix.CreateRotationX(-6.27667475f) * Matrix.CreateRotationY(0.238777176f) * Matrix.CreateRotationZ(-0.140344322f) * Matrix.CreateTranslation(1.81210387f, 185.431732f, 107.899734f);
      this.charroBone[8] = 7;
      this.charroTrans[9] = Matrix.CreateScale(18.2867546f, 20.6576786f, 18.2867546f) * Matrix.CreateRotationX(-0.6401729f) * Matrix.CreateRotationY(0.14278923f) * Matrix.CreateRotationZ(-0.185751885f) * Matrix.CreateTranslation(0.8924027f, 162.198929f, -90.91636f);
      this.charroBone[9] = 3;
      this.charroTrans[10] = Matrix.CreateScale(18.2867546f, 20.6576786f, 18.2867546f) * Matrix.CreateRotationX(-0.161801651f) * Matrix.CreateRotationY(-0.0721826f) * Matrix.CreateRotationZ(-3.10679555f) * Matrix.CreateTranslation(-6.763274f, 95.66316f, -25.7493382f);
      this.charroBone[10] = 3;
      this.charroTrans[11] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.153389335f) * Matrix.CreateRotationY(-0.0628815144f) * Matrix.CreateRotationZ(-2.67349768f) * Matrix.CreateTranslation(-19.8719139f, 192.911f, 44.4084473f);
      this.charroBone[11] = 5;
      this.charroTrans[12] = Matrix.CreateScale(7.175418f, 5.720456f, 5.720456f) * Matrix.CreateRotationX(0.00754947728f) * Matrix.CreateRotationY(-0.5160206f) * Matrix.CreateRotationZ(0.126526535f) * Matrix.CreateTranslation(45.8636971f, 32.65523f, 85.76704f);
      this.charroBone[12] = 14;
      this.charroTrans[13] = Matrix.CreateScale(8.323115f, 7.88816929f, 8.8786335f) * Matrix.CreateRotationX(-0.0221992787f) * Matrix.CreateRotationY(0.0566964857f) * Matrix.CreateRotationZ(0.300051659f) * Matrix.CreateTranslation(35.1953964f, 82.99404f, 86.33586f);
      this.charroBone[13] = 13;
      this.charroTrans[14] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(-0.134416491f) * Matrix.CreateRotationY(-0.007854031f) * Matrix.CreateRotationZ(0.22626169f) * Matrix.CreateTranslation(41.3258133f, 65.89253f, 86.9750443f);
      this.charroBone[14] = 13;
      this.charroTrans[15] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(-0.131875351f) * Matrix.CreateRotationY(-0.005793361f) * Matrix.CreateRotationZ(0.221692547f) * Matrix.CreateTranslation(44.1937256f, 50.5263329f, 88.05121f);
      this.charroBone[15] = 13;
      this.charroTrans[16] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.153389335f) * Matrix.CreateRotationY(-0.0628815144f) * Matrix.CreateRotationZ(-2.67349768f) * Matrix.CreateTranslation(33.7482224f, 105.412483f, -10.0074291f);
      this.charroBone[16] = 3;
      this.charroTrans[17] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(-0.496444076f) * Matrix.CreateRotationY(-0.102633856f) * Matrix.CreateRotationZ(-1.72041523f) * Matrix.CreateTranslation(42.38614f, 110.409042f, 47.79525f);
      this.charroBone[17] = 5;
      this.charroTrans[18] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(0.0348128453f) * Matrix.CreateRotationY(0.274499744f) * Matrix.CreateRotationZ(-4.723635f) * Matrix.CreateTranslation(42.2247f, 157.974167f, 33.4013252f);
      this.charroBone[18] = 4;
      this.charroTrans[19] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.153389335f) * Matrix.CreateRotationY(-0.0628815144f) * Matrix.CreateRotationZ(-2.67349768f) * Matrix.CreateTranslation(15.84611f, 176.773132f, -22.0927372f);
      this.charroBone[19] = 4;
      this.charroTrans[20] = Matrix.CreateScale(18.2867546f, 20.6576786f, 18.2867546f) * Matrix.CreateRotationX(-1.65093338f) * Matrix.CreateRotationY(-0.0551175326f) * Matrix.CreateRotationZ(-2.84759951f) * Matrix.CreateTranslation(-1.10263348f, 112.709335f, -92.32833f);
      this.charroBone[20] = 3;
      this.charroTrans[21] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(0.4749839f) * Matrix.CreateRotationY(0.367589355f) * Matrix.CreateRotationZ(-0.5357072f) * Matrix.CreateTranslation(12.1884279f, 140.9305f, 178.865219f);
      this.charroBone[21] = 7;
      this.charroTrans[22] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(0.325839877f) * Matrix.CreateRotationY(-0.348694563f) * Matrix.CreateRotationZ(0.69175595f) * Matrix.CreateTranslation(-18.0838623f, 140.459473f, 180.30246f);
      this.charroBone[22] = 7;
      this.charroTrans[23] = Matrix.CreateScale(11.56903f, 11.56903f, 11.56903f) * Matrix.CreateRotationX(0.208457127f) * Matrix.CreateRotationY(0.5902856f) * Matrix.CreateRotationZ(-0.4478101f) * Matrix.CreateTranslation(16.74043f, 169.617065f, 147.214386f);
      this.charroBone[23] = 7;
      this.charroTrans[24] = Matrix.CreateScale(12.3699484f, 12.3699484f, 12.3699484f) * Matrix.CreateRotationX(0.40019834f) * Matrix.CreateRotationY(-0.304891467f) * Matrix.CreateRotationZ(0.610319f) * Matrix.CreateTranslation(-22.0059261f, 168.65f, 150.479767f);
      this.charroBone[24] = 7;
      this.charroTrans[25] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(2.94554138f) * Matrix.CreateRotationY(-0.05216605f) * Matrix.CreateRotationZ(-1.40318835f) * Matrix.CreateTranslation(34.8930855f, 150.692947f, -21.51229f);
      this.charroBone[25] = 3;
      this.charroTrans[26] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(-0.219749331f) * Matrix.CreateRotationY(0.251797736f) * Matrix.CreateRotationZ(-4.809081f) * Matrix.CreateTranslation(31.2211227f, 139.725815f, 116.282715f);
      this.charroBone[26] = 7;
      this.charroTrans[27] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.128832445f) * Matrix.CreateRotationY(1.07346749f) * Matrix.CreateRotationZ(-3.04009032f) * Matrix.CreateTranslation(15.1551781f, 196.732925f, 46.3380928f);
      this.charroBone[27] = 5;
      this.charroTrans[28] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(-0.228876576f) * Matrix.CreateRotationY(-0.0833182856f) * Matrix.CreateRotationZ(-1.75169063f) * Matrix.CreateTranslation(50.2348328f, 133.583878f, 73.1907043f);
      this.charroBone[28] = 12;
      this.charroTrans[29] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(-0.0621338524f) * Matrix.CreateRotationY(0.20780471f) * Matrix.CreateRotationZ(-4.70564461f) * Matrix.CreateTranslation(-34.7433128f, 143.114273f, 100.295418f);
      this.charroBone[29] = 6;
      this.charroTrans[30] = Matrix.CreateScale(6.617012f, 5.736755f, 6.617012f) * Matrix.CreateRotationX(-0.0479070134f) * Matrix.CreateRotationY(0.176471636f) * Matrix.CreateRotationZ(-4.62319f) * Matrix.CreateTranslation(-44.21728f, 137.353043f, 141.71846f);
      this.charroBone[30] = 7;
      this.charroTrans[31] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(-0.3201538f) * Matrix.CreateRotationY(0.286266863f) * Matrix.CreateRotationZ(-4.75172758f) * Matrix.CreateTranslation(-43.1256447f, 111.155205f, 32.3352127f);
      this.charroBone[31] = 6;
      this.charroTrans[32] = Matrix.CreateScale(16.39849f, 14.2170086f, 16.39849f) * Matrix.CreateRotationX(-0.373209625f) * Matrix.CreateRotationY(0.16990234f) * Matrix.CreateRotationZ(-5.16604137f) * Matrix.CreateTranslation(-37.166153f, 174.736115f, 44.6152f);
      this.charroBone[32] = 5;
      this.charroTrans[33] = Matrix.CreateScale(16.39849f, 14.2170086f, 17.8304062f) * Matrix.CreateRotationX(2.96372175f) * Matrix.CreateRotationY(-0.08448305f) * Matrix.CreateRotationZ(-1.81390285f) * Matrix.CreateTranslation(-36.9501648f, 164.29808f, -12.4678173f);
      this.charroBone[33] = 4;
      this.charroTrans[34] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.0317878239f) * Matrix.CreateRotationY(-1.398707f) * Matrix.CreateRotationZ(-3.13903975f) * Matrix.CreateTranslation(-1.4719274f, 189.013641f, 0.647477269f);
      this.charroBone[34] = 4;
      this.charroTrans[35] = Matrix.CreateScale(11.2750635f, 12.7369041f, 11.2750635f) * Matrix.CreateRotationX(0.0317878239f) * Matrix.CreateRotationY(-1.398707f) * Matrix.CreateRotationZ(-3.13903975f) * Matrix.CreateTranslation(-0.172980785f, 182.370041f, -38.86048f);
      this.charroBone[35] = 4;
      this.charroTrans[36] = Matrix.CreateScale(12.8090506f, 11.10507f, 12.8090506f) * Matrix.CreateRotationX(-0.327074379f) * Matrix.CreateRotationY(0.169142649f) * Matrix.CreateRotationZ(-4.843209f) * Matrix.CreateTranslation(-39.959568f, 131.478241f, -71.2144547f);
      this.charroBone[36] = 24;
      this.charroTrans[37] = Matrix.CreateScale(12.8090506f, 11.10507f, 12.8090506f) * Matrix.CreateRotationX(0.0671794862f) * Matrix.CreateRotationY(0.223009616f) * Matrix.CreateRotationZ(-4.45311975f) * Matrix.CreateTranslation(33.8844f, 147.384567f, -70.14796f);
      this.charroBone[37] = 19;
      this.charroTrans[38] = Matrix.CreateScale(10.4328241f, 9.887629f, 11.1291513f) * Matrix.CreateRotationX(0.03468453f) * Matrix.CreateRotationY(0.05004757f) * Matrix.CreateRotationZ(1.27990341f) * Matrix.CreateTranslation(38.0220146f, 101.096451f, 85.51292f);
      this.charroBone[38] = 12;
      this.charroTrans[39] = Matrix.CreateScale(10.4328241f, 9.887629f, 11.1291513f) * Matrix.CreateRotationX(-3.12178922f) * Matrix.CreateRotationY(0.167968348f) * Matrix.CreateRotationZ(1.97217464f) * Matrix.CreateTranslation(-48.481575f, 97.2327f, 69.44852f);
      this.charroBone[39] = 16;
      this.charroTrans[40] = Matrix.CreateScale(8.80882f, 8.348492f, 9.396755f) * Matrix.CreateRotationX(-2.990986f) * Matrix.CreateRotationY(0.07723204f) * Matrix.CreateRotationZ(2.95469141f) * Matrix.CreateTranslation(-43.35332f, 78.46285f, 74.11221f);
      this.charroBone[40] = 17;
      this.charroTrans[41] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(-3.09275126f) * Matrix.CreateRotationY(0.127697587f) * Matrix.CreateRotationZ(3.03916645f) * Matrix.CreateTranslation(-43.2009926f, 62.08477f, 76.3883f);
      this.charroBone[41] = 17;
      this.charroTrans[42] = Matrix.CreateScale(8.828607f, 7.0384264f, 7.0384264f) * Matrix.CreateRotationX(-3.08971858f) * Matrix.CreateRotationY(0.124837779f) * Matrix.CreateRotationZ(3.043316f) * Matrix.CreateTranslation(-43.82269f, 44.5186234f, 73.88608f);
      this.charroBone[42] = 17;
      this.charroTrans[43] = Matrix.CreateScale(8.135982f, 6.48624563f, 6.48624563f) * Matrix.CreateRotationX(0.243041575f) * Matrix.CreateRotationY(2.535548f) * Matrix.CreateRotationZ(0.110681169f) * Matrix.CreateTranslation(-46.583786f, 28.4030666f, 79.3791962f);
      this.charroBone[43] = 18;
      this.charroTrans[44] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(0.205016285f) * Matrix.CreateRotationY(3.06543064f) * Matrix.CreateRotationZ(0.119206451f) * Matrix.CreateTranslation(-46.4700546f, 13.5322857f, 82.04072f);
      this.charroBone[44] = 18;
      this.charroTrans[45] = Matrix.CreateScale(8.80882f, 8.348492f, 9.396755f) * Matrix.CreateRotationX(0.08375637f) * Matrix.CreateRotationY(0.4330129f) * Matrix.CreateRotationZ(0.135984868f) * Matrix.CreateTranslation(27.3221512f, 76.18455f, -90.76945f);
      this.charroBone[45] = 20;
      this.charroTrans[46] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(-0.0605936944f) * Matrix.CreateRotationY(0.375336856f) * Matrix.CreateRotationZ(0.0497707054f) * Matrix.CreateTranslation(29.4574356f, 57.8453865f, -90.1987152f);
      this.charroBone[46] = 20;
      this.charroTrans[47] = Matrix.CreateScale(6.86470127f, 7.0384264f, 7.0384264f) * Matrix.CreateRotationX(-0.0598261468f) * Matrix.CreateRotationY(0.377725f) * Matrix.CreateRotationZ(0.0450320058f) * Matrix.CreateTranslation(31.57155f, 42.675045f, -91.3448f);
      this.charroBone[47] = 21;
      this.charroTrans[48] = Matrix.CreateScale(5.40729237f, 6.48624563f, 6.48624563f) * Matrix.CreateRotationX(-0.155313313f) * Matrix.CreateRotationY(-0.164309964f) * Matrix.CreateRotationZ(0.0233693775f) * Matrix.CreateTranslation(32.97509f, 26.81443f, -89.4742f);
      this.charroBone[48] = 21;
      this.charroTrans[49] = Matrix.CreateScale(5.47723436f, 5.37683964f, 5.37683964f) * Matrix.CreateRotationX(-0.175886109f) * Matrix.CreateRotationY(0.326687157f) * Matrix.CreateRotationZ(-0.06671373f) * Matrix.CreateTranslation(34.86645f, 13.9166517f, -88.2019653f);
      this.charroBone[49] = 22;
      this.charroTrans[50] = Matrix.CreateScale(8.80882f, 8.348492f, 9.396755f) * Matrix.CreateRotationX(-2.990986f) * Matrix.CreateRotationY(0.07723204f) * Matrix.CreateRotationZ(2.95469141f) * Matrix.CreateTranslation(-27.5168037f, 82.4486847f, -91.2721252f);
      this.charroBone[50] = 25;
      this.charroTrans[51] = Matrix.CreateScale(8.006837f, 6.383288f, 6.383288f) * Matrix.CreateRotationX(-3.09275126f) * Matrix.CreateRotationY(0.127697587f) * Matrix.CreateRotationZ(3.03916645f) * Matrix.CreateTranslation(-32.7123337f, 62.9171829f, -96.61335f);
      this.charroBone[51] = 25;
      this.charroTrans[52] = Matrix.CreateScale(8.828607f, 7.0384264f, 7.0384264f) * Matrix.CreateRotationX(-3.08971858f) * Matrix.CreateRotationY(0.124837779f) * Matrix.CreateRotationZ(3.043316f) * Matrix.CreateTranslation(-33.6543579f, 45.3510361f, -97.3352661f);
      this.charroBone[52] = 26;
      this.charroTrans[53] = Matrix.CreateScale(5.97535229f, 6.55743647f, 4.763728f) * Matrix.CreateRotationX(3.13995886f) * Matrix.CreateRotationY(0.6596843f) * Matrix.CreateRotationZ(-3.14006758f) * Matrix.CreateTranslation(-35.53896f, 29.2819843f, -95.79736f);
      this.charroBone[53] = 26;
      this.charroTrans[54] = Matrix.CreateScale(6.74440527f, 5.37683964f, 5.37683964f) * Matrix.CreateRotationX(3.13197613f) * Matrix.CreateRotationY(0.160834432f) * Matrix.CreateRotationZ(-3.1277895f) * Matrix.CreateTranslation(-34.3868828f, 13.6348839f, -95.3423f);
      this.charroBone[54] = 27;
      this.chain = new BloodnBacon4PT.shell();
      this.chain.max = 0;
      this.chain.maxCapacity = 25;
      this.chain.index = 0;
      this.chain.model1 = this.Content.Load<Model>("Models//link");
      this.chain.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.chain.maxCapacity, BufferUsage.WriteOnly);
      this.chain.displayList = new BloodnBacon4PT.instancedObject[this.chain.maxCapacity];
      this.chain.stream = new BloodnBacon4PT.instancedObject[this.chain.maxCapacity];
      ropeDupe.bitmap = this.bitmap;
      ropeDupe.unit = this.unit;
      this.chainRope = new ropeDupe(this.chain.maxCapacity);
      this.chainRope.initialize(new Vector3(3430f, 187f, 4720f));
      for (int index = 0; index < this.chain.maxCapacity; ++index)
      {
        this.chain.stream[index].Trans = this.chainRope.tranforms[index];
        this.chain.stream[index].tint = (float) this.rr.Next(3, 6);
      }
      this.chain.index = 24;
      this.chain.max = 24;
      this.chain2 = new BloodnBacon4PT.shell();
      this.chain2.max = 0;
      this.chain2.maxCapacity = 20;
      this.chain2.index = 0;
      this.chain2.model1 = this.Content.Load<Model>("Models//link");
      this.chain2.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.chain2.maxCapacity, BufferUsage.WriteOnly);
      this.chain2.displayList = new BloodnBacon4PT.instancedObject[this.chain2.maxCapacity];
      this.chain2.stream = new BloodnBacon4PT.instancedObject[this.chain2.maxCapacity];
      this.chainRope2 = new ropeDupe(this.chain2.maxCapacity);
      this.chainRope2.initialize(new Vector3(3430f, 187f, 4544f));
      for (int index = 0; index < this.chain2.maxCapacity; ++index)
      {
        this.chain2.stream[index].Trans = this.chainRope2.tranforms[index];
        this.chain2.stream[index].tint = (float) this.rr.Next(3, 6);
      }
      this.chain2.index = 19;
      this.chain2.max = 19;
      this.head = new BloodnBacon4PT.shell();
      this.head.max = 0;
      this.head.type = 0;
      this.head.maxCapacity = 150;
      this.head.index = 0;
      this.chooseModelPart(this.sc.boar1Variant, ref this.head.model1, 1);
      this.chooseModelPart(this.sc.boar2Variant, ref this.head.model2, 1);
      this.head.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.head.maxCapacity, BufferUsage.WriteOnly);
      this.head.buffer2 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.head.maxCapacity, BufferUsage.WriteOnly);
      this.head.displayList = new BloodnBacon4PT.instancedObject[this.head.maxCapacity];
      this.head.displayList2 = new BloodnBacon4PT.instancedObject[this.head.maxCapacity];
      this.head.dupe = new dupeItem[this.head.maxCapacity];
      for (int i = 0; i < this.head.maxCapacity; ++i)
        this.head.dupe[i] = new dupeItem(i);
      this.head.stream = new BloodnBacon4PT.instancedObject[this.head.maxCapacity];
      this.head.sound = this.Content.Load<SoundEffect>("audio\\chunkhit1");
      this.leg = new BloodnBacon4PT.shell();
      this.leg.max = 0;
      this.leg.type = 1;
      this.leg.maxCapacity = 200;
      this.leg.index = 0;
      this.chooseModelPart(this.sc.boar1Variant, ref this.leg.model1, 2);
      this.chooseModelPart(this.sc.boar2Variant, ref this.leg.model2, 2);
      this.leg.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.leg.maxCapacity, BufferUsage.WriteOnly);
      this.leg.displayList = new BloodnBacon4PT.instancedObject[this.leg.maxCapacity];
      this.leg.buffer2 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.leg.maxCapacity, BufferUsage.WriteOnly);
      this.leg.displayList2 = new BloodnBacon4PT.instancedObject[this.leg.maxCapacity];
      this.leg.dupe = new dupeItem[this.leg.maxCapacity];
      for (int i = 0; i < this.leg.maxCapacity; ++i)
        this.leg.dupe[i] = new dupeItem(i);
      this.leg.stream = new BloodnBacon4PT.instancedObject[this.leg.maxCapacity];
      this.leg.sound = this.Content.Load<SoundEffect>("audio\\chunkhit1");
      this.body = new BloodnBacon4PT.shell();
      this.body.max = 0;
      this.body.type = 2;
      this.body.maxCapacity = 200;
      this.body.index = 0;
      this.chooseModelPart(this.sc.boar1Variant, ref this.body.model1, 3);
      this.chooseModelPart(this.sc.boar2Variant, ref this.body.model2, 3);
      this.body.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.body.maxCapacity, BufferUsage.WriteOnly);
      this.body.displayList = new BloodnBacon4PT.instancedObject[this.body.maxCapacity];
      this.body.buffer2 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.body.maxCapacity, BufferUsage.WriteOnly);
      this.body.displayList2 = new BloodnBacon4PT.instancedObject[this.body.maxCapacity];
      this.body.dupe = new dupeItem[this.body.maxCapacity];
      for (int i = 0; i < this.body.maxCapacity; ++i)
        this.body.dupe[i] = new dupeItem(i);
      this.body.stream = new BloodnBacon4PT.instancedObject[this.body.maxCapacity];
      this.body.sound = this.Content.Load<SoundEffect>("audio\\chunkhit1");
      this.butt = new BloodnBacon4PT.shell();
      this.butt.max = 0;
      this.butt.type = 3;
      this.butt.maxCapacity = 200;
      this.butt.index = 0;
      this.chooseModelPart(this.sc.boar1Variant, ref this.butt.model1, 4);
      this.chooseModelPart(this.sc.boar2Variant, ref this.butt.model2, 4);
      this.butt.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.butt.maxCapacity, BufferUsage.WriteOnly);
      this.butt.displayList = new BloodnBacon4PT.instancedObject[this.butt.maxCapacity];
      this.butt.buffer2 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.butt.maxCapacity, BufferUsage.WriteOnly);
      this.butt.displayList2 = new BloodnBacon4PT.instancedObject[this.butt.maxCapacity];
      this.butt.dupe = new dupeItem[this.butt.maxCapacity];
      for (int i = 0; i < this.butt.maxCapacity; ++i)
        this.butt.dupe[i] = new dupeItem(i);
      this.butt.stream = new BloodnBacon4PT.instancedObject[this.butt.maxCapacity];
      this.butt.sound = this.Content.Load<SoundEffect>("audio\\chunkhit1");
      this.pigchunk = new BloodnBacon4PT.goreDrop();
      this.pigchunk.max = 0;
      this.pigchunk.maxCapacity = 110;
      this.pigchunk.index = 0;
      this.pigchunk.model = this.Content.Load<Model>("Models//chunk");
      this.pigchunk.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.pigchunk.maxCapacity, BufferUsage.WriteOnly);
      this.pigchunk.displayList = new BloodnBacon4PT.instancedObject[this.pigchunk.maxCapacity];
      this.pigchunk.dupe = new goreDupe[this.pigchunk.maxCapacity];
      for (int index = 0; index < this.pigchunk.maxCapacity; ++index)
        this.pigchunk.dupe[index] = new goreDupe(index + 17090);
      this.pigchunk.stream = new BloodnBacon4PT.instancedObject[this.pigchunk.maxCapacity];
      this.bulletbox = new BloodnBacon4PT.pickup();
      this.bulletbox.max = 0;
      this.bulletbox.maxCapacity = 10;
      this.bulletbox.index = 0;
      this.bulletbox.model = this.Content.Load<Model>("Models//bulletbox");
      this.bulletbox.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.bulletbox.maxCapacity, BufferUsage.WriteOnly);
      this.bulletbox.displayList = new BloodnBacon4PT.instancedObject[this.bulletbox.maxCapacity];
      this.bulletbox.dupe = new invDupe[this.bulletbox.maxCapacity];
      for (int index = 0; index < this.bulletbox.maxCapacity; ++index)
        this.bulletbox.dupe[index] = new invDupe(index + 5000);
      this.bulletbox.stream = new BloodnBacon4PT.instancedObject[this.bulletbox.maxCapacity];
      this.bulletbox.sound = this.Content.Load<SoundEffect>("audio\\boxBullets");
      this.hulkcan = new BloodnBacon4PT.pickup();
      this.hulkcan.max = 0;
      this.hulkcan.maxCapacity = 10;
      this.hulkcan.index = 0;
      this.hulkcan.model = this.Content.Load<Model>("Models//hulkcan");
      this.hulkcan.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.hulkcan.maxCapacity, BufferUsage.WriteOnly);
      this.hulkcan.displayList = new BloodnBacon4PT.instancedObject[this.hulkcan.maxCapacity];
      this.hulkcan.dupe = new invDupe[this.hulkcan.maxCapacity];
      for (int index = 0; index < this.hulkcan.maxCapacity; ++index)
        this.hulkcan.dupe[index] = new invDupe(index + 5000);
      this.hulkcan.stream = new BloodnBacon4PT.instancedObject[this.hulkcan.maxCapacity];
      this.hulkcan.sound = this.Content.Load<SoundEffect>("audio\\canthump");
      this.milk = new BloodnBacon4PT.pickup();
      this.milk.max = 0;
      this.milk.maxCapacity = 10;
      this.milk.index = 0;
      this.milk.model = this.Content.Load<Model>("Models//milk");
      this.milk.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.milk.maxCapacity, BufferUsage.WriteOnly);
      this.milk.displayList = new BloodnBacon4PT.instancedObject[this.milk.maxCapacity];
      this.milk.dupe = new invDupe[this.milk.maxCapacity];
      for (int index = 0; index < this.milk.maxCapacity; ++index)
        this.milk.dupe[index] = new invDupe(index + 17000);
      this.milk.stream = new BloodnBacon4PT.instancedObject[this.milk.maxCapacity];
      this.milk.sound = this.Content.Load<SoundEffect>("audio\\boxMilk");
      this.rocket = new BloodnBacon4PT.pickup();
      this.rocket.max = 0;
      this.rocket.maxCapacity = 10;
      this.rocket.index = 0;
      this.rocket.model = this.Content.Load<Model>("Models//rocket");
      this.rocket.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.rocket.maxCapacity, BufferUsage.WriteOnly);
      this.rocket.displayList = new BloodnBacon4PT.instancedObject[this.rocket.maxCapacity];
      this.rocket.dupe = new invDupe[this.rocket.maxCapacity];
      for (int index = 0; index < this.rocket.maxCapacity; ++index)
        this.rocket.dupe[index] = new invDupe(index + 17000);
      this.rocket.stream = new BloodnBacon4PT.instancedObject[this.rocket.maxCapacity];
      this.rocket.sound = this.Content.Load<SoundEffect>("audio\\rocketJunk");
      this.pill = new BloodnBacon4PT.pickup();
      this.pill.max = 0;
      this.pill.maxCapacity = 10;
      this.pill.index = 0;
      this.pill.model = this.Content.Load<Model>("Models//powerpill2");
      this.pill.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.pill.maxCapacity, BufferUsage.WriteOnly);
      this.pill.displayList = new BloodnBacon4PT.instancedObject[this.pill.maxCapacity];
      this.pill.dupe = new invDupe[this.pill.maxCapacity];
      for (int index = 0; index < this.pill.maxCapacity; ++index)
        this.pill.dupe[index] = new invDupe(index + 17000);
      this.pill.stream = new BloodnBacon4PT.instancedObject[this.pill.maxCapacity];
      this.pill.sound = this.Content.Load<SoundEffect>("audio\\pillrattle2");
      this.grenade = new BloodnBacon4PT.pickup();
      this.grenade.max = 0;
      this.grenade.maxCapacity = 50;
      this.grenade.index = 0;
      this.grenade.model = this.Content.Load<Model>("Models//grenade");
      this.grenade.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.grenade.maxCapacity, BufferUsage.WriteOnly);
      this.grenade.displayList = new BloodnBacon4PT.instancedObject[this.grenade.maxCapacity];
      this.grenade.dupe = new invDupe[this.grenade.maxCapacity];
      for (int index = 0; index < this.grenade.maxCapacity; ++index)
        this.grenade.dupe[index] = new invDupe(index + 37090);
      this.grenade.stream = new BloodnBacon4PT.instancedObject[this.grenade.maxCapacity];
      this.grenade.sound = this.Content.Load<SoundEffect>("audio//grenadeThump");
      this.grenadeThrow = new BloodnBacon4PT.pickup();
      this.grenadeThrow.max = 0;
      this.grenadeThrow.maxCapacity = 55;
      this.grenadeThrow.index = 0;
      this.grenadeThrow.model = this.Content.Load<Model>("Models//grenade");
      this.grenadeThrow.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.grenadeThrow.maxCapacity, BufferUsage.WriteOnly);
      this.grenadeThrow.displayList = new BloodnBacon4PT.instancedObject[this.grenadeThrow.maxCapacity];
      this.grenadeThrow.dupe = new invDupe[this.grenadeThrow.maxCapacity];
      for (int index = 0; index < this.grenadeThrow.maxCapacity; ++index)
        this.grenadeThrow.dupe[index] = new invDupe(index + 67090);
      this.grenadeThrow.stream = new BloodnBacon4PT.instancedObject[this.grenadeThrow.maxCapacity];
      this.debris = new BloodnBacon4PT.pickup();
      this.debris.max = 0;
      this.debris.maxCapacity = 400;
      this.debris.index = 0;
      this.debris.model = this.Content.Load<Model>("Models//debris");
      this.debris.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.debris.maxCapacity, BufferUsage.WriteOnly);
      this.debris.displayList = new BloodnBacon4PT.instancedObject[this.debris.maxCapacity];
      this.debris.dupe = new invDupe[this.debris.maxCapacity];
      for (int index = 0; index < this.debris.maxCapacity; ++index)
        this.debris.dupe[index] = new invDupe(index + 17092);
      this.debris.stream = new BloodnBacon4PT.instancedObject[this.debris.maxCapacity];
      this.debris.sound = this.Content.Load<SoundEffect>("audio//debrishit");
      this.mirvs1 = new BloodnBacon4PT.streak();
      this.mirvs1.max = 0;
      this.mirvs1.maxCapacity = 25;
      this.mirvs1.index = 0;
      this.mirvs1.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.mirvs1.maxCapacity, BufferUsage.WriteOnly);
      this.mirvs1.trans = new Matrix[this.mirvs1.maxCapacity];
      this.mirvs1.slide = new float[this.mirvs1.maxCapacity];
      this.mirvs1.model = this.Content.Load<Model>("Models//streak");
      this.mirvs1.stream = new BloodnBacon4PT.instancedObject[this.mirvs1.maxCapacity];
      this.mirvs1.fall = new bool[this.mirvs1.maxCapacity];
      this.mirvs1.bomb = new bool[this.mirvs1.maxCapacity];
      this.mirvs1.trigger = new int[this.mirvs1.maxCapacity];
      this.mirvs1.fallSpeed = new float[this.mirvs1.maxCapacity];
      this.mirvs2 = new BloodnBacon4PT.streak();
      this.mirvs2.max = 0;
      this.mirvs2.maxCapacity = 25;
      this.mirvs2.index = 0;
      this.mirvs2.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.mirvs2.maxCapacity, BufferUsage.WriteOnly);
      this.mirvs2.trans = new Matrix[this.mirvs2.maxCapacity];
      this.mirvs2.slide = new float[this.mirvs2.maxCapacity];
      this.mirvs2.model = this.Content.Load<Model>("Models//streak");
      this.mirvs2.stream = new BloodnBacon4PT.instancedObject[this.mirvs2.maxCapacity];
      this.mirvs2.fall = new bool[this.mirvs2.maxCapacity];
      this.mirvs2.bomb = new bool[this.mirvs2.maxCapacity];
      this.mirvs2.trigger = new int[this.mirvs2.maxCapacity];
      this.mirvs2.fallSpeed = new float[this.mirvs2.maxCapacity];
      this.revolver = new BloodnBacon4PT.liveShell();
      this.revolver.max = 0;
      this.revolver.model = this.sc.shellPack[0];
      this.revolver.tempindex = 7;
      this.revolver.index = 0;
      this.revolver.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, 7, BufferUsage.WriteOnly);
      this.revolver.displayList = new BloodnBacon4PT.instancedObject[7];
      this.revolver.trans = new Matrix[7];
      this.revolver.trans[0] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(-1.57079613f) * Matrix.CreateRotationY(-1.458833f) * Matrix.CreateRotationZ(1.57079613f) * Matrix.CreateTranslation(-0.3755331f, 0.289013535f, 0.372121364f);
      this.revolver.trans[1] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(1.57079613f) * Matrix.CreateRotationY(-0.483028829f) * Matrix.CreateRotationZ(-1.57079613f) * Matrix.CreateTranslation(-0.381899118f, -0.116957612f, 0.4514679f);
      this.revolver.trans[2] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(-1.57079613f) * Matrix.CreateRotationY(-1.458833f) * Matrix.CreateRotationZ(1.57079613f) * Matrix.CreateTranslation(-0.381899118f, -0.461989552f, 0.1584955f);
      this.revolver.trans[3] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(-1.57079613f) * Matrix.CreateRotationY(-1.20586991f) * Matrix.CreateRotationZ(1.57079613f) * Matrix.CreateTranslation(-0.365426183f, -0.423615843f, -0.259969324f);
      this.revolver.trans[4] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(-1.57079613f) * Matrix.CreateRotationY(-1.458833f) * Matrix.CreateRotationZ(1.57079613f) * Matrix.CreateTranslation(-0.381899118f, -0.0711370558f, -0.50338614f);
      this.revolver.trans[5] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(-1.57079613f) * Matrix.CreateRotationY(-0.8312921f) * Matrix.CreateRotationZ(1.57079613f) * Matrix.CreateTranslation(-0.398011148f, 0.33024f, -0.387195975f);
      this.revolver.trans[6] = Matrix.CreateScale(0.2507157f, 0.2507157f, 0.220558867f) * Matrix.CreateRotationX(1.57079613f) * Matrix.CreateRotationY(-1.36498511f) * Matrix.CreateRotationZ(-1.57079613f) * Matrix.CreateTranslation(-0.404719651f, 0.49663654f, 0.000188166814f);
      this.primShell = new BloodnBacon4PT.shell();
      this.primShell.max = 0;
      this.primShell.maxCapacity = 80;
      this.primShell.index = 0;
      this.primShell.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.primShell.maxCapacity, BufferUsage.WriteOnly);
      this.primShell.displayList = new BloodnBacon4PT.instancedObject[this.primShell.maxCapacity];
      this.primShell.dupe = new dupeItem[this.primShell.maxCapacity];
      for (int i = 0; i < this.primShell.maxCapacity; ++i)
        this.primShell.dupe[i] = new dupeItem(i);
      this.primShell.stream = new BloodnBacon4PT.instancedObject[this.primShell.maxCapacity];
      this.secondShell = new BloodnBacon4PT.shell();
      this.secondShell.max = 0;
      this.secondShell.maxCapacity = 80;
      this.secondShell.index = 0;
      this.secondShell.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.secondShell.maxCapacity, BufferUsage.WriteOnly);
      this.secondShell.displayList = new BloodnBacon4PT.instancedObject[this.secondShell.maxCapacity];
      this.secondShell.dupe = new dupeItem[this.secondShell.maxCapacity];
      for (int i = 0; i < this.secondShell.maxCapacity; ++i)
        this.secondShell.dupe[i] = new dupeItem(i);
      this.secondShell.stream = new BloodnBacon4PT.instancedObject[this.secondShell.maxCapacity];
      this.primShell_rem = new BloodnBacon4PT.shell();
      this.primShell_rem.max = 0;
      this.primShell_rem.maxCapacity = 80;
      this.primShell_rem.index = 0;
      this.primShell_rem.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.primShell_rem.maxCapacity, BufferUsage.WriteOnly);
      this.primShell_rem.displayList = new BloodnBacon4PT.instancedObject[this.primShell_rem.maxCapacity];
      this.primShell_rem.dupe = new dupeItem[this.primShell_rem.maxCapacity];
      for (int i = 0; i < this.primShell_rem.maxCapacity; ++i)
        this.primShell_rem.dupe[i] = new dupeItem(i);
      this.primShell_rem.stream = new BloodnBacon4PT.instancedObject[this.primShell_rem.maxCapacity];
      this.secondShell_rem = new BloodnBacon4PT.shell();
      this.secondShell_rem.max = 0;
      this.secondShell_rem.maxCapacity = 80;
      this.secondShell_rem.index = 0;
      this.secondShell_rem.buffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.instanceDec, this.secondShell_rem.maxCapacity, BufferUsage.WriteOnly);
      this.secondShell_rem.displayList = new BloodnBacon4PT.instancedObject[this.secondShell_rem.maxCapacity];
      this.secondShell_rem.dupe = new dupeItem[this.secondShell_rem.maxCapacity];
      for (int i = 0; i < this.secondShell_rem.maxCapacity; ++i)
        this.secondShell_rem.dupe[i] = new dupeItem(i);
      this.secondShell_rem.stream = new BloodnBacon4PT.instancedObject[this.secondShell_rem.maxCapacity];
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Big Models --- done";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Particles1";
      this.electric = (ParticleSystem) new electricSystem(this.sc.Game, this.Content);
      this.electric.Initialize();
      if (Princess4.cuttyCount == 1)
        this.electric.settings.TextureName = "electric2";
      this.electric.LoadContent(this.sc.GraphicsDevice);
      this.lampGlow = (ParticleSystem) new lampSystem(this.sc.Game, this.Content);
      this.lampGlow.Initialize();
      this.lampGlow.LoadContent(this.sc.GraphicsDevice);
      this.farmerspit = (ParticleSystem) new farmerSpit(this.sc.Game, this.Content);
      this.farmerspit.Initialize();
      this.farmerspit.LoadContent(this.sc.GraphicsDevice);
      this.gunsmoke = (ParticleSystem) new gunsmokeSystem(this.sc.Game, this.Content);
      this.gunsmoke.Initialize();
      this.gunsmoke.LoadContent(this.sc.GraphicsDevice);
      this.rocketsmoke = (ParticleSystem) new rocketSystem(this.sc.Game, this.Content);
      this.rocketsmoke.Initialize();
      this.rocketsmoke.LoadContent(this.sc.GraphicsDevice);
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Particles1 --- done";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Sprites";
      float x1 = 3f;
      float z1 = 6f;
      this.muzzleRect = new Vector4[18];
      this.muzzleRect[0] = new Vector4(x1, 0.0f, z1, 0.0f);
      this.muzzleRect[1] = new Vector4(x1, 0.0f, z1, 0.166666672f);
      this.muzzleRect[2] = new Vector4(x1, 0.333333343f, z1, 0.0f);
      this.muzzleRect[3] = new Vector4(x1, 0.333333343f, z1, 0.166666672f);
      this.muzzleRect[4] = new Vector4(x1, 0.6666667f, z1, 0.0f);
      this.muzzleRect[5] = new Vector4(x1, 0.6666667f, z1, 0.166666672f);
      this.muzzleRect[6] = new Vector4(x1, 0.0f, z1, 0.333333343f);
      this.muzzleRect[7] = new Vector4(x1, 0.0f, z1, 0.5f);
      this.muzzleRect[8] = new Vector4(x1, 0.333333343f, z1, 0.333333343f);
      this.muzzleRect[9] = new Vector4(x1, 0.333333343f, z1, 0.5f);
      this.muzzleRect[10] = new Vector4(x1, 0.6666667f, z1, 0.333333343f);
      this.muzzleRect[11] = new Vector4(x1, 0.6666667f, z1, 0.5f);
      this.muzzleRect[12] = new Vector4(x1, 0.0f, z1, 0.6666667f);
      this.muzzleRect[13] = new Vector4(x1, 0.0f, z1, 0.8333333f);
      this.muzzleRect[14] = new Vector4(x1, 0.333333343f, z1, 0.6666667f);
      this.muzzleRect[15] = new Vector4(x1, 0.333333343f, z1, 0.8333333f);
      this.muzzleRect[16] = new Vector4(x1, 0.6666667f, z1, 0.6666667f);
      this.muzzleRect[17] = new Vector4(x1, 0.6666667f, z1, 0.8333333f);
      float x2 = 3f;
      float z2 = 6f;
      this.blastRect = new Vector4[18];
      this.blastRect[0] = new Vector4(x2, 0.0f, z2, 0.0f);
      this.blastRect[1] = new Vector4(x2, 0.333333343f, z2, 0.0f);
      this.blastRect[2] = new Vector4(x2, 0.6666667f, z2, 0.0f);
      this.blastRect[3] = new Vector4(x2, 0.0f, z2, 0.166666672f);
      this.blastRect[4] = new Vector4(x2, 0.333333343f, z2, 0.166666672f);
      this.blastRect[5] = new Vector4(x2, 0.6666667f, z2, 0.166666672f);
      this.blastRect[6] = new Vector4(x2, 0.0f, z2, 0.333333343f);
      this.blastRect[7] = new Vector4(x2, 0.333333343f, z2, 0.333333343f);
      this.blastRect[8] = new Vector4(x2, 0.6666667f, z2, 0.333333343f);
      this.blastRect[9] = new Vector4(x2, 0.0f, z2, 0.5f);
      this.blastRect[10] = new Vector4(x2, 0.333333343f, z2, 0.5f);
      this.blastRect[11] = new Vector4(x2, 0.6666667f, z2, 0.5f);
      this.blastRect[12] = new Vector4(x2, 0.0f, z2, 0.6666667f);
      this.blastRect[13] = new Vector4(x2, 0.333333343f, z2, 0.6666667f);
      this.blastRect[14] = new Vector4(x2, 0.6666667f, z2, 0.6666667f);
      this.blastRect[15] = new Vector4(x2, 0.0f, z2, 0.8333333f);
      this.blastRect[16] = new Vector4(x2, 0.333333343f, z2, 0.8333333f);
      this.blastRect[17] = new Vector4(x2, 0.6666667f, z2, 0.8333333f);
      this.grenExplosion = new BloodnBacon4PT.hole();
      this.grenExplosion.stainR = new Vector4[88];
      this.grenExplosion.stainR[0] = new Vector4(320f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[1] = new Vector4(320f, 240f, 320f, 240f);
      this.grenExplosion.stainR[2] = new Vector4(640f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[3] = new Vector4(640f, 240f, 320f, 240f);
      this.grenExplosion.stainR[4] = new Vector4(0.0f, 480f, 320f, 240f);
      this.grenExplosion.stainR[5] = new Vector4(0.0f, 720f, 320f, 240f);
      this.grenExplosion.stainR[6] = new Vector4(320f, 480f, 320f, 240f);
      this.grenExplosion.stainR[7] = new Vector4(320f, 720f, 320f, 240f);
      this.grenExplosion.stainR[8] = new Vector4(640f, 480f, 320f, 240f);
      this.grenExplosion.stainR[9] = new Vector4(640f, 720f, 320f, 240f);
      this.grenExplosion.stainR[10] = new Vector4(960f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[11] = new Vector4(960f, 240f, 320f, 240f);
      this.grenExplosion.stainR[12] = new Vector4(1280f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[13] = new Vector4(960f, 480f, 320f, 240f);
      this.grenExplosion.stainR[14] = new Vector4(1280f, 240f, 320f, 240f);
      this.grenExplosion.stainR[15] = new Vector4(1600f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[16] = new Vector4(960f, 720f, 320f, 240f);
      this.grenExplosion.stainR[17] = new Vector4(1280f, 480f, 320f, 240f);
      this.grenExplosion.stainR[18] = new Vector4(1600f, 240f, 320f, 240f);
      this.grenExplosion.stainR[19] = new Vector4(1280f, 720f, 320f, 240f);
      this.grenExplosion.stainR[20] = new Vector4(1600f, 480f, 320f, 240f);
      this.grenExplosion.stainR[21] = new Vector4(1600f, 720f, 320f, 240f);
      this.grenExplosion.stainR[22] = new Vector4(0.0f, 960f, 320f, 240f);
      this.grenExplosion.stainR[23] = new Vector4(0.0f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[24] = new Vector4(320f, 960f, 320f, 240f);
      this.grenExplosion.stainR[25] = new Vector4(0.0f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[26] = new Vector4(320f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[27] = new Vector4(640f, 960f, 320f, 240f);
      this.grenExplosion.stainR[28] = new Vector4(0.0f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[29] = new Vector4(320f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[30] = new Vector4(640f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[31] = new Vector4(960f, 960f, 320f, 240f);
      this.grenExplosion.stainR[32] = new Vector4(320f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[33] = new Vector4(640f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[34] = new Vector4(960f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[35] = new Vector4(1280f, 960f, 320f, 240f);
      this.grenExplosion.stainR[36] = new Vector4(640f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[37] = new Vector4(960f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[38] = new Vector4(1280f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[39] = new Vector4(1600f, 960f, 320f, 240f);
      this.grenExplosion.stainR[40] = new Vector4(960f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[41] = new Vector4(1280f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[42] = new Vector4(1600f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[43] = new Vector4(1280f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[44] = new Vector4(1600f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[45] = new Vector4(1600f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[46] = new Vector4(1920f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[47] = new Vector4(1920f, 240f, 320f, 240f);
      this.grenExplosion.stainR[48] = new Vector4(2240f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[49] = new Vector4(1920f, 480f, 320f, 240f);
      this.grenExplosion.stainR[50] = new Vector4(2240f, 240f, 320f, 240f);
      this.grenExplosion.stainR[51] = new Vector4(2560f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[52] = new Vector4(1920f, 720f, 320f, 240f);
      this.grenExplosion.stainR[53] = new Vector4(2240f, 480f, 320f, 240f);
      this.grenExplosion.stainR[54] = new Vector4(2560f, 240f, 320f, 240f);
      this.grenExplosion.stainR[55] = new Vector4(1920f, 960f, 320f, 240f);
      this.grenExplosion.stainR[56] = new Vector4(2880f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[57] = new Vector4(2240f, 720f, 320f, 240f);
      this.grenExplosion.stainR[58] = new Vector4(2560f, 480f, 320f, 240f);
      this.grenExplosion.stainR[59] = new Vector4(1920f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[60] = new Vector4(2880f, 240f, 320f, 240f);
      this.grenExplosion.stainR[61] = new Vector4(2240f, 960f, 320f, 240f);
      this.grenExplosion.stainR[62] = new Vector4(3200f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[63] = new Vector4(2560f, 720f, 320f, 240f);
      this.grenExplosion.stainR[64] = new Vector4(2880f, 480f, 320f, 240f);
      this.grenExplosion.stainR[65] = new Vector4(1920f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[66] = new Vector4(2240f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[67] = new Vector4(3200f, 240f, 320f, 240f);
      this.grenExplosion.stainR[68] = new Vector4(2560f, 960f, 320f, 240f);
      this.grenExplosion.stainR[69] = new Vector4(3520f, 0.0f, 320f, 240f);
      this.grenExplosion.stainR[70] = new Vector4(1920f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[71] = new Vector4(2880f, 720f, 320f, 240f);
      this.grenExplosion.stainR[72] = new Vector4(3200f, 480f, 320f, 240f);
      this.grenExplosion.stainR[73] = new Vector4(2240f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[74] = new Vector4(3520f, 240f, 320f, 240f);
      this.grenExplosion.stainR[75] = new Vector4(2560f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[76] = new Vector4(2880f, 960f, 320f, 240f);
      this.grenExplosion.stainR[77] = new Vector4(2240f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[78] = new Vector4(3200f, 720f, 320f, 240f);
      this.grenExplosion.stainR[79] = new Vector4(2560f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[80] = new Vector4(3520f, 480f, 320f, 240f);
      this.grenExplosion.stainR[81] = new Vector4(2880f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[82] = new Vector4(3200f, 960f, 320f, 240f);
      this.grenExplosion.stainR[83] = new Vector4(2560f, 1680f, 320f, 240f);
      this.grenExplosion.stainR[84] = new Vector4(3520f, 720f, 320f, 240f);
      this.grenExplosion.stainR[85] = new Vector4(2880f, 1440f, 320f, 240f);
      this.grenExplosion.stainR[86] = new Vector4(3200f, 1200f, 320f, 240f);
      this.grenExplosion.stainR[87] = new Vector4(3520f, 960f, 320f, 240f);
      this.grenExplosion.stainMax = 0;
      this.grenExplosion.stainIndex = 0;
      this.grenExplosion.stainCapacity = 15;
      this.grenExplosion.inAir = new bool[this.grenExplosion.stainCapacity];
      this.grenExplosion.isLocal = new bool[this.grenExplosion.stainCapacity];
      this.grenExplosion.frame = new int[this.grenExplosion.stainCapacity];
      this.grenExplosion.scaleRot = new Matrix[this.grenExplosion.stainCapacity];
      this.grenExplosion.stainTrans = new BloodnBacon4PT.hitStream[this.grenExplosion.stainCapacity];
      this.grenExplosion.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.grenExplosion.stainCapacity, BufferUsage.WriteOnly);
      this.mirvExplosion = new BloodnBacon4PT.hole();
      this.mirvExplosion.stainR = new Vector4[88];
      this.mirvExplosion.stainR[0] = new Vector4(320f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[1] = new Vector4(320f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[2] = new Vector4(640f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[3] = new Vector4(640f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[4] = new Vector4(0.0f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[5] = new Vector4(0.0f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[6] = new Vector4(320f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[7] = new Vector4(320f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[8] = new Vector4(640f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[9] = new Vector4(640f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[10] = new Vector4(960f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[11] = new Vector4(960f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[12] = new Vector4(1280f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[13] = new Vector4(960f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[14] = new Vector4(1280f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[15] = new Vector4(1600f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[16] = new Vector4(960f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[17] = new Vector4(1280f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[18] = new Vector4(1600f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[19] = new Vector4(1280f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[20] = new Vector4(1600f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[21] = new Vector4(1600f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[22] = new Vector4(0.0f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[23] = new Vector4(0.0f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[24] = new Vector4(320f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[25] = new Vector4(0.0f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[26] = new Vector4(320f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[27] = new Vector4(640f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[28] = new Vector4(0.0f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[29] = new Vector4(320f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[30] = new Vector4(640f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[31] = new Vector4(960f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[32] = new Vector4(320f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[33] = new Vector4(640f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[34] = new Vector4(960f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[35] = new Vector4(1280f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[36] = new Vector4(640f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[37] = new Vector4(960f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[38] = new Vector4(1280f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[39] = new Vector4(1600f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[40] = new Vector4(960f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[41] = new Vector4(1280f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[42] = new Vector4(1600f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[43] = new Vector4(1280f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[44] = new Vector4(1600f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[45] = new Vector4(1600f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[46] = new Vector4(1920f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[47] = new Vector4(1920f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[48] = new Vector4(2240f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[49] = new Vector4(1920f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[50] = new Vector4(2240f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[51] = new Vector4(2560f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[52] = new Vector4(1920f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[53] = new Vector4(2240f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[54] = new Vector4(2560f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[55] = new Vector4(1920f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[56] = new Vector4(2880f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[57] = new Vector4(2240f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[58] = new Vector4(2560f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[59] = new Vector4(1920f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[60] = new Vector4(2880f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[61] = new Vector4(2240f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[62] = new Vector4(3200f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[63] = new Vector4(2560f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[64] = new Vector4(2880f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[65] = new Vector4(1920f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[66] = new Vector4(2240f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[67] = new Vector4(3200f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[68] = new Vector4(2560f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[69] = new Vector4(3520f, 0.0f, 320f, 240f);
      this.mirvExplosion.stainR[70] = new Vector4(1920f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[71] = new Vector4(2880f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[72] = new Vector4(3200f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[73] = new Vector4(2240f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[74] = new Vector4(3520f, 240f, 320f, 240f);
      this.mirvExplosion.stainR[75] = new Vector4(2560f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[76] = new Vector4(2880f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[77] = new Vector4(2240f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[78] = new Vector4(3200f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[79] = new Vector4(2560f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[80] = new Vector4(3520f, 480f, 320f, 240f);
      this.mirvExplosion.stainR[81] = new Vector4(2880f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[82] = new Vector4(3200f, 960f, 320f, 240f);
      this.mirvExplosion.stainR[83] = new Vector4(2560f, 1680f, 320f, 240f);
      this.mirvExplosion.stainR[84] = new Vector4(3520f, 720f, 320f, 240f);
      this.mirvExplosion.stainR[85] = new Vector4(2880f, 1440f, 320f, 240f);
      this.mirvExplosion.stainR[86] = new Vector4(3200f, 1200f, 320f, 240f);
      this.mirvExplosion.stainR[87] = new Vector4(3520f, 960f, 320f, 240f);
      this.mirvExplosion.stainMax = 0;
      this.mirvExplosion.stainIndex = 0;
      this.mirvExplosion.stainCapacity = 55;
      this.mirvExplosion.inAir = new bool[this.mirvExplosion.stainCapacity];
      this.mirvExplosion.isLocal = new bool[this.mirvExplosion.stainCapacity];
      this.mirvExplosion.frame = new int[this.mirvExplosion.stainCapacity];
      this.mirvExplosion.scaleRot = new Matrix[this.mirvExplosion.stainCapacity];
      this.mirvExplosion.stainTrans = new BloodnBacon4PT.hitStream[this.mirvExplosion.stainCapacity];
      this.mirvExplosion.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.mirvExplosion.stainCapacity, BufferUsage.WriteOnly);
      this.farm = new BloodnBacon4PT.hole();
      this.farm.stainR = new Vector4[this.totalzots];
      this.farm.stainR[0] = new Vector4(0.0f, 0.0f, 100f, 100f);
      this.farm.stainR[1] = new Vector4(100f, 0.0f, 100f, 100f);
      this.farm.stainR[2] = new Vector4(200f, 0.0f, 100f, 100f);
      this.farm.stainR[3] = new Vector4(0.0f, 100f, 100f, 100f);
      this.farm.stainR[4] = new Vector4(100f, 100f, 100f, 100f);
      this.farm.stainR[5] = new Vector4(200f, 100f, 100f, 100f);
      this.farm.stainR[6] = new Vector4(0.0f, 200f, 100f, 100f);
      this.farm.stainR[7] = new Vector4(100f, 200f, 100f, 100f);
      this.farm.stainR[8] = new Vector4(200f, 200f, 100f, 100f);
      this.farm.stainR[9] = new Vector4(0.0f, 300f, 100f, 100f);
      this.farm.stainR[10] = new Vector4(100f, 300f, 100f, 100f);
      this.farm.stainR[11] = new Vector4(200f, 300f, 100f, 100f);
      this.farm.stainR[12] = new Vector4(0.0f, 400f, 100f, 100f);
      this.farm.stainR[13] = new Vector4(100f, 400f, 100f, 100f);
      this.farm.stainR[14] = new Vector4(200f, 400f, 100f, 100f);
      this.farm.stainR[15] = new Vector4(0.0f, 500f, 150f, 150f);
      this.farm.stainR[16] = new Vector4(150f, 500f, 150f, 150f);
      this.farm.stainR[17] = new Vector4(0.0f, 650f, 150f, 150f);
      this.farm.stainR[18] = new Vector4(150f, 650f, 150f, 150f);
      this.farm.stainR[19] = new Vector4(0.0f, 800f, 100f, 100f);
      this.farm.stainR[20] = new Vector4(100f, 800f, 100f, 100f);
      this.farm.stainR[21] = new Vector4(200f, 800f, 100f, 100f);
      this.farm.stainR[22] = new Vector4(0.0f, 900f, 100f, 100f);
      this.farm.stainR[23] = new Vector4(100f, 900f, 100f, 100f);
      this.farm.stainR[24] = new Vector4(200f, 900f, 100f, 100f);
      this.farm.stainR[25] = new Vector4(0.0f, 1000f, 100f, 100f);
      this.farm.stainR[26] = new Vector4(100f, 1000f, 100f, 100f);
      this.farm.stainR[27] = new Vector4(200f, 1000f, 100f, 100f);
      this.farm.stainR[28] = new Vector4(0.0f, 1100f, 100f, 100f);
      this.farm.stainR[29] = new Vector4(100f, 1100f, 100f, 100f);
      this.farm.stainR[30] = new Vector4(200f, 1100f, 100f, 100f);
      this.farm.stainR[31] = new Vector4(0.0f, 1200f, 100f, 100f);
      this.farm.stainR[32] = new Vector4(100f, 1200f, 100f, 100f);
      this.farm.stainR[33] = new Vector4(200f, 1200f, 100f, 100f);
      this.farm.stainR[34] = new Vector4(0.0f, 1300f, 100f, 100f);
      this.farm.stainR[35] = new Vector4(100f, 1300f, 100f, 100f);
      this.farm.stainR[36] = new Vector4(200f, 1300f, 100f, 100f);
      this.farm.stainR[37] = new Vector4(0.0f, 1400f, 100f, 100f);
      this.farm.stainR[38] = new Vector4(100f, 1400f, 100f, 100f);
      this.farm.stainR[39] = new Vector4(200f, 1400f, 100f, 100f);
      this.farm.stainR[40] = new Vector4(0.0f, 1500f, 100f, 100f);
      this.farm.stainR[41] = new Vector4(100f, 1500f, 100f, 100f);
      this.farm.stainR[42] = new Vector4(200f, 1500f, 100f, 100f);
      this.farm.stainR[43] = new Vector4(0.0f, 1600f, 100f, 100f);
      this.farm.stainR[44] = new Vector4(100f, 1700f, 100f, 100f);
      this.farm.stainR[45] = new Vector4(200f, 1700f, 100f, 100f);
      this.farm.stainR[46] = new Vector4(0.0f, 1700f, 100f, 100f);
      if (this.totalzots > 47)
      {
        this.farm.stainR[47] = new Vector4(100f, 1800f, 100f, 100f);
        this.farm.stainR[48] = new Vector4(200f, 1800f, 100f, 100f);
        this.farm.stainR[49] = new Vector4(0.0f, 1800f, 100f, 100f);
        this.farm.stainR[50] = new Vector4(100f, 1900f, 100f, 100f);
        this.farm.stainR[51] = new Vector4(200f, 1900f, 100f, 100f);
        this.farm.stainR[52] = new Vector4(0.0f, 1900f, 100f, 100f);
        this.farm.stainR[53] = new Vector4(100f, 2000f, 100f, 100f);
        this.farm.stainR[54] = new Vector4(200f, 2000f, 100f, 100f);
        this.farm.stainR[55] = new Vector4(0.0f, 2000f, 100f, 100f);
        this.farm.stainR[56] = new Vector4(100f, 2100f, 100f, 100f);
        this.farm.stainR[57] = new Vector4(200f, 2100f, 100f, 100f);
        this.farm.stainR[58] = new Vector4(0.0f, 2100f, 100f, 100f);
        this.farm.stainR[59] = new Vector4(100f, 2200f, 100f, 100f);
        this.farm.stainR[60] = new Vector4(200f, 2200f, 100f, 100f);
        this.farm.stainR[61] = new Vector4(0.0f, 2200f, 100f, 100f);
        this.farm.stainR[62] = new Vector4(100f, 2300f, 100f, 100f);
        this.farm.stainR[63] = new Vector4(200f, 2300f, 100f, 100f);
        this.farm.stainR[64] = new Vector4(0.0f, 2300f, 100f, 100f);
      }
      this.farm.stainMax = 0;
      this.farm.stainIndex = 0;
      this.farm.stainCapacity = 2500;
      this.farm.stainTrans = new BloodnBacon4PT.hitStream[this.farm.stainCapacity];
      this.farm.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.farm.stainCapacity, BufferUsage.WriteOnly);
      this.hudsplats = new BloodnBacon4PT.hole();
      this.hudsplats.stainR = new Vector4[12];
      this.hudsplats.stainR[0] = new Vector4(0.0f, 0.0f, 200f, 200f);
      this.hudsplats.stainR[1] = new Vector4(200f, 0.0f, 200f, 200f);
      this.hudsplats.stainR[2] = new Vector4(400f, 0.0f, 200f, 200f);
      this.hudsplats.stainR[3] = new Vector4(0.0f, 200f, 200f, 200f);
      this.hudsplats.stainR[4] = new Vector4(200f, 200f, 200f, 200f);
      this.hudsplats.stainR[5] = new Vector4(400f, 200f, 200f, 200f);
      this.hudsplats.stainR[6] = new Vector4(0.0f, 400f, 200f, 200f);
      this.hudsplats.stainR[7] = new Vector4(200f, 400f, 200f, 200f);
      this.hudsplats.stainR[8] = new Vector4(400f, 400f, 200f, 200f);
      this.hudsplats.stainR[9] = new Vector4(0.0f, 600f, 200f, 200f);
      this.hudsplats.stainR[10] = new Vector4(200f, 600f, 200f, 200f);
      this.hudsplats.stainR[11] = new Vector4(400f, 600f, 200f, 200f);
      this.hudsplats.stainMax = 0;
      this.hudsplats.stainIndex = 0;
      this.hudsplats.stainCapacity = 50;
      this.hudsplats.drift = new float[this.hudsplats.stainCapacity];
      this.hudsplats.stainTrans = new BloodnBacon4PT.hitStream[this.hudsplats.stainCapacity];
      this.hudsplats.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.hudsplats.stainCapacity, BufferUsage.WriteOnly);
      this.door = new BloodnBacon4PT.hole();
      this.door.stainR = new Vector4[this.totalzots];
      this.door.stainR[0] = new Vector4(0.0f, 0.0f, 100f, 100f);
      this.door.stainR[1] = new Vector4(100f, 0.0f, 100f, 100f);
      this.door.stainR[2] = new Vector4(200f, 0.0f, 100f, 100f);
      this.door.stainR[3] = new Vector4(0.0f, 100f, 100f, 100f);
      this.door.stainR[4] = new Vector4(100f, 100f, 100f, 100f);
      this.door.stainR[5] = new Vector4(200f, 100f, 100f, 100f);
      this.door.stainR[6] = new Vector4(0.0f, 200f, 100f, 100f);
      this.door.stainR[7] = new Vector4(100f, 200f, 100f, 100f);
      this.door.stainR[8] = new Vector4(200f, 200f, 100f, 100f);
      this.door.stainR[9] = new Vector4(0.0f, 300f, 100f, 100f);
      this.door.stainR[10] = new Vector4(100f, 300f, 100f, 100f);
      this.door.stainR[11] = new Vector4(200f, 300f, 100f, 100f);
      this.door.stainR[12] = new Vector4(0.0f, 400f, 100f, 100f);
      this.door.stainR[13] = new Vector4(100f, 400f, 100f, 100f);
      this.door.stainR[14] = new Vector4(200f, 400f, 100f, 100f);
      this.door.stainR[15] = new Vector4(0.0f, 500f, 150f, 150f);
      this.door.stainR[16] = new Vector4(150f, 500f, 150f, 150f);
      this.door.stainR[17] = new Vector4(0.0f, 650f, 150f, 150f);
      this.door.stainR[18] = new Vector4(150f, 650f, 150f, 150f);
      this.door.stainR[19] = new Vector4(0.0f, 800f, 100f, 100f);
      this.door.stainR[20] = new Vector4(100f, 800f, 100f, 100f);
      this.door.stainR[21] = new Vector4(200f, 800f, 100f, 100f);
      this.door.stainR[22] = new Vector4(0.0f, 900f, 100f, 100f);
      this.door.stainR[23] = new Vector4(100f, 900f, 100f, 100f);
      this.door.stainR[24] = new Vector4(200f, 900f, 100f, 100f);
      this.door.stainR[25] = new Vector4(0.0f, 1000f, 100f, 100f);
      this.door.stainR[26] = new Vector4(100f, 1000f, 100f, 100f);
      this.door.stainR[27] = new Vector4(200f, 1000f, 100f, 100f);
      this.door.stainR[28] = new Vector4(0.0f, 1100f, 100f, 100f);
      this.door.stainR[29] = new Vector4(100f, 1100f, 100f, 100f);
      this.door.stainR[30] = new Vector4(200f, 1100f, 100f, 100f);
      this.door.stainR[31] = new Vector4(0.0f, 1200f, 100f, 100f);
      this.door.stainR[32] = new Vector4(100f, 1200f, 100f, 100f);
      this.door.stainR[33] = new Vector4(200f, 1200f, 100f, 100f);
      this.door.stainR[34] = new Vector4(0.0f, 1300f, 100f, 100f);
      this.door.stainR[35] = new Vector4(100f, 1300f, 100f, 100f);
      this.door.stainR[36] = new Vector4(200f, 1300f, 100f, 100f);
      this.door.stainR[37] = new Vector4(0.0f, 1400f, 100f, 100f);
      this.door.stainR[38] = new Vector4(100f, 1400f, 100f, 100f);
      this.door.stainR[39] = new Vector4(200f, 1400f, 100f, 100f);
      this.door.stainR[40] = new Vector4(0.0f, 1500f, 100f, 100f);
      this.door.stainR[41] = new Vector4(100f, 1500f, 100f, 100f);
      this.door.stainR[42] = new Vector4(200f, 1500f, 100f, 100f);
      this.door.stainR[43] = new Vector4(0.0f, 1600f, 100f, 100f);
      this.door.stainR[44] = new Vector4(100f, 1700f, 100f, 100f);
      this.door.stainR[45] = new Vector4(200f, 1700f, 100f, 100f);
      this.door.stainR[46] = new Vector4(0.0f, 1700f, 100f, 100f);
      if (this.totalzots > 47)
      {
        this.door.stainR[47] = new Vector4(100f, 1800f, 100f, 100f);
        this.door.stainR[48] = new Vector4(200f, 1800f, 100f, 100f);
        this.door.stainR[49] = new Vector4(0.0f, 1800f, 100f, 100f);
        this.door.stainR[50] = new Vector4(100f, 1900f, 100f, 100f);
        this.door.stainR[51] = new Vector4(200f, 1900f, 100f, 100f);
        this.door.stainR[52] = new Vector4(0.0f, 1900f, 100f, 100f);
        this.door.stainR[53] = new Vector4(100f, 2000f, 100f, 100f);
        this.door.stainR[54] = new Vector4(200f, 2000f, 100f, 100f);
        this.door.stainR[55] = new Vector4(0.0f, 2000f, 100f, 100f);
        this.door.stainR[56] = new Vector4(100f, 2100f, 100f, 100f);
        this.door.stainR[57] = new Vector4(200f, 2100f, 100f, 100f);
        this.door.stainR[58] = new Vector4(0.0f, 2100f, 100f, 100f);
        this.door.stainR[59] = new Vector4(100f, 2200f, 100f, 100f);
        this.door.stainR[60] = new Vector4(200f, 2200f, 100f, 100f);
        this.door.stainR[61] = new Vector4(0.0f, 2200f, 100f, 100f);
        this.door.stainR[62] = new Vector4(100f, 2300f, 100f, 100f);
        this.door.stainR[63] = new Vector4(200f, 2300f, 100f, 100f);
        this.door.stainR[64] = new Vector4(0.0f, 2300f, 100f, 100f);
      }
      this.door.stainMax = 0;
      this.door.stainIndex = 0;
      this.door.stainCapacity = 100;
      this.door.stainTrans = new BloodnBacon4PT.hitStream[this.door.stainCapacity];
      this.door.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.door.stainCapacity, BufferUsage.WriteOnly);
      this.grinderButton = new BloodnBacon4PT.hole();
      this.grinderButton.stainR = new Vector4[25];
      this.grinderButton.stainR[0] = new Vector4(0.0f, 0.0f, 96f, 96f);
      this.grinderButton.stainR[1] = new Vector4(96f, 0.0f, 96f, 96f);
      this.grinderButton.stainR[2] = new Vector4(192f, 0.0f, 96f, 96f);
      this.grinderButton.stainR[3] = new Vector4(0.0f, 96f, 96f, 96f);
      this.grinderButton.stainR[4] = new Vector4(96f, 96f, 96f, 96f);
      this.grinderButton.stainR[5] = new Vector4(192f, 96f, 96f, 96f);
      this.grinderButton.stainR[6] = new Vector4(0.0f, 192f, 96f, 96f);
      this.grinderButton.stainR[7] = new Vector4(96f, 192f, 96f, 96f);
      this.grinderButton.stainR[8] = new Vector4(192f, 192f, 96f, 96f);
      this.grinderButton.stainR[9] = new Vector4(0.0f, 288f, 96f, 96f);
      this.grinderButton.stainR[10] = new Vector4(96f, 288f, 96f, 96f);
      this.grinderButton.stainR[11] = new Vector4(192f, 288f, 96f, 96f);
      this.grinderButton.stainR[12] = new Vector4(0.0f, 384f, 96f, 96f);
      this.grinderButton.stainR[13] = new Vector4(96f, 384f, 96f, 96f);
      this.grinderButton.stainR[14] = new Vector4(192f, 384f, 96f, 96f);
      this.grinderButton.stainR[15] = new Vector4(0.0f, 480f, 96f, 96f);
      this.grinderButton.stainR[16] = new Vector4(96f, 480f, 96f, 96f);
      this.grinderButton.stainR[17] = new Vector4(192f, 480f, 96f, 96f);
      this.grinderButton.stainR[18] = new Vector4(0.0f, 576f, 96f, 96f);
      this.grinderButton.stainR[19] = new Vector4(96f, 576f, 96f, 96f);
      this.grinderButton.stainR[20] = new Vector4(192f, 576f, 96f, 96f);
      this.grinderButton.stainR[21] = new Vector4(0.0f, 672f, 40f, 40f);
      this.grinderButton.stainR[22] = new Vector4(0.0f, 722f, 40f, 40f);
      this.grinderButton.stainR[23] = new Vector4(96f, 672f, 96f, 96f);
      this.grinderButton.stainR[24] = new Vector4(192f, 672f, 96f, 96f);
      this.grinderButton.stainMax = 0;
      this.grinderButton.stainIndex = 0;
      this.grinderButton.stainCapacity = 10;
      this.grinderButton.stainTrans = new BloodnBacon4PT.hitStream[this.grinderButton.stainCapacity];
      this.grinderButton.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.grinderButton.stainCapacity, BufferUsage.WriteOnly);
      Vector3 vector3_6 = new Vector3(3000f, 0.0f, 3000f);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1460f, 132.554f, -1570.2f), 1f, 0);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1437.2f, 132.554f, -1570.2f), 1f, 3);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1413.4f, 132.554f, -1570.2f), 1f, 6);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1389.3f, 132.554f, -1570.2f), 1f, 9);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1365f, 132.554f, -1570.2f), 1f, 12);
      this.buildButtons(ref this.grinderButton, new Vector3(1f, 1f, 1f), vector3_6 + new Vector3(-1341.35f, 132.554f, -1570.2f), 1f, 15);
      this.buildButtons(ref this.grinderButton, new Vector3(1.2f, 1.2f, 1f), vector3_6 + new Vector3(-1403f, 91.2f, -1570f), 1f, 18);
      this.buildButtons(ref this.grinderButton, new Vector3(0.5f, 1.2f, 0.147f), vector3_6 + new Vector3(-1463.3f, 157.734f, -1580.35f), 0.4f, 21);
      this.buildButtons(ref this.grinderButton, new Vector3(0.5f, 1.2f, 0.147f), vector3_6 + new Vector3(-1463.3f, 157.734f, -1580.35f), 0.4f, 22);
      this.int_3 = 40;
      this.int_4 = 60;
      this.int_5 = 100;
      this.int_6 = 140;
      this.int_7 = 280;
      this.int_8 = 300;
      this.button1state = -1;
      this.button2state = -1;
      this.button3state = -1;
      this.button4state = -1;
      this.button5state = -1;
      this.button6state = -1;
      this.button7state = -1;
      for (int button = 1; button < 8; ++button)
        this.setButton(button, 0);
      this.oldbloodLevel = -1f;
      this.grinderButton.stainMax = 8;
      if (this.sc.revengeDay > 0)
        this.xtend = 1;
      Model model = this.sc.heightmodel;
      int length = 200;
      if (this.xtend == 1)
      {
        model = this.sc.heightmodel2;
        length = 400;
      }
      float[] numArray4 = (float[]) ((Dictionary<string, object>) model.Tag)["Heights"];
      int index3 = 0;
      this.heights = new float[length, this.bitmap];
      this.farmheights = new float[length, this.bitmap];
      for (int index4 = 0; index4 < length; ++index4)
      {
        for (int index5 = 0; index5 < this.bitmap; ++index5)
        {
          this.heights[index4, index5] = numArray4[index3];
          this.farmheights[index4, index5] = numArray4[index3];
          ++index3;
        }
      }
      if (this.tunneladd)
      {
        float[] numArray5 = (float[]) ((Dictionary<string, object>) this.tunnel02heights.Tag)["Heights"];
        int index6 = 0;
        this.tunnelheights = new float[this.bitmap, this.bitmap];
        for (int index7 = 0; index7 < 200; ++index7)
        {
          for (int index8 = 0; index8 < this.bitmap; ++index8)
          {
            this.tunnelheights[index7, index8] = numArray5[index6];
            ++index6;
          }
        }
        if (this.mazeid > 0)
        {
          this.haveEntranceKey = true;
          if (this.sc.exitkey[this.mazeid - 1] == 1)
            this.haveEntranceKey = true;
        }
        else
          this.haveEntranceKey = true;
        this.enemy1 = new enemynpc(this.sc, this.Content, this.mazeid, ref this.tunnelheights);
        this.x1anim = new List<Matrix>();
        for (int index9 = 0; index9 < 500; ++index9)
        {
          try
          {
            this.x1anim.Add(this.model_0.Bones[index9].Transform);
          }
          catch
          {
          }
        }
        try
        {
          this.sc.goldKeys.kbPos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kb1"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kbPos.Y);
          this.sc.goldKeys.kbHide = true;
          if (this.mazeid == 2)
          {
            if (!this.sc.scarh_Unlock)
              this.sc.goldKeys.kbHide = false;
          }
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kePos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["ke"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kePos.Y);
          this.sc.goldKeys.keHide = this.sc.exitkey[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kmPos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["km"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kmPos.Y);
          this.sc.goldKeys.kmHide = this.sc.map[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kgPos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kg"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kgPos.Y);
          this.sc.goldKeys.kgHide = this.sc.goggles != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kh1Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kh1"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kh1Pos.Y);
          this.sc.goldKeys.kh1Hide = this.sc.hats[13] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kh2Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kh2"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kh2Pos.Y);
          this.sc.goldKeys.kh2Hide = this.sc.hats[14] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kh3Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kh3"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kh3Pos.Y);
          this.sc.goldKeys.kh3Hide = this.sc.hats[15] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kf1Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kf1"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kf1Pos.Y);
          this.sc.goldKeys.kf1Hide = this.sc.flashlight1 != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kf2Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kf2"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kf2Pos.Y);
          this.sc.goldKeys.kf2Hide = this.sc.flashlight2 != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kf3Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kf3"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kf3Pos.Y);
          this.sc.goldKeys.kf3Hide = this.sc.flashlight3 != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.ka1Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["ka1"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.ka1Pos.Y);
          this.sc.goldKeys.ka1Hide = this.sc.ammobox1[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.ka2Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["ka2"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.ka2Pos.Y);
          this.sc.goldKeys.ka2Hide = this.sc.ammobox2[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.ka3Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["ka3"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.ka3Pos.Y);
          this.sc.goldKeys.ka3Hide = this.sc.ammobox3[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kc1Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kc1"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kc1Pos.Y);
          this.sc.goldKeys.kc1Hide = this.sc.cog1[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kc2Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kc2"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kc2Pos.Y);
          this.sc.goldKeys.kc2Hide = this.sc.cog2[this.mazeid] != 0;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.kc3Pos = Vector3.Transform(Vector3.Zero, this.tunnel1.Bones["kc3"].Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.giveHeight(ref this.sc.goldKeys.kc3Pos.Y);
          this.sc.goldKeys.kc3Hide = this.sc.cog3[this.mazeid] != 0;
        }
        catch
        {
        }
        this.orange = new skullkins(this.sc, this.Content);
        for (int index10 = 1; index10 < 12; ++index10)
        {
          try
          {
            ModelBone bone1 = this.tunnel1.Bones["skull" + index10.ToString()];
            this.emitx = new BloodnBacon4PT.emitters();
            this.emitx.emitterPos = Vector3.Transform(Vector3.Zero, bone1.Transform);
            this.emitx.emitterMatrix = bone1.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
            this.emitx.rotMatrix = bone1.Transform * Matrix.CreateTranslation(-this.emitx.emitterPos.X, -this.emitx.emitterPos.Y, -this.emitx.emitterPos.Z);
            this.emitx.emitterPos += new Vector3(3000f, 0.0f, 3000f);
            this.emitx.found = false;
            ModelBone bone2 = this.tunnel1.Bones["skulltrigger" + index10.ToString()];
            Vector3 scale;
            bone2.Transform.Decompose(out scale, out Quaternion _, out Vector3 _);
            this.emitx.freq = (int) Math.Round(((double) scale.X - (double) (int) scale.X) * 1000.0, 0);
            this.emitx.amt = (int) Math.Round(((double) scale.Y - (double) (int) scale.Y) * 1000.0, 0);
            this.emitx.repeat = (int) Math.Round(((double) scale.Z - (double) (int) scale.Z) * 1000.0, 0);
            this.emitx.amtorig = this.emitx.amt;
            this.emitx.placeit = false;
            this.emitx.triggerPos = Vector3.Transform(Vector3.Zero, bone2.Transform) + new Vector3(3000f, 0.0f, 3000f);
            if (this.emitx.amt == 777)
            {
              this.emitx.amt = 1;
              this.emitx.amtorig = 1;
              this.emitx.repeat = 0;
              this.emitx.freq = 10;
              this.emitx.placeit = true;
            }
            this.skullemit.Add(this.emitx);
          }
          catch
          {
          }
          try
          {
            ModelBone bone3 = this.tunnel1.Bones["skulldown" + index10.ToString()];
            this.emitx = new BloodnBacon4PT.emitters();
            this.emitx.emitterPos = Vector3.Transform(Vector3.Zero, bone3.Transform);
            this.emitx.emitterMatrix = bone3.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
            this.emitx.rotMatrix = bone3.Transform * Matrix.CreateTranslation(-this.emitx.emitterPos.X, -this.emitx.emitterPos.Y, -this.emitx.emitterPos.Z);
            this.emitx.emitterPos += new Vector3(3000f, 0.0f, 3000f);
            this.emitx.found = false;
            this.emitx.placeit = false;
            ModelBone bone4 = this.tunnel1.Bones["skulltrigger" + index10.ToString()];
            Vector3 scale;
            bone4.Transform.Decompose(out scale, out Quaternion _, out Vector3 _);
            this.emitx.freq = (int) (((double) scale.X - (double) (int) scale.X) * 1000.0);
            this.emitx.amt = (int) (((double) scale.Y - (double) (int) scale.Y) * 1000.0);
            this.emitx.repeat = (int) (((double) scale.Z - (double) (int) scale.Z) * 1000.0);
            this.emitx.amtorig = this.emitx.amt;
            this.emitx.triggerPos = Vector3.Transform(Vector3.Zero, bone4.Transform) + new Vector3(3000f, 0.0f, 3000f);
            this.skulldrop.Add(this.emitx);
          }
          catch
          {
          }
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["flashlight1"];
          this.sc.goldKeys.flashlight1pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.flashlight1matrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyFlashlight1 = this.sc.flashlight1 != 1;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["flashlight2"];
          this.sc.goldKeys.flashlight2pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.flashlight2matrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyFlashlight2 = this.sc.flashlight2 != 1;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["flashlight3"];
          this.sc.goldKeys.flashlight3pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.flashlight3matrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyFlashlight3 = this.sc.flashlight3 != 1;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["ammobox1"];
          this.sc.goldKeys.ammoboxpos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.ammoboxmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyAmmobox = false;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["goggles1"];
          this.sc.goldKeys.gogglepos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.gogglematrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyGoggles = this.sc.goggles != 1;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["cogs1"];
          this.sc.goldKeys.cogpos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.cogmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.cogCount = this.sc.cog1[this.mazeid] + this.sc.cog2[this.mazeid] + this.sc.cog3[this.mazeid];
          this.sc.goldKeys.keyCog = this.sc.cogCount <= 0;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["map1"];
          this.sc.goldKeys.mappos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.mapmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyMap = this.sc.map[this.mazeid] != 1;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["redskull1"];
          this.sc.goldKeys.skullpos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.skullmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keySkull1 = this.sc.redskull1 != 0;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["redskull2"];
          this.sc.goldKeys.skullpos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.skullmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keySkull2 = this.sc.redskull2 != 0;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["redskull3"];
          this.sc.goldKeys.skullpos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.skullmatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keySkull3 = this.sc.redskull3 != 0;
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["exitkey"];
          this.sc.goldKeys.exitkeypos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.exitkeymatrix = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.keyExitkey = this.sc.exitkey[this.mazeid] != 1;
        }
        catch
        {
        }
        this.sc.goldKeys.rsFound = false;
        try
        {
          this.sc.goldKeys.matrix_0 = this.tunnel1.Bones["rs1"].Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["rs2"];
          this.sc.goldKeys.rs2Pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.matrix_1 = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.rsFound = true;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.matrix_2 = this.tunnel1.Bones["rs3"].Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
        }
        catch
        {
        }
        this.sc.goldKeys.ttFound = false;
        try
        {
          this.sc.goldKeys.matrix_3 = this.tunnel1.Bones["tt1"].Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
        }
        catch
        {
        }
        try
        {
          ModelBone bone = this.tunnel1.Bones["tt2"];
          this.sc.goldKeys.tt2Pos = Vector3.Transform(Vector3.Zero, bone.Transform) + new Vector3(3000f, 0.0f, 3000f);
          this.sc.goldKeys.matrix_4 = bone.Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
          this.sc.goldKeys.ttFound = true;
        }
        catch
        {
        }
        try
        {
          this.sc.goldKeys.matrix_5 = this.tunnel1.Bones["tt3"].Transform * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f));
        }
        catch
        {
        }
        bool flag1 = true;
        int index11 = 0;
        string[] strArray3 = new string[6]
        {
          "d1",
          "d2",
          "d3",
          "d4",
          "d5",
          "d6"
        };
        string[] strArray4 = new string[6]
        {
          "p1",
          "p2",
          "p3",
          "p4",
          "p5",
          "p6"
        };
        string[] strArray5 = new string[6]
        {
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        };
        while (flag1)
        {
          try
          {
            Matrix transform = this.tunnel1.Bones[strArray3[index11]].Transform;
            this.tempCombo = new BloodnBacon4PT.myDoor();
            this.tempCombo.doortrans = Vector3.Transform(Vector3.Zero, transform);
            this.tempCombo.rotMatrix = this.tunnel1.Bones[strArray3[index11]].Transform * Matrix.CreateTranslation(-this.tempCombo.doortrans.X, -this.tempCombo.doortrans.Y, -this.tempCombo.doortrans.Z);
            this.tempCombo.doortrans += new Vector3(3000f, 0.0f, 3000f);
            this.tempCombo.doorlock = true;
            this.tempCombo.doorFlag = false;
            this.tempCombo.doornetsend = false;
            this.tempCombo.tumbler1trans = new Vector3(6.5f, -67.95f, 0.0f);
            this.tempCombo.tumbler2trans = new Vector3(17.76f, -67.95f, 0.0f);
            this.tempCombo.tumbler3trans = new Vector3(29f, -67.95f, 0.0f);
            this.tempCombo.tumbler1state = 0;
            this.tempCombo.tumbler2state = 0;
            this.tempCombo.tumbler3state = 0;
            this.tempCombo.doorMatrix = this.tempCombo.rotMatrix * Matrix.CreateTranslation(this.tempCombo.doortrans);
            this.tempCombo.doorrot = 0.0f;
            this.tempCombo.doorholes = this.makeDoorHoleArray();
            this.combo.Add(this.tempCombo);
          }
          catch
          {
            break;
          }
          ++index11;
        }
        bool flag2 = true;
        int index12 = 0;
        while (flag2)
        {
          try
          {
            Matrix transform = this.tunnel1.Bones[strArray4[index12]].Transform;
            this.tempCombo = new BloodnBacon4PT.myDoor();
            this.tempCombo.frame = 1f;
            this.tempCombo.doortrans = Vector3.Transform(Vector3.Zero, transform);
            this.tempCombo.rotMatrix = transform * Matrix.CreateTranslation(-this.tempCombo.doortrans.X, -this.tempCombo.doortrans.Y, -this.tempCombo.doortrans.Z);
            this.tempCombo.doortrans += new Vector3(3000f, 0.0f, 3000f);
            this.tempCombo.doorlock = true;
            this.tempCombo.doorFlag = false;
            this.tempCombo.doornetsend = false;
            this.tempCombo.tumbler1trans = new Vector3(0.0f, -67.95f, 0.0f);
            this.tempCombo.tumbler2trans = new Vector3(11.7f, -67.95f, 0.0f);
            this.tempCombo.tumbler3trans = new Vector3(23f, -67.95f, 0.0f);
            this.tempCombo.tumbler1state = 0;
            this.tempCombo.tumbler2state = 0;
            this.tempCombo.tumbler3state = 0;
            this.tempCombo.doorMatrix = this.tempCombo.rotMatrix * Matrix.CreateTranslation(this.tempCombo.doortrans);
            this.tempCombo.doorrot = 0.0f;
            this.tempCombo.doorholes = this.makeDoorHoleArray();
            this.plain.Add(this.tempCombo);
          }
          catch
          {
            break;
          }
          ++index12;
        }
        bool flag3 = true;
        int index13 = 0;
        while (flag3)
        {
          try
          {
            Matrix transform = this.tunnel1.Bones[strArray5[index13]].Transform;
            this.tempCombo = new BloodnBacon4PT.myDoor();
            this.tempCombo.frame = 1f;
            this.tempCombo.doortrans = Vector3.Transform(Vector3.Zero, transform);
            this.tempCombo.rotMatrix = transform * Matrix.CreateTranslation(-this.tempCombo.doortrans.X, -this.tempCombo.doortrans.Y, -this.tempCombo.doortrans.Z);
            this.tempCombo.doortrans += new Vector3(3000f, 0.0f, 3000f);
            this.tempCombo.doorlock = true;
            this.tempCombo.doorlockComplete = false;
            this.tempCombo.doorFlag = false;
            this.tempCombo.doornetsend = false;
            this.tempCombo.tumbler1trans = new Vector3(0.0f, 0.0f, 0.0f);
            this.tempCombo.tumbler2trans = new Vector3(0.0f, 0.0f, 0.0f);
            this.tempCombo.tumbler3trans = new Vector3(0.0f, 0.0f, 0.0f);
            this.tempCombo.tumbler1state = 0;
            this.tempCombo.tumbler2state = 0;
            this.tempCombo.tumbler3state = 0;
            this.tempCombo.doorMatrix = this.tempCombo.rotMatrix * Matrix.CreateTranslation(this.tempCombo.doortrans);
            this.tempCombo.doorrot = 0.0f;
            this.tempCombo.doorholes = this.makeDoorHoleArray();
            this.hidden.Add(this.tempCombo);
          }
          catch
          {
            break;
          }
          ++index13;
        }
        for (int index14 = 0; index14 < this.combo.Count; ++index14)
          this.lockDoor(true, this.combo[index14]);
        for (int index15 = 0; index15 < this.plain.Count; ++index15)
          this.lockDoor(true, this.plain[index15]);
        for (int index16 = 0; index16 < this.hidden.Count; ++index16)
          this.lockDoor(true, this.hidden[index16]);
        this.lockCrypt2(true);
        this.farmTunnelTrig = new BoundingBox(new Vector3(1100f, -8f, 4360f), new Vector3(3013f, 90f, 4922f));
        this.tunnelTrig1 = new BoundingBox(new Vector3(1124f, -146f, 4504f), new Vector3(1317f, 34f, 4586f));
        this.tunnelTrig2 = new BoundingBox(new Vector3(2843f, -146f, 4681f), new Vector3(2923f, 34f, 4875f));
        this.tunnelTrig3 = new BoundingBox(new Vector3(2169f, -10244f, 1437f), new Vector3(4849f, -165f, 2759f));
        this.cryptdoor = new BloodnBacon4PT.hole();
        this.cryptdoor.stainR = new Vector4[this.totalzots];
        this.cryptdoor.stainR[0] = new Vector4(0.0f, 0.0f, 100f, 100f);
        this.cryptdoor.stainR[1] = new Vector4(100f, 0.0f, 100f, 100f);
        this.cryptdoor.stainR[2] = new Vector4(200f, 0.0f, 100f, 100f);
        this.cryptdoor.stainR[3] = new Vector4(0.0f, 100f, 100f, 100f);
        this.cryptdoor.stainR[4] = new Vector4(100f, 100f, 100f, 100f);
        this.cryptdoor.stainR[5] = new Vector4(200f, 100f, 100f, 100f);
        this.cryptdoor.stainR[6] = new Vector4(0.0f, 200f, 100f, 100f);
        this.cryptdoor.stainR[7] = new Vector4(100f, 200f, 100f, 100f);
        this.cryptdoor.stainR[8] = new Vector4(200f, 200f, 100f, 100f);
        this.cryptdoor.stainR[9] = new Vector4(0.0f, 300f, 100f, 100f);
        this.cryptdoor.stainR[10] = new Vector4(100f, 300f, 100f, 100f);
        this.cryptdoor.stainR[11] = new Vector4(200f, 300f, 100f, 100f);
        this.cryptdoor.stainR[12] = new Vector4(0.0f, 400f, 100f, 100f);
        this.cryptdoor.stainR[13] = new Vector4(100f, 400f, 100f, 100f);
        this.cryptdoor.stainR[14] = new Vector4(200f, 400f, 100f, 100f);
        this.cryptdoor.stainR[15] = new Vector4(0.0f, 500f, 150f, 150f);
        this.cryptdoor.stainR[16] = new Vector4(150f, 500f, 150f, 150f);
        this.cryptdoor.stainR[17] = new Vector4(0.0f, 650f, 150f, 150f);
        this.cryptdoor.stainR[18] = new Vector4(150f, 650f, 150f, 150f);
        this.cryptdoor.stainR[19] = new Vector4(0.0f, 800f, 100f, 100f);
        this.cryptdoor.stainR[20] = new Vector4(100f, 800f, 100f, 100f);
        this.cryptdoor.stainR[21] = new Vector4(200f, 800f, 100f, 100f);
        this.cryptdoor.stainR[22] = new Vector4(0.0f, 900f, 100f, 100f);
        this.cryptdoor.stainR[23] = new Vector4(100f, 900f, 100f, 100f);
        this.cryptdoor.stainR[24] = new Vector4(200f, 900f, 100f, 100f);
        this.cryptdoor.stainR[25] = new Vector4(0.0f, 1000f, 100f, 100f);
        this.cryptdoor.stainR[26] = new Vector4(100f, 1000f, 100f, 100f);
        this.cryptdoor.stainR[27] = new Vector4(200f, 1000f, 100f, 100f);
        this.cryptdoor.stainR[28] = new Vector4(0.0f, 1100f, 100f, 100f);
        this.cryptdoor.stainR[29] = new Vector4(100f, 1100f, 100f, 100f);
        this.cryptdoor.stainR[30] = new Vector4(200f, 1100f, 100f, 100f);
        this.cryptdoor.stainR[31] = new Vector4(0.0f, 1200f, 100f, 100f);
        this.cryptdoor.stainR[32] = new Vector4(100f, 1200f, 100f, 100f);
        this.cryptdoor.stainR[33] = new Vector4(200f, 1200f, 100f, 100f);
        this.cryptdoor.stainR[34] = new Vector4(0.0f, 1300f, 100f, 100f);
        this.cryptdoor.stainR[35] = new Vector4(100f, 1300f, 100f, 100f);
        this.cryptdoor.stainR[36] = new Vector4(200f, 1300f, 100f, 100f);
        this.cryptdoor.stainR[37] = new Vector4(0.0f, 1400f, 100f, 100f);
        this.cryptdoor.stainR[38] = new Vector4(100f, 1400f, 100f, 100f);
        this.cryptdoor.stainR[39] = new Vector4(200f, 1400f, 100f, 100f);
        this.cryptdoor.stainR[40] = new Vector4(0.0f, 1500f, 100f, 100f);
        this.cryptdoor.stainR[41] = new Vector4(100f, 1500f, 100f, 100f);
        this.cryptdoor.stainR[42] = new Vector4(200f, 1500f, 100f, 100f);
        this.cryptdoor.stainR[43] = new Vector4(0.0f, 1600f, 100f, 100f);
        this.cryptdoor.stainR[44] = new Vector4(100f, 1700f, 100f, 100f);
        this.cryptdoor.stainR[45] = new Vector4(200f, 1700f, 100f, 100f);
        this.cryptdoor.stainR[46] = new Vector4(0.0f, 1700f, 100f, 100f);
        if (this.totalzots > 47)
        {
          this.cryptdoor.stainR[47] = new Vector4(100f, 1800f, 100f, 100f);
          this.cryptdoor.stainR[48] = new Vector4(200f, 1800f, 100f, 100f);
          this.cryptdoor.stainR[49] = new Vector4(0.0f, 1800f, 100f, 100f);
          this.cryptdoor.stainR[50] = new Vector4(100f, 1900f, 100f, 100f);
          this.cryptdoor.stainR[51] = new Vector4(200f, 1900f, 100f, 100f);
          this.cryptdoor.stainR[52] = new Vector4(0.0f, 1900f, 100f, 100f);
          this.cryptdoor.stainR[53] = new Vector4(100f, 2000f, 100f, 100f);
          this.cryptdoor.stainR[54] = new Vector4(200f, 2000f, 100f, 100f);
          this.cryptdoor.stainR[55] = new Vector4(0.0f, 2000f, 100f, 100f);
          this.cryptdoor.stainR[56] = new Vector4(100f, 2100f, 100f, 100f);
          this.cryptdoor.stainR[57] = new Vector4(200f, 2100f, 100f, 100f);
          this.cryptdoor.stainR[58] = new Vector4(0.0f, 2100f, 100f, 100f);
          this.cryptdoor.stainR[59] = new Vector4(100f, 2200f, 100f, 100f);
          this.cryptdoor.stainR[60] = new Vector4(200f, 2200f, 100f, 100f);
          this.cryptdoor.stainR[61] = new Vector4(0.0f, 2200f, 100f, 100f);
          this.cryptdoor.stainR[62] = new Vector4(100f, 2300f, 100f, 100f);
          this.cryptdoor.stainR[63] = new Vector4(200f, 2300f, 100f, 100f);
          this.cryptdoor.stainR[64] = new Vector4(0.0f, 2300f, 100f, 100f);
        }
        this.cryptdoor.stainMax = 0;
        this.cryptdoor.stainIndex = 0;
        this.cryptdoor.stainCapacity = 50;
        this.cryptdoor.drift = new float[this.cryptdoor.stainCapacity];
        this.cryptdoor.stainTrans = new BloodnBacon4PT.hitStream[this.cryptdoor.stainCapacity];
        this.cryptdoor.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.cryptdoor.stainCapacity, BufferUsage.WriteOnly);
        this.cryptdoor.a = new float[this.cryptdoor.stainCapacity];
        this.cryptdoor.b = new float[this.cryptdoor.stainCapacity];
        this.cryptdoor2 = new BloodnBacon4PT.hole();
        this.cryptdoor2.stainR = new Vector4[this.totalzots];
        this.cryptdoor2.stainR[0] = new Vector4(0.0f, 0.0f, 100f, 100f);
        this.cryptdoor2.stainR[1] = new Vector4(100f, 0.0f, 100f, 100f);
        this.cryptdoor2.stainR[2] = new Vector4(200f, 0.0f, 100f, 100f);
        this.cryptdoor2.stainR[3] = new Vector4(0.0f, 100f, 100f, 100f);
        this.cryptdoor2.stainR[4] = new Vector4(100f, 100f, 100f, 100f);
        this.cryptdoor2.stainR[5] = new Vector4(200f, 100f, 100f, 100f);
        this.cryptdoor2.stainR[6] = new Vector4(0.0f, 200f, 100f, 100f);
        this.cryptdoor2.stainR[7] = new Vector4(100f, 200f, 100f, 100f);
        this.cryptdoor2.stainR[8] = new Vector4(200f, 200f, 100f, 100f);
        this.cryptdoor2.stainR[9] = new Vector4(0.0f, 300f, 100f, 100f);
        this.cryptdoor2.stainR[10] = new Vector4(100f, 300f, 100f, 100f);
        this.cryptdoor2.stainR[11] = new Vector4(200f, 300f, 100f, 100f);
        this.cryptdoor2.stainR[12] = new Vector4(0.0f, 400f, 100f, 100f);
        this.cryptdoor2.stainR[13] = new Vector4(100f, 400f, 100f, 100f);
        this.cryptdoor2.stainR[14] = new Vector4(200f, 400f, 100f, 100f);
        this.cryptdoor2.stainR[15] = new Vector4(0.0f, 500f, 150f, 150f);
        this.cryptdoor2.stainR[16] = new Vector4(150f, 500f, 150f, 150f);
        this.cryptdoor2.stainR[17] = new Vector4(0.0f, 650f, 150f, 150f);
        this.cryptdoor2.stainR[18] = new Vector4(150f, 650f, 150f, 150f);
        this.cryptdoor2.stainR[19] = new Vector4(0.0f, 800f, 100f, 100f);
        this.cryptdoor2.stainR[20] = new Vector4(100f, 800f, 100f, 100f);
        this.cryptdoor2.stainR[21] = new Vector4(200f, 800f, 100f, 100f);
        this.cryptdoor2.stainR[22] = new Vector4(0.0f, 900f, 100f, 100f);
        this.cryptdoor2.stainR[23] = new Vector4(100f, 900f, 100f, 100f);
        this.cryptdoor2.stainR[24] = new Vector4(200f, 900f, 100f, 100f);
        this.cryptdoor2.stainR[25] = new Vector4(0.0f, 1000f, 100f, 100f);
        this.cryptdoor2.stainR[26] = new Vector4(100f, 1000f, 100f, 100f);
        this.cryptdoor2.stainR[27] = new Vector4(200f, 1000f, 100f, 100f);
        this.cryptdoor2.stainR[28] = new Vector4(0.0f, 1100f, 100f, 100f);
        this.cryptdoor2.stainR[29] = new Vector4(100f, 1100f, 100f, 100f);
        this.cryptdoor2.stainR[30] = new Vector4(200f, 1100f, 100f, 100f);
        this.cryptdoor2.stainR[31] = new Vector4(0.0f, 1200f, 100f, 100f);
        this.cryptdoor2.stainR[32] = new Vector4(100f, 1200f, 100f, 100f);
        this.cryptdoor2.stainR[33] = new Vector4(200f, 1200f, 100f, 100f);
        this.cryptdoor2.stainR[34] = new Vector4(0.0f, 1300f, 100f, 100f);
        this.cryptdoor2.stainR[35] = new Vector4(100f, 1300f, 100f, 100f);
        this.cryptdoor2.stainR[36] = new Vector4(200f, 1300f, 100f, 100f);
        this.cryptdoor2.stainR[37] = new Vector4(0.0f, 1400f, 100f, 100f);
        this.cryptdoor2.stainR[38] = new Vector4(100f, 1400f, 100f, 100f);
        this.cryptdoor2.stainR[39] = new Vector4(200f, 1400f, 100f, 100f);
        this.cryptdoor2.stainR[40] = new Vector4(0.0f, 1500f, 100f, 100f);
        this.cryptdoor2.stainR[41] = new Vector4(100f, 1500f, 100f, 100f);
        this.cryptdoor2.stainR[42] = new Vector4(200f, 1500f, 100f, 100f);
        this.cryptdoor2.stainR[43] = new Vector4(0.0f, 1600f, 100f, 100f);
        this.cryptdoor2.stainR[44] = new Vector4(100f, 1700f, 100f, 100f);
        this.cryptdoor2.stainR[45] = new Vector4(200f, 1700f, 100f, 100f);
        this.cryptdoor2.stainR[46] = new Vector4(0.0f, 1700f, 100f, 100f);
        if (this.totalzots > 47)
        {
          this.cryptdoor2.stainR[47] = new Vector4(100f, 1800f, 100f, 100f);
          this.cryptdoor2.stainR[48] = new Vector4(200f, 1800f, 100f, 100f);
          this.cryptdoor2.stainR[49] = new Vector4(0.0f, 1800f, 100f, 100f);
          this.cryptdoor2.stainR[50] = new Vector4(100f, 1900f, 100f, 100f);
          this.cryptdoor2.stainR[51] = new Vector4(200f, 1900f, 100f, 100f);
          this.cryptdoor2.stainR[52] = new Vector4(0.0f, 1900f, 100f, 100f);
          this.cryptdoor2.stainR[53] = new Vector4(100f, 2000f, 100f, 100f);
          this.cryptdoor2.stainR[54] = new Vector4(200f, 2000f, 100f, 100f);
          this.cryptdoor2.stainR[55] = new Vector4(0.0f, 2000f, 100f, 100f);
          this.cryptdoor2.stainR[56] = new Vector4(100f, 2100f, 100f, 100f);
          this.cryptdoor2.stainR[57] = new Vector4(200f, 2100f, 100f, 100f);
          this.cryptdoor2.stainR[58] = new Vector4(0.0f, 2100f, 100f, 100f);
          this.cryptdoor2.stainR[59] = new Vector4(100f, 2200f, 100f, 100f);
          this.cryptdoor2.stainR[60] = new Vector4(200f, 2200f, 100f, 100f);
          this.cryptdoor2.stainR[61] = new Vector4(0.0f, 2200f, 100f, 100f);
          this.cryptdoor2.stainR[62] = new Vector4(100f, 2300f, 100f, 100f);
          this.cryptdoor2.stainR[63] = new Vector4(200f, 2300f, 100f, 100f);
          this.cryptdoor2.stainR[64] = new Vector4(0.0f, 2300f, 100f, 100f);
        }
        this.cryptdoor2.stainMax = 0;
        this.cryptdoor2.stainIndex = 0;
        this.cryptdoor2.stainCapacity = 50;
        this.cryptdoor2.drift = new float[this.cryptdoor2.stainCapacity];
        this.cryptdoor2.stainTrans = new BloodnBacon4PT.hitStream[this.cryptdoor2.stainCapacity];
        this.cryptdoor2.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.cryptdoor2.stainCapacity, BufferUsage.WriteOnly);
        this.cryptdoor2.a = new float[this.cryptdoor.stainCapacity];
        this.cryptdoor2.b = new float[this.cryptdoor.stainCapacity];
      }
      this.camradian = -1.57f;
      this.camheight = 3.14f;
      this.vector3_0 = new Vector3(-30f, 40f, -20f);
      this.camlookpos3rd = new Vector3(50f, 40f, 0.0f);
      this.camradianArray[0] = this.sc.camradian1;
      this.camheightArray[0] = this.sc.camheight1;
      this.camposArray[0] = this.sc.vector3_0;
      this.camlookArray[0] = this.sc.camlookpos3rd1;
      this.camradianArray[1] = this.sc.camradian2;
      this.camheightArray[1] = this.sc.camheight2;
      this.camposArray[1] = this.sc.vector3_1;
      this.camlookArray[1] = this.sc.camlookpos3rd2;
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Sprites --- done";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Players and Events";
      if (this.sc.host)
        this.myPlayer = new localPlayer(this.Content, this.hostPosition, 0.0f, this.xtend);
      if (!this.sc.host)
        this.myPlayer = new localPlayer(this.Content, this.clientPosition, 0.0f, this.xtend);
      if (this.sc.doubleAmmo)
        this.myPlayer.resetammo = new int[22]
        {
          50000,
          0,
          50000,
          0,
          50000,
          0,
          400,
          0,
          160,
          0,
          500,
          0,
          600,
          0,
          0,
          0,
          50000,
          0,
          650,
          0,
          500,
          0
        };
      this.sc.myplayerCheats = false;
      this.buildLocalString();
      this.startGame = Environment.TickCount & int.MaxValue;
      remotePlayer4.isGone = false;
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Players and Events --- done";
      this.resetStates();
      int num11 = 0;
      if (this.sc.viewGarbage)
      {
        num11 = (int) GC.GetTotalMemory(false) / 1024;
        this.sc.loadMoment = "Load all BOSSES ";
      }
      if (Princess4.cuttyCount > 0)
        this.princess[0].LoadContent(this.sc, this.Content);
      if (Cutty4.cuttyCount > 0)
      {
        for (int index17 = 0; index17 < Cutty4.cuttyCount; ++index17)
          this.cuttyBoss[index17].LoadContent(this.sc, this.Content);
      }
      int num12;
      if (this.sc.viewGarbage)
      {
        num12 = (int) GC.GetTotalMemory(false) / 1024 - num11;
        this.sc.loadMoment = "Load all BOSSES --- done" + num12.ToString();
        Thread.Sleep(millisecondsTimeout);
      }
      if (this.sc.viewGarbage)
      {
        num11 = (int) GC.GetTotalMemory(false) / 1024;
        this.sc.loadMoment = "Load Rendertargets1";
      }
      if (this.sc.GraphicsDevice.PresentationParameters.MultiSampleCount > 2)
        return;
      this.target1 = new RenderTarget2D(this.sc.GraphicsDevice, 600, 600, true, SurfaceFormat.Color, DepthFormat.None, 0, RenderTargetUsage.DiscardContents);
      this.target2 = new RenderTarget2D(this.sc.GraphicsDevice, 600, 600, true, SurfaceFormat.Color, DepthFormat.None, 0, RenderTargetUsage.DiscardContents);
      this.glowTarget = new RenderTarget2D(this.sc.GraphicsDevice, 1000, 600, false, SurfaceFormat.Color, DepthFormat.None);
      if (this.sc.viewGarbage)
      {
        num12 = (int) GC.GetTotalMemory(false) / 1024 - num11;
        this.sc.loadMoment = "Load Rendertargets1 --- done" + num12.ToString();
        Thread.Sleep(millisecondsTimeout);
      }
      if (this.sc.viewGarbage)
      {
        num11 = (int) GC.GetTotalMemory(false) / 1024;
        this.sc.loadMoment = "Load Particles2";
      }
      this.loadParticles();
      if (this.sc.viewGarbage)
      {
        num12 = (int) GC.GetTotalMemory(false) / 1024 - num11;
        this.sc.loadMoment = "Load Particles2 ---  " + num12.ToString();
        Thread.Sleep(millisecondsTimeout);
      }
      this.sc.isLoading = false;
      if (this.tunneladd)
      {
        this.maptarget1 = new RenderTarget2D(this.sc.GraphicsDevice, 900, 900, false, SurfaceFormat.Color, DepthFormat.None);
        this.maptarget2 = new RenderTarget2D(this.sc.GraphicsDevice, 900, 900, false, SurfaceFormat.Color, DepthFormat.None);
        this.mapCombineTarget1 = new RenderTarget2D(this.sc.GraphicsDevice, 900, 900, false, SurfaceFormat.Color, DepthFormat.None);
        this.mapCombineTarget2 = new RenderTarget2D(this.sc.GraphicsDevice, 900, 900, false, SurfaceFormat.Color, DepthFormat.None);
        this.initFogofWar();
        if (this.twinFound)
        {
          this.twinSplat1 = new RenderTarget2D(this.sc.GraphicsDevice, 600, 600, false, SurfaceFormat.Color, DepthFormat.None);
          this.twinSplat2 = new RenderTarget2D(this.sc.GraphicsDevice, 600, 600, false, SurfaceFormat.Color, DepthFormat.None);
          this.twinSplat(0, 0, false);
        }
      }
      this.sc.isLoading = true;
      if (this.sc.dayTime == "pm")
      {
        for (int index18 = 0; index18 < this.writingDays.Length; ++index18)
        {
          if (this.writingDays[index18] == this.sc.currentDay)
          {
            this.sc.isLoading = false;
            this.DrawText(this.writingWall[index18], ref this.barnWrite);
            this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
            this.sc.isLoading = true;
            this.writingToday = true;
            break;
          }
        }
        if (this.writingToday)
        {
          int num13 = this.netRR.Next(0, 9);
          this.writingModel1 = this.Content.Load<Model>("models//writingPower2");
          if (num13 == 0)
            this.writingModel1 = this.Content.Load<Model>("models//writingPower2");
          if (num13 == 1)
            this.writingModel1 = this.Content.Load<Model>("models//writingHouse1");
          if (num13 == 2)
            this.writingModel1 = this.Content.Load<Model>("models//writingBarn1");
          if (num13 == 3)
            this.writingModel1 = this.Content.Load<Model>("models//writingHouse2");
          if (num13 == 4)
            this.writingModel1 = this.Content.Load<Model>("models//writingBarn2");
          if (num13 == 5)
            this.writingModel1 = this.Content.Load<Model>("models//writingGrinder");
          if (num13 == 6)
            this.writingModel1 = this.Content.Load<Model>("models//writingSilo1");
          if (num13 == 7)
            this.writingModel1 = this.Content.Load<Model>("models//writingSilo2");
          if (num13 == 8)
            this.writingModel1 = this.Content.Load<Model>("models//writingPower1");
          this.writeEffect = this.Content.Load<Effect>("effects//buildingWrite2");
          this.writeEffect.Parameters["rgbTexture"].SetValue((Texture) this.barnWrite);
        }
      }
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Audio Builders (Exception)";
      if (this.sc.viewGarbage)
        this.sc.loadMoment = "Load Audio Builders  --- done";
      if (this.sc.viewGarbage)
      {
        num11 = (int) GC.GetTotalMemory(false) / 1024;
        this.sc.loadMoment = "Load Cutty+Boss targets";
      }
      if (Princess4.cuttyCount > 0)
        this.princess[0].setPrincessTargets();
      if (Cutty4.cuttyCount > 0)
      {
        for (int index19 = 0; index19 < Cutty4.cuttyCount; ++index19)
          this.cuttyBoss[index19].setCuttyTargets();
      }
      if (this.sc.viewGarbage)
      {
        num12 = (int) GC.GetTotalMemory(false) / 1024 - num11;
        this.sc.loadMoment = "Load Cutty+Boss targets ---  " + num12.ToString();
        Thread.Sleep(millisecondsTimeout);
      }
      this.sc.Game.ResetElapsedTime();
      this.backgroundThread.Start();
      this.buildLocalSkin();
      this.myPlayer.primaryChoice = this.sc.tempPistol;
      if (this.handtype[this.sc.tempRifle] == 1)
        this.sc.tempRifle = this.sc.tempPistol;
      this.myPlayer.secondaryChoice = this.sc.tempRifle;
      this.myPlayer.gunChoice = this.sc.tempPistol;
      this.myPlayer.lastWeapon = this.sc.tempPistol;
      if (this.myPlayer.gunChoice == 16)
        this.setPaintBallGun(true);
      if (this.handtype[this.sc.tempRifle] == 2)
      {
        this.myPlayer.secondaryChoice = this.sc.tempRifle;
        this.myPlayer.mag[this.myPlayer.secondaryChoice] = this.sc.tempMag;
        this.myPlayer.ammo[this.myPlayer.secondaryChoice] = this.sc.tempAmmo;
      }
      this.buildSecondaryWeapon(this.myPlayer.secondaryChoice);
      this.buildPrimaryWeapon(this.myPlayer.primaryChoice);
      if (this.sc.cheat_PickupPack && this.sc.developer)
      {
        this.sc.grenades = 32;
        this.sc.milks = 12;
        this.sc.hulks = 12;
        this.sc.pills = 4;
        this.sc.rockets = 2;
        this.sc.grinder_Supply = new int[6]
        {
          100,
          50,
          50,
          2,
          1,
          1
        };
        this.sc.FarmerUnlocked = true;
      }
      if (this.sc.host)
      {
        if (this.sc.lobby.createdLobby.Count > 0 && SteamAPI.IsSteamRunning())
        {
          this.connectRequest = Callback<P2PSessionRequest_t>.Create(new Callback<P2PSessionRequest_t>.DispatchDelegate(this.onConnectHOST));
          this.thisLobbyID = this.sc.lobby.createdLobby[0];
          CSteamID csteamId = this.sc.lobby.createdLobby[0];
          CSteamID steamId = SteamUser.GetSteamID();
          this.HostOwner = steamId;
          this.sc.hostowner = steamId;
          this.mysteamID = steamId;
          SteamMatchmaking.SetLobbyData(csteamId, "day", this.sc.currentDay.ToString());
          SteamMatchmaking.SetLobbyData(csteamId, "state", "10");
          SteamMatchmaking.SetLobbyData(csteamId, "char", this.sc.gameNPC.ToString());
          this.addPlayer(steamId, csteamId);
          int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(csteamId);
          for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
          {
            CSteamID lobbyMemberByIndex = SteamMatchmaking.GetLobbyMemberByIndex(csteamId, iMember);
            if (lobbyMemberByIndex != steamId)
              this.addPlayer(lobbyMemberByIndex, csteamId);
          }
          this.myPlayer.simulationState.npcPosition = this.hostPosition;
        }
        else
        {
          this.sc.errorMessage = "host has no created lobby";
          this.sc.errorMessageTimer = 360;
          this.ExitFlag = true;
        }
      }
      else
      {
        bool flag = true;
        if (this.sc.lobby.joinedLobby.Count > 0 && SteamAPI.IsSteamRunning() && SteamMatchmaking.GetNumLobbyMembers(this.sc.lobby.joinedLobby[0]) > 1)
        {
          this.thisLobbyID = this.sc.lobby.joinedLobby[0];
          CSteamID csteamId = this.sc.lobby.joinedLobby[0];
          CSteamID steamId = SteamUser.GetSteamID();
          this.mysteamID = steamId;
          this.connectRequest = Callback<P2PSessionRequest_t>.Create(new Callback<P2PSessionRequest_t>.DispatchDelegate(this.onConnectCLIENT));
          byte[] pubData = new byte[1]{ byte.MaxValue };
          this.addPlayer(steamId, csteamId);
          int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(csteamId);
          for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
          {
            CSteamID lobbyMemberByIndex = SteamMatchmaking.GetLobbyMemberByIndex(csteamId, iMember);
            if (lobbyMemberByIndex != steamId)
            {
              this.addPlayer(lobbyMemberByIndex, csteamId);
              SteamNetworking.SendP2PPacket(lobbyMemberByIndex, pubData, (uint) pubData.Length, EP2PSend.k_EP2PSendReliable);
            }
          }
          this.myPlayer.simulationState.npcPosition = this.startpositions[this.sc.myplayerindex];
          flag = false;
        }
        if (flag)
        {
          this.sc.errorMessage = "client has no joined lobby ";
          this.sc.errorMessageTimer = 360;
          this.ExitFlag = true;
        }
      }
      this.sc.trophy.checkAll();
    }

    private void onConnectHOST(P2PSessionRequest_t pCallback)
    {
      if (!SteamAPI.IsSteamRunning())
        return;
      CSteamID steamIdRemote = pCallback.m_steamIDRemote;
      if (this.sc.lobby.createdLobby.Count > 0)
      {
        CSteamID steamIDLobby = this.sc.lobby.createdLobby[0];
        int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(steamIDLobby);
        for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
        {
          if (SteamMatchmaking.GetLobbyMemberByIndex(steamIDLobby, iMember) == steamIdRemote)
          {
            SteamNetworking.AcceptP2PSessionWithUser(steamIdRemote);
            if (!this.addedPlayers.Contains(steamIdRemote))
              this.addedPlayers.Add(steamIdRemote);
            this.thisLobbyID = steamIDLobby;
            break;
          }
        }
      }
      else
      {
        this.sc.errorMessage = "Host Created Lobby is Null";
        this.sc.errorMessageTimer = 360;
        this.sc.lobby.closeSession(steamIdRemote);
        this.ExitNow();
      }
    }

    private void onConnectCLIENT(P2PSessionRequest_t pCallback)
    {
      if (!SteamAPI.IsSteamRunning())
        return;
      CSteamID steamIdRemote = pCallback.m_steamIDRemote;
      if (this.sc.lobby.joinedLobby.Count > 0)
      {
        CSteamID steamIDLobby = this.sc.lobby.joinedLobby[0];
        int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(steamIDLobby);
        for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
        {
          if (SteamMatchmaking.GetLobbyMemberByIndex(steamIDLobby, iMember) == steamIdRemote)
          {
            SteamNetworking.AcceptP2PSessionWithUser(steamIdRemote);
            if (!this.addedPlayers.Contains(steamIdRemote))
              this.addedPlayers.Add(steamIdRemote);
            this.thisLobbyID = steamIDLobby;
            break;
          }
        }
      }
      else
      {
        this.sc.errorMessage = "Joined Lobby is Null";
        this.sc.errorMessageTimer = 360;
        this.sc.lobby.closeSession(steamIdRemote);
        this.ExitNow();
      }
    }

    private void giveHeight(ref float h) => h += (float) this.sc.tunnelUppy;

    public BloodnBacon4PT.hole makeDoorHoleArray()
    {
      this.door1 = new BloodnBacon4PT.hole();
      this.door1.stainR = new Vector4[this.totalzots];
      this.door1.stainR[0] = new Vector4(0.0f, 0.0f, 100f, 100f);
      this.door1.stainR[1] = new Vector4(100f, 0.0f, 100f, 100f);
      this.door1.stainR[2] = new Vector4(200f, 0.0f, 100f, 100f);
      this.door1.stainR[3] = new Vector4(0.0f, 100f, 100f, 100f);
      this.door1.stainR[4] = new Vector4(100f, 100f, 100f, 100f);
      this.door1.stainR[5] = new Vector4(200f, 100f, 100f, 100f);
      this.door1.stainR[6] = new Vector4(0.0f, 200f, 100f, 100f);
      this.door1.stainR[7] = new Vector4(100f, 200f, 100f, 100f);
      this.door1.stainR[8] = new Vector4(200f, 200f, 100f, 100f);
      this.door1.stainR[9] = new Vector4(0.0f, 300f, 100f, 100f);
      this.door1.stainR[10] = new Vector4(100f, 300f, 100f, 100f);
      this.door1.stainR[11] = new Vector4(200f, 300f, 100f, 100f);
      this.door1.stainR[12] = new Vector4(0.0f, 400f, 100f, 100f);
      this.door1.stainR[13] = new Vector4(100f, 400f, 100f, 100f);
      this.door1.stainR[14] = new Vector4(200f, 400f, 100f, 100f);
      this.door1.stainR[15] = new Vector4(0.0f, 500f, 150f, 150f);
      this.door1.stainR[16] = new Vector4(150f, 500f, 150f, 150f);
      this.door1.stainR[17] = new Vector4(0.0f, 650f, 150f, 150f);
      this.door1.stainR[18] = new Vector4(150f, 650f, 150f, 150f);
      this.door1.stainR[19] = new Vector4(0.0f, 800f, 100f, 100f);
      this.door1.stainR[20] = new Vector4(100f, 800f, 100f, 100f);
      this.door1.stainR[21] = new Vector4(200f, 800f, 100f, 100f);
      this.door1.stainR[22] = new Vector4(0.0f, 900f, 100f, 100f);
      this.door1.stainR[23] = new Vector4(100f, 900f, 100f, 100f);
      this.door1.stainR[24] = new Vector4(200f, 900f, 100f, 100f);
      this.door1.stainR[25] = new Vector4(0.0f, 1000f, 100f, 100f);
      this.door1.stainR[26] = new Vector4(100f, 1000f, 100f, 100f);
      this.door1.stainR[27] = new Vector4(200f, 1000f, 100f, 100f);
      this.door1.stainR[28] = new Vector4(0.0f, 1100f, 100f, 100f);
      this.door1.stainR[29] = new Vector4(100f, 1100f, 100f, 100f);
      this.door1.stainR[30] = new Vector4(200f, 1100f, 100f, 100f);
      this.door1.stainR[31] = new Vector4(0.0f, 1200f, 100f, 100f);
      this.door1.stainR[32] = new Vector4(100f, 1200f, 100f, 100f);
      this.door1.stainR[33] = new Vector4(200f, 1200f, 100f, 100f);
      this.door1.stainR[34] = new Vector4(0.0f, 1300f, 100f, 100f);
      this.door1.stainR[35] = new Vector4(100f, 1300f, 100f, 100f);
      this.door1.stainR[36] = new Vector4(200f, 1300f, 100f, 100f);
      this.door1.stainR[37] = new Vector4(0.0f, 1400f, 100f, 100f);
      this.door1.stainR[38] = new Vector4(100f, 1400f, 100f, 100f);
      this.door1.stainR[39] = new Vector4(200f, 1400f, 100f, 100f);
      this.door1.stainR[40] = new Vector4(0.0f, 1500f, 100f, 100f);
      this.door1.stainR[41] = new Vector4(100f, 1500f, 100f, 100f);
      this.door1.stainR[42] = new Vector4(200f, 1500f, 100f, 100f);
      this.door1.stainR[43] = new Vector4(0.0f, 1600f, 100f, 100f);
      this.door1.stainR[44] = new Vector4(100f, 1700f, 100f, 100f);
      this.door1.stainR[45] = new Vector4(200f, 1700f, 100f, 100f);
      this.door1.stainR[46] = new Vector4(0.0f, 1700f, 100f, 100f);
      if (this.totalzots > 47)
      {
        this.door1.stainR[47] = new Vector4(100f, 1800f, 100f, 100f);
        this.door1.stainR[48] = new Vector4(200f, 1800f, 100f, 100f);
        this.door1.stainR[49] = new Vector4(0.0f, 1800f, 100f, 100f);
        this.door1.stainR[50] = new Vector4(100f, 1900f, 100f, 100f);
        this.door1.stainR[51] = new Vector4(200f, 1900f, 100f, 100f);
        this.door1.stainR[52] = new Vector4(0.0f, 1900f, 100f, 100f);
        this.door1.stainR[53] = new Vector4(100f, 2000f, 100f, 100f);
        this.door1.stainR[54] = new Vector4(200f, 2000f, 100f, 100f);
        this.door1.stainR[55] = new Vector4(0.0f, 2000f, 100f, 100f);
        this.door1.stainR[56] = new Vector4(100f, 2100f, 100f, 100f);
        this.door1.stainR[57] = new Vector4(200f, 2100f, 100f, 100f);
        this.door1.stainR[58] = new Vector4(0.0f, 2100f, 100f, 100f);
        this.door1.stainR[59] = new Vector4(100f, 2200f, 100f, 100f);
        this.door1.stainR[60] = new Vector4(200f, 2200f, 100f, 100f);
        this.door1.stainR[61] = new Vector4(0.0f, 2200f, 100f, 100f);
        this.door1.stainR[62] = new Vector4(100f, 2300f, 100f, 100f);
        this.door1.stainR[63] = new Vector4(200f, 2300f, 100f, 100f);
        this.door1.stainR[64] = new Vector4(0.0f, 2300f, 100f, 100f);
      }
      this.door1.stainMax = 0;
      this.door1.stainIndex = 0;
      this.door1.stainCapacity = 50;
      this.door1.drift = new float[this.door1.stainCapacity];
      this.door1.stainTrans = new BloodnBacon4PT.hitStream[this.door1.stainCapacity];
      this.door1.stainBuffer = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd2, this.door1.stainCapacity, BufferUsage.WriteOnly);
      this.door1.a = new float[this.door1.stainCapacity];
      this.door1.b = new float[this.door1.stainCapacity];
      return this.door1;
    }

    private bool checkDoor(ref bool locked, int state1, int state2, int state3, Vector3 v)
    {
      if (!locked || state1 != (int) v.X || state2 != (int) v.Y || state3 != (int) v.Z)
        return false;
      locked = false;
      return true;
    }

    public void lockWall(bool lockit, Vector3 pos, int scalx, int scalz)
    {
      float newheight = pos.Y;
      if (lockit)
        newheight = 19000f;
      if (scalx >= 2)
      {
        int x1 = (int) pos.X;
        int num = scalx / 2;
        for (int x2 = x1 - num; x2 < x1 + num; x2 += 10)
          this.changeHeight(ref this.tunnelheights, new Vector3((float) x2, 0.0f, pos.Z), newheight);
      }
      else
      {
        if (scalz < 2)
          return;
        int z1 = (int) pos.Z;
        int num = scalz / 2;
        for (int z2 = z1 - num; z2 < z1 + num; z2 += 10)
          this.changeHeight(ref this.tunnelheights, new Vector3(pos.X, 0.0f, (float) z2), newheight);
      }
    }

    public void lockDoor(bool lockit, BloodnBacon4PT.myDoor mydoor)
    {
      Vector3 doortrans = mydoor.doortrans;
      Vector3 vector3 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), mydoor.rotMatrix);
      bool flag = false;
      if ((double) Math.Abs(vector3.X) > (double) Math.Abs(vector3.Z))
        flag = true;
      float newheight = 19000f;
      if (!lockit)
        newheight = doortrans.Y;
      int num1;
      int num2;
      int num3;
      if (!flag)
      {
        num1 = (int) doortrans.Z;
        if ((double) vector3.Z > 0.0)
        {
          num2 = -150;
          num3 = 90;
        }
        else
        {
          num2 = -90;
          num3 = 150;
        }
      }
      else
      {
        num1 = (int) doortrans.X;
        if ((double) vector3.X > 0.0)
        {
          num2 = -150;
          num3 = 90;
        }
        else
        {
          num2 = -90;
          num3 = 150;
        }
      }
      for (int index = num1 + num2; index < num1 + num3; index += 10)
      {
        if (flag)
          this.changeHeight(ref this.tunnelheights, new Vector3((float) index, 0.0f, doortrans.Z), newheight);
        if (!flag)
          this.changeHeight(ref this.tunnelheights, new Vector3(doortrans.X, 0.0f, (float) index), newheight);
      }
    }

    public void lockCrypt(bool lockit)
    {
      float newheight = 9000f;
      if (!lockit)
        newheight = -180f;
      int num = 4456;
      for (int z = 4456; z < num + 260; z += 10)
        this.changeHeight(ref this.tunnelheights, new Vector3(1380f, 0.0f, (float) z), newheight);
    }

    public void lockCrypt2(bool lockit)
    {
      float newheight = 9000f;
      if (!lockit)
        newheight = -180f;
      int num = 2800;
      for (int x = 2800; x < num + 260; x += 10)
        this.changeHeight(ref this.tunnelheights, new Vector3((float) x, 0.0f, 4620f), newheight);
    }

    public void changeHeight(ref float[,] heights, Vector3 position, float newheight)
    {
      int index1 = (int) MathHelper.Clamp(position.X / this.unit, 0.0f, (float) (this.bitmap - 2));
      int index2 = (int) MathHelper.Clamp(position.Z / this.unit, 0.0f, (float) (this.bitmap - 2));
      heights[index1, index2] = newheight;
    }

    private void makeList(int flag)
    {
      if (flag == 1)
        this.talkFlashlight = new List<int>()
        {
          118,
          119,
          126,
          (int) sbyte.MaxValue,
          131,
          132,
          133
        };
      if (flag == 2)
        this.talkGrenades = new List<int>()
        {
          120,
          122,
          138,
          139
        };
      if (flag == 3)
        this.talkMilkMe = new List<int>()
        {
          134,
          135,
          136,
          137
        };
      if (flag != 4)
        return;
      this.talkShootMe = new List<int>()
      {
        121,
        123,
        124,
        125,
        128,
        129,
        130
      };
    }

    public void bossHandicap(int index, int breachReduct, int damIncrease)
    {
      int num1 = breachReduct;
      int num2 = (int) (ushort) damIncrease;
      this.cuttyBoss[index].assBreach = new float[6]
      {
        (float) (40 - num1),
        (float) (50 - num1),
        (float) (70 - num1),
        (float) (60 - num1),
        (float) (70 - num1),
        (float) (80 - num1)
      };
      this.cuttyBoss[index].assDam = new ushort[6]
      {
        (ushort) (12 + num2),
        (ushort) (10 + num2),
        (ushort) (8 + num2),
        (ushort) (9 + num2),
        (ushort) (7 + num2),
        (ushort) (7 + num2)
      };
      this.cuttyBoss[index].faceBreach = new float[6]
      {
        (float) (40 - num1),
        (float) (50 - num1),
        (float) (70 - num1),
        (float) (80 - num1),
        (float) (100 - num1),
        (float) (100 - num1)
      };
      this.cuttyBoss[index].faceDam = new ushort[6]
      {
        (ushort) (14 + num2),
        (ushort) (10 + num2),
        (ushort) (8 + num2),
        (ushort) (8 + num2),
        (ushort) (7 + num2),
        (ushort) (7 + num2)
      };
      this.cuttyBoss[index].spineBreach = new float[6]
      {
        (float) (40 - num1),
        (float) (40 - num1),
        (float) (50 - num1),
        (float) (50 - num1),
        (float) (60 - num1),
        (float) (70 - num1)
      };
      this.cuttyBoss[index].spineDam = new ushort[6]
      {
        (ushort) (14 + num2),
        (ushort) (10 + num2),
        (ushort) (8 + num2),
        (ushort) (8 + num2),
        (ushort) (6 + num2),
        (ushort) (6 + num2)
      };
    }

    public void changeWriting()
    {
    }

    public void loadParticles()
    {
      this.sparks = (ParticleSystem) new sparkSystem(this.sc.Game, this.Content);
      this.sparks.Initialize();
      this.sparks.LoadContent(this.sc.GraphicsDevice);
      this.sparks2 = (ParticleSystem) new spark2System(this.sc.Game, this.Content);
      this.sparks2.Initialize();
      this.sparks2.LoadContent(this.sc.GraphicsDevice);
      this.blood = (ParticleSystem) new dropSystem(this.sc.Game, this.Content);
      this.blood.Initialize();
      this.blood.LoadContent(this.sc.GraphicsDevice);
      this.bloodg = (ParticleSystem) new dropSystemG(this.sc.Game, this.Content);
      this.bloodg.Initialize();
      this.bloodg.LoadContent(this.sc.GraphicsDevice);
      this.mybloodColor = 0;
      this.sc.paintColor = 5;
      this.sc.paintColorCanvas = 8;
      this.sc.paintRemColor = 5;
      this.sc.paintRemColorCanvas = 8;
      this.bits = (ParticleSystem) new bitSystem(this.sc.Game, this.Content);
      this.bits.Initialize();
      this.bits.LoadContent(this.sc.GraphicsDevice);
      this.humanblood = (ParticleSystem) new buddyBlood(this.sc.Game, this.Content);
      this.humanblood.Initialize();
      this.humanblood.LoadContent(this.sc.GraphicsDevice);
      int num1 = 60000;
      int num2 = 1;
      if (Cutty4.cuttyCount > 0)
      {
        num1 = 40000;
        num2 = 1;
      }
      if (Princess4.cuttyCount > 0)
      {
        num1 = 20000;
        num2 = 180000;
      }
      if (this.sc.revengeDay > 0)
        num1 = 120000;
      this.headblood = (ParticleSystem) new headBloodSystem(this.sc.Game, this.Content);
      this.headblood.Initialize();
      this.headblood.settings.MaxParticles = num1;
      this.headblood.LoadContent(this.sc.GraphicsDevice);
      this.debrisblood = (ParticleSystem) new debrisBloodSystem(this.sc.Game, this.Content);
      this.debrisblood.Initialize();
      this.debrisblood.settings.MaxParticles = num2;
      this.debrisblood.LoadContent(this.sc.GraphicsDevice);
      this.debrisFire = (ParticleSystem) new vietnamSystem(this.sc.Game, this.Content);
      this.debrisFire.Initialize();
      this.debrisFire.LoadContent(this.sc.GraphicsDevice);
      this.particlesLoaded = true;
    }

    private void DrawText(string text, ref Texture2D tex)
    {
      RenderTarget2D renderTarget = new RenderTarget2D(this.sc.GraphicsDevice, 900, 200, true, SurfaceFormat.Color, DepthFormat.None);
      this.sc.GraphicsDevice.SetRenderTarget(renderTarget);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend);
      this.spriteBatch.DrawString(this.bloodFont, text, new Vector2(15f, 50f), new Color(90, 0, 0, (int) byte.MaxValue));
      this.spriteBatch.End();
      tex = (Texture2D) renderTarget;
    }

    private void buildPrimaryWeapon(int index)
    {
      this.primShell.model1 = this.sc.shellPack[index];
      this.primShell.soundx = this.sc.shellSound[index];
      this.primaryCock = this.sc.cocking[index];
      this.primBang = this.sc.gunFire[index];
      this.primMuffle = this.sc.gunMuffle[index];
      this.primDry = this.sc.gunDry[index];
    }

    private void buildSecondaryWeapon(int index)
    {
      this.secondShell.model1 = this.sc.shellPack[index];
      this.secondShell.soundx = this.sc.shellSound[index];
      this.secondaryCock = this.sc.cocking[index];
      this.secBang = this.sc.gunFire[index];
      this.secMuffle = this.sc.gunMuffle[index];
      this.secDry = this.sc.gunDry[index];
    }

    private void buildPrimaryWeaponRemote(int index, int ii)
    {
      this.primShell_rem.model1 = this.sc.shellPack[index];
      this.primShell_rem.soundx = this.sc.shellSound[index];
      this.remPlayer[ii].r.primaryCock_rem = this.sc.cocking[index];
      this.remPlayer[ii].r.primBang_rem = this.sc.gunFire[index];
      this.remPlayer[ii].r.primMuffle_rem = this.sc.gunMuffle[index];
    }

    private void buildSecondaryWeaponRemote(int index, int ii)
    {
      this.secondShell_rem.model1 = this.sc.shellPack[index];
      this.secondShell_rem.soundx = this.sc.shellSound[index];
      this.remPlayer[ii].r.secondaryCock_rem = this.sc.cocking[index];
      this.remPlayer[ii].r.secBang_rem = this.sc.gunFire[index];
      this.remPlayer[ii].r.secMuffle_rem = this.sc.gunMuffle[index];
    }

    private void exitNicer()
    {
      try
      {
        this.sc.grinderMotor.sound[0].Pause();
        this.sc.crickets.Pause();
        this.sc.corncobMusic.Pause();
        GamePad.SetVibration(this.playerIndex, 0.0f, 0.0f);
      }
      catch
      {
      }
      this.sc.gameMusicPlaying = false;
      this.sc.darkness = this.sc.olderdarkness;
      this.abortThread();
      ((Form) Control.FromHandle(this.sc.Game.Window.Handle)).FormClosing -= new FormClosingEventHandler(this.Form1_KeyDown);
    }

    public override void UnloadContent()
    {
      try
      {
        for (int index = 0; index < this.cuttyBoss.Length; ++index)
          this.cuttyBoss[index].UnloadContent();
        if (Princess4.cuttyCount > 0)
          this.princess[0].UnloadContent();
      }
      catch
      {
      }
      this.Content.Unload();
      this.contentTalk.Unload();
      this.conModel.Unload();
      this.electric.unloadContent();
      this.lampGlow.unloadContent();
      this.farmerspit.unloadContent();
      this.gunsmoke.unloadContent();
      this.rocketsmoke.unloadContent();
      this.sparks.unloadContent();
      this.sparks2.unloadContent();
      this.blood.unloadContent();
      this.bloodg.unloadContent();
      for (int index = 0; index < this.remPlayer.Count; ++index)
        this.remPlayer[index].r.bloodrem.unloadContent();
      this.bits.unloadContent();
      this.humanblood.unloadContent();
      this.headblood.unloadContent();
      this.debrisblood.unloadContent();
      this.debrisFire.unloadContent();
    }

    private void buildCharSkin(int ii)
    {
      if (this.remPlayer[ii].r.now.bonusnpc < (byte) 0 || this.remPlayer[ii].r.now.bonusnpc > (byte) 10)
        return;
      this.remPlayer[ii].r.remoteID = (int) this.remPlayer[ii].r.now.bonusnpc;
      if (this.remPlayer[ii].r.remoteID == 0)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.blackNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.blackNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.blackNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.blackNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.blackNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.blackNPCTexture;
        this.remPlayer[ii].r.texture2D_1 = this.sc.texture2D_14;
        this.remPlayer[ii].r.texture2D_3 = this.sc.blackNPCdead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_lando;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_landoCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 1)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.whiteNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.whiteNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.whiteNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.whiteNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.whiteNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.whiteNPCTexture;
        this.remPlayer[ii].r.texture2D_1 = this.sc.whiteNPCTextureGreen2;
        this.remPlayer[ii].r.texture2D_3 = this.sc.whiteNPCdead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_johnny;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_johnnyCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 2)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.farmerNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.farmerNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.farmerNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.farmerNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.farmerNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_5;
        this.remPlayer[ii].r.texture2D_1 = this.sc.farmerGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.farmerDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_farmer;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_farmerCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 3)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.skelNPCmodel;
        this.remPlayer[ii].r.remoteModel = this.sc.skelNPCmodel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.skelNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.skelNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.skelNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_6;
        this.remPlayer[ii].r.texture2D_1 = this.sc.skelGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.skelDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_skel;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_skelCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 4)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.daisyNPCmodel;
        this.remPlayer[ii].r.remoteModel = this.sc.daisyNPCmodel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.daisyNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.daisyNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.daisyNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_7;
        this.remPlayer[ii].r.texture2D_1 = this.sc.daisyGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.daisyDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_daisy;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_daisyCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 5)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.vikingNPCmodel;
        this.remPlayer[ii].r.remoteModel = this.sc.vikingNPCmodel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.vikingNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.vikingNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.vikingNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_8;
        this.remPlayer[ii].r.texture2D_1 = this.sc.vikingGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.vikingDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_viking;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_vikingCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 6)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.ghostNPCmodel;
        this.remPlayer[ii].r.remoteModel = this.sc.ghostNPCmodel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.ghostNPCmodel;
        this.remPlayer[ii].r.texture2D_2 = this.sc.vikingNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.ghostNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.ghostNPCTexture;
        this.remPlayer[ii].r.texture2D_1 = this.sc.ghostNPCTexture;
        this.remPlayer[ii].r.texture2D_3 = this.sc.whiteNPCdead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_johnnycorpse;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_johnnycorpse;
      }
      if (this.remPlayer[ii].r.remoteID == 7)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.strawNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.strawNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.strawNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.strawNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.strawNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_9;
        this.remPlayer[ii].r.texture2D_1 = this.sc.strawGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.strawDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_straw;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_strawCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 8)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.robotNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.robotNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.robotNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.robotNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.robotNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_10;
        this.remPlayer[ii].r.texture2D_1 = this.sc.robotGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.robotDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_robot;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_robotCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 9)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.golemNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.golemNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.golemNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.golemNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.golemNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_11;
        this.remPlayer[ii].r.texture2D_1 = this.sc.golemGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.golemDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_golem;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_golemCheat;
      }
      if (this.remPlayer[ii].r.remoteID == 10)
      {
        this.remPlayer[ii].r.remoteModelwhole = this.sc.astroNPCModel;
        this.remPlayer[ii].r.remoteModel = this.sc.astroNPCModel;
        this.remPlayer[ii].r.remoteModelnoArms = this.sc.astroNPCnoarms;
        this.remPlayer[ii].r.texture2D_2 = this.sc.astroNPCTexture;
        this.remPlayer[ii].r.player2Texture = this.sc.astroNPCTexture;
        this.remPlayer[ii].r.texture2D_0 = this.sc.texture2D_12;
        this.remPlayer[ii].r.texture2D_1 = this.sc.astroGreen;
        this.remPlayer[ii].r.texture2D_3 = this.sc.astroDead;
        this.remPlayer[ii].r.rect_alivebodyRemote = this.rect_astro;
        this.remPlayer[ii].r.rect_alivebodyCheat = this.rect_astroCheat;
      }
      this.remPlayer[ii].r.remoteClean = 0.48f;
      this.remPlayer[ii].r.remoteCleanOn = true;
    }

    private void buildLocalSkin()
    {
      this.localID = this.sc.gameNPC;
      if (this.localID == 0)
      {
        this.sc.johnnyWallet = this.sc.landoWallet;
        this.whiteNPCdead = this.sc.blackNPCdead;
        this.rect_alivebody = this.rect_lando;
        this.rect_aliveCheat = this.rect_landoCheat;
        this.sc.player1Model = this.sc.blackNPCModel;
        this.sc.model_1 = this.sc.blackNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.blackNPCTexture;
        this.texture2D_1 = this.sc.texture2D_4;
      }
      if (this.localID == 1)
      {
        this.sc.johnnyWallet = this.sc.johnWallet;
        this.whiteNPCdead = this.sc.whiteNPCdead;
        this.rect_alivebody = this.rect_johnny;
        this.rect_aliveCheat = this.rect_johnnyCheat;
        this.sc.player1Model = this.sc.whiteNPCModel;
        this.sc.model_1 = this.sc.whiteNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.whiteNPCTexture;
        this.texture2D_1 = this.sc.texture2D_13;
      }
      if (this.localID == 2)
      {
        this.sc.johnnyWallet = this.sc.farmerWallet;
        this.whiteNPCdead = this.sc.farmerDead;
        this.rect_alivebody = this.rect_farmer;
        this.rect_aliveCheat = this.rect_farmerCheat;
        this.sc.player1Model = this.sc.farmerNPCModel;
        this.sc.model_1 = this.sc.farmerNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.farmerNPCTexture;
        this.texture2D_1 = this.sc.texture2D_5;
      }
      if (this.localID == 3)
      {
        this.sc.johnnyWallet = this.sc.skellyWallet;
        this.whiteNPCdead = this.sc.skelDead;
        this.rect_alivebody = this.rect_skel;
        this.rect_aliveCheat = this.rect_skelCheat;
        this.sc.player1Model = this.sc.skelNPCmodel;
        this.sc.model_1 = this.sc.skelNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.skelNPCTexture;
        this.texture2D_1 = this.sc.texture2D_6;
      }
      if (this.localID == 4)
      {
        this.sc.johnnyWallet = this.sc.daisyWallet;
        this.whiteNPCdead = this.sc.daisyDead;
        this.rect_alivebody = this.rect_daisy;
        this.rect_aliveCheat = this.rect_daisyCheat;
        this.sc.player1Model = this.sc.daisyNPCmodel;
        this.sc.model_1 = this.sc.daisyNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.daisyNPCTexture;
        this.texture2D_1 = this.sc.texture2D_7;
      }
      if (this.localID == 5)
      {
        this.sc.johnnyWallet = this.sc.vikingWallet;
        this.whiteNPCdead = this.sc.vikingDead;
        this.rect_alivebody = this.rect_viking;
        this.rect_aliveCheat = this.rect_vikingCheat;
        this.sc.player1Model = this.sc.vikingNPCmodel;
        this.sc.model_1 = this.sc.vikingNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.vikingNPCTexture;
        this.texture2D_1 = this.sc.texture2D_8;
      }
      if (this.localID == 7)
      {
        this.sc.johnnyWallet = this.sc.deadWallet;
        this.whiteNPCdead = this.sc.strawDead;
        this.rect_alivebody = this.rect_straw;
        this.rect_aliveCheat = this.rect_strawCheat;
        this.sc.player1Model = this.sc.strawNPCModel;
        this.sc.model_1 = this.sc.strawNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.strawNPCTexture;
        this.texture2D_1 = this.sc.texture2D_9;
      }
      if (this.localID == 8)
      {
        this.sc.johnnyWallet = this.sc.robotWallet;
        this.whiteNPCdead = this.sc.robotDead;
        this.rect_alivebody = this.rect_robot;
        this.rect_aliveCheat = this.rect_robotCheat;
        this.sc.player1Model = this.sc.robotNPCModel;
        this.sc.model_1 = this.sc.robotNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.robotNPCTexture;
        this.texture2D_1 = this.sc.texture2D_10;
      }
      if (this.localID == 9)
      {
        this.sc.johnnyWallet = this.sc.golemWallet;
        this.whiteNPCdead = this.sc.golemDead;
        this.rect_alivebody = this.rect_golem;
        this.rect_aliveCheat = this.rect_golemCheat;
        this.sc.player1Model = this.sc.golemNPCModel;
        this.sc.model_1 = this.sc.golemNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.golemNPCTexture;
        this.texture2D_1 = this.sc.texture2D_11;
      }
      if (this.localID == 10)
      {
        this.sc.johnnyWallet = this.sc.astroWallet;
        this.whiteNPCdead = this.sc.astroDead;
        this.rect_alivebody = this.rect_astro;
        this.rect_aliveCheat = this.rect_astroCheat;
        this.sc.player1Model = this.sc.astroNPCModel;
        this.sc.model_1 = this.sc.astroNPCnoarms;
        this.localModel = this.sc.player1Model;
        this.player1Texture = this.sc.astroNPCTexture;
        this.texture2D_1 = this.sc.texture2D_12;
      }
      this.quickSkin1.Parameters["Dead"].SetValue((Texture) this.whiteNPCdead);
      this.buildLocalString();
      this.headRot = this.myPlayer.displayState.npcRotation;
      this.headTilt = this.myPlayer.displayState.npcTilt;
      this.localClean = 0.45f;
      this.localCleanOn = true;
    }

    private void buildLocalString()
    {
      BloodnBacon4PT.needsHelpBuild.Length = 0;
      BloodnBacon4PT.needsHelpBuild.Append("  friend needs your help");
      BloodnBacon4PT.closehelpBuild.Length = 0;
      BloodnBacon4PT.closehelpBuild.Append("  hold down to pick up friend");
      BloodnBacon4PT.helpingUpBuild.Length = 0;
      BloodnBacon4PT.helpingUpBuild.Append("  friend is helping you");
      BloodnBacon4PT.liftingFriendBuild.Length = 0;
      BloodnBacon4PT.liftingFriendBuild.Append("  lifting your friend !!");
      BloodnBacon4PT.atDoorBuild.Length = 0;
      BloodnBacon4PT.atDoorBuild.Append("  press to move Barn Door");
      BloodnBacon4PT.atPump1Build.Length = 0;
      BloodnBacon4PT.atPump1Build.Append("  press to drink water");
      BloodnBacon4PT.atPump2Build.Length = 0;
      BloodnBacon4PT.atPump2Build.Append("  this Well is empty");
      BloodnBacon4PT.atKissingBuild.Length = 0;
      BloodnBacon4PT.atKissingBuild.Append("  to Wear Secret Item");
      BloodnBacon4PT.atLever1Build.Length = 0;
      BloodnBacon4PT.atLever1Build.Append("  press to activate Electric Fence");
      BloodnBacon4PT.atLever2Build.Length = 0;
      BloodnBacon4PT.atLever2Build.Append("  Out of Order, try again tomorrow");
      BloodnBacon4PT.atLever3Build.Length = 0;
      BloodnBacon4PT.atLever3Build.Append("  electric fence is in operation");
      BloodnBacon4PT.atPumpBusyBuild.Length = 0;
      BloodnBacon4PT.atPumpBusyBuild.Append("  Pump is being used");
      BloodnBacon4PT.atgrinderBuild.Length = 0;
      BloodnBacon4PT.atgrinderBuild.Append("  Shoot the Glowing Buttons !!");
      BloodnBacon4PT.atLobbyBuild.Length = 0;
      BloodnBacon4PT.atLobbyBuild.Append("  press to call a friend");
      BloodnBacon4PT.needbloodBuild.Length = 0;
      BloodnBacon4PT.needbloodBuild.Append("  Kick parts into Front-Blade");
      BloodnBacon4PT.reloadBuild.Length = 0;
      BloodnBacon4PT.reloadBuild.Append("  press to Reload Weapon");
      BloodnBacon4PT.atDoorLockedBuild.Length = 0;
      BloodnBacon4PT.atDoorLockedBuild.Append("  Barn Door is locked");
      BloodnBacon4PT.atFarmerBuild.Length = 0;
      BloodnBacon4PT.atFarmerBuild.Append("  press to talk to Farmer");
      BloodnBacon4PT.pickupMilkBuild.Length = 0;
      BloodnBacon4PT.pickupMilkBuild.Append("  press to pickup Boars Milk");
      BloodnBacon4PT.pickupAmmoBuild.Length = 0;
      BloodnBacon4PT.pickupAmmoBuild.Append("  press to pickup Bullet Box");
      BloodnBacon4PT.pickupHulkBuild.Length = 0;
      BloodnBacon4PT.pickupHulkBuild.Append("  press to pickup Bulkify");
      BloodnBacon4PT.pickupGrenBuild.Length = 0;
      BloodnBacon4PT.pickupGrenBuild.Append("  press to pickup Grenade");
      BloodnBacon4PT.pickupPillBuild.Length = 0;
      BloodnBacon4PT.pickupPillBuild.Append("  press to pickup BounceBack");
      BloodnBacon4PT.pickupRocketBuild.Length = 0;
      BloodnBacon4PT.pickupRocketBuild.Append("  press to pickup Rocket");
      BloodnBacon4PT.pickupFullBuild.Length = 0;
      BloodnBacon4PT.pickupFullBuild.Append("  cant carry more of that");
      BloodnBacon4PT.pickWeaponBuild.Length = 0;
      BloodnBacon4PT.pickWeaponBuild.Append("  press to take Weapon");
    }

    public void SetTangents(ref Curve x, ref Curve y, ref Curve z)
    {
      for (int index1 = 0; index1 < x.Keys.Count; ++index1)
      {
        int index2 = index1 - 1;
        if (index2 < 0)
          index2 = index1;
        int index3 = index1 + 1;
        if (index3 == x.Keys.Count)
          index3 = index1;
        CurveKey key1 = x.Keys[index2];
        CurveKey key2 = x.Keys[index3];
        CurveKey key3 = x.Keys[index1];
        BloodnBacon4PT.SetCurveKeyTangent(ref key1, ref key3, ref key2);
        x.Keys[index1] = key3;
        CurveKey key4 = y.Keys[index2];
        CurveKey key5 = y.Keys[index3];
        CurveKey key6 = y.Keys[index1];
        BloodnBacon4PT.SetCurveKeyTangent(ref key4, ref key6, ref key5);
        y.Keys[index1] = key6;
        CurveKey key7 = z.Keys[index2];
        CurveKey key8 = z.Keys[index3];
        CurveKey key9 = z.Keys[index1];
        BloodnBacon4PT.SetCurveKeyTangent(ref key7, ref key9, ref key8);
        z.Keys[index1] = key9;
      }
    }

    private static void SetCurveKeyTangent(ref CurveKey prev, ref CurveKey cur, ref CurveKey next)
    {
      float num1 = next.Position - prev.Position;
      float num2 = next.Value - prev.Value;
      if ((double) Math.Abs(num2) < 1.4012984643248171E-45)
      {
        cur.TangentIn = 0.0f;
        cur.TangentOut = 0.0f;
      }
      else
      {
        cur.TangentIn = num2 * (cur.Position - prev.Position) / num1;
        cur.TangentOut = num2 * (next.Position - cur.Position) / num1;
      }
    }

    private void BackgroundWorkerThread()
    {
      while (!this.backgroundThreadExit.WaitOne(350))
      {
        if (!this.isBusy && this.loads.Count > 0)
        {
          this.isBusy = true;
          switch (this.loads[0])
          {
            case 1:
              int talkIndex = this.talkIndex;
              this.bool_2 = false;
              try
              {
                this.farmerDialog1.sound[0].Dispose();
              }
              catch
              {
                this.bool_2 = false;
              }
              try
              {
                this.farmerDialog1 = new SoundEffects(1);
                this.farmerDialog1.sound[0] = this.contentTalk.Load<SoundEffect>("farmer_" + this.dialogueName[talkIndex]).CreateInstance();
                CultureInfo invariantCulture = CultureInfo.InvariantCulture;
                StreamReader streamReader = new StreamReader("ABCDE3/farmer_" + this.dialogueName[talkIndex] + ".txt");
                for (int index = 0; index < this.farmerJaw.Length; ++index)
                {
                  if (streamReader.Peek() >= 0)
                  {
                    this.farmerJaw[index] = float.Parse(streamReader.ReadLine(), (IFormatProvider) invariantCulture);
                    if ((double) this.farmerJaw[index] < 0.0)
                    {
                      this.farmerJaw[index] = -1f;
                      break;
                    }
                  }
                  else
                  {
                    this.farmerJaw[index] = -1f;
                    break;
                  }
                }
                this.farmerJaw[this.farmerJaw.Length - 1] = -1f;
                streamReader.Close();
                streamReader.Dispose();
                this.farmerDialog1.count = 0;
                this.farmerDialog1.sound[0].Play();
                this.farmerDialog1.sound[0].Volume = this.sc.vv;
                this.bool_2 = true;
                this.farmerJawIndex = 1;
                break;
              }
              catch
              {
                this.bool_2 = false;
                break;
              }
            case 2:
              int whichPigTalks1 = Cutty4.whichPigTalks;
              this.cuttyBoss[whichPigTalks1].pigDialog1Loaded = false;
              try
              {
                this.cuttyBoss[whichPigTalks1].pigDialog1.sound[0].Dispose();
              }
              catch
              {
                this.cuttyBoss[whichPigTalks1].pigDialog1Loaded = false;
              }
              try
              {
                this.cuttyBoss[whichPigTalks1].pigDialog1 = new SoundEffects(1);
                this.cuttyBoss[whichPigTalks1].pigDialog1.sound[0] = this.contentTalk.Load<SoundEffect>("cutty_" + this.cuttyBoss[whichPigTalks1].pigdialogueName[this.cuttyBoss[whichPigTalks1].pigLine]).CreateInstance();
                CultureInfo invariantCulture = CultureInfo.InvariantCulture;
                StreamReader streamReader = new StreamReader("ABCDE3/cutty_" + this.cuttyBoss[whichPigTalks1].pigdialogueName[this.cuttyBoss[whichPigTalks1].pigLine] + ".txt");
                for (int index = 0; index < this.cuttyBoss[whichPigTalks1].pigJaw.Length; ++index)
                {
                  this.cuttyBoss[whichPigTalks1].pigJaw[index] = float.Parse(streamReader.ReadLine(), (IFormatProvider) invariantCulture);
                  if ((double) this.cuttyBoss[whichPigTalks1].pigJaw[index] == -1.0)
                    break;
                }
                streamReader.Close();
                streamReader.Dispose();
                this.cuttyBoss[whichPigTalks1].pigJawIndex = 1;
                this.cuttyBoss[whichPigTalks1].pigDialog1.count = 0;
                this.cuttyBoss[whichPigTalks1].pigDialog1.sound[0].Play();
                this.cuttyBoss[whichPigTalks1].pigDialog1.sound[0].Volume = this.sc.vv;
                this.cuttyBoss[whichPigTalks1].pigDialog1Loaded = true;
                break;
              }
              catch
              {
                this.cuttyBoss[whichPigTalks1].pigDialog1Loaded = false;
                break;
              }
            case 3:
              int whichPigTalks2 = Princess4.whichPigTalks;
              this.princess[whichPigTalks2].pigDialog1Loaded = false;
              try
              {
                this.princess[whichPigTalks2].pigDialog1.sound[0].Dispose();
              }
              catch
              {
                this.princess[whichPigTalks2].pigDialog1Loaded = false;
              }
              try
              {
                this.princess[whichPigTalks2].pigDialog1 = new SoundEffects(1);
                this.princess[whichPigTalks2].pigDialog1.sound[0] = this.contentTalk.Load<SoundEffect>("cutty_" + this.princess[whichPigTalks2].pigdialogueName[this.princess[whichPigTalks2].pigLine]).CreateInstance();
                CultureInfo invariantCulture = CultureInfo.InvariantCulture;
                StreamReader streamReader = new StreamReader("ABCDE3/cutty_" + this.princess[whichPigTalks2].pigdialogueName[this.princess[whichPigTalks2].pigLine] + ".txt");
                for (int index = 0; index < this.princess[whichPigTalks2].pigJaw.Length; ++index)
                {
                  this.princess[whichPigTalks2].pigJaw[index] = float.Parse(streamReader.ReadLine(), (IFormatProvider) invariantCulture);
                  if ((double) this.princess[whichPigTalks2].pigJaw[index] == -1.0)
                    break;
                }
                streamReader.Close();
                streamReader.Dispose();
                this.princess[whichPigTalks2].pigJawIndex = 1;
                this.princess[whichPigTalks2].pigDialog1.count = 0;
                this.princess[whichPigTalks2].pigDialog1.sound[0].Play();
                this.princess[whichPigTalks2].pigDialog1.sound[0].Volume = this.sc.vv;
                this.princess[whichPigTalks2].pigDialog1Loaded = true;
                break;
              }
              catch
              {
                this.princess[whichPigTalks2].pigDialog1Loaded = false;
                break;
              }
            case 7:
              int talktwinIndex = this.talktwinIndex;
              this.twinDialog1Loaded = false;
              try
              {
                this.twinDialog1.sound[0].Dispose();
              }
              catch
              {
                this.twinDialog1Loaded = false;
              }
              try
              {
                this.twinDialog1 = new SoundEffects(1);
                this.twinDialog1.sound[0] = this.contentTalk.Load<SoundEffect>(this.dialogueTwin[talktwinIndex]).CreateInstance();
                CultureInfo invariantCulture = CultureInfo.InvariantCulture;
                StreamReader streamReader = new StreamReader("ABCDE3/" + this.dialogueTwin[talktwinIndex] + ".txt");
                for (int index = 0; index < this.twinJaw.Length; ++index)
                {
                  if (streamReader.Peek() >= 0)
                  {
                    this.twinJaw[index] = float.Parse(streamReader.ReadLine(), (IFormatProvider) invariantCulture);
                    if ((double) this.twinJaw[index] < 0.0)
                    {
                      this.twinJaw[index] = -1f;
                      break;
                    }
                  }
                  else
                  {
                    this.twinJaw[index] = -1f;
                    break;
                  }
                }
                this.twinJaw[this.twinJaw.Length - 1] = -1f;
                streamReader.Close();
                streamReader.Dispose();
                this.twinDialog1.count = 0;
                this.twinDialog1.sound[0].Volume = this.sc.vv * (1f - MathHelper.Clamp((float) (((double) Vector3.Distance(this.campos, this.twinPosition) - 50.0) / 230.0), 0.0f, 0.9f));
                this.twinDialog1.sound[0].Apply3D(this.audiolistener, this.audioemitter);
                this.twinDialog1.sound[0].Play();
                this.twinDialog1Loaded = true;
                this.twinJawIndex = 1;
                break;
              }
              catch
              {
                this.twinDialog1Loaded = false;
                break;
              }
          }
          this.loads.RemoveAt(0);
          this.isBusy = false;
        }
      }
    }

    private void abortThread()
    {
      try
      {
        if (this.backgroundThread == null)
          return;
        this.backgroundThreadExit.Set();
        this.backgroundThread.Join();
      }
      catch
      {
      }
    }

    private void buildButtons(
      ref BloodnBacon4PT.hole hole,
      Vector3 scale,
      Vector3 pos,
      float fadeA,
      int choice)
    {
      this.hitstreamTemp.Trans = Matrix.CreateScale(scale) * Matrix.CreateTranslation(pos);
      this.hitstreamTemp.Fade = fadeA;
      Vector4 vector4 = hole.stainR[choice];
      this.hitstreamTemp.Coord = new Vector4(288f / vector4.Z, vector4.X / 288f, 864f / vector4.W, vector4.Y / 864f);
      hole.stainTrans[hole.stainIndex] = this.hitstreamTemp;
      ++hole.stainIndex;
      if (hole.stainIndex > hole.stainCapacity - 1)
        hole.stainIndex = 0;
      ++hole.stainMax;
      if (hole.stainMax <= hole.stainCapacity - 1)
        return;
      hole.stainMax = hole.stainCapacity - 1;
    }

    private void updatebloodLevel()
    {
      if ((double) this.oldbloodLevel != (double) this.sc.bloodLevel)
      {
        this.oldbloodLevel = this.sc.bloodLevel;
        this.sc.bloodLevel = MathHelper.Clamp(this.sc.bloodLevel, 0.0f, 620f);
        float num1 = this.sc.bloodLevel / 60f;
        if (this.getButtonState(this.lastButton) == 2)
        {
          float num2 = (float) this.getButtonCost(this.lastButton) / 60f;
          Vector3 position1 = new Vector3(3000f, 0.0f, 3000f) + new Vector3(-1463.3f, 157.734f, -1580.35f);
          this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(MathHelper.Clamp(num1 - num2, 0.0f, 8f), 1.2f, 0.147f)) * Matrix.CreateTranslation(position1);
          this.hitstreamTemp.Fade = 0.6f;
          Vector4 vector4_1 = this.grinderButton.stainR[21];
          this.hitstreamTemp.Coord = new Vector4(288f / vector4_1.Z, vector4_1.X / 288f, 864f / vector4_1.W, vector4_1.Y / 864f);
          this.grinderButton.stainTrans[7] = this.hitstreamTemp;
          Vector3 position2 = new Vector3(3000f, 0.0f, 3000f) + new Vector3(-1463.3f, 157.734f, -1580.35f) + new Vector3((float) (19.984619140625 * ((double) num1 - (double) num2)), 0.0f, 0.0f);
          this.hitstreamTemp.Trans = (double) num1 - (double) num2 > 7.0 ? Matrix.CreateScale(new Vector3(1f, 1.2f, 0.147f)) * Matrix.CreateTranslation(new Vector3(140f, 0.0f, 0.0f)) : Matrix.CreateScale(new Vector3(MathHelper.Clamp(num2, 0.0f, (float) (8.0 - ((double) num1 - (double) num2))), 1.2f, 0.147f)) * Matrix.CreateTranslation(position2);
          this.hitstreamTemp.Fade = 0.6f;
          Vector4 vector4_2 = this.grinderButton.stainR[22];
          this.hitstreamTemp.Coord = new Vector4(288f / vector4_2.Z, vector4_2.X / 288f, 864f / vector4_2.W, vector4_2.Y / 864f);
          this.grinderButton.stainTrans[8] = this.hitstreamTemp;
          this.grinderButton.stainMax = 9;
        }
        else
        {
          Vector3 position = new Vector3(3000f, 0.0f, 3000f) + new Vector3(-1463.3f, 157.734f, -1580.35f);
          this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(MathHelper.Clamp(num1, 0.0f, 8f), 1.2f, 0.147f)) * Matrix.CreateTranslation(position);
          this.hitstreamTemp.Fade = 0.6f;
          Vector4 vector4 = this.grinderButton.stainR[21];
          this.hitstreamTemp.Coord = new Vector4(288f / vector4.Z, vector4.X / 288f, 864f / vector4.W, vector4.Y / 864f);
          this.grinderButton.stainTrans[7] = this.hitstreamTemp;
          this.grinderButton.stainMax = 8;
        }
        if ((double) this.sc.bloodLevel > (double) this.int_3 && this.sc.grinder_Unlock[0] == 1 && this.sc.grinder_Supply[0] > 0)
        {
          if (this.button1state != 2)
            this.setButton(1, 1);
        }
        else
          this.setButton(1, 0);
        if ((double) this.sc.bloodLevel > (double) this.int_4 && this.sc.grinder_Unlock[1] == 1 && this.sc.grinder_Supply[1] > 0)
        {
          if (this.button2state != 2)
            this.setButton(2, 1);
        }
        else
          this.setButton(2, 0);
        if ((double) this.sc.bloodLevel > (double) this.int_5 && this.sc.grinder_Unlock[2] == 1 && this.sc.grinder_Supply[2] > 0)
        {
          if (this.button3state != 2)
            this.setButton(3, 1);
        }
        else
          this.setButton(3, 0);
        if ((double) this.sc.bloodLevel > (double) this.int_6 && this.sc.grinder_Unlock[3] == 1 && this.sc.grinder_Supply[3] > 0)
        {
          if (this.button4state != 2)
            this.setButton(4, 1);
        }
        else
          this.setButton(4, 0);
        if ((double) this.sc.bloodLevel > (double) this.int_7 && this.sc.grinder_Unlock[4] == 1 && this.sc.grinder_Supply[4] > 0)
        {
          if (this.button5state != 2)
            this.setButton(5, 1);
        }
        else
          this.setButton(5, 0);
        if ((double) this.sc.bloodLevel > (double) this.int_8 && this.sc.grinder_Unlock[5] == 1 && this.sc.grinder_Supply[5] > 0)
        {
          if (this.button6state != 2)
            this.setButton(6, 1);
        }
        else
          this.setButton(6, 0);
      }
      --this.buttonTimer;
      if (this.buttonTimer > 0)
        return;
      this.buttonTimer = 0;
      if (this.getButtonState(7) == 2)
      {
        this.setButton(7, 0);
        this.sc.buttonPress.Play(this.sc.ev, 0.0f, 0.0f);
        if (this.lastButton > 0 && this.lastButton < 7)
        {
          if (this.sc.grinder_Supply[this.lastButton - 1] <= 0)
            return;
          --this.sc.grinder_Supply[this.lastButton - 1];
          if (this.sc.grinder_Supply[this.lastButton - 1] == 0)
            this.setButton(this.lastButton, 0);
        }
        if (this.lastButton == 1)
        {
          this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
          this.dropPickup(ref this.bulletbox, (float) this.rr.Next(7, 55) / 100f, 3.8f, 0.3f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 25, 120f, 210f, 2, false);
        }
        if (this.lastButton == 2)
        {
          this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
          this.dropPickup(ref this.grenade, (float) this.rr.Next(7, 55) / 100f, 3.4f, 0.5f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 45, 180f, 260f, 2, false);
        }
        if (this.lastButton == 3)
        {
          this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
          this.dropPickup(ref this.milk, (float) this.rr.Next(7, 55) / 100f, 2f, 1.35f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 25, 120f, 210f, 1, false);
        }
        if (this.lastButton == 4)
        {
          this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
          this.dropPickup(ref this.hulkcan, (float) this.rr.Next(7, 65) / 100f, 2f, 1.5f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(6, 12) / 100.0), 35, 120f, 210f, 2, false);
        }
        if (this.lastButton == 5)
        {
          this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
          this.dropPickup(ref this.pill, (float) this.rr.Next(7, 65) / 100f, 3.4f, 0.5f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(6, 12) / 100.0), 35, 120f, 210f, 2, false);
        }
        if (this.lastButton != 6)
          return;
        this.Gunoffspin = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(1611.204f + (float) this.rr.Next(-8, 8), (float) (87 + this.rr.Next(0, 14)), 1411f);
        this.dropPickup(ref this.rocket, (float) this.rr.Next(25, 65) / 100f, 8f, 0.6f, this.Gunoffspin, new Vector3(1E-06f, 0.0f, 0.0f), 1, (float) (-(double) this.rr.Next(8, 14) / 100.0), 35, 120f, 210f, 0, false);
      }
      else
      {
        if (this.getButtonState(7) != 0 || this.getButtonState(this.lastButton) != 2)
          return;
        this.setButton(7, 1);
      }
    }

    private int getButtonState(int x)
    {
      switch (x)
      {
        case 1:
          return this.button1state;
        case 2:
          return this.button2state;
        case 3:
          return this.button3state;
        case 4:
          return this.button4state;
        case 5:
          return this.button5state;
        case 6:
          return this.button6state;
        case 7:
          return this.button7state;
        default:
          return -1;
      }
    }

    private int getButtonCost(int x)
    {
      switch (x)
      {
        case 1:
          return this.int_3;
        case 2:
          return this.int_4;
        case 3:
          return this.int_5;
        case 4:
          return this.int_6;
        case 5:
          return this.int_7;
        case 6:
          return this.int_8;
        default:
          return 0;
      }
    }

    private void shootButtons(Vector3 point)
    {
      if ((double) point.X < (double) this.buttonsRowMin.X || (double) point.X > (double) this.buttonsRowMax.X)
        return;
      if ((double) point.Y > (double) this.startButtonMin.Y && (double) point.Y < (double) this.startButtonMax.Y && (double) point.X > (double) this.startButtonMin.X && (double) point.X < (double) this.startButtonMax.X)
      {
        if (this.button7state == 1 && this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
        {
          this.setButton(7, 2);
          this.setButton(this.lastButton, 1);
        }
        if (this.button7state == 0)
          this.sc.buttonDeny.Play(this.sc.ev, 0.0f, 0.0f);
        this.oldbloodLevel = -1f;
      }
      else
      {
        if ((double) point.Y <= (double) this.buttonsRowMin.Y || (double) point.Y >= (double) this.buttonsRowMax.Y)
          return;
        this.oldbloodLevel = -1f;
        if (this.button7state == 2)
          this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
        else if ((double) point.X > (double) this.buttonsRowMin.X && (double) point.X < (double) this.button1x)
        {
          if (this.button1state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(1, 2);
            this.lastButton = 1;
          }
          else
          {
            if (this.button1state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(1, 0);
          }
        }
        else if ((double) point.X > (double) this.button1x && (double) point.X < (double) this.button2x)
        {
          if (this.button2state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(2, 2);
            this.lastButton = 2;
          }
          else
          {
            if (this.button2state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(2, 0);
          }
        }
        else if ((double) point.X > (double) this.button2x && (double) point.X < (double) this.button3x)
        {
          if (this.button3state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(3, 2);
            this.lastButton = 3;
          }
          else
          {
            if (this.button3state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(3, 0);
          }
        }
        else if ((double) point.X > (double) this.button3x && (double) point.X < (double) this.button4x)
        {
          if (this.button4state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(4, 2);
            this.lastButton = 4;
          }
          else
          {
            if (this.button4state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(4, 0);
          }
        }
        else if ((double) point.X > (double) this.button4x && (double) point.X < (double) this.button5x)
        {
          if (this.button5state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(5, 2);
            this.lastButton = 5;
          }
          else
          {
            if (this.button5state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(5, 0);
          }
        }
        else
        {
          if ((double) point.X <= (double) this.button5x || (double) point.X >= (double) this.buttonsRowMax.X)
            return;
          if (this.button6state == 1)
          {
            this.sc.buttonPress.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.lastButton != -1 && this.getButtonState(this.lastButton) == 2)
              this.setButton(this.lastButton, 1);
            this.setButton(6, 2);
            this.lastButton = 6;
          }
          else
          {
            if (this.button6state != 0)
              return;
            this.sc.buttonDeny.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.setButton(6, 0);
          }
        }
      }
    }

    private void setButton(int button, int state)
    {
      Vector3 vector3_1 = new Vector3(3000f, 0.0f, 3000f);
      float z1 = -4f;
      float z2 = 2f;
      float z3 = -0.5f;
      if (button == 1)
      {
        int index = button - 1;
        Vector3 vector3_2 = vector3_1 + new Vector3(-1460f, 132.554f, -1570.2f);
        switch (state)
        {
          case 0:
            Vector3 vector3_3 = new Vector3(0.0f, 0.0f, z1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_3 + vector3_2);
            this.hitstreamTemp.Fade = 0.9f;
            Vector4 vector4_1 = this.grinderButton.stainR[3 * index];
            if (this.sc.grinder_Unlock[index] == 0)
              vector4_1 = this.grinderButton.stainR[23];
            if (this.sc.grinder_Supply[index] < 1)
              vector4_1 = this.grinderButton.stainR[24];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_1.Z, vector4_1.X / 288f, 864f / vector4_1.W, vector4_1.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button1state = 0;
            break;
          case 1:
            Vector3 vector3_4 = new Vector3(0.0f, 0.0f, z2);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_4 + vector3_2);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_2 = this.grinderButton.stainR[3 * index + 1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_2.Z, vector4_2.X / 288f, 864f / vector4_2.W, vector4_2.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button1state = 1;
            break;
          case 2:
            Vector3 vector3_5 = new Vector3(0.0f, 0.0f, z3);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_5 + vector3_2);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_3 = this.grinderButton.stainR[3 * index + 2];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_3.Z, vector4_3.X / 288f, 864f / vector4_3.W, vector4_3.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button1state = 2;
            break;
        }
      }
      else if (button == 2)
      {
        int index = button - 1;
        Vector3 vector3_6 = vector3_1 + new Vector3(-1437.2f, 132.554f, -1570.2f);
        switch (state)
        {
          case 0:
            Vector3 vector3_7 = new Vector3(0.0f, 0.0f, z1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_7 + vector3_6);
            this.hitstreamTemp.Fade = 0.9f;
            Vector4 vector4_4 = this.grinderButton.stainR[3 * index];
            if (this.sc.grinder_Unlock[index] == 0)
              vector4_4 = this.grinderButton.stainR[23];
            if (this.sc.grinder_Supply[index] < 1)
              vector4_4 = this.grinderButton.stainR[24];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_4.Z, vector4_4.X / 288f, 864f / vector4_4.W, vector4_4.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button2state = 0;
            break;
          case 1:
            Vector3 vector3_8 = new Vector3(0.0f, 0.0f, z2);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_8 + vector3_6);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_5 = this.grinderButton.stainR[3 * index + 1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_5.Z, vector4_5.X / 288f, 864f / vector4_5.W, vector4_5.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button2state = 1;
            break;
          case 2:
            Vector3 vector3_9 = new Vector3(0.0f, 0.0f, z3);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_9 + vector3_6);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_6 = this.grinderButton.stainR[3 * index + 2];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_6.Z, vector4_6.X / 288f, 864f / vector4_6.W, vector4_6.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button2state = 2;
            break;
        }
      }
      else if (button == 3)
      {
        int index = button - 1;
        Vector3 vector3_10 = vector3_1 + new Vector3(-1413.4f, 132.554f, -1570.2f);
        switch (state)
        {
          case 0:
            Vector3 vector3_11 = new Vector3(0.0f, 0.0f, z1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_11 + vector3_10);
            this.hitstreamTemp.Fade = 0.9f;
            Vector4 vector4_7 = this.grinderButton.stainR[3 * index];
            if (this.sc.grinder_Unlock[index] == 0)
              vector4_7 = this.grinderButton.stainR[23];
            if (this.sc.grinder_Supply[index] < 1)
              vector4_7 = this.grinderButton.stainR[24];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_7.Z, vector4_7.X / 288f, 864f / vector4_7.W, vector4_7.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button3state = 0;
            break;
          case 1:
            Vector3 vector3_12 = new Vector3(0.0f, 0.0f, z2);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_12 + vector3_10);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_8 = this.grinderButton.stainR[3 * index + 1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_8.Z, vector4_8.X / 288f, 864f / vector4_8.W, vector4_8.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button3state = 1;
            break;
          case 2:
            Vector3 vector3_13 = new Vector3(0.0f, 0.0f, z3);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_13 + vector3_10);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_9 = this.grinderButton.stainR[3 * index + 2];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_9.Z, vector4_9.X / 288f, 864f / vector4_9.W, vector4_9.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button3state = 2;
            break;
        }
      }
      else if (button == 4)
      {
        int index = button - 1;
        Vector3 vector3_14 = vector3_1 + new Vector3(-1389.3f, 132.554f, -1570.2f);
        switch (state)
        {
          case 0:
            Vector3 vector3_15 = new Vector3(0.0f, 0.0f, z1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_15 + vector3_14);
            this.hitstreamTemp.Fade = 0.9f;
            Vector4 vector4_10 = this.grinderButton.stainR[3 * index];
            if (this.sc.grinder_Unlock[index] == 0)
              vector4_10 = this.grinderButton.stainR[23];
            if (this.sc.grinder_Supply[index] < 1)
              vector4_10 = this.grinderButton.stainR[24];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_10.Z, vector4_10.X / 288f, 864f / vector4_10.W, vector4_10.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button4state = 0;
            break;
          case 1:
            Vector3 vector3_16 = new Vector3(0.0f, 0.0f, z2);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_16 + vector3_14);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_11 = this.grinderButton.stainR[3 * index + 1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_11.Z, vector4_11.X / 288f, 864f / vector4_11.W, vector4_11.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button4state = 1;
            break;
          case 2:
            Vector3 vector3_17 = new Vector3(0.0f, 0.0f, z3);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_17 + vector3_14);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_12 = this.grinderButton.stainR[3 * index + 2];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_12.Z, vector4_12.X / 288f, 864f / vector4_12.W, vector4_12.Y / 864f);
            this.grinderButton.stainTrans[index] = this.hitstreamTemp;
            this.button4state = 2;
            break;
        }
      }
      else
      {
        if (button == 5)
        {
          int index = button - 1;
          Vector3 vector3_18 = vector3_1 + new Vector3(-1365f, 132.554f, -1570.2f);
          switch (state)
          {
            case 0:
              Vector3 vector3_19 = new Vector3(0.0f, 0.0f, z1);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_19 + vector3_18);
              this.hitstreamTemp.Fade = 0.9f;
              Vector4 vector4_13 = this.grinderButton.stainR[3 * index];
              if (this.sc.grinder_Unlock[index] == 0)
                vector4_13 = this.grinderButton.stainR[23];
              if (this.sc.grinder_Supply[index] < 1)
                vector4_13 = this.grinderButton.stainR[24];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_13.Z, vector4_13.X / 288f, 864f / vector4_13.W, vector4_13.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button5state = 0;
              return;
            case 1:
              Vector3 vector3_20 = new Vector3(0.0f, 0.0f, z2);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_20 + vector3_18);
              this.hitstreamTemp.Fade = 1f;
              Vector4 vector4_14 = this.grinderButton.stainR[3 * index + 1];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_14.Z, vector4_14.X / 288f, 864f / vector4_14.W, vector4_14.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button5state = 1;
              return;
            case 2:
              Vector3 vector3_21 = new Vector3(0.0f, 0.0f, z3);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_21 + vector3_18);
              this.hitstreamTemp.Fade = 1f;
              Vector4 vector4_15 = this.grinderButton.stainR[3 * index + 2];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_15.Z, vector4_15.X / 288f, 864f / vector4_15.W, vector4_15.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button5state = 2;
              return;
          }
        }
        if (button == 6)
        {
          int index = button - 1;
          Vector3 vector3_22 = vector3_1 + new Vector3(-1341.35f, 132.554f, -1570.2f);
          switch (state)
          {
            case 0:
              Vector3 vector3_23 = new Vector3(0.0f, 0.0f, z1);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_23 + vector3_22);
              this.hitstreamTemp.Fade = 0.9f;
              Vector4 vector4_16 = this.grinderButton.stainR[3 * index];
              if (this.sc.grinder_Unlock[index] == 0)
                vector4_16 = this.grinderButton.stainR[23];
              if (this.sc.grinder_Supply[index] < 1)
                vector4_16 = this.grinderButton.stainR[24];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_16.Z, vector4_16.X / 288f, 864f / vector4_16.W, vector4_16.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button6state = 0;
              return;
            case 1:
              Vector3 vector3_24 = new Vector3(0.0f, 0.0f, z2);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_24 + vector3_22);
              this.hitstreamTemp.Fade = 1f;
              Vector4 vector4_17 = this.grinderButton.stainR[3 * index + 1];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_17.Z, vector4_17.X / 288f, 864f / vector4_17.W, vector4_17.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button6state = 1;
              return;
            case 2:
              Vector3 vector3_25 = new Vector3(0.0f, 0.0f, z3);
              this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1f, 1f, 1f)) * Matrix.CreateTranslation(vector3_25 + vector3_22);
              this.hitstreamTemp.Fade = 1f;
              Vector4 vector4_18 = this.grinderButton.stainR[3 * index + 2];
              this.hitstreamTemp.Coord = new Vector4(288f / vector4_18.Z, vector4_18.X / 288f, 864f / vector4_18.W, vector4_18.Y / 864f);
              this.grinderButton.stainTrans[index] = this.hitstreamTemp;
              this.button6state = 2;
              return;
          }
        }
        if (button != 7)
          return;
        int index1 = button - 1;
        Vector3 vector3_26 = vector3_1 + new Vector3(-1403f, 91.2f, -1570f);
        switch (state)
        {
          case 0:
            Vector3 vector3_27 = new Vector3(0.0f, 0.0f, 0.0f);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1.2f, 1.2f, 1f)) * Matrix.CreateTranslation(vector3_27 + vector3_26);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_19 = this.grinderButton.stainR[3 * index1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_19.Z, vector4_19.X / 288f, 864f / vector4_19.W, vector4_19.Y / 864f);
            this.grinderButton.stainTrans[index1] = this.hitstreamTemp;
            this.button7state = 0;
            break;
          case 1:
            Vector3 vector3_28 = new Vector3(0.0f, 0.0f, 1f);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1.2f, 1.2f, 1f)) * Matrix.CreateTranslation(vector3_28 + vector3_26);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_20 = this.grinderButton.stainR[3 * index1 + 1];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_20.Z, vector4_20.X / 288f, 864f / vector4_20.W, vector4_20.Y / 864f);
            this.grinderButton.stainTrans[index1] = this.hitstreamTemp;
            this.button7state = 1;
            break;
          case 2:
            if (this.buttonTimer > 0)
              break;
            Vector3 vector3_29 = new Vector3(0.0f, 0.0f, -3f);
            this.hitstreamTemp.Trans = Matrix.CreateScale(new Vector3(1.2f, 1.2f, 1f)) * Matrix.CreateTranslation(vector3_29 + vector3_26);
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4_21 = this.grinderButton.stainR[3 * index1 + 2];
            this.hitstreamTemp.Coord = new Vector4(288f / vector4_21.Z, vector4_21.X / 288f, 864f / vector4_21.W, vector4_21.Y / 864f);
            this.grinderButton.stainTrans[index1] = this.hitstreamTemp;
            this.buttonTimer = 3;
            this.sc.bloodLevel -= (float) this.getButtonCost(this.lastButton);
            if ((double) this.sc.bloodLevel < 0.0)
              this.sc.bloodLevel = 0.0f;
            this.button7state = 2;
            this.sc.buttonPackage.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            break;
        }
      }
    }

    private void ExitNow()
    {
      this.leavingGame = true;
      this.exitNicer();
      this.closeallSessions();
      this.sc.protectScreen = false;
      LoadingScreen1.Load(this.sc, false, new PlayerIndex?(), (NetworkSession) null, (GameScreen) new MainMenu(false));
    }

    private void loadNextDay(bool incrementDay, bool savegame)
    {
      int num = this.sc.currentDay - 1;
      bool flag1 = (int) this.sc.maxDay() >= num;
      if (savegame && flag1)
      {
        this.sc.days[this.sc.currentDay] = this.sc.df + 1;
        this.sc.SaveGame();
        this.sc.weFailed = 0;
      }
      if (!this.sc.host)
        this.sc.currentDay = this.sc.tempcurrentDay;
      this.sc.protectScreen = false;
      this.exitNicer();
      GC.Collect();
      bool flag2 = false;
      if (this.sc.host)
      {
        if (incrementDay || !flag2)
          ++this.sc.gameSeed;
        if (incrementDay)
        {
          ++this.sc.currentDay;
          if (this.sc.currentDay > 101)
            this.sc.currentDay = 1;
        }
        if (this.remPlayer.Count > 1)
        {
          byte currentDay = (byte) this.sc.currentDay;
          if (!incrementDay && !flag2)
            this.myPlayer.now.load = (byte) 1;
          if (!incrementDay && flag2)
            this.myPlayer.now.load = (byte) 1;
          if (incrementDay)
            this.myPlayer.now.load = (byte) 2;
          packetSender packetSender = new packetSender();
          packetSender.clean();
          packetSender.Write((byte) 31);
          packetSender.Write(this.myPlayer.now.load);
          packetSender.Write(currentDay);
          byte[] packetB = packetSender.mypackets();
          this.SendP2PPacket(ref packetB, EP2PSend.k_EP2PSendReliable);
        }
      }
      if (!flag1)
      {
        int milks = this.sc.milks;
        int hulks = this.sc.hulks;
        int pills = this.sc.pills;
        int grenades = this.sc.grenades;
        int rockets = this.sc.rockets;
        this.sc.resetGame();
        this.sc.LoadGame(false);
        if (savegame)
        {
          this.sc.milks = milks;
          this.sc.hulks = hulks;
          this.sc.pills = pills;
          this.sc.grenades = grenades;
          this.sc.rockets = rockets;
        }
        else
        {
          this.sc.milks = 0;
          this.sc.hulks = 0;
          this.sc.pills = 0;
          this.sc.grenades = 0;
          this.sc.rockets = 0;
        }
      }
      else
      {
        this.sc.resetGame();
        this.sc.LoadGame(false);
      }
      this.sc.SavePrefs();
      this.sc.isLoading = true;
      this.leavingGame = true;
      this.sc.tempPistol = this.myPlayer.primaryChoice;
      this.sc.tempRifle = this.myPlayer.secondaryChoice;
      this.sc.tempAmmo = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
      this.sc.tempMag = this.myPlayer.mag[this.myPlayer.secondaryChoice];
      this.sc.redContrast = 128;
      this.sc.contrastBU = 128;
      LoadingScreen1.Load(this.ScreenManager, true, new PlayerIndex?(this.playerIndex), (NetworkSession) null, (GameScreen) new BloodnBacon4PT((NetworkSession) null));
    }

    private void makeImage(Matrix[] m, int width, int hite, ref Texture2D tt)
    {
      tt = new Texture2D(this.sc.GraphicsDevice, width, hite, false, SurfaceFormat.Vector4);
      Vector4[] data = new Vector4[width * hite];
      int index1 = 0;
      for (int index2 = 0; index2 < m.Length; ++index2)
      {
        data[index1] = new Vector4(m[index2].M11, m[index2].M21, m[index2].M31, m[index2].M41);
        int index3 = index1 + 1;
        data[index3] = new Vector4(m[index2].M12, m[index2].M22, m[index2].M32, m[index2].M42);
        int index4 = index3 + 1;
        data[index4] = new Vector4(m[index2].M13, m[index2].M23, m[index2].M33, m[index2].M43);
        index1 = index4 + 1;
      }
      tt.SetData<Vector4>(data);
    }

    private void resetStates()
    {
      boarDupe.homingCount = 0;
      remotePlayer4.pillTaken = false;
      boarDupe.currentDay = this.sc.currentDay;
      this.boar.hitindex = 0;
      this.homingWait = 600;
      this.homingWait2 = 600;
      this.pigChoice = -1;
      this.pigChoice2 = -1;
      this.pim1.mirvMoving = false;
      this.pim1.mirvSeeStreaks = false;
      this.editCam = false;
      this.myPlayer.bloodExists = false;
      this.myPlayer.autoCamOn = false;
      this.myPlayer.autoCamTimer = 0.0f;
      this.int_9 = 12;
      this.int_10 = 12;
      this.leverLevel = this.sc.fencecharge;
      this.alternateCam = 0;
      this.myPlayer.isDown = false;
      this.myPlayer.now.health = 198f;
      this.myPlayer.noArms = false;
      if (this.myPlayer.gunChoice > this.pType)
      {
        this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
        this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
      }
      this.myPlayer.now.weapon = this.myPlayer.gunChoice;
      this.myPlayer.fallState = 0;
      this.localModel = this.sc.player1Model;
      this.myPlayer.now.myscore = (ushort) 0;
      this.myPlayer.now.remscore = (ushort) 0;
      this.myPlayer.now.health = 198f;
      this.myPlayer.displayState.npcTilt = 0.0f;
      this.myPlayer.now.byte_0 = (byte) 12;
      this.myPlayer.now.byte_1 = (byte) 12;
      this.myPlayer.now.leverOn = false;
      for (int index = 0; index < this.remPlayer.Count; ++index)
        this.remPlayer[index].r.resetVars();
      this.lastBoarAlive = -1;
      this.ridingboar = -1;
      this.boar.conductor.Clear();
      this.boar.explodelist.Clear();
      this.boar.shockList.Clear();
      this.boar.shatterList.Clear();
      this.boar.dupe.Clear();
      this.boar.index1 = 0;
      this.boar.index2 = 0;
      this.boar.index3 = 0;
      this.boar.index4 = 0;
      this.boar.indexS = 0;
      this.boar.indexC = 0;
      this.boar.indexZ = 0;
      this.farm.stainMax = 0;
      this.farm.stainIndex = 0;
      this.door.stainMax = 0;
      this.door.stainIndex = 0;
      this.grenExplosion.stainMax = 0;
      this.mirvExplosion.stainMax = 0;
      this.head.max = 0;
      this.head.index = 0;
      this.leg.max = 0;
      this.leg.index = 0;
      this.butt.max = 0;
      this.butt.index = 0;
      this.body.max = 0;
      this.body.index = 0;
      this.primShell.index = 0;
      this.primShell.max = 0;
      this.secondShell.index = 0;
      this.secondShell.max = 0;
      this.primShell_rem.index = 0;
      this.primShell_rem.max = 0;
      this.secondShell_rem.index = 0;
      this.secondShell_rem.max = 0;
      invDupe.glowIndex = -1;
      this.grenExplosion.location = Vector3.Zero;
      this.grenade.index = 0;
      this.grenade.max = 0;
      this.grenadeThrow.index = 0;
      this.grenadeThrow.max = 0;
      this.milk.index = 0;
      this.milk.max = 0;
      this.pill.index = 0;
      this.pill.max = 0;
      this.rocket.index = 0;
      this.rocket.max = 0;
      this.bulletbox.index = 0;
      this.bulletbox.max = 0;
      this.hulkcan.index = 0;
      this.hulkcan.max = 0;
      this.oldbloodLevel = -1f;
    }

    private void dropBoar(ref BloodnBacon4PT.npc n, int seed)
    {
      this.resetStates();
      this.myPlayer.stats_record = true;
      this.sc.gameState = 1;
      if (this.tunneladd)
        this.enemy1.setSkullDifficulty();
      this.startGame = Environment.TickCount & int.MaxValue;
      this.tickOffset = 0;
      this.timeFrame = this.getTick(this.startGame) + this.tickOffset;
      this.lasttimeDelay = this.timeFrame;
      if (Princess4.cuttyCount > 0)
        Princess4.seed = seed;
      Random rand1 = new Random(seed);
      Vector3 zero = Vector3.Zero;
      int seed1 = rand1.Next(9000, 22000);
      if (this.tunneldebug2)
        this.sc.boarCount = 2;
      if (this.sc.boarCount < 200)
      {
        if (this.sc.currentDay == 41)
          this.sc.boarCount = this.totalPlayers <= 2 ? 1 : 2;
        if (this.sc.currentDay == 10 || this.sc.currentDay == 30 || this.sc.currentDay == 50 || this.sc.currentDay == 70)
        {
          if (this.totalPlayers == 1)
            this.sc.boarCount = 3;
          if (this.totalPlayers == 2)
            this.sc.boarCount = 5;
          if (this.totalPlayers == 3)
            this.sc.boarCount = 7;
          if (this.totalPlayers == 4)
            this.sc.boarCount = 11;
        }
        this.sc.boarCount = (int) MathHelper.Max(1f, (float) this.sc.boarCount);
      }
      for (int index = 0; index < this.sc.boarCount; ++index)
      {
        ++seed1;
        int boar1Variant = this.sc.boar1Variant;
        int int4 = this.sc.int_4;
        int group;
        int variant;
        Vector3 startpos;
        int formation;
        if (rand1.Next(1, 100) < this.sc.int_6)
        {
          group = 2;
          variant = this.sc.boar2Variant;
          startpos = this.randomPosition(this.sc.int_5, ref rand1);
          formation = this.sc.int_5;
        }
        else
        {
          group = 1;
          variant = this.sc.boar1Variant;
          startpos = this.randomPosition(this.sc.int_4, ref rand1);
          formation = this.sc.int_4;
        }
        n.dupe.Add(new boarDupe(group, variant, startpos, 1, seed1, this.timeFrame, this.sc, this.sc.dayTime, formation, true));
      }
      Randoms.initRandom(n.dupe[0].seed);
    }

    private void addbats()
    {
      double num1 = (double) this.rr.Next(0, 1000) / 1000.0;
      int num2 = this.rr.Next(0, 4);
      for (int index = 0; index < 10; ++index)
      {
        int tint = this.rr.Next(0, 2);
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 70f, (float) this.rr.Next(-1200, 1200) / 70f, (float) this.rr.Next(-1600, 1600) / 70f), -20, 1f / 650f, 0, index * 25, 0.22f, tint));
      }
      double num3 = (double) this.rr.Next(0, 1000) / 1000.0;
      for (int index = 10; index < 18; ++index)
      {
        int tint = this.rr.Next(1, 3);
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 60f, (float) this.rr.Next(-1200, 1200) / 70f, (float) this.rr.Next(-1600, 1600) / 60f), -20, 1f / 690f, 0, index * 25, 0.43f, tint));
      }
      double num4 = (double) this.rr.Next(0, 1000) / 1000.0;
      for (int index = 18; index < 26; ++index)
      {
        int tint = this.rr.Next(2, 4);
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 70f, (float) this.rr.Next(-1200, 1200) / 60f, (float) this.rr.Next(-1600, 1600) / 70f), -20, 1f / 700f, 0, index * 25, 0.6f, tint));
      }
      double num5 = (double) this.rr.Next(0, 1000) / 1000.0;
      for (int index = 26; index < 33; ++index)
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 70f, (float) this.rr.Next(-1200, 1200) / 70f, (float) this.rr.Next(-1600, 1600) / 70f), -20, 1f / 630f, 0, index * 25, 0.76f, 3));
      double num6 = (double) this.rr.Next(0, 1000) / 1000.0;
      for (int index = 33; index < 38; ++index)
      {
        num2 = this.rr.Next(0, 3);
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 70f, (float) this.rr.Next(-1200, 1200) / 70f, (float) this.rr.Next(-1600, 1600) / 70f), -20, 1f / 640f, 0, index * 25, 0.88f, 1));
      }
      double num7 = (double) this.rr.Next(0, 1000) / 1000.0;
      for (int index = 38; index < 44; ++index)
      {
        num2 = this.rr.Next(0, 3);
        this.bat.dupe.Add(new batDupe(new Vector3((float) this.rr.Next(-1600, 1600) / 70f, (float) this.rr.Next(-1200, 1200) / 70f, (float) this.rr.Next(-1600, 1600) / 70f), -20, 1f / 580f, 0, index * 25, 0.0f, 2));
      }
    }

    private void updateBats(ref BloodnBacon4PT.simpleNPC n)
    {
      n.index1 = 0;
      for (int index = 0; index < n.dupe.Count; ++index)
      {
        n.dupe[index].Update(ref this.batpath1);
        this.flySkin.Transformation = n.dupe[index].transform;
        this.flySkin.frame1 = (float) n.dupe[index].frame1;
        this.flySkin.tint = (float) n.dupe[index].tint;
        n.display1[n.index1] = this.flySkin;
        ++n.index1;
      }
    }

    private void chooseModel(int i, ref Texture2D tt, ref Model model1, ref Model model2)
    {
      if (i == 0)
      {
        model1 = this.sc.boar1basicModel;
        model2 = this.Content.Load<Model>("npc\\boarHeadless_reduct");
        tt = this.Content.Load<Texture2D>("npc\\regularBoar");
      }
      if (i == 1)
      {
        model2 = this.Content.Load<Model>("npc\\bruteHeadless");
        if (this.sc.int_9 > 5000)
        {
          model1 = this.Content.Load<Model>("npc\\brutexWalk");
          tt = this.Content.Load<Texture2D>("npc\\brute3");
        }
        else
        {
          model1 = this.Content.Load<Model>("npc\\bruteWalk");
          tt = this.Content.Load<Texture2D>("npc\\brute");
        }
      }
      if (i == 2)
      {
        model1 = this.Content.Load<Model>("npc\\boarSkel");
        model2 = this.Content.Load<Model>("npc\\boarSkelHeadless");
        tt = this.Content.Load<Texture2D>("texture\\bonee");
      }
      if (i == 3)
      {
        model1 = this.Content.Load<Model>("npc\\armoredBoar");
        model2 = this.Content.Load<Model>("npc\\armoredBoarHeadless");
        tt = this.Content.Load<Texture2D>("npc\\armadillo");
      }
      if (i == 4 && this.sc.currentDay != 101 && this.sc.currentDay != 42)
      {
        model1 = this.Content.Load<Model>("npc\\master");
        model2 = this.Content.Load<Model>("npc\\masterHeadless");
        tt = this.Content.Load<Texture2D>("npc\\brute2");
      }
      if (i != 4 || this.sc.currentDay != 101 && this.sc.currentDay != 42)
        return;
      model1 = this.Content.Load<Model>("npc\\piggyWalk");
      model2 = this.Content.Load<Model>("npc\\piggyWalk");
      tt = this.Content.Load<Texture2D>("npc\\piggy1");
    }

    private void chooseModelPart(int i, ref Model model1, int type)
    {
      if (i == 0)
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//boarhead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//boarleg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//boarbody");
        if (type == 4)
          model1 = this.Content.Load<Model>("Models//boarass");
      }
      if (i == 1)
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//boarhead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//boarleg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//boarbody");
        if (type == 4)
          model1 = this.Content.Load<Model>("Models//boarass");
      }
      if (i == 2)
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//skelhead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//skelleg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//skelbody");
        if (type == 4)
          model1 = this.Content.Load<Model>("Models//skelass");
      }
      if (i == 3)
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//armohead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//armoleg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//armobody");
        if (type == 4)
          model1 = this.Content.Load<Model>("Models//armoass");
      }
      if (i != 4)
        return;
      if (this.sc.currentDay == 101)
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//piggyHead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//piggyLeg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//piggyBody");
        if (type != 4)
          return;
        model1 = this.Content.Load<Model>("Models//piggyAss");
      }
      else
      {
        if (type == 1)
          model1 = this.Content.Load<Model>("Models//masterhead");
        if (type == 2)
          model1 = this.Content.Load<Model>("Models//masterleg");
        if (type == 3)
          model1 = this.Content.Load<Model>("Models//masterbody");
        if (type != 4)
          return;
        model1 = this.Content.Load<Model>("Models//masterass");
      }
    }

    private Vector3 randomPosition(int i, ref Random rand1)
    {
      if (i == 0)
        return Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(200, 900)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 1)
      {
        switch (rand1.Next(1, 5))
        {
          case 1:
            return new Vector3((float) rand1.Next(-1900, 1690), 0.0f, (float) rand1.Next(-2300, -1560)) + new Vector3(3000f, 0.0f, 3000f);
          case 2:
            return new Vector3((float) rand1.Next(1805, 2450), 0.0f, (float) rand1.Next(-1095, 1226)) + new Vector3(3000f, 0.0f, 3000f);
          case 3:
            return new Vector3((float) rand1.Next(-2240, 900), 0.0f, (float) rand1.Next(1970, 2400)) + new Vector3(3000f, 0.0f, 3000f);
          case 4:
            return new Vector3((float) rand1.Next(-2300, -1844), 0.0f, (float) rand1.Next(-1376, 1630)) + new Vector3(3000f, 0.0f, 3000f);
        }
      }
      if (i == 2)
        return new Vector3(-620f, 0.0f, -1430f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(200, 1160)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 3)
        return new Vector3(-1661f, 0.0f, -159f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(620, 1180)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 4)
        return new Vector3(1354f, 0.0f, -1185f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(300, 700)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 5)
        return new Vector3(-1189f, 0.0f, 1435f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(100, 900)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 6)
        return new Vector3(1594.22375f, 0.0f, -63.2971458f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(160, 760)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 7)
        return new Vector3((float) rand1.Next(-1200, 1300), 0.0f, (float) rand1.Next(-2300, -1955)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 8)
        return new Vector3((float) rand1.Next(-1200, 1300), 0.0f, (float) rand1.Next(1914, 2266)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 9)
        return new Vector3((float) rand1.Next(-2400, -2070), 0.0f, (float) rand1.Next(-1800, 1770)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 10)
        return new Vector3((float) rand1.Next(1780, 2110), 0.0f, (float) rand1.Next(-1800, 1770)) + new Vector3(3000f, 0.0f, 3000f);
      int maxValue = 290;
      if (i == 11)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(-1590.63745f, 0.0f, -1133.1853f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 12)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(-216.627975f, 0.0f, -1688.636f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 13)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(1253.48828f, 0.0f, -1902.03992f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 14)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(1514.31531f, 0.0f, -574.193f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 15)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(-1663.03271f, 0.0f, 777.3655f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 16)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(1775.14246f, 0.0f, 587.6731f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 17)
      {
        Matrix rotationY = Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f);
        return new Vector3(-524.8782f, 0.0f, 1607.2699f) + Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(22, maxValue)), rotationY) + new Vector3(3000f, 0.0f, 3000f);
      }
      if (i == 20)
        return Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(200, 400)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 21)
        return Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(410, 750)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      if (i == 22)
      {
        switch (rand1.Next(1, 5))
        {
          case 1:
            return new Vector3((float) rand1.Next(-1900, 1690), 0.0f, (float) rand1.Next(-2300, -1560)) + new Vector3(3000f, 0.0f, 3000f);
          case 2:
            return new Vector3((float) rand1.Next(1805, 2450), 0.0f, (float) rand1.Next(-1095, 1226)) + new Vector3(3000f, 0.0f, 3000f);
          case 3:
            return new Vector3((float) rand1.Next(-2240, 900), 0.0f, (float) rand1.Next(1970, 2400)) + new Vector3(3000f, 0.0f, 3000f);
          case 4:
            return new Vector3((float) rand1.Next(-2300, -1844), 0.0f, (float) rand1.Next(-1376, 1630)) + new Vector3(3000f, 0.0f, 3000f);
        }
      }
      if (i == 30)
        return Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(100, 500)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
      return i == 31 ? Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(200, 2000)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f) : Vector3.Transform(new Vector3(0.0f, 0.0f, (float) rand1.Next(200, 900)), Matrix.CreateRotationY((float) rand1.Next(-800, 800) / 100f)) + new Vector3(3000f, 0.0f, 3000f);
    }

    private void method_0(ref BloodnBacon4PT.npc n)
    {
      if (this.metalToday && !this.metalwalk.IsDisposed && !this.metalwalk2.IsDisposed)
      {
        if (this.pigChoice != -1)
        {
          if ((double) this.sc.myTimer % 2.0 == 0.0)
          {
            if (n.dupe[this.pigChoice].isStun != 1)
            {
              float num1 = 1f - MathHelper.Clamp((float) (((double) Vector3.Distance(this.campos, n.dupe[this.pigChoice].mypos) - 200.0) / 800.0), 0.0f, 1f);
              float num2 = num1 * num1;
              this.metalwalk.Volume = this.sc.ev * num2;
              this.metalwalk.Pitch = (float) (((double) num2 - 0.5) / 4.0);
            }
            else
              this.metalwalk.Volume = 0.0f;
          }
        }
        else
          this.metalwalk.Volume = 0.0f;
        if (this.pigChoice2 != -1)
        {
          if ((double) this.sc.myTimer % 2.0 == 1.0)
          {
            if (n.dupe[this.pigChoice2].isStun != 1)
            {
              float num3 = 1f - MathHelper.Clamp((float) (((double) Vector3.Distance(this.campos, n.dupe[this.pigChoice2].mypos) - 200.0) / 800.0), 0.0f, 1f);
              float num4 = num3 * num3;
              this.metalwalk2.Volume = this.sc.ev * num4;
              this.metalwalk2.Pitch = (float) (((double) num4 - 0.5) / 4.0);
            }
            else
              this.metalwalk2.Volume = 0.0f;
          }
        }
        else
          this.metalwalk2.Volume = 0.0f;
      }
      n.index1 = 0;
      n.index2 = 0;
      n.index3 = 0;
      n.index4 = 0;
      n.indexS = 0;
      n.indexC = 0;
      n.indexZ = 0;
      --this.attackWait;
      --this.stunCount;
      --this.chompCount;
      --this.crumbleWait;
      --this.spookWait;
      --this.shockDelay;
      --this.shatterDelay;
      this.shockScheduled = false;
      this.shatterScheduled = false;
      n.shockList.Clear();
      n.shatterList.Clear();
      n.explodelist.Clear();
      Vector3 vector3_1 = Vector3.Transform(new Vector3(-23f, 43f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[28]);
      this.lastBoarAlive = -1;
      this.ridingboar = -1;
      n.npcDist = 20000f;
      float num5 = this.cursor.closestIntersection * this.cursor.closestIntersection;
      float num6 = this.BossDistance * this.BossDistance;
      this.v2 = Vector3.Normalize(this.camlookpos - this.campos);
      this.v3 = -this.v2 * 100f + this.campos;
      float result = 0.0f;
      if (this.sc.host)
      {
        if (n.alive != (ushort) 0 && (double) this.sc.myTimer % 120.0 == 1.0)
        {
          float num7 = (float) ((double) n.alive / (double) this.sc.boarCount * 100.0);
          if ((double) num7 > (double) this.sc.boarPercent[0] && (double) num7 <= 100.0)
          {
            this.distcheck = (float) this.sc.boarDistance[0];
            this.piglimit = this.sc.boarHomingLimit[0];
          }
          else if ((double) num7 >= (double) this.sc.boarPercent[1] && (double) num7 <= (double) this.sc.boarPercent[0])
          {
            this.distcheck = (float) this.sc.boarDistance[1];
            this.piglimit = this.sc.boarHomingLimit[1];
          }
          else if ((double) num7 >= 0.0 && (double) num7 < (double) this.sc.boarPercent[1])
          {
            this.distcheck = (float) this.sc.boarDistance[2];
            this.piglimit = this.sc.boarHomingLimit[2];
          }
        }
        --this.homingWait;
        if (this.homingWait <= 0)
        {
          ++this.whichPlayer;
          if (this.whichPlayer > this.remPlayer.Count - 1)
            this.whichPlayer = 0;
          if (this.remPlayer[this.whichPlayer].id == this.mysteamID && boarDupe.homingCount < this.piglimit && (double) this.myPlayer.now.health > 0.0)
            this.homingWait = 60;
          if (this.remPlayer[this.whichPlayer].id != this.mysteamID && this.remPlayer[this.whichPlayer].r.homingCount < this.piglimit && (double) this.remPlayer[this.whichPlayer].r.now.health > 0.0)
            this.homingWait = 60;
        }
      }
      n.alive = (ushort) 0;
      Vector2 localPos = new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z);
      if (this.myPlayer.isDown)
        this.stunStrike = false;
      for (int index1 = 0; index1 < n.dupe.Count; ++index1)
      {
        if (n.dupe[index1].move != -10)
        {
          if (n.dupe[index1].move > 0 && !n.dupe[index1].death || n.dupe[index1].undead)
          {
            ++n.alive;
            --n.dupe[index1].immunity;
          }
          bool flag1 = false;
          bool flag2 = n.dupe[index1].clip1 >= 10 && n.dupe[index1].move > 0;
          bool flag3 = !this.myPlayer.isDown && (n.dupe[index1].move == 0 || n.dupe[index1].death);
          Vector2 vector2 = new Vector2(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Z) - localPos;
          float dd = vector2.LengthSquared();
          if ((double) dd > 2250000.0)
            n.dupe[index1].tween = 1f;
          this.logicNPC(ref n, index1, result, dd, localPos);
          if (n.dupe[index1].move > 0 && !this.myPlayer.gunFired && this.attackWait <= 0 && (double) this.myPlayer.now.health > 0.0 && (double) dd < 400.0 * (double) n.dupe[index1].scale * (400.0 * (double) n.dupe[index1].scale))
          {
            int index2 = n.dupe[index1].frame1 * 29 + 6;
            Matrix.CreateTranslation(0.0f, 165f, 70f, out this.m1);
            Matrix.Multiply(ref this.m1, ref n.data.Bones[index2], out this.m2);
            Matrix.Multiply(ref this.m2, ref n.dupe[index1].transform, out this.m3);
            Vector3.Transform(ref this.vZero, ref this.m3, out this.v1);
            float num8 = (new Vector2(this.v1.X, this.v1.Z) - localPos).LengthSquared();
            float num9 = (float) -((double) n.dupe[index1].myRot + Math.Atan2((double) this.v1.Z - (double) this.myPlayer.displayState.npcPosition.Z, (double) this.v1.X - (double) this.myPlayer.displayState.npcPosition.X));
            float num10 = new Vector2((float) Math.Sin((double) num9) * 280f * n.dupe[index1].scale, (float) Math.Cos((double) num9) * 110f * n.dupe[index1].scale).LengthSquared();
            if ((double) num8 < (double) num10 && (double) Math.Abs(n.dupe[index1].mypos.Y - this.myPlayer.displayState.npcPosition.Y) < 150.0 * (double) n.dupe[index1].scale)
            {
              float dam = (float) ((double) this.rr.Next(120, 250) / 100.0 * ((double) this.sc.boarAttack / 100.0)) * this.sc.handicapBite4[this.sc.df];
              this.vibroTimer = this.rr.Next(6, 12);
              this.vibroTimerAmt = 100f;
              if (!this.myPlayer.isLiftingOpponent && this.myPlayer.fallState == 0)
              {
                this.hitVel = Vector2.Zero;
                if ((double) dd > 0.0)
                {
                  if (n.dupe[index1].isChomp != 1 && !this.myPlayer.onHulk)
                    this.hitVel = -Vector2.Normalize(vector2) * 1.4f;
                  if (n.dupe[index1].isShocked == 2)
                    this.hitVel = -Vector2.Normalize(vector2) * 3.2f;
                  if (this.myPlayer.onHulk)
                    this.hitVel = -Vector2.Normalize(vector2) * 1f;
                }
                if (!this.boarSchedulethisFrame && n.dupe[index1].isChomp != -1 && !this.myPlayer.isDown && n.dupe[index1].homing != 0 && this.chompCount <= 0 && !this.myPlayer.jumping)
                {
                  this.chompCount = 200;
                  if (!this.myPlayer.onHulk)
                  {
                    if ((double) dd > 0.0)
                      this.hitVel = Vector2.Normalize(vector2) * 0.01f;
                    this.slowDown = 0.6f;
                  }
                  if (n.dupe[index1].isChomp == 0 && n.dupe[index1].isStun != 1)
                  {
                    this.camshaker = 70f;
                    this.vibroTimer = this.rr.Next(60, 90);
                    this.vibroTimerAmt = 90f;
                    this.scheduleAction(ref n, index1, 2, 2, false);
                    n.dupe[index1].isChomp = 1;
                  }
                }
                if (this.myPlayer.jumping)
                {
                  this.hitVel = Vector2.Zero;
                  float num11 = MathHelper.Lerp(0.7f, -0.7f, MathHelper.Clamp(n.dupe[index1].scale * 3f, 0.0f, 1f));
                  this.myPlayer.fallGrav = Math.Min((float) (2.0 + (double) this.myPlayer.jumpCount * 0.20000000298023224), 4f);
                  this.myPlayer.fallAcc = Math.Min((float) (0.20000000298023224 + (double) this.myPlayer.jumpCount * 0.10000000149011612), 0.4f);
                  this.myPlayer.jumpCalled = true;
                  this.sc.sproing[this.rr.Next(0, 2)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(50, 90) / 100.0), num11 + (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                  this.sc.trophy.win(this.sc.trophy.bounce);
                  if (this.myPlayer.stats_record)
                    ++this.myPlayer.stats_spinebounces;
                  ++this.myPlayer.jumpCount;
                  dam = 0.2f;
                }
                this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
              }
              if (n.dupe[index1].homing != 0)
              {
                this.addScreenSplat(true, 1);
                dam *= 1.45f;
              }
              if (this.myPlayer.onHulk)
              {
                if (n.dupe[index1].undead)
                  dam *= 0.1f;
                else
                  dam = 0.0f;
              }
              if (this.myPlayer.isDown)
              {
                this.myPlayer.damHealth(dam * 0.5f, this.sc.cheat_Invincible);
                this.attackWait = 50;
              }
              else
              {
                if (n.dupe[index1].death)
                  dam *= 0.2f;
                this.myPlayer.damHealth(dam, this.sc.cheat_Invincible);
                this.attackWait = 10;
              }
            }
          }
          if (n.dupe[index1].isStun != 1 && n.dupe[index1].isShocked < 2)
          {
            int index3 = Math.Abs(n.dupe[index1].homing) - 1;
            if (index3 >= 0)
            {
              if (index3 == this.sc.myplayerindex)
              {
                if ((double) this.myPlayer.now.health > 0.0)
                {
                  if (n.dupe[index1].homing > 0)
                  {
                    if (n.dupe[index1].variant == 3)
                    {
                      if (this.pigChoice == -1 && this.pigChoice2 != index1)
                        this.pigChoice = index1;
                      else if (this.pigChoice2 == -1 && this.pigChoice != index1)
                        this.pigChoice2 = index1;
                    }
                    float num12 = (float) (-Math.Atan2((double) n.dupe[index1].mypos.Z - (double) this.myPlayer.displayState.npcPosition.Z, (double) n.dupe[index1].mypos.X - (double) this.myPlayer.displayState.npcPosition.X) - 1.5700000524520874) + (float) Math.Sin((double) n.dupe[index1].age / (double) n.dupe[index1].freq) / n.dupe[index1].amp;
                    n.dupe[index1].myRot %= 6.2832f;
                    float num13 = BloodnBacon4PT.WrapAngle(num12 - n.dupe[index1].myRot);
                    float max = n.dupe[index1].turnHelper * ((float) this.sc.boarTurnRate * boarDupe.handicapTurn / 100f);
                    float num14 = MathHelper.Clamp(num13, -max, max);
                    n.dupe[index1].myRot = BloodnBacon4PT.WrapAngle(n.dupe[index1].myRot + num14);
                  }
                }
                else
                {
                  --boarDupe.homingCount;
                  if (boarDupe.homingCount < 0)
                    boarDupe.homingCount = 0;
                  n.dupe[index1].homing = 0;
                  n.dupe[index1].timer = 0.0f;
                }
              }
              else
              {
                bool flag4 = index3 < this.remPlayer.Count;
                bool flag5 = n.dupe[index1].homing > 0;
                if (flag4)
                {
                  if (this.remPlayer[index3].id != this.mysteamID && (double) this.remPlayer[index3].r.now.health > 0.0)
                  {
                    if (flag5)
                    {
                      float num15 = (float) (-Math.Atan2((double) n.dupe[index1].mypos.Z - (double) this.remPlayer[index3].r.lastPOS.Z, (double) n.dupe[index1].mypos.X - (double) this.remPlayer[index3].r.lastPOS.X) - 1.5700000524520874) + (float) Math.Sin((double) n.dupe[index1].age / (double) n.dupe[index1].freq) / n.dupe[index1].amp;
                      n.dupe[index1].myRot %= 6.2832f;
                      float num16 = BloodnBacon4PT.WrapAngle(num15 - n.dupe[index1].myRot);
                      float max = n.dupe[index1].turnHelper * ((float) this.sc.boarTurnRate * boarDupe.handicapTurn / 100f);
                      float num17 = MathHelper.Clamp(num16, -max, max);
                      n.dupe[index1].myRot = BloodnBacon4PT.WrapAngle(n.dupe[index1].myRot + num17);
                    }
                  }
                  else
                  {
                    --this.remPlayer[index3].r.homingCount;
                    if (this.remPlayer[index3].r.homingCount < 0)
                      this.remPlayer[index3].r.homingCount = 0;
                    n.dupe[index1].homing = 0;
                    n.dupe[index1].timer = 0.0f;
                  }
                }
                else
                {
                  n.dupe[index1].homing = 0;
                  n.dupe[index1].timer = 0.0f;
                }
              }
            }
          }
          if ((double) dd < (double) this.maxdist || flag2 || flag3)
          {
            Vector3 vector3_2 = new Vector3(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Y + n.dupe[index1].scale * 140f, n.dupe[index1].mypos.Z) - this.v3;
            Vector3.Normalize(ref vector3_2, out this.v1);
            Vector3.Dot(ref this.v1, ref this.v2, out result);
            if (n.dupe[index1].isGrow == 0 && !n.dupe[index1].growTrigger && n.dupe[index1].age > n.dupe[index1].isGrowAge)
            {
              n.dupe[index1].oldtint = n.dupe[index1].tint;
              n.dupe[index1].tint = 11f;
              n.dupe[index1].growTrigger = true;
              this.sc.hulkRoar.Play(this.sc.ev, (float) this.rr.Next(-70, -40) / 100f, 0.0f);
            }
            if ((double) dd < 22500.0 || (double) result > (double) this.sc.myfov)
            {
              if (n.dupe[index1].move > 0 || n.dupe[index1].isShocked == 3 || flag3)
              {
                if (n.dupe[index1].move > 0)
                {
                  if (n.dupe[index1].death)
                  {
                    n.dupe[index1].UpdateDeath(ref this.heights);
                    float num18 = Vector2.DistanceSquared(new Vector2(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Z), new Vector2((float) ((double) this.grid / 2.0 - 810.0), (float) ((double) this.grid / 2.0 - 1666.0)));
                    if (!n.dupe[index1].undead && (double) num18 < 360.0 * (double) n.dupe[index1].scale * (360.0 * (double) n.dupe[index1].scale))
                      this.scheduleAction(ref n, index1, 3, 5, true);
                  }
                  else
                    n.dupe[index1].UpdateNormal(ref this.heights);
                  Matrix.CreateScale(n.dupe[index1].scale, out this.m1);
                  Matrix.CreateRotationY(n.dupe[index1].myRot, out this.m2);
                  Matrix.CreateTranslation(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Y, n.dupe[index1].mypos.Z, out this.m4);
                  Matrix.Multiply(ref this.m1, ref this.m2, out this.m3);
                  Matrix.Multiply(ref this.m3, ref this.m4, out n.dupe[index1].transform);
                }
                float num19 = 0.98f;
                if ((double) dd < 90000.0)
                  num19 = 0.2f;
                if ((!this.myPlayer.closeCam || (double) result > (double) num19) && this.myPlayer.now.gunfired == 1 && n.dupe[index1].isShocked != 1 && n.dupe[index1].isShocked != 2 && (double) dd < (double) n.npcDist * (double) n.npcDist && (double) dd < (double) num5 && (double) dd < (double) num6)
                {
                  float scale = 1f;
                  if (this.myPlayer.gunChoice == 8 && (double) dd > 90000.0)
                    scale = 2f;
                  int index4 = n.dupe[index1].frame1 * 29 + 2;
                  Matrix matrix2 = n.data.Bones[index4] * n.dupe[index1].transform;
                  Matrix.CreateScale(scale, out this.m1);
                  Matrix.Multiply(ref this.m1, ref matrix2, out this.m2);
                  Vector3.Transform(ref this.bottomCorner, ref this.m2, out this.min);
                  Vector3.Transform(ref this.topCorner, ref this.m2, out this.max);
                  this.distCheck = this.genCursor.hitBox(this.myPlayer.gunpos, this.myPlayer.gunlook, this.min, this.max);
                  if (this.distCheck.HasValue && (double) this.distCheck.Value < (double) n.npcDist && (double) this.distCheck.Value < (double) this.cursor.closestIntersection)
                  {
                    n.npcDist = this.distCheck.Value;
                    n.hitindex = index1;
                  }
                }
                float num20 = 40000f;
                if (!this.boarSchedulethisFrame && this.stunStrike && (double) dd < (double) num20 && n.dupe[index1].isShocked < 1 && (!flag2 || this.myPlayer.onHulk || flag3))
                {
                  float num21 = 350f;
                  if (!this.myPlayer.onHulk && !flag3)
                  {
                    int index5 = n.dupe[index1].frame1 * 29 + n.bone[7];
                    this.cubeMatrix = n.targ[7] * n.data.Bones[index5] * n.dupe[index1].transform;
                  }
                  else
                  {
                    int index6 = n.dupe[index1].frame1 * 29 + 5;
                    this.cubeMatrix = Matrix.CreateTranslation(0.0f, 150f, 0.0f) * n.data.Bones[index6] * n.dupe[index1].transform;
                    num21 = 350f;
                  }
                  if (flag3)
                    num21 = 350f;
                  if ((double) Vector3.DistanceSquared(Vector3.Transform(Vector3.Zero, this.cubeMatrix), vector3_1) < (double) n.dupe[index1].scale * (double) num21 * ((double) n.dupe[index1].scale * (double) num21))
                  {
                    if (this.myPlayer.onHulk && this.stunCount <= 0)
                    {
                      this.tempConduct.veloc = Vector3.Transform(new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-70, -40) / 100f, 1f), Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)) * (float) this.rr.Next(4, 10);
                      bool died = false;
                      if ((double) n.dupe[index1].health > 0.0 && !n.dupe[index1].undead)
                      {
                        died = true;
                        n.dupe[index1].timeofDeath = -this.timeFrame;
                        ++this.myPlayer.now.myscore;
                        n.dupe[index1].health = 0.0f;
                      }
                      this.stunCount = 40;
                      this.scheduleAction(ref n, index1, 1, 5, died);
                      if (!n.dupe[index1].undead)
                      {
                        if (this.myPlayer.stats_record)
                          ++this.myPlayer.stats_bulkified;
                        this.vibroTimer = 20;
                        this.vibroTimerAmt = 100f;
                        n.dupe[index1].health = 0.0f;
                      }
                    }
                    else if (this.stunCount <= 0)
                    {
                      bool flag6 = false;
                      n.dupe[index1].health -= 2f;
                      if ((double) n.dupe[index1].health <= 0.0 && !flag3)
                      {
                        flag6 = true;
                        n.dupe[index1].timeofDeath = -this.timeFrame;
                        ++this.myPlayer.now.myscore;
                      }
                      if (!flag6 && !this.myPlayer.onMilk && !flag3)
                      {
                        this.scheduleAction(ref n, index1, 2, 4, false);
                        if (this.myPlayer.stats_record)
                          ++this.myPlayer.stats_meleehits;
                        this.stunCount = 40;
                        n.dupe[index1].isStun = 1;
                        n.dupe[index1].stunLength = 160;
                        this.vibroTimer = 20;
                        this.vibroTimerAmt = 100f;
                      }
                      else
                      {
                        this.stunCount = 40;
                        this.scheduleAction(ref n, index1, 2, 0, true);
                        if (!flag3 && this.myPlayer.stats_record)
                          ++this.myPlayer.stats_meleehits;
                        n.dupe[index1].stunLength = 160;
                        this.vibroTimer = 20;
                        this.vibroTimerAmt = 100f;
                      }
                    }
                  }
                }
              }
              this.tempySkin.Transformation = n.dupe[index1].transform;
              this.tempySkin.tween = n.dupe[index1].tween;
              this.tempySkin.frame1 = (float) n.dupe[index1].frame1;
              this.tempySkin.frame2 = (float) n.dupe[index1].frame2;
              this.tempySkin.blood = (float) n.dupe[index1].blood;
              this.tempySkin.tint = n.dupe[index1].tint;
              if (n.dupe[index1].move > 0)
              {
                if (!n.dupe[index1].zombie)
                {
                  if (n.dupe[index1].boarGroup == 1)
                  {
                    if (n.dupe[index1].isHead != 1)
                    {
                      n.display1[n.index1] = this.tempySkin;
                      ++n.index1;
                    }
                    else
                    {
                      n.display2[n.index2] = this.tempySkin;
                      ++n.index2;
                    }
                  }
                  else if (n.dupe[index1].isHead != 1)
                  {
                    n.display3[n.index3] = this.tempySkin;
                    ++n.index3;
                  }
                  else
                  {
                    n.display4[n.index4] = this.tempySkin;
                    ++n.index4;
                  }
                }
                else
                {
                  n.displayZ[n.indexZ] = this.tempySkin;
                  ++n.indexZ;
                }
                if (n.dupe[index1].isShocked == 2 && this.leverTimer > 0 && this.rr.Next(1, 100) < 50)
                {
                  n.displayS[n.indexS] = this.tempySkin;
                  ++n.indexS;
                }
                if (this.enemyindex == (int) n.alive)
                  this.ridingboar = index1;
                if (this.ridingboar == -1)
                  this.ridingboar = index1;
                this.lastBoarAlive = index1;
              }
              else if (n.dupe[index1].isShocked != 3 && n.dupe[index1].isShocked != 4)
              {
                if (!n.dupe[index1].zombie)
                {
                  if (n.dupe[index1].boarGroup == 1)
                  {
                    if (n.dupe[index1].isHead != 1)
                    {
                      n.display1[n.index1] = this.tempySkin;
                      ++n.index1;
                    }
                    else
                    {
                      n.display2[n.index2] = this.tempySkin;
                      ++n.index2;
                    }
                  }
                  else if (n.dupe[index1].isHead != 1)
                  {
                    n.display3[n.index3] = this.tempySkin;
                    ++n.index3;
                  }
                  else
                  {
                    n.display4[n.index4] = this.tempySkin;
                    ++n.index4;
                  }
                }
                else
                {
                  n.displayZ[n.indexZ] = this.tempySkin;
                  ++n.indexZ;
                }
              }
              else
              {
                n.displayC[n.indexC] = this.tempySkin;
                ++n.indexC;
              }
              flag1 = true;
            }
          }
          if (n.dupe[index1].isShocked == 2)
          {
            if (this.leverTimer > 0)
            {
              n.dupe[index1].timer = (float) this.leverTimer;
            }
            else
            {
              if (n.dupe[index1].isShocked == 1)
                n.dupe[index1].isShocked = 0;
              n.dupe[index1].timer = 0.0f;
            }
          }
          if (!flag1 && n.dupe[index1].move > 0)
          {
            if (n.dupe[index1].death)
            {
              n.dupe[index1].UpdateDeath(ref this.heights);
              float num22 = Vector2.DistanceSquared(new Vector2(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Z), new Vector2((float) ((double) this.grid / 2.0 - 810.0), (float) ((double) this.grid / 2.0 - 1666.0)));
              if (!n.dupe[index1].undead && (double) num22 < 350.0 * (double) n.dupe[index1].scale * (350.0 * (double) n.dupe[index1].scale))
                this.scheduleAction(ref n, index1, 3, 5, true);
            }
            else
              n.dupe[index1].UpdateNormal(ref this.heights);
            Matrix.CreateScale(n.dupe[index1].scale, out this.m1);
            Matrix.CreateRotationY(n.dupe[index1].myRot, out this.m2);
            Matrix.CreateTranslation(n.dupe[index1].mypos.X, n.dupe[index1].mypos.Y, n.dupe[index1].mypos.Z, out this.m4);
            Matrix.Multiply(ref this.m1, ref this.m2, out this.m3);
            Matrix.Multiply(ref this.m3, ref this.m4, out n.dupe[index1].transform);
            if (this.enemyindex == (int) n.alive)
              this.ridingboar = index1;
            if (this.ridingboar == -1)
              this.ridingboar = index1;
            this.lastBoarAlive = index1;
          }
        }
      }
      if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (this.remPlayer[index].r.now.gunfired > 0 && (double) this.remPlayer[index].r.gunfiredRadius2 == 0.0)
          {
            this.remPlayer[index].r.gunfiredRadius2 = 1f;
            this.remPlayer[index].r.gunfiredDest2 = this.sc.gunRadius[this.remPlayer[index].r.lastWeapon];
            this.remPlayer[index].r.gunfiredChase2 = 2;
          }
        }
      }
      if ((double) this.sc.myTimer % 180.0 == 0.0)
      {
        if ((int) n.alive < this.breakPoint)
        {
          this.headblood.setDuration(2.2f);
          dupeItem.bleed = 270;
          if ((int) n.alive < this.breakPoint2)
          {
            this.headblood.setDuration(2.7f);
            dupeItem.bleed = 330;
          }
          if (this.pim1.mirvSeeStreaks || this.pim2.mirvSeeStreaks)
          {
            this.headblood.setDuration(1.4f);
            dupeItem.bleed = 125;
          }
          this.maxdist = 49000000;
        }
        else
        {
          this.headblood.setDuration(1.4f);
          dupeItem.bleed = 125;
          this.maxdist = 5290000;
        }
      }
      if (n.shockList.Count > 0)
      {
        this.shockDelay = 30;
        this.myPlayer.creatureShock.id = (ushort) 65000;
        this.myPlayer.creatureShock.id2 = (ushort) 65000;
        this.myPlayer.creatureShock.id3 = (ushort) 65000;
        this.myPlayer.creatureShock.id4 = (ushort) 65000;
        this.myPlayer.creatureShock.id5 = (ushort) 65000;
        this.myPlayer.creatureShock.id6 = (ushort) 65000;
        this.myPlayer.creatureShock.id7 = (ushort) 65000;
        this.myPlayer.creatureShock.id8 = (ushort) 65000;
        for (int index = 0; index < n.shockList.Count; ++index)
          this.schedShockNPC(ref n, n.shockList[index], index);
      }
      if (n.shatterList.Count > 0)
      {
        if (n.shatterList.Count > this.shatterBigCount)
          this.shatterBigCount = n.shatterList.Count;
        this.shatterDelay = 20;
        this.myPlayer.shatter.id = (ushort) 65000;
        this.myPlayer.shatter.id2 = (ushort) 65000;
        this.myPlayer.shatter.id3 = (ushort) 65000;
        this.myPlayer.shatter.id4 = (ushort) 65000;
        this.myPlayer.shatter.id5 = (ushort) 65000;
        this.myPlayer.shatter.id6 = (ushort) 65000;
        this.myPlayer.shatter.id7 = (ushort) 65000;
        this.myPlayer.shatter.id8 = (ushort) 65000;
        for (int index = 0; index < n.shatterList.Count; ++index)
          this.schedShatterNPC(ref n, n.shatterList[index], index);
      }
      if (n.explodelist.Count > 0)
      {
        this.myPlayer.creaturemulti.id = (ushort) 65000;
        this.myPlayer.creaturemulti.died = false;
        this.myPlayer.creaturemulti.id2 = (ushort) 65000;
        this.myPlayer.creaturemulti.died2 = false;
        this.myPlayer.creaturemulti.id3 = (ushort) 65000;
        this.myPlayer.creaturemulti.died3 = false;
        this.myPlayer.creaturemulti.id4 = (ushort) 65000;
        this.myPlayer.creaturemulti.died4 = false;
        this.myPlayer.creaturemulti.id5 = (ushort) 65000;
        this.myPlayer.creaturemulti.died5 = false;
        for (int index = 0; index < n.explodelist.Count; ++index)
          this.schedExplodeNPC(ref n, n.explodelist[index], index);
      }
      this.grenExplosion.location = Vector3.Zero;
    }

    private void logicNPC(
      ref BloodnBacon4PT.npc n,
      int i,
      float myDot,
      float dd,
      Vector2 localPos)
    {
      if (this.grenExplosion.location != Vector3.Zero)
      {
        this.boarSchedulethisFrame = true;
        if (n.explodelist.Count >= 5 || n.dupe[i].isShocked >= 1 || (double) Vector3.DistanceSquared(this.grenExplosion.location, n.dupe[i].mypos) >= 122500.0)
          return;
        n.explodelist.Add(i);
      }
      else if (this.leverTimer > 0 && n.dupe[i].move > 0 && this.sc.host && this.shockDelay <= 0 && n.dupe[i].isShocked == 0 && n.shockList.Count < 7 && (!this.boarSchedulethisFrame || this.shockScheduled) && ((double) n.dupe[i].mypos.X - 3000.0) * ((double) n.dupe[i].mypos.X - 3000.0) / 160000.0 + ((double) n.dupe[i].mypos.Z - 3000.0) * ((double) n.dupe[i].mypos.Z - 3000.0) / 90000.0 <= 1.0)
      {
        n.shockList.Add(i);
        this.shockScheduled = true;
        this.boarSchedulethisFrame = true;
        n.dupe[i].isShocked = 1;
      }
      else
      {
        if (n.dupe[i].move > 0 && this.sc.host && !n.dupe[i].undead && this.shatterDelay <= 0 && n.dupe[i].isShocked <= 0 && n.shatterList.Count < 4 && (!this.boarSchedulethisFrame || this.shatterScheduled))
        {
          if (this.pim1.mirvSeeStreaks && this.pim1.mirvStreakTimer < 900 && this.pim1.mirvStreakTimer > 100 && (double) Vector3.DistanceSquared(n.dupe[i].mypos, this.pim1.mirvDest) < 640000.0)
          {
            n.shatterList.Add(i);
            this.shatterScheduled = true;
            this.boarSchedulethisFrame = true;
            return;
          }
          if (this.pim2.mirvSeeStreaks && this.pim2.mirvStreakTimer < 900 && this.pim2.mirvStreakTimer > 100 && (double) Vector3.DistanceSquared(n.dupe[i].mypos, this.pim2.mirvDest) < 640000.0)
          {
            n.shatterList.Add(i);
            this.shatterScheduled = true;
            this.boarSchedulethisFrame = true;
            return;
          }
        }
        if (!this.boarSchedulethisFrame && this.crumbleWait <= 0 && n.dupe[i].isShocked == 3 && (double) dd < (double) n.dupe[i].scale * 300.0 * ((double) n.dupe[i].scale * 300.0))
        {
          this.crumbleWait = 20;
          n.dupe[i].isShocked = 4;
          if (this.sc.host)
          {
            n.dupe[i].timeofDeath = -this.timeFrame;
            ++this.myPlayer.now.myscore;
          }
          this.scheduleAction(ref n, i, 0, 7, true);
        }
        else
        {
          if (!this.sc.host || this.homingWait != 60 || n.dupe[i].homing != 0 || this.boarSchedulethisFrame || n.dupe[i].move <= 0 || (double) n.dupe[i].health <= 0.0 || n.dupe[i].isStun >= 1 || n.dupe[i].isSpooked >= 1 || n.dupe[i].isShocked >= 1 || this.leverTimer > 0)
            return;
          if (this.remPlayer[this.whichPlayer].id == this.mysteamID)
          {
            n.dupe[i].homing = -(this.sc.myplayerindex + 1);
            ++boarDupe.homingCount;
            this.scheduleAction(ref n, i, 0, 22 + this.sc.myplayerindex, false);
          }
          else
          {
            int whichPlayer = this.whichPlayer;
            n.dupe[i].homing = -(whichPlayer + 1);
            ++this.remPlayer[whichPlayer].r.homingCount;
            this.scheduleAction(ref n, i, 0, 22 + whichPlayer, false);
          }
        }
      }
    }

    private void reclaimHoming(ref BloodnBacon4PT.npc n, int i)
    {
      int index = Math.Abs(n.dupe[i].homing) - 1;
      if (index == this.sc.myplayerindex)
      {
        --boarDupe.homingCount;
        if (boarDupe.homingCount < 0)
          boarDupe.homingCount = 0;
      }
      else if (index >= 0 && index < this.remPlayer.Count)
      {
        --this.remPlayer[index].r.homingCount;
        if (this.remPlayer[index].r.homingCount < 0)
          this.remPlayer[index].r.homingCount = 0;
      }
      n.dupe[i].homing = 0;
      if (this.pigChoice == i)
        this.pigChoice = -1;
      if (this.pigChoice2 != i)
        return;
      this.pigChoice2 = -1;
    }

    private void splatNPC(ref BloodnBacon4PT.npc n)
    {
      if (this.myPlayer.gunChoice == 8 && (double) this.boar.npcDist > 1500.0)
        this.boar.npcDist = 10000f;
      else if ((double) this.boar.npcDist > (double) this.cursor.closestIntersection)
        this.boar.npcDist = 10000f;
      else if (n.dupe[this.boar.hitindex].isShocked == 3)
      {
        if (this.boarSchedulethisFrame || this.crumbleWait > 0)
          return;
        this.crumbleWait = 20;
        n.dupe[this.boar.hitindex].isShocked = 4;
        this.scheduleAction(ref n, this.boar.hitindex, 0, 7, false);
      }
      else
      {
        float num1 = 9000f;
        Vector3 vector3 = Vector3.Zero;
        int bodypart = 0;
        int num2 = 0;
        if (this.myPlayer.gunChoice == 8)
          num2 = 8;
        for (int index1 = 0; index1 < n.targ.Length; ++index1)
        {
          int index2 = n.dupe[this.boar.hitindex].frame1 * 29 + n.bone[index1];
          this.cubeMatrix = n.targ[index1] * n.data.Bones[index2] * n.dupe[this.boar.hitindex].transform;
          vector3 = Vector3.Transform(Vector3.Zero, this.cubeMatrix);
          this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, vector3, n.dupe[this.boar.hitindex].scale * this.sphereScale[index1 + num2]);
          if (this.distCheck.HasValue && (double) this.distCheck.Value < (double) num1)
          {
            num1 = this.distCheck.Value;
            bodypart = index1;
            if (index1 == 0)
              bodypart = 8;
          }
        }
        if (bodypart == 0)
          return;
        this.sc.myval = bodypart;
        if ((double) num1 >= 9000.0)
          return;
        if (this.myPlayer.stats_record)
          ++this.myPlayer.stats_shotshit;
        if (this.myPlayer.gunChoice == 8 && (double) num1 < 450.0)
          --n.dupe[this.boar.hitindex].shottie;
        bool flag1 = n.dupe[this.boar.hitindex].shottie <= 0 && this.myPlayer.gunChoice == 8 && (double) num1 < 450.0;
        this.myPlayer.now.gunfired = 2;
        if (n.dupe[this.boar.hitindex].boarGroup == 2)
          this.myPlayer.now.gunfired = 3;
        this.myPlayer.now.accuracy = (ushort) this.boar.hitindex;
        if (!flag1 && n.dupe[this.boar.hitindex].variant != 2 && (bodypart == 3 || bodypart == 4 || bodypart == 8 || n.dupe[this.boar.hitindex].variant != 3))
          this.addBoarBlood(ref n, this.boar.hitindex, bodypart, this.mybloodColor);
        Vector3 center = num1 * this.genCursor.rayDir + this.genCursor.rayPos;
        if (!flag1)
        {
          if (n.dupe[this.boar.hitindex].variant == 2)
            this.bitSpray(center, vector3, n.dupe[this.boar.hitindex].scale, 1f);
          else if (n.dupe[this.boar.hitindex].variant != 0 && n.dupe[this.boar.hitindex].variant != 1)
          {
            if (n.dupe[this.boar.hitindex].variant == 3)
              this.sparkSpray(center, vector3, n.dupe[this.boar.hitindex].scale, 1f);
            else if (n.dupe[this.boar.hitindex].variant == 4)
              this.bloodSpray2(center, vector3, n.dupe[this.boar.hitindex].scale);
          }
          else
            this.bloodSpray(center, vector3, n.dupe[this.boar.hitindex].scale);
        }
        if ((double) num1 < 100.0 && this.mybloodColor == 0)
        {
          if (!flag1 && n.dupe[this.boar.hitindex].variant != 2 && n.dupe[this.boar.hitindex].variant != 3)
            this.addScreenSplat(false, 1);
          this.addBlood2Body(7, ref this.player1Paint, 0, 599, 0, 599);
        }
        Vector3 rayDir = this.genCursor.rayDir;
        int start = 9;
        int stop = 15;
        if (n.dupe[this.boar.hitindex].variant == 2)
        {
          start = 31;
          stop = 37;
        }
        if (n.dupe[this.boar.hitindex].move != 0)
        {
          Vector3 cameraPosition = new Vector3(n.dupe[this.boar.hitindex].mypos.X, n.dupe[this.boar.hitindex].mypos.Y + 50f, n.dupe[this.boar.hitindex].mypos.Z);
          this.UpdatePicking(this.proj, Matrix.CreateLookAt(cameraPosition, new Vector3(cameraPosition.X + (float) this.rr.Next(-7000, 7000) / 40f, cameraPosition.Y - 200f, cameraPosition.Z + (float) this.rr.Next(-7000, 7000) / 40f), Vector3.Right), ref this.genCursor, false);
          this.bloodDecal(ref this.farm, this.genCursor, this.rr.Next(0, 70000), false, start, stop, this.mybloodColor);
        }
        bool flag2;
        if ((flag2 = bodypart == 8) && n.dupe[this.boar.hitindex].assexplode != 10)
          --n.dupe[this.boar.hitindex].assexplode;
        if (this.boarSchedulethisFrame)
          return;
        bool flag3 = (double) n.dupe[this.boar.hitindex].startHealth == (double) n.dupe[this.boar.hitindex].health;
        bool flag4 = n.dupe[this.boar.hitindex].assexplode <= 0 && n.dupe[this.boar.hitindex].immunity <= 0 && this.myPlayer.gunChoice != 8 && flag2;
        bool flag5 = flag1 || flag4;
        if (this.sc.cheat_AllExplode || n.dupe[this.boar.hitindex].assexplode == 10)
          flag5 = true;
        if (!flag5)
        {
          float num3 = MathHelper.Clamp((float) (1.0 - (double) this.boar.npcDist / 1800.0), 0.0f, 0.9f);
          if ((n.dupe[this.boar.hitindex].variant == 4 || n.dupe[this.boar.hitindex].variant == 0 || n.dupe[this.boar.hitindex].variant == 1) && n.dupe[this.boar.hitindex].move > 0 && !n.dupe[this.boar.hitindex].death)
            this.sc.pigSqueal[this.rr.Next(0, 4)].Play(this.sc.ev * num3, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
          if (n.dupe[this.boar.hitindex].variant == 3)
            this.sc.metalHit[this.rr.Next(0, 4)].Play(this.sc.ev * num3, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
          if (n.dupe[this.boar.hitindex].variant == 2)
            this.sc.buzz.Play(this.sc.ev * num3, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
        }
        if (flag5)
        {
          if (n.dupe[this.boar.hitindex].exploded != 0)
            return;
          n.dupe[this.boar.hitindex].exploded = 1;
          bool died = false;
          if ((double) n.dupe[this.boar.hitindex].health > 0.0)
          {
            died = true;
            n.dupe[this.boar.hitindex].timeofDeath = -this.timeFrame;
            ++this.myPlayer.now.myscore;
            n.dupe[this.boar.hitindex].health = 0.0f;
          }
          if (flag1)
          {
            this.tempConduct.veloc = rayDir;
            this.scheduleAction(ref n, this.boar.hitindex, 0, 5, died);
            if (this.myPlayer.stats_record)
            {
              ++this.myPlayer.stats_shottied;
              if (flag3 && died)
                ++this.myPlayer.stats_oneshots;
            }
          }
          else
          {
            this.scheduleAction(ref n, this.boar.hitindex, bodypart, 3, died);
            if (this.myPlayer.stats_record)
            {
              ++this.myPlayer.stats_asshits;
              if (flag3 && died)
                ++this.myPlayer.stats_oneshots;
              if (this.sc.revengeDay <= 0)
                this.sc.trophy.win(this.sc.trophy.kaboom);
              if (this.myPlayer.isDown)
                this.sc.trophy.win(this.sc.trophy.whileyourdown);
            }
          }
          if (died && Princess4.cuttyCount > 0 && this.rr.Next(1, 1000) < 600)
            this.princess[0].pigTalk(this.rr.Next(6, 10));
          this.sc.trophy.leaderPigsKilled();
        }
        else
        {
          if ((double) n.dupe[this.boar.hitindex].health <= 0.0)
            return;
          bool died = false;
          n.dupe[this.boar.hitindex].health -= this.sc.gunDam[this.myPlayer.lastWeapon] * this.sc.handicapDam4[this.sc.df];
          if ((double) n.dupe[this.boar.hitindex].health <= 0.0)
          {
            died = true;
            n.dupe[this.boar.hitindex].timeofDeath = -this.timeFrame;
            ++this.myPlayer.now.myscore;
            if (this.myPlayer.isDown)
              this.sc.trophy.win(this.sc.trophy.whileyourdown);
            this.sc.trophy.win(this.sc.trophy.youmurderer);
            this.sc.trophy.leaderPigsKilled();
          }
          if (died && Princess4.cuttyCount > 0 && this.rr.Next(1, 1000) < 600)
            this.princess[0].pigTalk(this.rr.Next(6, 10));
          this.scheduleAction(ref n, this.boar.hitindex, bodypart, 1, died);
        }
      }
    }

    private void schedExplodeNPC(ref BloodnBacon4PT.npc n, int i, int count)
    {
      if (n.dupe[i].exploded != 0 || n.dupe[i].undead)
        return;
      n.dupe[i].exploded = 1;
      bool died = false;
      if ((double) n.dupe[i].health > 0.0)
      {
        died = true;
        n.dupe[i].timeofDeath = -this.timeFrame;
        ++this.myPlayer.now.myscore;
        n.dupe[i].health = 0.0f;
      }
      this.scheduleAction(ref n, i, 1, 33, died);
      if (count == 0)
      {
        this.myPlayer.creaturemulti.died = died;
        this.myPlayer.creaturemulti.id = (ushort) i;
        if (this.myPlayer.stats_record)
          ++this.myPlayer.stats_grenadier;
      }
      if (count == 1)
      {
        this.myPlayer.creaturemulti.died2 = died;
        this.myPlayer.creaturemulti.id2 = (ushort) i;
        if (this.myPlayer.stats_record)
          ++this.myPlayer.stats_grenadier;
      }
      if (count == 2)
      {
        this.myPlayer.creaturemulti.died3 = died;
        this.myPlayer.creaturemulti.id3 = (ushort) i;
        if (this.myPlayer.stats_record)
          ++this.myPlayer.stats_grenadier;
      }
      if (count == 3)
      {
        this.myPlayer.creaturemulti.died4 = died;
        this.myPlayer.creaturemulti.id4 = (ushort) i;
        if (this.myPlayer.stats_record)
          ++this.myPlayer.stats_grenadier;
      }
      if (count != 4)
        return;
      this.myPlayer.creaturemulti.died5 = died;
      this.myPlayer.creaturemulti.id5 = (ushort) i;
      if (!this.myPlayer.stats_record)
        return;
      ++this.myPlayer.stats_grenadier;
    }

    private void schedShockNPC(ref BloodnBacon4PT.npc n, int i, int count)
    {
      this.scheduleAction(ref n, i, 0, 34, false);
      this.myPlayer.creatureShock.time = this.timeFrame + this.leverTimer;
      if (count == 0)
        this.myPlayer.creatureShock.id = (ushort) i;
      if (count == 1)
        this.myPlayer.creatureShock.id2 = (ushort) i;
      if (count == 2)
        this.myPlayer.creatureShock.id3 = (ushort) i;
      if (count == 3)
        this.myPlayer.creatureShock.id4 = (ushort) i;
      if (count == 4)
        this.myPlayer.creatureShock.id5 = (ushort) i;
      if (count == 5)
        this.myPlayer.creatureShock.id6 = (ushort) i;
      if (count == 6)
        this.myPlayer.creatureShock.id7 = (ushort) i;
      if (count != 7)
        return;
      this.myPlayer.creatureShock.id8 = (ushort) i;
    }

    private void schedShatterNPC(ref BloodnBacon4PT.npc n, int i, int count)
    {
      this.scheduleAction(ref n, i, 0, 55, false);
      if (count == 0)
        this.myPlayer.shatter.id = (ushort) i;
      if (count == 1)
        this.myPlayer.shatter.id2 = (ushort) i;
      if (count == 2)
        this.myPlayer.shatter.id3 = (ushort) i;
      if (count != 3)
        return;
      this.myPlayer.shatter.id4 = (ushort) i;
    }

    private void scheduleAction(
      ref BloodnBacon4PT.npc n,
      int i,
      int bodypart,
      int act,
      bool died)
    {
      this.delay = 0.0f;
      this.launchTime = this.timeFrame + (int) this.delay;
      if (act == 0)
      {
        byte num1 = 1;
        if ((this.rr.Next(1, 100) < 70 || this.myPlayer.onMilk) && !n.dupe[i].death && n.dupe[i].move != 0)
        {
          this.sc.trophy.leaderMostKO();
          num1 = (byte) 7;
          died = true;
          if (!n.dupe[i].undead)
          {
            this.sc.trophy.win(this.sc.trophy.knockout);
            n.dupe[i].health = 0.0f;
            n.dupe[this.boar.hitindex].timeofDeath = -this.timeFrame;
            ++this.myPlayer.now.myscore;
          }
        }
        if (n.dupe[i].death || n.dupe[i].move == 0)
        {
          num1 = (byte) 8;
          n.dupe[i].move = 1;
        }
        float num2 = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[i].mypos) / 1800.0), 0.2f, 1f);
        float num3 = num2 * num2;
        if (num1 != (byte) 8)
          this.sc.pigSqueal[this.rr.Next(0, 4)].Play(this.sc.ev * num3, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-50, 50) / 100f);
        float num4 = (float) ((double) n.dupe[i].speed * (double) this.rr.Next(100, 130) / 100.0);
        if (num1 == (byte) 7)
        {
          ++num4;
          if (this.myPlayer.onMilk)
            num4 = (float) this.rr.Next(10, 18);
        }
        if (num1 == (byte) 8)
        {
          num4 += (float) this.rr.Next(5, 9);
          if (this.myPlayer.onMilk)
            num4 += 10f;
        }
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = num1;
        this.myPlayer.creature.action = (byte) 1;
        if (num1 == (byte) 7 || num1 == (byte) 8)
          this.myPlayer.creature.action = (byte) 17;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.myPlayer.creature.speed = (byte) num4;
        this.myPlayer.creature.rot = (float) ((double) this.myPlayer.displayState.npcRotation - 1.5700000524520874 + 3.1400001049041748);
        this.myPlayer.creature.veloc = n.dupe[i].mypos;
        this.tempConduct.type = num1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 1;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
        this.tempConduct.speed = (byte) num4;
        this.tempConduct.rot = (float) ((double) this.myPlayer.displayState.npcRotation - 1.5700000524520874 + 3.1400001049041748);
        this.tempConduct.veloc = n.dupe[i].mypos;
      }
      if (act == 1)
      {
        byte num = 1;
        if (this.myPlayer.lastWeapon == 0 && !n.dupe[i].undead && this.myPlayer.mag[0] <= 1)
        {
          num = (byte) 2;
          died = true;
          n.dupe[i].health = 0.0f;
          n.dupe[this.boar.hitindex].timeofDeath = -this.timeFrame;
          ++this.myPlayer.now.myscore;
        }
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = num;
        this.myPlayer.creature.action = (byte) 1;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.type = num;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 1;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 2)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) 1;
        this.myPlayer.creature.action = (byte) 2;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 2;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 3)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.action = (byte) act;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.id = i;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.action = (byte) act;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 4)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) 1;
        this.myPlayer.creature.action = (byte) 4;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 4;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 5)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) 1;
        this.myPlayer.creature.action = (byte) 5;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.myPlayer.creature.veloc = this.tempConduct.veloc;
        this.tempConduct.id = i;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.action = (byte) 5;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 6)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) 1;
        this.myPlayer.creature.action = (byte) 6;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 6;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 7)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) 1;
        this.myPlayer.creature.action = (byte) 7;
        this.myPlayer.creature.bodypart = (byte) 0;
        this.myPlayer.creature.frame = (ushort) 1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = false;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 7;
        this.tempConduct.bodypart = (byte) 0;
        this.tempConduct.frame = 1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = false;
      }
      if (act >= 22 && act <= 31)
      {
        this.myPlayer.creature.id = (ushort) i;
        this.myPlayer.creature.type = (byte) (act - 22);
        this.myPlayer.creature.action = (byte) 22;
        this.myPlayer.creature.bodypart = (byte) bodypart;
        this.myPlayer.creature.frame = (ushort) n.dupe[i].frame1;
        this.myPlayer.creature.time = this.timeFrame;
        this.myPlayer.creature.died = died;
        this.tempConduct.id = i;
        this.tempConduct.type = (byte) (act - 22);
        this.tempConduct.action = (byte) 22;
        this.tempConduct.bodypart = (byte) bodypart;
        this.tempConduct.frame = n.dupe[i].frame1;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 33)
      {
        this.myPlayer.creaturemulti.type = (byte) 1;
        this.myPlayer.creaturemulti.bodypart = (byte) 1;
        this.myPlayer.creaturemulti.frame = (ushort) 5;
        this.myPlayer.creaturemulti.time = this.timeFrame;
        this.myPlayer.creaturemulti.action = (byte) 33;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 3;
        this.tempConduct.bodypart = (byte) 1;
        this.tempConduct.frame = 5;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 34)
      {
        this.myPlayer.creatureShock.type = (byte) 1;
        this.myPlayer.creatureShock.bodypart = (byte) 1;
        this.myPlayer.creatureShock.frame = (ushort) 5;
        this.myPlayer.creatureShock.time = this.timeFrame;
        this.myPlayer.creatureShock.action = (byte) 34;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 34;
        this.tempConduct.bodypart = (byte) 1;
        this.tempConduct.frame = 5;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      if (act == 55)
      {
        this.myPlayer.shatter.type = (byte) 1;
        this.myPlayer.shatter.bodypart = (byte) 1;
        this.myPlayer.shatter.frame = (ushort) 5;
        this.myPlayer.shatter.time = this.timeFrame;
        this.myPlayer.shatter.action = (byte) 55;
        this.tempConduct.type = (byte) 1;
        this.tempConduct.id = i;
        this.tempConduct.action = (byte) 55;
        this.tempConduct.bodypart = (byte) 1;
        this.tempConduct.frame = 5;
        this.tempConduct.time = this.launchTime;
        this.tempConduct.died = died;
      }
      this.boarSchedulethisFrame = true;
      n.conductor.Add(this.tempConduct);
    }

    private void runConductor(ref BloodnBacon4PT.npc n)
    {
      for (int index = 0; index < n.conductor.Count; ++index)
      {
        this.tempConduct = n.conductor[index];
        if (this.timeFrame >= this.tempConduct.time)
        {
          this.boarAction(ref n, ref this.tempConduct, true);
          n.conductor.RemoveAt(index);
        }
      }
    }

    private void boarAction(
      ref BloodnBacon4PT.npc n,
      ref BloodnBacon4PT.conductor cc,
      bool localData)
    {
      int id = cc.id;
      int remIndex = cc.remIndex;
      int bodypart = (int) cc.bodypart;
      bool died = cc.died;
      if (id > this.boar.dupe.Count - 1)
        return;
      if (died && this.sc.host && !localData)
      {
        if (n.dupe[id].timeofDeath == 0)
        {
          n.dupe[id].timeofDeath = cc.time;
          ++this.myPlayer.now.remscore;
        }
        else if (n.dupe[id].timeofDeath < 0 && cc.time <= Math.Abs(n.dupe[id].timeofDeath))
        {
          n.dupe[id].timeofDeath = cc.time;
          ++this.myPlayer.now.remscore;
          --this.myPlayer.now.myscore;
        }
      }
      if (cc.action == (byte) 7)
      {
        this.sc.trophy.win(this.sc.trophy.fryertuck);
        this.reclaimHoming(ref n, id);
        if (n.dupe[id].exploded == 2)
          return;
        n.dupe[id].isShocked = 5;
        if (n.dupe[id].move == -10)
          return;
        n.dupe[id].move = -10;
        n.dupe[id].health = 0.0f;
        float radians = this.myPlayer.feetRot - 1.57f;
        if (!localData)
          radians = (float) this.rr.Next(-800, 800) / 100f;
        Vector3 vector3_1 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateRotationY(radians)) * (float) this.rr.Next(10, 30) / 10f;
        for (int k = 0; k < this.charroTrans.Length; ++k)
        {
          int maxValue1 = this.rr.Next(80, 145);
          int maxValue2 = this.rr.Next(550, 1250);
          Vector3 vector3_2 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 200f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 200f);
          this.dropChar(id, k, ref this.charro, (float) this.rr.Next(30, 50) / 100f, 1f, 1f, Matrix.Identity, (vector3_1 + new Vector3(0.0f + vector3_2.X, 0.3f + vector3_2.Y, 0.0f + vector3_2.Z)) * (float) this.rr.Next(-80, maxValue2) / 800f, true, (float) (-(double) this.rr.Next(20, 50) / 1000.0), 50, 10f, 50f);
        }
        if (localData)
        {
          this.vibroTimer = 30;
          this.vibroTimerAmt = 120f;
          float num = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 5500.0), 0.0f, 0.7f);
          this.sc.crumble[this.rr.Next(0, 3)].Play(this.sc.ev * num, (float) this.rr.Next(-20, 30) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        }
        else
        {
          float num = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 5500.0), 0.0f, 0.7f);
          this.sc.crumble[this.rr.Next(0, 3)].Play(this.sc.ev * num, (float) this.rr.Next(-20, 30) / 100f, 0.0f);
        }
      }
      else if (cc.action == (byte) 34)
      {
        if (!n.dupe[id].undead)
          this.reclaimHoming(ref n, id);
        if (n.dupe[id].exploded == 2)
          return;
        n.dupe[id].isturning = false;
        n.dupe[id].timer = 380f;
        n.dupe[id].clip2 = n.dupe[id].clip1;
        n.dupe[id].clip1 = 9;
        n.dupe[id].isShocked = 2;
        n.dupe[id].temp2 = n.dupe[id].temp1;
        n.dupe[id].temp1 = 1;
        n.dupe[id].frame2 = n.dupe[id].frame1;
        n.dupe[id].frame1 = 0;
        n.dupe[id].speed = 0.0f;
        n.dupe[id].turn = 0.0f;
        n.dupe[id].tween = 0.05f;
        n.dupe[id].interrupt = false;
      }
      else if (cc.action == (byte) 3)
      {
        this.reclaimHoming(ref n, id);
        if (n.dupe[id].exploded == 2)
          return;
        if (localData)
        {
          this.vibroTimer = 20;
          this.vibroTimerAmt = 100f;
        }
        n.dupe[id].exploded = 2;
        bool flag1 = n.dupe[id].isHead != 1;
        n.dupe[id].move = -10;
        n.dupe[id].health = 0.0f;
        float num1 = Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos);
        float num2 = MathHelper.Clamp((float) (1.0 - (double) num1 / 5500.0), 0.0f, 0.7f);
        this.sc.pigExplode[this.rr.Next(0, 4)].Play(this.sc.ev * num2, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
        this.genRandomX[0] = n.dupe[id].randomPartsFly;
        float num3 = (float) this.genRandomX[0].Next(50, 120) / 100f;
        if (this.genRandomX[0].Next(1, 1000) < 420)
          num3 = (float) this.genRandomX[0].Next(180, 230) / 100f;
        if (n.dupe[id].isGrow >= 0)
          num3 = (float) this.genRandomX[0].Next(190, 240) / 100f;
        float ta = 80f;
        float tb = 310f;
        float num4 = n.dupe[id].tint;
        int seed = n.dupe[id].seed;
        int minValue1 = 110;
        int maxValue3 = 480;
        float num5 = 60f;
        int minValue2 = -280;
        int maxValue4 = -90;
        float num6 = 1000f;
        if (this.sc.revengeDay > 0)
        {
          num3 = (float) this.genRandomX[0].Next(50, 350) / 100f;
          minValue1 = 100;
          maxValue3 = 500;
        }
        bool bleeds = true;
        int boarGroup = n.dupe[id].boarGroup;
        bool flag2 = false;
        if (this.sc.boar1Variant == 2 && boarGroup == 1)
        {
          bleeds = false;
          flag2 = true;
        }
        if (this.sc.boar2Variant == 2 && boarGroup == 2)
        {
          bleeds = false;
          flag2 = true;
        }
        if (flag2)
          num4 = 10f;
        int index1 = cc.frame * 29 + 17;
        Matrix pos1 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(75.2f), 0.0f) * Matrix.CreateTranslation(-46.66f, 51.926f, 85f) * n.data.Bones[index1] * n.dupe[id].transform;
        Vector3 vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        Vector3 vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce1 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav1 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.leg.dupe[this.leg.index].tint = num4;
        this.leg.dupe[this.leg.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.leg, bounce1, 28f * n.dupe[id].scale, 0.3f, pos1, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav1, 20, ta, tb, true, false, false, seed, 1);
        int index2 = cc.frame * 29 + 13;
        Matrix pos2 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(75.7f), MathHelper.ToRadians(5.7f)) * Matrix.CreateTranslation(45f, 51.926f, 84f) * n.data.Bones[index2] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(50, 580) / 70f, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce2 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav2 = (float) this.genRandomX[0].Next(-360, -90) / 1000f;
        this.leg.dupe[this.leg.index].tint = num4;
        this.leg.dupe[this.leg.index].assignRandom(seed + 1);
        this.dropPigPart(boarGroup, ref this.leg, bounce2, 28f * n.dupe[id].scale, 0.3f, pos2, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav2, 20, ta, tb, true, bleeds, false, seed, 4);
        int index3 = cc.frame * 29 + 26;
        Matrix pos3 = Matrix.CreateFromYawPitchRoll(MathHelper.ToRadians(16.8f), MathHelper.ToRadians(84f), MathHelper.ToRadians(-7f)) * Matrix.CreateTranslation(-33.5f, 53.4f, -94.4f) * n.data.Bones[index3] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce3 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav3 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.leg.dupe[this.leg.index].tint = num4;
        this.leg.dupe[this.leg.index].assignRandom(seed + 2);
        this.dropPigPart(boarGroup, ref this.leg, bounce3, 28f * n.dupe[id].scale, 0.3f, pos3, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav3, 20, ta, tb, true, false, true, seed, 2);
        int index4 = cc.frame * 29 + 5;
        Matrix pos4 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-25f, 150f, 56f) * n.data.Bones[index4] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce4 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav4 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.body.dupe[this.body.index].tint = num4;
        this.body.dupe[this.body.index].assignRandom(seed + 3);
        this.dropPigPart(boarGroup, ref this.body, bounce4, 36.3999977f * n.dupe[id].scale, 0.4f, pos4, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav4, 20, ta, tb, false, bleeds, true, seed, 1);
        int index5 = cc.frame * 29 + 5;
        Matrix pos5 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-9.2f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(25f, 157f, 54f) * n.data.Bones[index5] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce5 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav5 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.body.dupe[this.body.index].tint = num4;
        this.body.dupe[this.body.index].assignRandom(seed + 4);
        this.dropPigPart(boarGroup, ref this.body, bounce5, 36.3999977f * n.dupe[id].scale, 0.4f, pos5, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav5, 20, ta, tb, true, bleeds, true, seed, 2);
        int index6 = cc.frame * 29 + 2;
        Matrix pos6 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-26f, 143f, -74.93f) * n.data.Bones[index6] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce6 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav6 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.butt.dupe[this.butt.index].tint = num4;
        this.butt.dupe[this.butt.index].assignRandom(seed + 5);
        this.dropPigPart(boarGroup, ref this.butt, bounce6, 31.36f * n.dupe[id].scale, 0.5f, pos6, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav6, 20, ta, tb, true, bleeds, true, seed, 1);
        int index7 = cc.frame * 29 + 2;
        Matrix pos7 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-5f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(24.25f, 133f, -74.93f) * n.data.Bones[index7] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 90f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 90f);
        vector3_4 = (float) this.genRandomX[0].Next(20, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce7 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav7 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        this.butt.dupe[this.butt.index].tint = num4;
        this.butt.dupe[this.butt.index].assignRandom(seed + 6);
        this.dropPigPart(boarGroup, ref this.butt, bounce7, 31.36f * n.dupe[id].scale, 0.5f, pos7, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav7, 20, ta, tb, false, bleeds, true, seed, 2);
        int index8 = cc.frame * 29 + 10;
        Matrix pos8 = Matrix.CreateTranslation(4.8f, 128f, 201f) * n.data.Bones[index8] * n.dupe[id].transform;
        vector3_3 = new Vector3((float) this.genRandomX[0].Next(-300, 300) / 110f, (float) this.genRandomX[0].Next(minValue1, maxValue3) / num5, (float) this.genRandomX[0].Next(-300, 300) / 110f);
        vector3_4 = (float) this.genRandomX[0].Next(40, 200) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot)));
        float bounce8 = (float) this.genRandomX[0].Next(300, 700) / 1000f;
        float grav8 = (float) this.genRandomX[0].Next(minValue2, maxValue4) / num6;
        if (flag1)
        {
          this.head.dupe[this.head.index].tint = num4;
          this.head.dupe[this.head.index].assignRandom(seed + 7);
          this.dropPigPart(boarGroup, ref this.head, bounce8, 28f * n.dupe[id].scale, 0.7f, pos8, new Vector3(vector3_4.X + vector3_3.X, vector3_3.Y, vector3_4.Z + vector3_3.Z) * num3, true, grav8, 20, ta, tb, false, bleeds, true, seed, 1);
        }
        Vector3 mypos = n.dupe[id].mypos;
        mypos.Y += n.dupe[id].scale * 120f;
        int num7 = this.rr.Next(115, 225);
        if ((double) num1 > 2500.0)
          num7 = 0;
        for (int index9 = 0; index9 < num7; ++index9)
        {
          int maxValue5 = this.rr.Next(10, 125);
          int maxValue6 = this.rr.Next(450, 2150);
          Vector3 vector3_5 = new Vector3((float) this.rr.Next(-maxValue5, maxValue5) / 100f, (float) this.rr.Next(-maxValue5, maxValue5) / 100f, (float) this.rr.Next(-maxValue5, maxValue5) / 100f);
          this.sparks.AddParticle(mypos + vector3_5 * 10f, new Vector3(0.0f + vector3_5.X, 1f + vector3_5.Y, 0.0f + vector3_5.Z) * (float) this.rr.Next(120, maxValue6) / 10f);
        }
        int num8 = 25;
        int num9 = 35;
        if (this.sc.currentDay == 101)
        {
          num8 = 50;
          num9 = 70;
        }
        if ((double) num1 > 2500.0 && !flag2)
          num9 = 0;
        if (this.sc.gorelevel <= 0 && (double) num4 != 6.0 && !flag2 && (double) n.dupe[id].scale <= 0.5)
          return;
        for (int index10 = 0; index10 < num9; ++index10)
        {
          int maxValue7 = this.rr.Next(50, 125);
          int maxValue8 = this.rr.Next(650, 2250);
          Vector3 vector3_6 = new Vector3((float) this.rr.Next(-maxValue7, maxValue7) / 100f, (float) this.rr.Next(-maxValue7, maxValue7) / 150f, (float) this.rr.Next(-maxValue7, maxValue7) / 100f);
          float radius = (float) ((double) n.dupe[id].scale * (double) this.rr.Next(650, 2200) / 100.0);
          Matrix pos9 = Matrix.CreateRotationX((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationZ((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateTranslation(mypos + vector3_6 * 18f);
          if (!flag2)
            this.dropCarnage(ref this.carnage, false, (float) this.rr.Next(60, 90) / 100f, radius, 1f, pos9, new Vector3(0.0f + vector3_6.X, 1f + vector3_6.Y, 0.0f + vector3_6.Z) * (float) this.rr.Next(120, maxValue8) / 250f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
          if (num8 > 0)
          {
            if (flag2 || this.sc.gorelevel > 0)
              radius *= 1.6f;
            --num8;
            this.dropCarnage(ref this.pigbone, true, (float) this.rr.Next(60, 90) / 100f, radius * 1.4f, 1f, pos9, new Vector3(0.0f + vector3_6.X, 1f + vector3_6.Y, 0.0f + vector3_6.Z) * (float) this.rr.Next(100, maxValue8) / 250f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
          }
        }
      }
      else if (cc.action == (byte) 55)
      {
        this.reclaimHoming(ref n, id);
        if (n.dupe[id].exploded == 2)
          return;
        n.dupe[id].exploded = 2;
        bool flag3 = n.dupe[id].isHead != 1;
        n.dupe[id].move = -10;
        n.dupe[id].health = 0.0f;
        this.genRandomX[0] = n.dupe[id].randomPartsFly;
        float num10 = (float) this.genRandomX[0].Next(90, 120) / 100f;
        if (this.genRandomX[0].Next(1, 1000) < 220)
          num10 = (float) this.genRandomX[0].Next(160, 250) / 100f;
        float ta = -120f;
        float tb = 120f;
        float num11 = n.dupe[id].tint;
        int seed = n.dupe[id].seed;
        int minValue3 = -135;
        int maxValue9 = -40;
        float num12 = 1000f;
        bool bleeds = true;
        int boarGroup = n.dupe[id].boarGroup;
        bool flag4 = false;
        if (this.sc.boar1Variant == 2 && boarGroup == 1)
        {
          bleeds = false;
          flag4 = true;
        }
        if (this.sc.boar2Variant == 2 && boarGroup == 2)
        {
          bleeds = false;
          flag4 = true;
        }
        if (flag4)
          num11 = 10f;
        Vector3 mirvDest = this.pim1.mirvDest;
        float num13 = Vector3.DistanceSquared(n.dupe[id].mypos, this.pim1.mirvDest);
        if ((double) Vector3.DistanceSquared(n.dupe[id].mypos, this.pim2.mirvDest) < (double) num13)
          mirvDest = this.pim2.mirvDest;
        Vector3 vector3_7 = Vector3.Normalize(n.dupe[id].mypos - mirvDest) * (float) this.genRandomX[0].Next(500, 1150) / 100f;
        int minValue4 = 200;
        int maxValue10 = 400;
        int index11 = cc.frame * 29 + 17;
        Matrix pos10 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(75.2f), 0.0f) * Matrix.CreateTranslation(-46.66f, 51.926f, 85f) * n.data.Bones[index11] * n.dupe[id].transform;
        Vector3 vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        Vector3 vector3_9 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce9 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav9 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.leg.dupe[this.leg.index].tint = num11;
        this.leg.dupe[this.leg.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.leg, bounce9, 28f * n.dupe[id].scale, 0.3f, pos10, new Vector3(vector3_9.X + vector3_8.X, vector3_8.Y, vector3_9.Z + vector3_8.Z) * num10, true, grav9, 20, ta, tb, true, false, true, seed, 1);
        int index12 = cc.frame * 29 + 26;
        Matrix pos11 = Matrix.CreateFromYawPitchRoll(MathHelper.ToRadians(16.8f), MathHelper.ToRadians(84f), MathHelper.ToRadians(-7f)) * Matrix.CreateTranslation(-33.5f, 53.4f, -94.4f) * n.data.Bones[index12] * n.dupe[id].transform;
        vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        Vector3 vector3_10 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce10 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav10 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.leg.dupe[this.leg.index].tint = num11;
        this.leg.dupe[this.leg.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.leg, bounce10, 28f * n.dupe[id].scale, 0.3f, pos11, new Vector3(vector3_10.X + vector3_8.X, vector3_8.Y, vector3_10.Z + vector3_8.Z) * num10, true, grav10, 20, ta, tb, true, false, true, seed, 2);
        int index13 = cc.frame * 29 + 5;
        Matrix pos12 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-25f, 150f, 56f) * n.data.Bones[index13] * n.dupe[id].transform;
        vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        Vector3 vector3_11 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce11 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav11 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.body.dupe[this.body.index].tint = num11;
        this.body.dupe[this.body.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.body, bounce11, 36.3999977f * n.dupe[id].scale, 0.4f, pos12, new Vector3(vector3_11.X + vector3_8.X, vector3_8.Y, vector3_11.Z + vector3_8.Z) * num10, true, grav11, 20, ta, tb, false, false, true, seed, 1);
        int index14 = cc.frame * 29 + 5;
        Matrix pos13 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-9.2f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(25f, 157f, 54f) * n.data.Bones[index14] * n.dupe[id].transform;
        vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_11 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce12 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav12 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.body.dupe[this.body.index].tint = num11;
        this.body.dupe[this.body.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.body, bounce12, 36.3999977f * n.dupe[id].scale, 0.4f, pos13, new Vector3(vector3_11.X + vector3_8.X, vector3_8.Y, vector3_11.Z + vector3_8.Z) * num10, true, grav12, 20, ta, tb, true, bleeds, true, seed, 2);
        int index15 = cc.frame * 29 + 2;
        Matrix pos14 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-26f, 143f, -74.93f) * n.data.Bones[index15] * n.dupe[id].transform;
        vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_11 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce13 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav13 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.butt.dupe[this.butt.index].tint = num11;
        this.butt.dupe[this.butt.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.butt, bounce13, 31.36f * n.dupe[id].scale, 0.5f, pos14, new Vector3(vector3_11.X + vector3_8.X, vector3_8.Y, vector3_11.Z + vector3_8.Z) * num10, true, grav13, 20, ta, tb, true, false, true, seed, 1);
        int index16 = cc.frame * 29 + 2;
        Matrix pos15 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-5f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(24.25f, 133f, -74.93f) * n.data.Bones[index16] * n.dupe[id].transform;
        vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(200, 400) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_11 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce14 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav14 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
        this.butt.dupe[this.butt.index].tint = num11;
        this.butt.dupe[this.butt.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.butt, bounce14, 31.36f * n.dupe[id].scale, 0.5f, pos15, new Vector3(vector3_11.X + vector3_8.X, vector3_8.Y, vector3_11.Z + vector3_8.Z) * num10, true, grav14, 20, ta, tb, false, bleeds, true, seed, 2);
        if (flag3)
        {
          int index17 = cc.frame * 29 + 10;
          Matrix pos16 = Matrix.CreateTranslation(4.8f, 128f, 201f) * n.data.Bones[index17] * n.dupe[id].transform;
          vector3_8 = vector3_7 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(minValue4, maxValue10) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
          vector3_11 = (float) this.genRandomX[0].Next(20, 50) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot)));
          float bounce15 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
          float grav15 = (float) this.genRandomX[0].Next(minValue3, maxValue9) / num12;
          this.head.dupe[this.head.index].tint = num11;
          this.head.dupe[this.head.index].assignRandom(seed);
          this.dropPigPart(boarGroup, ref this.head, bounce15, 28f * n.dupe[id].scale, 0.7f, pos16, new Vector3(vector3_11.X + vector3_8.X, vector3_8.Y, vector3_11.Z + vector3_8.Z) * num10, true, grav15, 20, ta, tb, false, bleeds, true, seed, 1);
        }
        Vector3 mypos = n.dupe[id].mypos;
        mypos.Y += n.dupe[id].scale * 120f;
        int num14 = 10;
        int num15 = 10;
        for (int index18 = 0; index18 < 200; ++index18)
        {
          int maxValue11 = this.rr.Next(50, 125);
          int maxValue12 = this.rr.Next(850, 1550);
          Vector3 vector3_12 = new Vector3((float) this.rr.Next(-maxValue11, maxValue11) / 100f, (float) this.rr.Next(-maxValue11, maxValue11) / 150f, (float) this.rr.Next(-maxValue11, maxValue11) / 100f);
          this.sparks.AddParticle(mypos + vector3_12 * 10f, (vector3_7 * 0.8f + new Vector3(0.0f + vector3_12.X, 1f + vector3_12.Y, 0.0f + vector3_12.Z)) * (float) this.rr.Next(50, maxValue12) / 10f);
          if (index18 % 20 == 0)
          {
            float num16 = (float) ((double) n.dupe[id].scale * (double) this.rr.Next(650, 2200) / 100.0);
            Matrix pos17 = Matrix.CreateRotationX((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationZ((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateTranslation(mypos + vector3_12 * 18f);
            if (!flag4 && num15 > 0)
            {
              --num15;
              this.dropCarnage(ref this.carnage, false, (float) this.rr.Next(60, 90) / 100f, num16 * 2f, 1f, pos17, (vector3_7 * 0.7f + new Vector3(0.0f + vector3_12.X, 1.1f + vector3_12.Y, 0.0f + vector3_12.Z)) * (float) this.rr.Next(300, maxValue12) / 300f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
            }
            if (num14 > 0)
            {
              float num17 = num16 * 2f;
              --num14;
              this.dropCarnage(ref this.pigbone, true, (float) this.rr.Next(60, 90) / 100f, num17 * 1.3f, 1f, pos17, (vector3_7 * 0.7f + new Vector3(0.0f + vector3_12.X, 1.1f + vector3_12.Y, 0.0f + vector3_12.Z)) * (float) this.rr.Next(300, maxValue12) / 300f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
            }
          }
        }
      }
      else if (cc.action == (byte) 5)
      {
        if (!n.dupe[id].undead)
          this.reclaimHoming(ref n, id);
        if (n.dupe[id].exploded == 2)
          return;
        int mytest = this.mybloodColor;
        if (localData)
        {
          mytest = this.mybloodColor;
          this.vibroTimer = 20;
          this.vibroTimerAmt = 100f;
        }
        else
        {
          try
          {
            mytest = this.remPlayer[remIndex].r.remBloodColor;
          }
          catch
          {
          }
        }
        bool flag5 = false;
        if (n.dupe[id].undead && !died && (double) n.dupe[id].health > 0.0)
        {
          if (bodypart != 3)
            n.dupe[id].health -= 10f;
          if (!n.dupe[id].interrupt)
          {
            n.dupe[id].interrupt = true;
            n.dupe[id].oldtimer = n.dupe[id].timer;
            n.dupe[id].oldturning = n.dupe[id].isturning;
            n.dupe[id].oldturn = n.dupe[id].turn;
            n.dupe[id].oldclip = n.dupe[id].clip1;
            n.dupe[id].oldtemp = n.dupe[id].temp1;
            n.dupe[id].oldframe = n.dupe[id].frame1;
            n.dupe[id].oldspeed = n.dupe[id].speed;
          }
          n.dupe[id].isturning = false;
          n.dupe[id].timer = (float) n.dupe[id].stunLength;
          n.dupe[id].clip2 = n.dupe[id].clip1;
          int num = this.rr.Next(0, 4);
          n.dupe[id].clip1 = 4;
          if (num == 3)
            n.dupe[id].clip1 = 5;
          n.dupe[id].temp2 = n.dupe[id].temp1;
          n.dupe[id].temp1 = 1;
          n.dupe[id].frame2 = n.dupe[id].frame1;
          n.dupe[id].frame1 = 0;
          n.dupe[id].speed = 0.0f;
          n.dupe[id].turn = 0.0f;
          n.dupe[id].tween = 0.05f;
          n.dupe[id].isStun = 1;
          if (localData)
          {
            if (this.myPlayer.stats_record)
              ++this.myPlayer.stats_meleehits;
            this.stunCount = 40;
            n.dupe[id].isStun = 1;
            n.dupe[id].stunLength = 160;
            this.vibroTimer = 20;
            this.vibroTimerAmt = 100f;
          }
        }
        else
        {
          n.dupe[id].undead = false;
          n.dupe[id].exploded = 2;
          flag5 = n.dupe[id].isHead != 1;
          n.dupe[id].move = -10;
          n.dupe[id].health = 0.0f;
        }
        float num18 = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 5500.0), 0.0f, 0.7f);
        this.genRandomX[0] = n.dupe[id].randomPartsFly;
        float num19 = (float) this.genRandomX[0].Next(90, 120) / 100f;
        if (this.genRandomX[0].Next(1, 1000) < 220)
          num19 = (float) this.genRandomX[0].Next(160, 200) / 100f;
        if (n.dupe[id].isGrow >= 0)
          num19 = (float) this.genRandomX[0].Next(190, 240) / 100f;
        float ta = -320f;
        float tb = 320f;
        float num20 = n.dupe[id].tint;
        int seed = n.dupe[id].seed;
        int minValue = -280;
        int maxValue13 = -90;
        float num21 = 1000f;
        bool bleeds = true;
        int boarGroup = n.dupe[id].boarGroup;
        bool flag6 = false;
        if (this.sc.boar1Variant == 2 && boarGroup == 1)
        {
          bleeds = false;
          flag6 = true;
        }
        if (this.sc.boar2Variant == 2 && boarGroup == 2)
        {
          bleeds = false;
          flag6 = true;
        }
        if (flag6)
          num20 = 10f;
        Vector3 vector3_13 = Vector3.Zero;
        bool flag7;
        if (flag7 = bodypart == 1)
        {
          vector3_13 = cc.veloc;
          bleeds = false;
          this.sc.crunch.Play(this.sc.ev * num18, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
        }
        if (bodypart == 0)
        {
          vector3_13 = Vector3.Normalize(cc.veloc) * (float) this.genRandomX[0].Next(300, 450) / 100f;
          this.sc.gusher.Play(this.sc.ev * num18, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
        }
        if (bodypart == 3)
        {
          vector3_13 = Vector3.Zero;
          this.sc.crunch.Play(this.sc.ev * num18, (float) this.rr.Next(-60, 60) / 100f, 0.0f);
          this.sc.trophy.win(this.sc.trophy.swallow);
        }
        int index19 = cc.frame * 29 + 17;
        Matrix pos18 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(75.2f), 0.0f) * Matrix.CreateTranslation(-46.66f, 51.926f, 85f) * n.data.Bones[index19] * n.dupe[id].transform;
        Vector3 vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(90, 330) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        Vector3 vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce16 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav16 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.leg.dupe[this.leg.index].tint = num20;
        this.leg.dupe[this.leg.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.leg, bounce16, 28f * n.dupe[id].scale, 0.3f, pos18, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav16, 20, ta, tb, true, false, true, seed, 1);
        int index20 = cc.frame * 29 + 26;
        Matrix pos19 = Matrix.CreateFromYawPitchRoll(MathHelper.ToRadians(16.8f), MathHelper.ToRadians(84f), MathHelper.ToRadians(-7f)) * Matrix.CreateTranslation(-33.5f, 53.4f, -94.4f) * n.data.Bones[index20] * n.dupe[id].transform;
        vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(90, 330) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce17 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav17 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.leg.dupe[this.leg.index].tint = num20;
        this.leg.dupe[this.leg.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.leg, bounce17, 28f * n.dupe[id].scale, 0.3f, pos19, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav17, 20, ta, tb, true, false, true, seed, 2);
        int index21 = cc.frame * 29 + 5;
        Matrix pos20 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-25f, 150f, 56f) * n.data.Bones[index21] * n.dupe[id].transform;
        vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(90, 330) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce18 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav18 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.body.dupe[this.body.index].tint = num20;
        this.body.dupe[this.body.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.body, bounce18, 36.3999977f * n.dupe[id].scale, 0.4f, pos20, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav18, 20, ta, tb, false, bleeds, true, seed, 1);
        int index22 = cc.frame * 29 + 5;
        Matrix pos21 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-9.2f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(25f, 157f, 54f) * n.data.Bones[index22] * n.dupe[id].transform;
        vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(90, 320) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce19 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav19 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.body.dupe[this.body.index].tint = num20;
        this.body.dupe[this.body.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.body, bounce19, 36.3999977f * n.dupe[id].scale, 0.4f, pos21, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav19, 20, ta, tb, true, bleeds, true, seed, 2);
        int index23 = cc.frame * 29 + 2;
        Matrix pos22 = Matrix.CreateFromYawPitchRoll(0.0f, 0.0f, MathHelper.ToRadians(90f)) * Matrix.CreateTranslation(-26f, 143f, -74.93f) * n.data.Bones[index23] * n.dupe[id].transform;
        vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(100, 310) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot - 1.57f)));
        float bounce20 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav20 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.butt.dupe[this.butt.index].tint = num20;
        this.butt.dupe[this.butt.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.butt, bounce20, 31.36f * n.dupe[id].scale, 0.5f, pos22, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav20, 20, ta, tb, true, bleeds, true, seed, 1);
        int index24 = cc.frame * 29 + 2;
        Matrix pos23 = Matrix.CreateFromYawPitchRoll(0.0f, MathHelper.ToRadians(-5f), MathHelper.ToRadians(270f)) * Matrix.CreateTranslation(24.25f, 133f, -74.93f) * n.data.Bones[index24] * n.dupe[id].transform;
        vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(90, 330) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
        vector3_15 = (float) this.genRandomX[0].Next(20, 60) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(1.57f + n.dupe[id].myRot)));
        float bounce21 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
        float grav21 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
        this.butt.dupe[this.butt.index].tint = num20;
        this.butt.dupe[this.butt.index].assignRandom(seed);
        this.dropPigPart(boarGroup, ref this.butt, bounce21, 31.36f * n.dupe[id].scale, 0.5f, pos23, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav21, 20, ta, tb, false, bleeds, true, seed, 2);
        if (flag5)
        {
          int index25 = cc.frame * 29 + 10;
          Matrix pos24 = Matrix.CreateTranslation(4.8f, 128f, 201f) * n.data.Bones[index25] * n.dupe[id].transform;
          vector3_14 = vector3_13 + new Vector3((float) this.genRandomX[0].Next(-300, 300) / 120f, (float) this.genRandomX[0].Next(100, 320) / 50f, (float) this.genRandomX[0].Next(-300, 300) / 120f);
          vector3_15 = (float) this.genRandomX[0].Next(20, 50) / 30f * Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot)));
          float bounce22 = (float) this.genRandomX[0].Next(600, 800) / 1000f;
          float grav22 = (float) this.genRandomX[0].Next(minValue, maxValue13) / num21;
          this.head.dupe[this.head.index].tint = num20;
          this.head.dupe[this.head.index].assignRandom(seed);
          this.dropPigPart(boarGroup, ref this.head, bounce22, 28f * n.dupe[id].scale, 0.7f, pos24, new Vector3(vector3_15.X + vector3_14.X, vector3_14.Y, vector3_15.Z + vector3_14.Z) * num19, true, grav22, 20, ta, tb, false, bleeds, true, seed, 1);
        }
        Vector3 mypos = n.dupe[id].mypos;
        mypos.Y += n.dupe[id].scale * 120f;
        if (bodypart != 3)
        {
          Vector3 cameraPosition1 = mypos + vector3_13 * 30f;
          cameraPosition1.Y += (float) this.rr.Next(10, 200);
          this.UpdatePicking(this.proj, Matrix.CreateLookAt(cameraPosition1, new Vector3(cameraPosition1.X + vector3_13.X * 40f, cameraPosition1.Y - 100f, cameraPosition1.Z + vector3_13.Z * 40f), Vector3.Forward), ref this.genCursor, false);
          this.bloodDecal(ref this.farm, this.genCursor, this.rr.Next(0, 70000), false, 9, 15, mytest);
          Vector3 cameraPosition2 = mypos + vector3_13 * 20f;
          cameraPosition2.Y += (float) this.rr.Next(10, 200);
          this.UpdatePicking(this.proj, Matrix.CreateLookAt(cameraPosition2, new Vector3(cameraPosition2.X + vector3_13.X * 70f, cameraPosition2.Y - 100f, cameraPosition2.Z + vector3_13.Z * 70f), Vector3.Forward), ref this.genCursor, false);
          this.bloodDecal(ref this.farm, this.genCursor, this.rr.Next(0, 70000), false, 9, 15, mytest);
        }
        int num22 = this.rr.Next(22, 30);
        for (int index26 = 0; index26 < 500; ++index26)
        {
          int maxValue14 = this.rr.Next(50, 125);
          int maxValue15 = this.rr.Next(850, 1550);
          Vector3 vector3_16 = new Vector3((float) this.rr.Next(-maxValue14, maxValue14) / 100f, (float) this.rr.Next(-maxValue14, maxValue14) / 150f, (float) this.rr.Next(-maxValue14, maxValue14) / 100f);
          if (!flag7)
            this.sparks.AddParticle(mypos + vector3_16 * 10f, (vector3_13 * 0.6f + new Vector3(0.0f + vector3_16.X, 1f + vector3_16.Y, 0.0f + vector3_16.Z)) * (float) this.rr.Next(50, maxValue15) / 10f);
          if (index26 % 15 == 0)
          {
            float radius = (float) ((double) n.dupe[id].scale * (double) this.rr.Next(650, 2200) / 100.0);
            Matrix pos25 = Matrix.CreateRotationX((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateRotationZ((float) this.rr.Next(-900, 900) / 100f) * Matrix.CreateTranslation(mypos + vector3_16 * 18f);
            if (!flag6)
              this.dropCarnage(ref this.carnage, false, (float) this.rr.Next(60, 90) / 100f, radius, 1f, pos25, (vector3_13 * 0.3f + new Vector3(0.0f + vector3_16.X, 1.1f + vector3_16.Y, 0.0f + vector3_16.Z)) * (float) this.rr.Next(300, maxValue15) / 300f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
            if (num22 > 0 && (flag7 || (double) num20 == 6.0 || flag6))
            {
              if (flag6)
                radius *= 1.6f;
              --num22;
              this.dropCarnage(ref this.pigbone, true, (float) this.rr.Next(60, 90) / 100f, radius * 1.3f, 1f, pos25, (vector3_13 * 0.23f + new Vector3(0.0f + vector3_16.X, 1.1f + vector3_16.Y, 0.0f + vector3_16.Z)) * (float) this.rr.Next(300, maxValue15) / 300f, true, (float) (-(double) this.rr.Next(50, 60) / 1000.0), 50, -200f, 300f);
            }
          }
        }
        if (flag7 || flag6)
          return;
        for (int index27 = 0; index27 < 600; ++index27)
        {
          int maxValue16 = this.rr.Next(50, 125);
          int maxValue17 = this.rr.Next(350, 1350);
          Vector3 vector3_17 = new Vector3((float) this.rr.Next(-maxValue16, maxValue16) / 100f, (float) this.rr.Next(-maxValue16, maxValue16) / 100f, (float) this.rr.Next(-maxValue16, maxValue16) / 100f);
          if (localData)
          {
            this.blood.AddParticle3(mypos + vector3_17 * 15f, (vector3_13 * 0.4f + new Vector3(0.0f + vector3_17.X, 1f + vector3_17.Y, 0.0f + vector3_17.Z)) * (float) this.rr.Next(50, maxValue17) / 10f, this.rr.Next(0, 11));
          }
          else
          {
            try
            {
              this.remPlayer[remIndex].r.bloodrem.AddParticle3(mypos + vector3_17 * 15f, (vector3_13 * 0.4f + new Vector3(0.0f + vector3_17.X, 1f + vector3_17.Y, 0.0f + vector3_17.Z)) * (float) this.rr.Next(50, maxValue17) / 10f, this.rr.Next(0, 11));
            }
            catch
            {
            }
          }
        }
      }
      else if (cc.action == (byte) 1)
      {
        if (!localData)
        {
          if (cc.type != (byte) 7)
          {
            if (cc.type != (byte) 8)
            {
              if ((n.dupe[id].variant == 2 ? 0 : (bodypart == 3 || bodypart == 4 || bodypart == 8 ? 1 : (n.dupe[id].variant != 3 ? 1 : 0))) != 0)
              {
                try
                {
                  this.addBoarBlood(ref n, id, bodypart, this.remPlayer[remIndex].r.remBloodColor);
                }
                catch
                {
                }
              }
            }
          }
          try
          {
            n.dupe[id].health -= this.sc.gunDam[this.remPlayer[remIndex].r.lastWeapon] * this.sc.handicapDam4[this.sc.df];
          }
          catch
          {
          }
          if (!n.dupe[id].undead)
          {
            if (!died && (double) n.dupe[id].health <= 0.0)
              n.dupe[id].health = 0.1f;
            if (died)
              n.dupe[id].health = 0.0f;
          }
        }
        if (n.dupe[id].exploded == 2)
          return;
        if (n.dupe[id].isHead == 0 && (bodypart == 1 || bodypart == 2 || bodypart == 7))
        {
          if (localData && this.myPlayer.stats_record)
            ++this.myPlayer.stats_headshots;
          n.dupe[id].isHead = 1;
          if (n.dupe[id].variant == 2)
          {
            n.dupe[id].isStun = -1;
            n.dupe[id].resetStun = -1;
            n.dupe[id].isChomp = -1;
            n.dupe[id].resetChomp = -1;
            this.sc.bonepop.Play(this.sc.ev, (float) this.rr.Next(-30, 10) / 100f, 0.0f);
          }
          this.myrr[0] = n.dupe[id].randomHead;
          n.dupe[id].immunity = 20;
          n.dupe[id].shottie = 0;
          int index = cc.frame * 29 + n.bone[7];
          Matrix pos = Matrix.CreateTranslation(4.8f, 128f, 201f) * n.data.Bones[index] * n.dupe[id].transform;
          float num = 1f;
          if (this.myrr[0].Next(1, 1000) < 160)
            num = 2f;
          Vector3 vector3_18 = new Vector3((float) this.myrr[0].Next(-300, 300) / 150f, (float) this.myrr[0].Next(180, 680) / 100f, (float) this.myrr[0].Next(-300, 300) / 150f);
          Vector3 vector3_19 = (float) this.myrr[0].Next(40, 200) / 100f * Vector3.Normalize(Vector3.Transform(new Vector3(vector3_18.Z / 2f, 0.0f, 1f), Matrix.CreateRotationY(n.dupe[id].myRot)));
          float bounce = (float) this.myrr[0].Next(300, 700) / 1000f;
          float grav = (float) this.myrr[0].Next(-260, -90) / 1000f;
          bool bleeds = true;
          int boarGroup = n.dupe[id].boarGroup;
          if (this.sc.boar1Variant == 2 && boarGroup == 1)
            bleeds = false;
          if (this.sc.boar2Variant == 2 && boarGroup == 2)
            bleeds = false;
          this.head.dupe[this.head.index].tint = n.dupe[id].tint;
          this.head.dupe[this.head.index].assignRandom(n.dupe[id].seed);
          this.dropPigPart(boarGroup, ref this.head, bounce, 28f * n.dupe[id].scale, 0.7f, pos, new Vector3(vector3_19.X + vector3_18.X, vector3_18.Y, vector3_19.Z + vector3_18.Z) * num, true, grav, 30, 90f, 220f, false, bleeds, true, n.dupe[id].seed, 1);
        }
        if ((n.dupe[id].undead && cc.type == (byte) 7 || (double) n.dupe[id].health <= 0.0) && n.dupe[id].clip1 < 10 || cc.type == (byte) 8)
        {
          if ((double) n.dupe[id].scale > 0.15000000596046448 && cc.type != (byte) 8)
          {
            float num23 = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 1800.0), 0.1f, 0.8f);
            float num24 = num23 * num23;
            this.sc.pigDie[this.rr.Next(0, 5)].Play(this.sc.ev * num24, (float) this.rr.Next(-40, 0) / 100f, (float) this.rr.Next(-60, 60) / 100f);
          }
          this.reclaimHoming(ref n, id);
          this.myrr[0] = n.dupe[id].randomDeath;
          n.dupe[id].clip2 = n.dupe[id].clip1;
          n.dupe[id].temp2 = n.dupe[id].temp1;
          n.dupe[id].frame2 = n.dupe[id].frame1;
          n.dupe[id].tween = 0.05f;
          n.dupe[id].isturning = false;
          n.dupe[id].clip1 = this.myrr[0].Next(10, 13);
          if (cc.type == (byte) 2)
            n.dupe[id].clip1 = 11;
          if (cc.type == (byte) 7)
            n.dupe[id].clip1 = 11;
          if (cc.type == (byte) 8)
            n.dupe[id].clip1 = 11;
          if (n.dupe[id].undead)
            n.dupe[id].clip1 = 11;
          n.dupe[id].timer = 68f;
          n.dupe[id].frame1 = 0;
          n.dupe[id].temp1 = 1;
          if ((n.dupe[id].clip1 != 11 || this.myrr[0].Next(1, 1000) >= 700) && cc.type != (byte) 2 && cc.type != (byte) 7 && cc.type != (byte) 8)
          {
            n.dupe[id].speed = 0.0f;
            n.dupe[id].turn = 0.0f;
          }
          else
          {
            n.dupe[id].death = true;
            n.dupe[id].temp1 = 28;
            n.dupe[id].timer = 40f;
            n.dupe[id].turn = (float) this.myrr[0].Next(30, 90) / 1000f;
            if (this.myrr[0].Next(1, 1000) < 500)
              n.dupe[id].turn *= -1f;
            n.dupe[id].speed *= (float) this.myrr[0].Next(100, 130) / 100f;
            n.dupe[id].myRotHeld = n.dupe[id].myRot;
            n.dupe[id].angleX = -(float) Math.Cos((double) n.dupe[id].myRotHeld + 1.5707999467849731);
            n.dupe[id].angleZ = (float) Math.Sin((double) n.dupe[id].myRotHeld + 1.5707999467849731);
            if (cc.type == (byte) 7)
            {
              n.dupe[id].speed = (float) cc.speed;
              n.dupe[id].mypos = cc.veloc;
              n.dupe[id].myRotHeld = cc.rot;
              n.dupe[id].angleX = -(float) Math.Cos((double) n.dupe[id].myRotHeld);
              n.dupe[id].angleZ = (float) Math.Sin((double) n.dupe[id].myRotHeld);
            }
            if (cc.type == (byte) 8)
            {
              n.dupe[id].move = 1;
              n.dupe[id].temp1 = 32;
              n.dupe[id].timer = 36f;
              n.dupe[id].turn = (float) this.myrr[0].Next(10, 50) / 1000f;
              if (this.myrr[0].Next(1, 1000) < 500)
                n.dupe[id].turn *= -1f;
              n.dupe[id].speed = (float) cc.speed;
              n.dupe[id].mypos = cc.veloc;
              n.dupe[id].myRotHeld = cc.rot;
              n.dupe[id].angleX = -(float) Math.Cos((double) n.dupe[id].myRotHeld);
              n.dupe[id].angleZ = (float) Math.Sin((double) n.dupe[id].myRotHeld);
            }
          }
          n.dupe[id].interrupt = false;
        }
        else
        {
          if ((double) n.dupe[id].health <= 0.0 || n.dupe[id].clip1 >= 10)
            return;
          if (n.dupe[id].homing == 0)
          {
            if (!n.dupe[id].interrupt)
            {
              n.dupe[id].interrupt = true;
              n.dupe[id].oldtimer = n.dupe[id].timer;
              n.dupe[id].oldturning = n.dupe[id].isturning;
              n.dupe[id].oldturn = n.dupe[id].turn;
              n.dupe[id].oldclip = n.dupe[id].clip1;
              n.dupe[id].oldtemp = n.dupe[id].temp1;
              n.dupe[id].oldframe = n.dupe[id].frame1;
              n.dupe[id].oldspeed = n.dupe[id].speed;
            }
            n.dupe[id].isturning = false;
            n.dupe[id].timer = 24f;
            n.dupe[id].clip2 = n.dupe[id].clip1;
            n.dupe[id].clip1 = this.rr.Next(6, 8);
            n.dupe[id].temp2 = n.dupe[id].temp1;
            n.dupe[id].temp1 = 2;
            n.dupe[id].frame2 = n.dupe[id].frame1;
            n.dupe[id].frame1 = 0;
            n.dupe[id].speed = 0.0f;
            n.dupe[id].turn = 0.0f;
            n.dupe[id].tween = 0.05f;
          }
          if (localData)
            return;
          float num = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 1800.0), 0.2f, 1f);
          if (n.dupe[id].variant == 4 || n.dupe[id].variant == 0 || n.dupe[id].variant == 1)
            this.sc.pigSqueal[this.rr.Next(0, 4)].Play(this.sc.ev * num, (float) this.rr.Next(-50, 50) / 100f, (float) this.rr.Next(-30, 30) / 100f);
          if (n.dupe[id].variant == 3)
            this.sc.metalHit[this.rr.Next(0, 4)].Play(this.sc.ev * num, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
          if (n.dupe[id].variant != 2)
            return;
          this.sc.buzz.Play(this.sc.ev * num, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
        }
      }
      else if ((!n.dupe[id].undead || cc.action != (byte) 22 ? 0 : (!n.dupe[id].death ? 1 : 0)) == 0 && ((double) n.dupe[id].health <= 0.0 || n.dupe[id].clip1 >= 9 || n.dupe[id].isShocked > 0))
        this.reclaimHoming(ref n, id);
      else if (cc.action == (byte) 22)
      {
        int type = (int) cc.type;
        if (n.dupe[id].exploded == 2)
          return;
        if (!localData)
        {
          if (type == this.sc.myplayerindex)
            ++boarDupe.homingCount;
          else if (type >= 0 && type < this.remPlayer.Count)
            ++this.remPlayer[type].r.homingCount;
        }
        if (n.dupe[id].undead)
        {
          n.dupe[id].isShocked = 0;
          n.dupe[id].isStun = 0;
          n.dupe[id].undead = true;
        }
        n.dupe[id].homing = type + 1;
        n.dupe[id].myRot %= 6.2832f;
        n.dupe[id].isturning = false;
        n.dupe[id].timer = 50000f;
        n.dupe[id].tween = 0.0f;
        n.dupe[id].clip2 = n.dupe[id].clip1;
        n.dupe[id].clip1 = 2;
        if (this.rr.Next(1, 100) < 51)
          n.dupe[id].clip1 = 3;
        n.dupe[id].speed = n.dupe[id].scale * (boarDupe.acc / 1000f) * n.dupe[id].charge;
        n.dupe[id].scaleSpeed = n.dupe[id].charge;
        n.dupe[id].turn = 0.0f;
        n.dupe[id].interrupt = false;
      }
      else
      {
        if (cc.action == (byte) 6)
        {
          if (n.dupe[id].exploded == 2)
            return;
          if (n.dupe[id].homing == 0)
          {
            if (!n.dupe[id].interrupt)
            {
              n.dupe[id].interrupt = true;
              n.dupe[id].oldtimer = n.dupe[id].timer;
              n.dupe[id].oldturning = n.dupe[id].isturning;
              n.dupe[id].oldturn = n.dupe[id].turn;
              n.dupe[id].oldclip = n.dupe[id].clip1;
              n.dupe[id].oldtemp = n.dupe[id].temp1;
              n.dupe[id].oldframe = n.dupe[id].frame1;
              n.dupe[id].oldspeed = n.dupe[id].speed;
            }
            n.dupe[id].isturning = false;
            n.dupe[id].timer = 120f;
            n.dupe[id].clip2 = n.dupe[id].clip1;
            n.dupe[id].clip1 = 2;
            n.dupe[id].temp2 = n.dupe[id].temp1;
            n.dupe[id].temp1 = 1;
            n.dupe[id].frame2 = n.dupe[id].frame1;
            n.dupe[id].frame1 = 0;
            n.dupe[id].speed = (float) ((double) n.dupe[id].scale * ((double) boarDupe.acc / 1000.0) * 6.0);
            n.dupe[id].turn = 0.0f;
            n.dupe[id].tween = 0.05f;
            n.dupe[id].isSpooked = 1;
          }
        }
        if (cc.action == (byte) 4)
        {
          if (n.dupe[id].exploded == 2)
            return;
          if (!n.dupe[id].interrupt)
          {
            n.dupe[id].interrupt = true;
            n.dupe[id].oldtimer = n.dupe[id].timer;
            n.dupe[id].oldturning = n.dupe[id].isturning;
            n.dupe[id].oldturn = n.dupe[id].turn;
            n.dupe[id].oldclip = n.dupe[id].clip1;
            n.dupe[id].oldtemp = n.dupe[id].temp1;
            n.dupe[id].oldframe = n.dupe[id].frame1;
            n.dupe[id].oldspeed = n.dupe[id].speed;
          }
          n.dupe[id].isturning = false;
          n.dupe[id].timer = (float) n.dupe[id].stunLength;
          n.dupe[id].clip2 = n.dupe[id].clip1;
          int num25 = this.rr.Next(0, 4);
          n.dupe[id].clip1 = 4;
          if (num25 == 3)
            n.dupe[id].clip1 = 5;
          n.dupe[id].temp2 = n.dupe[id].temp1;
          n.dupe[id].temp1 = 1;
          n.dupe[id].frame2 = n.dupe[id].frame1;
          n.dupe[id].frame1 = 0;
          n.dupe[id].speed = 0.0f;
          n.dupe[id].turn = 0.0f;
          n.dupe[id].tween = 0.05f;
          n.dupe[id].isStun = 1;
          float num26 = MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 1800.0), 0.2f, 1f);
          float num27 = num26 * num26;
          this.sc.pigSqueal[this.rr.Next(0, 4)].Play(this.sc.ev * num27, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-50, 50) / 100f);
        }
        else
        {
          if (cc.action != (byte) 2 || n.dupe[id].exploded == 2)
            return;
          if (!n.dupe[id].interrupt)
          {
            n.dupe[id].interrupt = true;
            n.dupe[id].oldtimer = n.dupe[id].timer;
            n.dupe[id].oldturning = n.dupe[id].isturning;
            n.dupe[id].oldturn = n.dupe[id].turn;
            n.dupe[id].oldclip = n.dupe[id].clip1;
            n.dupe[id].oldtemp = n.dupe[id].temp1;
            n.dupe[id].oldframe = n.dupe[id].frame1;
            n.dupe[id].oldspeed = n.dupe[id].speed;
          }
          n.dupe[id].isturning = false;
          n.dupe[id].timer = 80f;
          n.dupe[id].clip2 = n.dupe[id].clip1;
          n.dupe[id].clip1 = 8;
          n.dupe[id].temp2 = n.dupe[id].temp1;
          n.dupe[id].temp1 = 1;
          n.dupe[id].frame2 = n.dupe[id].frame1;
          n.dupe[id].frame1 = 0;
          n.dupe[id].speed = 0.0f;
          n.dupe[id].turn = 0.0f;
          n.dupe[id].tween = 0.05f;
          n.dupe[id].isChomp = 1;
          this.sc.chomp.Play(this.sc.ev * MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, n.dupe[id].mypos) / 1800.0), 0.2f, 1f), (float) this.rr.Next(-5, 5) / 100f, 0.0f);
        }
      }
    }

    private static float WrapAngle(float radians)
    {
      while ((double) radians < -3.1415927410125732)
        radians += 6.28318548f;
      while ((double) radians > 3.1415927410125732)
        radians -= 6.28318548f;
      return radians;
    }

    private void addBoarBlood(ref BloodnBacon4PT.npc n, int i, int bodypart, int mytest)
    {
      n.dupe[i].tint = (float) (int) n.dupe[i].tint + (float) (mytest * 2) / 10f;
      int blood = n.dupe[i].blood;
      this.parts.Clear();
      this.s[4] = blood / 100000;
      this.s[3] = blood % 100000 / 10000;
      this.s[2] = blood % 10000 / 1000;
      this.s[1] = blood % 1000 / 100;
      this.s[0] = blood % 100 / 10;
      this.parts.Add(this.s[0]);
      this.parts.Add(this.s[1]);
      this.parts.Add(this.s[2]);
      this.parts.Add(this.s[3]);
      this.parts.Add(this.s[4]);
      if (this.parts.Contains(bodypart))
        return;
      this.s[n.dupe[i].splatIndex] = bodypart;
      n.dupe[i].blood = this.s[4] * 100000 + this.s[3] * 10000 + this.s[2] * 1000 + this.s[1] * 100 + this.s[0] * 10 + 6;
      ++n.dupe[i].splatIndex;
      if (n.dupe[i].splatIndex <= 4)
        return;
      n.dupe[i].splatIndex = 0;
    }

    private int getTick(int start)
    {
      return (int) Math.Round((double) ((Environment.TickCount & int.MaxValue) - start) * 0.059999998658895493);
    }

    private void dropBulletShell(
      ref BloodnBacon4PT.shell sh,
      float bounce,
      float radius,
      float ratio,
      Matrix pos,
      Vector3 vel,
      bool itlocal,
      float grav,
      int rbounce,
      float ta,
      float tb)
    {
      sh.dupe[sh.index].init(1, bounce, radius, ratio, pos, vel, itlocal, grav, rbounce, ta, tb, true, false, false, 0, -1);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.stream[sh.index].tint = sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updateBulletShell(ref BloodnBacon4PT.shell sh, float range, int index)
    {
      Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3 = -vector2 * 100f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index1 = 0; index1 < sh.max; ++index1)
      {
        if (sh.dupe[index1].move > 0)
        {
          if (this.myPlayer.inBarn)
            sh.dupe[index1].UpdateNoHeight();
          else
            sh.dupe[index1].Update2(ref this.farmheights);
        }
        if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index1].mypos) < (double) range && (double) Vector3.Dot(Vector3.Normalize(new Vector3(sh.dupe[index1].mypos.X, sh.dupe[index1].mypos.Y + sh.dupe[index1].scale * 2f, sh.dupe[index1].mypos.Z) - vector3), vector2) > 0.74000000953674316)
        {
          sh.stream[index1].Trans = sh.dupe[index1].transform;
          sh.stream[index1].tint = sh.dupe[index1].tint;
          sh.displayList[sh.tempindex] = sh.stream[index1];
          ++sh.tempindex;
          if (sh.dupe[index1].firstHit == 1)
          {
            float num = (float) this.rr.Next(50, 99) / 100f;
            if (!sh.dupe[index1].localShell)
              num = 0.5f;
            sh.soundx.Play(this.sc.ev * num, (float) this.rr.Next(-15, 15) / 100f, 0.0f);
            sh.dupe[index1].firstHit = 10;
          }
        }
      }
    }

    private void dropPigPart(
      int group,
      ref BloodnBacon4PT.shell sh,
      float bounce,
      float radius,
      float ratio,
      Matrix pos,
      Vector3 vel,
      bool itlocal,
      float grav,
      int rbounce,
      float ta,
      float tb,
      bool landupright,
      bool bleeds,
      bool kickable,
      int boarSEED,
      int mult)
    {
      int num = 35;
      if (this.sc.revengeDay < 1)
        num = 65;
      if (this.sc.gorelevel > 0)
        num = 1;
      if (this.sc.int_7 != 1 && this.sc.int_8 != 1 && this.rr.Next(1, 100) < num)
        bleeds = false;
      sh.dupe[sh.index].init(group, bounce, radius, ratio, pos, vel, itlocal, grav, rbounce, ta, tb, landupright, bleeds, kickable, boarSEED, mult);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      if (group == 2 && this.sc.boar2Variant == 2)
        sh.dupe[sh.index].tint = !(this.sc.dayTime == "pm") ? 0.0f : (float) this.rr.Next(100, 200);
      sh.stream[sh.index].tint = (float) (int) sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updatePigPart(ref BloodnBacon4PT.shell sh, float range)
    {
      Vector3 vector2_1 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3_1 = -vector2_1 * 100f + this.campos;
      range *= range;
      if ((int) this.boar.alive < this.breakPoint)
        range = 4.9E+07f;
      sh.tempindex = 0;
      sh.tempindex2 = 0;
      float num1 = (float) (1700.0 * ((double) this.grinderSpinUp * 10.0) * (1700.0 * ((double) this.grinderSpinUp * 10.0)));
      for (int index1 = 0; index1 < sh.max; ++index1)
      {
        ++sh.dupe[index1].alive;
        --sh.dupe[index1].kicked;
        bool flag1 = false;
        bool flag2 = this.multiHitPointer >= 0 && this.multiHitID[this.multiHitPointer] == (int) sh.dupe[index1].partID;
        if ((double) sh.dupe[index1].mypos.Y < 200.0)
          sh.dupe[index1].hits = 0;
        sh.dupe[index1].oldpos = sh.dupe[index1].mypos;
        float result1;
        Vector3.DistanceSquared(ref this.myPlayer.displayState.npcPosition, ref sh.dupe[index1].mypos, out result1);
        if (!this.pim1.mirvSeeStreaks && !this.pim2.mirvSeeStreaks)
        {
          Vector2 vector2_2 = new Vector2(sh.dupe[index1].mypos.X, sh.dupe[index1].mypos.Z);
          float result2;
          Vector2.DistanceSquared(ref this.grinderLoc, ref vector2_2, out result2);
          if ((double) this.grinderTimer > 0.0)
          {
            if ((double) result2 < (double) num1)
            {
              this.v1 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 - 820.0), 15f, (float) ((double) this.grid / 2.0 - 1665.0)) - sh.dupe[index1].mypos);
              this.v2 = Vector3.Normalize(new Vector3(-1f, 0.2f, 0.0f));
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.5)
              {
                if (sh.dupe[index1].move == 0)
                {
                  sh.dupe[index1].move = 1;
                  sh.dupe[index1].sloper = 0.0f;
                }
                sh.dupe[index1].vortex = this.grinderSpinUp * 10f * (this.v1 * 0.32f) * MathHelper.Clamp((float) (1.0 - (double) result2 / 1300000.0), 0.3f, 1f);
                if ((double) sh.dupe[index1].mypos.Y < (double) sh.dupe[index1].scale + 4.0)
                  sh.dupe[index1].vortex.Y = 1.6f;
              }
              if ((double) result2 < 3600.0 && (double) sh.dupe[index1].mypos.Y < 135.0)
              {
                this.sc.grinder.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-40, 10) / 100f, 0.0f);
                this.ChunkSpray(sh.dupe[index1].mypos, new Vector3(-10f, -5f, 0.0f) + sh.dupe[index1].mypos, 0.4f, 1f);
                this.sc.trophy.leaderPigsGrinded();
                for (int index2 = 0; index2 < 2; ++index2)
                {
                  float num2 = (float) this.rr.Next(310, 600) / 100f;
                  Vector3 vector3_2 = new Vector3((float) this.rr.Next(-3600, 3600) / 100f, (float) this.rr.Next(-3500, 3500) / 100f, (float) this.rr.Next(-600, 600) / 100f);
                  Vector3 vel = new Vector3(0.0f, 1f, (float) this.rr.Next(-30, 30) / 100f) * num2;
                  this.dropGore(ref this.pigchunk, 0.0f, (float) this.rr.Next(350, 1150) / 100f, sh.dupe[index1].mypos + vector3_2, vel, 170f, 310f, true);
                }
                sh.dupe[index1].vortex = sh.dupe[index1].velocity = Vector3.Zero;
                sh.dupe[index1].move = 0;
                sh.dupe[index1].mypos = new Vector3((float) (9000.0 + (double) this.grid / 2.0), -500f, (float) (9000.0 + (double) this.grid / 2.0));
                sh.dupe[index1].transform *= Matrix.CreateTranslation(sh.dupe[index1].mypos);
                this.grinderTimer = (float) this.grinderRuntime;
                this.sc.bloodLevel += 0.75f * sh.dupe[index1].scale;
              }
            }
          }
          else if ((double) result2 < 16900.0 && sh.dupe[index1].move > 0 && (double) sh.dupe[index1].mypos.Y < 135.0)
          {
            this.sc.grinder.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-40, 10) / 100f, 0.0f);
            this.ChunkSpray(sh.dupe[index1].mypos, new Vector3(-10f, -5f, 0.0f) + sh.dupe[index1].mypos, 0.4f, 1f);
            this.sc.trophy.leaderPigsGrinded();
            sh.dupe[index1].vortex = sh.dupe[index1].velocity = Vector3.Zero;
            sh.dupe[index1].move = 0;
            sh.dupe[index1].mypos = new Vector3((float) (9000.0 + (double) this.grid / 2.0), -500f, (float) (9000.0 + (double) this.grid / 2.0));
            sh.dupe[index1].transform *= Matrix.CreateTranslation(sh.dupe[index1].mypos);
            this.sc.bloodLevel += 0.75f * sh.dupe[index1].scale;
            this.grinderTimer = (float) this.grinderRuntime;
            this.GrinderOn = true;
          }
        }
        if ((double) result1 < (double) range || flag2)
        {
          Vector3 vector3_3 = new Vector3(sh.dupe[index1].mypos.X, sh.dupe[index1].mypos.Y + sh.dupe[index1].scale * 2f, sh.dupe[index1].mypos.Z) - vector3_1;
          Vector3 result3;
          Vector3.Normalize(ref vector3_3, out result3);
          float result4 = 0.0f;
          Vector3.Dot(ref result3, ref vector2_1, out result4);
          if ((double) result4 > (double) this.sc.myfov)
          {
            if (sh.dupe[index1].move > 0)
              sh.dupe[index1].Update(ref this.heights);
            sh.stream[index1].Trans = sh.dupe[index1].transform;
            sh.stream[index1].tint = sh.dupe[index1].tint;
            if (this.sc.boar2Variant == 2 && sh.dupe[index1].group == 2 && (double) sh.dupe[index1].tint > 0.0)
            {
              --sh.dupe[index1].tint;
              sh.stream[index1].tint = sh.dupe[index1].tint;
            }
            if (sh.dupe[index1].group == 1)
            {
              sh.displayList[sh.tempindex] = sh.stream[index1];
              ++sh.tempindex;
            }
            else
            {
              sh.displayList2[sh.tempindex2] = sh.stream[index1];
              ++sh.tempindex2;
            }
            flag1 = true;
            if (sh.dupe[index1].kickable)
            {
              if (sh.dupe[index1].secondhit % 3 == 0)
              {
                ++sh.dupe[index1].secondhit;
                this.sc.chunk2.Play((float) ((double) this.sc.ev * (double) MathHelper.Clamp((float) (1.0 - (double) result1 / 810000.0), 0.0f, 0.9f) / 2.0), (float) this.rr.Next(-70, 50) / 100f, 0.0f);
              }
              if ((double) result1 < (double) range && sh.dupe[index1].alive < dupeItem.bleed && sh.dupe[index1].itBleeds)
                this.headBlood(ref sh.dupe[index1], result1);
              if (!this.hitOne & (double) this.myPlayer.now.health > 0.0)
              {
                if (this.myPlayer.gunFired && (double) result4 > 0.949999988079071 && (double) this.boar.npcDist == 10000.0 && sh.dupe[index1].kicked <= 0)
                {
                  float num3 = 5f;
                  if ((double) sh.dupe[index1].mypos.Y > 200.0)
                  {
                    num3 = 5f;
                    if (this.myPlayer.gunChoice == 8)
                      num3 = 8f;
                  }
                  float? nullable = this.genCursor.hitSphere(this.myPlayer.gunpos, this.myPlayer.gunlook, sh.dupe[index1].mypos, sh.dupe[index1].scale * num3);
                  if (nullable.HasValue)
                  {
                    this.hitOne = true;
                    sh.dupe[index1].kicked = 25;
                    Vector3 vector3_4 = Vector3.Normalize(this.myPlayer.gunlook - this.myPlayer.gunpos) * (nullable.Value + sh.dupe[index1].scale * 2f);
                    Vector3 vector3_5 = Vector3.Normalize(sh.dupe[index1].mypos - (vector3_4 + this.myPlayer.gunpos));
                    if ((double) sh.dupe[index1].mypos.Y < 200.0)
                    {
                      vector3_5 = new Vector3((float) ((double) vector3_5.X * 0.699999988079071 + (double) this.genCursor.rayDir.X * 0.10000000149011612), vector3_5.Y, (float) ((double) vector3_5.Z * 0.699999988079071 + (double) this.genCursor.rayDir.Z * 0.10000000149011612));
                    }
                    else
                    {
                      ++sh.dupe[index1].hits;
                      bool flag3 = false;
                      for (int index3 = 0; index3 < this.multiHitID.Count; ++index3)
                      {
                        if (this.multiHitType[index3] == sh.type && this.multiHitID[index3] == (int) sh.dupe[index1].partID)
                        {
                          flag3 = true;
                          this.multiHitPointer = index3;
                          this.multiHitTimer[index3] = 300f;
                          this.multiHitValue[index3] = sh.dupe[index1].hits;
                          this.multiHitAnimate = 0.0f;
                          this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                          break;
                        }
                      }
                      if (!flag3)
                      {
                        this.multiHitIndex.Add(index1);
                        this.multiHitValue.Add(sh.dupe[index1].hits);
                        this.multiHitType.Add(sh.type);
                        this.multiHitTimer.Add(300f);
                        this.multiHitID.Add((int) sh.dupe[index1].partID);
                        this.multiHitPointer = this.multiHitID.Count - 1;
                        this.multiHitAnimate = 0.0f;
                        this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                      }
                    }
                    sh.dupe[index1].move = 1;
                    sh.dupe[index1].sloper = 0.0f;
                    float num4 = 10f;
                    float num5 = 10f;
                    int minValue = 20;
                    if (this.myPlayer.gunChoice == 8)
                    {
                      num4 = 5f;
                      minValue = 50;
                      num5 = 4f;
                    }
                    if (this.myPlayer.gunChoice == 0)
                    {
                      num4 = 7f;
                      minValue = 20;
                      num5 = 15f;
                    }
                    sh.dupe[index1].velocity = (float) this.rr.Next(minValue, 100) / num4 * vector3_5;
                    sh.dupe[index1].velocity.Y += (float) this.rr.Next(minValue, 70) / num5;
                    sh.dupe[index1].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(sh.dupe[index1].velocity, Vector3.Up)), sh.dupe[index1].turnRate * 1.5f);
                    Vector3 vector3_6;
                    Quaternion rotation;
                    sh.dupe[index1].myRot.Decompose(out vector3_6, out rotation, out vector3_6);
                    sh.dupe[index1].myRot = Matrix.CreateFromQuaternion(rotation);
                    sh.dupe[index1].lastKicked = this.timeFrame;
                    sh.dupe[index1].assignRandom((int) sh.dupe[index1].partID);
                    this.myPlayer.partTYPE = sh.type;
                    this.myPlayer.partTIME = this.timeFrame;
                    this.myPlayer.partID = sh.dupe[index1].partID;
                    this.myPlayer.partHIT = (byte) sh.dupe[index1].hits;
                    this.myPlayer.partPOS = sh.dupe[index1].mypos;
                    this.myPlayer.partVEL = sh.dupe[index1].velocity;
                    this.myPlayer.partQUAT = rotation;
                    if (sh.dupe[index1].alive > 0)
                      sh.dupe[index1].alive -= 80;
                  }
                }
                if (!this.myPlayer.gunFired && (double) result1 < 144.0 * (double) sh.dupe[index1].scale && sh.dupe[index1].kicked <= 0)
                {
                  sh.dupe[index1].kicked = 30;
                  this.hitOne = true;
                  this.sc.chunk1.Play(this.sc.ev * 0.9f, 0.0f, 0.0f);
                  this.sc.trophy.win(this.sc.trophy.chunkkicker);
                  sh.dupe[index1].move = 1;
                  sh.dupe[index1].sloper = 0.0f;
                  Vector3 vector1 = Vector3.Zero;
                  vector1 = Vector3.Transform(new Vector3(this.dirInput.X, 0.0f, -this.dirInput.Y), Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation + 3.14f));
                  float num6 = this.dirInput.Length();
                  vector1 *= num6 * 6f;
                  if ((double) vector1.Length() < 1.0)
                    vector1 = (double) sh.dupe[index1].velocity.Length() > 2.0 ? -sh.dupe[index1].velocity * 0.6f : new Vector3((float) this.rr.Next(15, 25) / 10f, (float) this.rr.Next(5, 25) / 10f, (float) this.rr.Next(-25, 25) / 10f);
                  sh.dupe[index1].velocity = vector1;
                  sh.dupe[index1].velocity.Y += (float) this.rr.Next(15, 35) / 10f;
                  sh.dupe[index1].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(vector1, Vector3.Up)), sh.dupe[index1].turnRate * 1.5f);
                  Vector3 vector3_7;
                  Quaternion rotation;
                  sh.dupe[index1].myRot.Decompose(out vector3_7, out rotation, out vector3_7);
                  sh.dupe[index1].myRot = Matrix.CreateFromQuaternion(rotation);
                  sh.dupe[index1].lastKicked = this.timeFrame;
                  sh.dupe[index1].assignRandom((int) sh.dupe[index1].partID);
                  this.myPlayer.partTYPE = sh.type;
                  this.myPlayer.partTIME = this.timeFrame;
                  this.myPlayer.partID = sh.dupe[index1].partID;
                  this.myPlayer.partHIT = (byte) sh.dupe[index1].hits;
                  this.myPlayer.partPOS = sh.dupe[index1].mypos;
                  this.myPlayer.partVEL = sh.dupe[index1].velocity;
                  this.myPlayer.partQUAT = rotation;
                }
              }
            }
          }
        }
        if (sh.dupe[index1].move > 0 && !flag1)
        {
          sh.dupe[index1].Update(ref this.heights);
          if ((double) result1 < (double) range && sh.dupe[index1].alive < dupeItem.bleed && sh.dupe[index1].itBleeds)
            this.headBlood(ref sh.dupe[index1], result1);
        }
      }
    }

    private void fireworkRing(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      int num1 = this.rr.Next(110, 160);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      Matrix matrix = Matrix.CreateRotationX((float) this.rr.Next(-60, 60) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f);
      int maxValue = 120;
      Vector3 vector3 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float radians = (float) ((double) index * (6.2831854820251465 / (double) count) + (double) this.rr.Next(-10, 10) / 1000.0);
        Vector3 position = new Vector3((float) this.rr.Next(-10, 10) / 900f, (float) this.rr.Next(-10, 10) / 900f, (float) this.rr.Next(-10, 10) / 900f) + Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateRotationY(radians));
        position = Vector3.Transform(position, matrix);
        float num2 = (float) this.rr.Next(num1 - 20, num1 + 20);
        vector3 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X * num2, -50f, position.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X * num2, -50f, position.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkRingStreak(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      int num1 = this.rr.Next(150, 200);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      Matrix matrix = Matrix.CreateRotationX((float) this.rr.Next(-60, 60) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f);
      int maxValue = 120;
      Vector3 vector3 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float radians = (float) ((double) index * (6.2831854820251465 / (double) count) + (double) this.rr.Next(-10, 10) / 1000.0);
        Vector3 position = new Vector3((float) this.rr.Next(-10, 10) / 900f, (float) this.rr.Next(-10, 10) / 900f, (float) this.rr.Next(-10, 10) / 900f) + Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateRotationY(radians));
        position = Vector3.Transform(position, matrix);
        float num2 = (float) this.rr.Next(num1 - 20, num1 + 20);
        vector3 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X * num2, -50f, position.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X * num2, -50f, position.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        this.fireworkStreak(pos + vector3, new Vector3((float) ((double) position.X * (double) num2 * 0.89999997615814209), -50f, (float) ((double) position.Z * (double) num2 * 0.89999997615814209)));
      }
    }

    private void fireworkBall(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      float num = (float) this.rr.Next(80, 150);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      int maxValue = 120;
      Vector3 vector3_1 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        num += (float) this.rr.Next(-100, 100) / 100f;
        Vector3 vector3_2 = Vector3.Normalize(new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f));
        vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num, vector3_2.Y * num, vector3_2.Z * num), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num, vector3_2.Y * num, vector3_2.Z * num), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkBallStreak(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      float num1 = (float) this.rr.Next(250, 340);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      int maxValue = 120;
      Vector3 vector3_1 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float num2 = (float) this.rr.Next(140, 200);
        Vector3 vector3_2 = Vector3.Normalize(new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f));
        vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        this.fireworkStreak(pos + vector3_1, new Vector3((float) ((double) vector3_2.X * (double) num2 * 0.89999997615814209), (float) ((double) vector3_2.Y * (double) num2 * 0.89999997615814209), (float) ((double) vector3_2.Z * (double) num2 * 0.89999997615814209)));
      }
    }

    private void fireworkBallFilled(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      float num1 = (float) this.rr.Next(80, 190);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      int maxValue = 120;
      Vector3 vector3_1 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float num2 = (float) this.rr.Next(80, 170);
        Vector3 vector3_2 = Vector3.Normalize(new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f));
        vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkBallFilled2(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      float num1 = (float) this.rr.Next(600, 800);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      int maxValue = 220;
      Vector3 vector3_1 = new Vector3((float) this.rr.Next(-220, 220) / 10f, (float) this.rr.Next(-220, 220) / 10f, (float) this.rr.Next(-220, 220) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float num2 = (float) this.rr.Next(700, 800);
        Vector3 vector3_2 = Vector3.Normalize(new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f));
        vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkSplash(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      int num1 = this.rr.Next(130, 230);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      Matrix rotationY = Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f);
      int maxValue = 120;
      int num2 = this.rr.Next(-40, 40);
      Vector3 vector3 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        Vector3 position = new Vector3((float) this.rr.Next(num1 - 100, num1 + 10), (float) this.rr.Next(num2 - 80, 80 + num2), (float) this.rr.Next(-80, 80));
        position = Vector3.Transform(position, rotationY);
        vector3 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X, 0.0f, position.Z), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X, 0.0f, position.Z), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkSplashStreak(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      int num1 = this.rr.Next(150, 200);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      Matrix rotationY = Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f);
      int maxValue = 120;
      int num2 = this.rr.Next(-40, 40);
      Vector3 vector3 = new Vector3((float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f, (float) this.rr.Next(-120, 120) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        Vector3 position = new Vector3((float) this.rr.Next(num1 - 100, num1 + 10), (float) this.rr.Next(num2 - 80, 80 + num2), (float) this.rr.Next(-80, 80));
        position = Vector3.Transform(position, rotationY);
        vector3 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X, 0.0f, position.Z), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3, new Vector3(position.X, 0.0f, position.Z), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        this.fireworkStreak(pos + vector3, new Vector3(position.X * 0.9f, 0.0f, position.Z * 0.9f));
      }
    }

    private void fireworkFish1(bool hot, Vector3 pos, float count, Color cc, float size)
    {
      float num1 = (float) this.rr.Next(190, 350);
      int r = (int) cc.R;
      int g = (int) cc.G;
      int b = (int) cc.B;
      int maxValue = 1420 + this.rr.Next(1, 900);
      Vector3 vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
      for (int index = 0; (double) index < (double) count; ++index)
      {
        float num2 = (float) this.rr.Next(190, 350);
        Vector3 vector3_2 = Vector3.Normalize(new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f));
        vector3_1 = new Vector3((float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f, (float) this.rr.Next(-maxValue, maxValue) / 10f);
        this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) size, r, g, b);
        if (hot)
          this.debrisFire.AddParticle5(pos + vector3_1, new Vector3(vector3_2.X * num2, vector3_2.Y * num2, vector3_2.Z * num2), (int) (0.44999998807907104 * (double) size), (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      }
    }

    private void fireworkBang(Vector3 pos, float size)
    {
      this.sc.report.Play(this.sc.ev, (float) this.rr.Next(-30, 10) / 100f, 0.0f);
      this.addExplosion2(ref this.mirvExplosion, pos, pos.Y, false, true, size);
    }

    private void fireworkBangSparks(Vector3 pos, float size)
    {
      this.sc.report.Play(this.sc.ev, (float) this.rr.Next(-30, 10) / 100f, 0.0f);
      this.addExplosion2(ref this.mirvExplosion, pos, pos.Y, true, true, size);
    }

    private void fireworkStreak(Vector3 pos, Vector3 veloc)
    {
      this.fireTail.Add(new BloodnBacon4PT.streakCopy()
      {
        age = 0.0f,
        Duration = 4f,
        position = pos,
        velocity = veloc * 2f,
        Gravity = -20f
      });
    }

    private void fireworkSound() => this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);

    private void fireworkSound2() => this.sc.fireworks2.Play(this.sc.ev, 0.0f, 0.0f);

    private void randomSplash1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      float num1 = 1f;
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num1
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos,
        count = 20f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = num1
      });
      int num2 = this.rr.Next(2, 4);
      for (int index = 0; index < num2; ++index)
      {
        int num3 = this.rr.Next(15, 35);
        int num4 = this.rr.Next(240, (int) byte.MaxValue);
        num1 += (float) this.rr.Next(20, 80);
        this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
        {
          type = "splashstreak",
          hot = true,
          pos = pos + new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-100, 100) / 100f),
          count = (float) num3,
          color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
          size = (float) num4,
          timer = num1
        });
      }
      float num5 = num1 + 60f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(20, 45) / 100f,
        timer = num5
      });
    }

    private void randomSplash2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent1 = new BloodnBacon4PT.fireEvent();
      float num1 = 1f;
      int num2 = 100;
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num1
      });
      int num3 = this.rr.Next(4, 8);
      for (int index = 0; index < num3; ++index)
      {
        int num4 = this.rr.Next(35, 65);
        int num5 = this.rr.Next(200, (int) byte.MaxValue);
        int maxValue = 18000;
        BloodnBacon4PT.fireEvent fireEvent2 = new BloodnBacon4PT.fireEvent();
        fireEvent2.type = "splash";
        if (this.rr.Next(1, 1000) < 100)
          fireEvent2.type = "splashstreak";
        fireEvent2.hot = true;
        fireEvent2.pos = pos + new Vector3((float) this.rr.Next(-maxValue, maxValue) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-maxValue, maxValue) / 100f);
        fireEvent2.count = (float) num4;
        fireEvent2.color = this.fireColor[this.rr.Next(0, this.fireColor.Length)];
        fireEvent2.size = (float) num5;
        fireEvent2.timer = num1;
        this.fireEvents.Add(fireEvent2);
        num1 += (float) this.rr.Next(5, 40);
      }
      float num6 = num1 + 60f;
      num2 = 18000;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(20, 45) / 100f,
        timer = num6
      });
    }

    private void randomBall1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent1 = new BloodnBacon4PT.fireEvent();
      float num1 = 1f;
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      int num2 = this.rr.Next(3, 6);
      for (int index = 0; index < num2; ++index)
      {
        int num3 = this.rr.Next(50, 200);
        int num4 = this.rr.Next(240, (int) byte.MaxValue);
        int maxValue = 48000;
        BloodnBacon4PT.fireEvent fireEvent2 = new BloodnBacon4PT.fireEvent();
        fireEvent2.type = "ballfill";
        if (this.rr.Next(1, 1000) < 500)
          fireEvent2.type = "ball";
        fireEvent2.hot = true;
        fireEvent2.pos = pos + new Vector3((float) this.rr.Next(-maxValue, maxValue) / 100f, (float) this.rr.Next(-maxValue, maxValue) / 100f, (float) this.rr.Next(-maxValue, maxValue) / 100f);
        fireEvent2.count = (float) num3;
        fireEvent2.color = this.fireColor[this.rr.Next(0, this.fireColor.Length)];
        fireEvent2.size = (float) num4;
        fireEvent2.timer = num1;
        this.fireEvents.Add(fireEvent2);
        num1 += (float) this.rr.Next(25, 60);
      }
    }

    private void randomBall2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      float num1 = 1f;
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      int num2 = this.rr.Next(4, 6);
      for (int index = 0; index < num2; ++index)
      {
        int num3 = this.rr.Next(60, 200);
        int num4 = this.rr.Next(240, (int) byte.MaxValue);
        this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
        {
          type = "ballfill",
          hot = true,
          pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
          count = (float) num3,
          color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
          size = (float) num4,
          timer = num1
        });
        num1 += (float) this.rr.Next(19, 60);
      }
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos,
        count = 40f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = (float) byte.MaxValue,
        timer = num1
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(50, 55) / 100f,
        timer = num1
      });
    }

    private void randomFishBoom(Vector3 pos, float t)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      float num1 = t;
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      int num2 = this.rr.Next(3, 5);
      for (int index = 0; index < num2; ++index)
      {
        int num3 = this.rr.Next(50, 100);
        int num4 = this.rr.Next(240, (int) byte.MaxValue);
        this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
        {
          type = "fish1",
          hot = true,
          pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
          count = (float) num3,
          color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
          size = (float) num4,
          timer = num1
        });
        num1 += (float) this.rr.Next(20, 50);
      }
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos,
        count = 1200f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = (float) byte.MaxValue,
        timer = num1
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos,
        size = (float) this.rr.Next(40, 75) / 100f,
        timer = num1
      });
    }

    private void midmix1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      float num1 = 1f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos,
        count = 60f,
        color = Color.Green,
        size = (float) byte.MaxValue,
        timer = num1
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos,
        count = 60f,
        color = Color.Green,
        size = (float) byte.MaxValue,
        timer = num1
      });
      float num2 = 31f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 55f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = num2
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 65f,
        color = Color.Red,
        size = (float) byte.MaxValue,
        timer = num2
      });
      float num3 = 61f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f),
        count = 65f,
        color = Color.Red,
        size = (float) byte.MaxValue,
        timer = num3
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f),
        count = 55f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = num3
      });
      float num4 = 161f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = num4
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 500f,
        color = Color.Blue,
        size = 254f,
        timer = num4
      });
      float num5 = 251f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 500f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = num5
      });
      float num6 = 341f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 400f,
        color = Color.Red,
        size = 254f,
        timer = num6
      });
      float num7 = 376f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = num7
      });
      float num8 = 391f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = num8
      });
      float num9 = 421f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num9
      });
      float num10 = 471f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num10
      });
      float num11 = 496f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num11
      });
      float num12 = 521f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num12
      });
      float num13 = 576f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos,
        size = (float) this.rr.Next(80, 99) / 100f,
        timer = num13
      });
    }

    private void midmix2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 0.0f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 50f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 50f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 70f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 70f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 200f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(8000, 18000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 200f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(6000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 250f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(8000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 300f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 300f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 325f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 330f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 345f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 525f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 95f,
        color = Color.Green,
        size = (float) byte.MaxValue,
        timer = 380f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splash",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 95f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = 360f
      });
    }

    private void finale1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos,
        count = 10f,
        color = Color.Yellow,
        size = 250f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 15f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = 30f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 25f,
        color = Color.Red,
        size = (float) byte.MaxValue,
        timer = 70f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 140f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 140f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 160f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 210f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 220f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 360f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 360f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 410f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 365f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 375f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 395f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 460f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 485f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 515f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 555f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 525f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 595f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        size = (float) this.rr.Next(80, 99) / 100f,
        timer = 650f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 45f,
        color = Color.Green,
        size = (float) byte.MaxValue,
        timer = 640f
      });
    }

    private void finale2(Vector3 pos, float t)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      float num1 = t;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos,
        count = 60f,
        color = Color.Yellow,
        size = 250f,
        timer = num1
      });
      float num2 = num1 + 30f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f, (float) this.rr.Next(-48000, 48000) / 100f),
        count = 35f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = num2
      });
      float num3 = num2 + 30f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f, (float) this.rr.Next(-47000, 47000) / 100f),
        count = 45f,
        color = Color.Red,
        size = (float) byte.MaxValue,
        timer = num3
      });
      float num4 = num3 + 100f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = num4
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = num4
      });
      float num5 = num4 + 25f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = num5
      });
      float num6 = num5 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = num6
      });
      float num7 = num6 + 40f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = num7
      });
      float num8 = num7 + 120f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = num8
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = num8
      });
      float num9 = num8 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 1000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = num9
      });
      float num10 = num9 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 400f,
        color = Color.Red,
        size = 254f,
        timer = num10
      });
      float num11 = num10 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 400f,
        color = Color.Green,
        size = 254f,
        timer = num11
      });
      float num12 = num11 + 5f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = num12
      });
      float num13 = num12 + 15f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = num13
      });
      float num14 = num13 + 25f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 395f
      });
      float num15 = num14 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = num15
      });
      float num16 = num15 + 30f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num16
      });
      float num17 = num16 + 50f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num17
      });
      float num18 = num17 + 20f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num18
      });
      float num19 = num18 + 25f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num19
      });
      float num20 = num19 + 25f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = num20
      });
      float num21 = num20 + 55f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos,
        size = (float) this.rr.Next(80, 99) / 100f,
        timer = num21
      });
      float num22 = num21 + 25f;
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 45f,
        color = Color.Green,
        size = (float) byte.MaxValue,
        timer = num22
      });
    }

    private void finale0(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos,
        count = 10f,
        color = Color.Yellow,
        size = 250f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 15f,
        color = Color.Blue,
        size = (float) byte.MaxValue,
        timer = 30f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 25f,
        color = Color.Red,
        size = (float) byte.MaxValue,
        timer = 70f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 140f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 140f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 160f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-38000, 38000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-38000, 38000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 210f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 90f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 220f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 360f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 360f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 2000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 410f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 365f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 375f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 395f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 595f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        size = (float) this.rr.Next(80, 99) / 100f,
        timer = 600f
      });
    }

    private void blimp1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-2000, 2000) / 100f, (float) this.rr.Next(-2000, 2000) / 100f, (float) this.rr.Next(-2000, 2000) / 100f),
        count = 1200f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 10f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-2000, 2000) / 100f, (float) this.rr.Next(-2000, 1800) / 100f, (float) this.rr.Next(-2000, 2000) / 100f),
        count = 1000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 200f,
        timer = 40f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 100f, (float) this.rr.Next(-2800, 2800) / 100f, (float) this.rr.Next(-2800, 2800) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 20f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 100f, (float) this.rr.Next(-2800, 2000) / 100f, (float) this.rr.Next(-2800, 2800) / 100f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 35f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 100f, (float) this.rr.Next(-2800, 2000) / 100f, (float) this.rr.Next(-2800, 2800) / 100f),
        size = (float) this.rr.Next(90, 125) / 100f,
        timer = 12f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        size = (float) this.rr.Next(80, 99) / 100f,
        timer = 47f
      });
    }

    private void blimp2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.2f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(-100, 100) / 100f),
        count = 45f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 155f,
        timer = 5f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-100, 100) / 200f, (float) this.rr.Next(-100, 100) / 200f, (float) this.rr.Next(-100, 100) / 200f),
        count = 35f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 155f,
        timer = 5f
      });
    }

    private void blimp3(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "fireworksound",
        timer = 5f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 13f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 400f, (float) this.rr.Next(-2800, 2800) / 400f, (float) this.rr.Next(-2800, 2800) / 400f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 18f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-1800, 1800) / 400f, (float) this.rr.Next(-1800, 1800) / 400f, (float) this.rr.Next(-1800, 1800) / 400f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 22f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 300f, (float) this.rr.Next(-2800, 2800) / 300f, (float) this.rr.Next(-2800, 2800) / 300f),
        size = (float) this.rr.Next(20, 65) / 100f,
        timer = 24f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-2800, 2800) / 300f, (float) this.rr.Next(-2800, 2800) / 300f, (float) this.rr.Next(-2000, 2800) / 300f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 8f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 300f, (float) this.rr.Next(-28000, 28000) / 300f, (float) this.rr.Next(-28000, 28000) / 300f),
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 36f
      });
    }

    private void fireworkPuffball(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      Color color = this.fireColor[this.rr.Next(0, this.fireColor.Length)];
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ringstreak",
        hot = true,
        pos = pos,
        count = 20f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 2f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ring",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 28000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 100f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 200f,
        timer = 45f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(20, 35) / 100f,
        timer = 2f
      });
    }

    private void fireworkPuffball2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos,
        count = 220f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 224f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 180f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 222f,
        timer = 50f
      });
    }

    private void fireworkPuffball3(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos,
        count = 40f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ball",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 350f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 140f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-18000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        count = 40f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 60f
      });
    }

    private void fireworkReports(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 5f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 65f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 115f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 15f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 95f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 175f
      });
    }

    private void fireworkBalls1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos,
        count = 350f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 350f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 150f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 350f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 75f
      });
    }

    private void fireworkBigBall(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos,
        count = 1000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 1f
      });
    }

    private void fireworkBigBall2(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(60, 95) / 100f,
        timer = 100f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        timer = 130f,
        size = (float) this.rr.Next(30, 65) / 100f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bangsparks",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 160f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 200f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(30, 65) / 100f,
        timer = 110f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f),
        count = 1000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 254f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "ballfill2",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-28000, 18000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-28000, 28000) / 100f),
        count = 1000f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 90f
      });
    }

    private void fireworkColorSplash1(Vector3 pos)
    {
      BloodnBacon4PT.fireEvent fireEvent = new BloodnBacon4PT.fireEvent();
      this.sc.fireworks.Play(this.sc.ev, 0.0f, 0.0f);
      Color color = this.fireColor[this.rr.Next(0, this.fireColor.Length)];
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos,
        count = 20f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = 250f,
        timer = 1f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 15f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = (float) byte.MaxValue,
        timer = 65f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "splashstreak",
        hot = true,
        pos = pos + new Vector3((float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f, (float) this.rr.Next(-1000, 1000) / 100f),
        count = 15f,
        color = this.fireColor[this.rr.Next(0, this.fireColor.Length)],
        size = (float) byte.MaxValue,
        timer = 105f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos,
        size = (float) this.rr.Next(30, 55) / 100f,
        timer = 90f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(20, 65) / 100f,
        timer = 150f
      });
      this.fireEvents.Add(new BloodnBacon4PT.fireEvent()
      {
        type = "bang",
        pos = pos + new Vector3((float) this.rr.Next(-18000, 18000) / 100f, (float) this.rr.Next(-8000, 8000) / 100f, (float) this.rr.Next(-18000, 18000) / 100f),
        size = (float) this.rr.Next(20, 55) / 100f,
        timer = 80f
      });
    }

    private void fireworkManager()
    {
      if (this.fireEvents.Count < 1)
        return;
      for (int index = 0; index < this.fireEvents.Count; ++index)
      {
        this.maxdistTimer = 1600f;
        --this.fireEvents[index].timer;
        if ((double) this.fireEvents[index].timer <= 0.0)
        {
          if (this.fireEvents[index].type == "ring")
            this.fireworkRing(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "ringstreak")
            this.fireworkRingStreak(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "ball")
            this.fireworkBall(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "ballstreak")
            this.fireworkBallStreak(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "ballfill")
            this.fireworkBallFilled(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "ballfill2")
            this.fireworkBallFilled2(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "splashstreak")
            this.fireworkSplashStreak(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "splash")
            this.fireworkSplash(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "fish1")
            this.fireworkFish1(this.fireEvents[index].hot, this.fireEvents[index].pos, this.fireEvents[index].count, this.fireEvents[index].color, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "bang")
            this.fireworkBang(this.fireEvents[index].pos, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "bangsparks")
            this.fireworkBangSparks(this.fireEvents[index].pos, this.fireEvents[index].size);
          if (this.fireEvents[index].type == "fireworksound")
            this.fireworkSound();
          if (this.fireEvents[index].type == "fireworksound2")
            this.fireworkSound2();
          this.fireEvents.RemoveAt(index);
        }
      }
    }

    private void streakManager()
    {
      if (this.fireTail.Count < 1)
        return;
      for (int index = 0; index < this.fireTail.Count; ++index)
      {
        float num1 = MathHelper.Clamp(this.fireTail[index].age / this.fireTail[index].Duration, 0.0f, 1f);
        float num2 = this.fireTail[index].velocity.Length();
        float num3 = (float) ((double) num2 * (double) num1 + (0.0 - (double) num2) * (double) num1 * (double) num1 / 2.0);
        Vector3 vector3_1 = Vector3.Normalize(this.fireTail[index].velocity) * num3 * this.fireTail[index].Duration + new Vector3(0.0f, this.fireTail[index].Gravity, 0.0f) * this.fireTail[index].age * num1;
        int mysize = this.rr.Next(25, 125);
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-50, 50) / 10f, (float) this.rr.Next(-50, 50) / 10f, (float) this.rr.Next(-50, 50) / 10f);
        Vector3 velocity = new Vector3((float) this.rr.Next(-50, 50) / 10f, (float) this.rr.Next(-50, 50) / 10f, (float) this.rr.Next(-50, 50) / 10f);
        if ((double) this.sc.myTimer % 3.0 == 0.0)
          this.debrisFire.AddParticle5(this.fireTail[index].position + vector3_1 + vector3_2, velocity, mysize, 235, 215, 100);
        this.fireTail[index].age += 0.0167f;
        if ((double) this.fireTail[index].age >= (double) this.fireTail[index].Duration)
          this.fireTail.RemoveAt(index);
      }
    }

    private void fireworkSendNetwork(ref BloodnBacon4PT.shell sh, int i)
    {
      this.hitOne = true;
      int hits = sh.dupe[i].hits;
      sh.dupe[i].kicked = 60;
      sh.dupe[i].hits = 99;
      this.myPlayer.partTYPE = sh.type;
      this.myPlayer.partTIME = this.timeFrame;
      this.myPlayer.partID = sh.dupe[i].partID;
      this.myPlayer.partHIT = (byte) 77;
      this.myPlayer.partPOS = sh.dupe[i].mypos;
      this.myPlayer.partVEL = sh.dupe[i].velocity;
      this.myPlayer.partQUAT = new Quaternion();
      this.destroyPart(ref sh, i, hits, -1, -1);
    }

    private void destroyPart(ref BloodnBacon4PT.shell sh, int i, int hits, int type, int id)
    {
      if (this.multiHitPointer >= 0 && this.multiHitPointer < this.multiHitType.Count && (type == -1 || this.multiHitType[this.multiHitPointer] == type && this.multiHitID[this.multiHitPointer] == id))
      {
        this.altitude = (int) ((double) sh.dupe[i].mypos.Y / 8.0);
        this.altitudeAnimate = 0.0f;
        this.altitudeTimer = 360f;
      }
      if (hits >= 7)
        this.sc.trophy.win(this.sc.trophy.pyromaniac);
      if (hits >= 7 && hits <= 10)
      {
        this.randomSplash2(sh.dupe[i].mypos);
        this.randomFishBoom(sh.dupe[i].mypos, 100f);
      }
      if (hits >= 11 && hits <= 15)
        this.randomSplash1(sh.dupe[i].mypos);
      if (hits >= 16 && hits <= 20)
        this.randomBall1(sh.dupe[i].mypos);
      if (hits >= 21 && hits <= 25)
        this.randomBall2(sh.dupe[i].mypos);
      if (hits >= 26 && hits <= 30)
        this.randomFishBoom(sh.dupe[i].mypos, 1f);
      if (hits >= 31 && hits <= 35)
      {
        this.randomFishBoom(sh.dupe[i].mypos, 1f);
        this.randomBall1(sh.dupe[i].mypos);
      }
      if (hits >= 36 && hits <= 40)
        this.midmix1(sh.dupe[i].mypos);
      if (hits >= 41 && hits <= 45)
        this.midmix2(sh.dupe[i].mypos);
      if (hits >= 46 && hits <= 47)
        this.finale1(sh.dupe[i].mypos);
      if (hits >= 48 && hits <= 50)
      {
        this.finale0(sh.dupe[i].mypos);
        this.finale2(sh.dupe[i].mypos, 550f);
      }
      sh.dupe[i].hits = 99;
      sh.dupe[i].move = 0;
      sh.dupe[i].mypos = new Vector3((float) (19000.0 + (double) this.grid / 2.0), -1500f, (float) (19000.0 + (double) this.grid / 2.0));
      sh.dupe[i].transform *= Matrix.CreateTranslation(sh.dupe[i].mypos);
    }

    private void updateFireworks()
    {
      this.fireworkManager();
      this.streakManager();
      if (this.multiHitID.Count < 1)
        return;
      for (int index1 = 0; index1 < this.multiHitID.Count; ++index1)
      {
        List<float> multiHitTimer;
        int index2;
        (multiHitTimer = this.multiHitTimer)[index2 = index1] = multiHitTimer[index2] - 1f;
        if (!this.hitOne && (double) this.multiHitTimer[index1] <= 180.0 && this.multiHitValue[index1] >= 7 || this.multiHitValue[index1] >= 50 && this.multiHitValue[index1] < 77)
        {
          if (this.multiHitType[index1] == 0)
          {
            if ((double) this.head.dupe[this.multiHitIndex[index1]].mypos.Y > 300.0)
              this.fireworkSendNetwork(ref this.head, this.multiHitIndex[index1]);
          }
          else if (this.multiHitType[index1] == 1)
          {
            if ((double) this.leg.dupe[this.multiHitIndex[index1]].mypos.Y > 300.0)
              this.fireworkSendNetwork(ref this.leg, this.multiHitIndex[index1]);
          }
          else if (this.multiHitType[index1] == 2)
          {
            if ((double) this.body.dupe[this.multiHitIndex[index1]].mypos.Y > 300.0)
              this.fireworkSendNetwork(ref this.body, this.multiHitIndex[index1]);
          }
          else if (this.multiHitType[index1] == 3 && (double) this.butt.dupe[this.multiHitIndex[index1]].mypos.Y > 300.0)
            this.fireworkSendNetwork(ref this.butt, this.multiHitIndex[index1]);
        }
        if ((double) this.multiHitTimer[index1] < 1.0)
        {
          if (this.multiHitPointer == index1)
            this.multiHitPointer = -1;
          else if (this.multiHitPointer > index1)
            --this.multiHitPointer;
          this.multiHitID.RemoveAt(index1);
          this.multiHitValue.RemoveAt(index1);
          this.multiHitIndex.RemoveAt(index1);
          this.multiHitTimer.RemoveAt(index1);
          this.multiHitType.RemoveAt(index1);
        }
      }
    }

    private void dropCarnage(
      ref BloodnBacon4PT.shell sh,
      bool allwhite,
      float bounce,
      float radius,
      float ratio,
      Matrix pos,
      Vector3 vel,
      bool itlocal,
      float grav,
      int rbounce,
      float ta,
      float tb)
    {
      sh.dupe[sh.index].init(1, bounce, radius, ratio, pos, vel, itlocal, grav, rbounce, ta, tb, true, false, false, 0, -1);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.dupe[sh.index].tint = (float) this.rr.Next(0, 6);
      if (allwhite)
        sh.dupe[sh.index].tint = (float) this.rr.Next(12, 15);
      sh.stream[sh.index].tint = sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void dropChar(
      int i,
      int k,
      ref BloodnBacon4PT.shell sh,
      float bounce,
      float radius,
      float ratio,
      Matrix pos,
      Vector3 vel,
      bool itlocal,
      float grav,
      int rbounce,
      float ta,
      float tb)
    {
      int index = this.boar.dupe[i].frame1 * 29 + this.charroBone[k];
      Matrix startpos = this.charroTrans[k] * this.boar.data.Bones[index] * this.boar.dupe[i].transform;
      sh.dupe[sh.index].init(1, bounce, 1f, 1f, startpos, vel, itlocal, grav, rbounce, ta, tb, true, false, false, 0, -1);
      sh.dupe[sh.index].scale = (float) (((double) sh.dupe[sh.index].dump1.X + (double) sh.dupe[sh.index].dump1.Y + (double) sh.dupe[sh.index].dump1.Z) / 3.0);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.dupe[sh.index].tint = this.boar.dupe[i].tint;
      sh.stream[sh.index].tint = this.boar.dupe[i].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updateCarnage(ref BloodnBacon4PT.shell sh, float range)
    {
      Vector3 vector3 = -Vector3.Normalize(this.camlookpos - this.campos) * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        if (sh.dupe[index].move > 0)
          sh.dupe[index].Update3(ref this.heights);
        ++sh.dupe[index].alive;
        if (sh.dupe[index].alive > 100)
          sh.dupe[index].scale *= 0.97f;
        if (sh.dupe[index].alive > 200)
        {
          if (sh.max - 1 > 0)
          {
            sh.dupe[index].transform = sh.dupe[sh.max - 1].transform;
            sh.dupe[index].mypos = sh.dupe[sh.max - 1].mypos;
            sh.dupe[index].velocity = sh.dupe[sh.max - 1].velocity;
            sh.dupe[index].turnRate = sh.dupe[sh.max - 1].turnRate;
            sh.dupe[index].myRot = sh.dupe[sh.max - 1].myRot;
            sh.dupe[index].inertRot = sh.dupe[sh.max - 1].inertRot;
            sh.dupe[index].scale = sh.dupe[sh.max - 1].scale;
            sh.dupe[index].ratio = sh.dupe[sh.max - 1].ratio;
            sh.dupe[index].move = sh.dupe[sh.max - 1].move;
            sh.dupe[index].alive = sh.dupe[sh.max - 1].alive;
            sh.dupe[index].sloper = sh.dupe[sh.max - 1].sloper;
            sh.dupe[index].randBounce = sh.dupe[sh.max - 1].randBounce;
            sh.dupe[index].bounce = sh.dupe[sh.max - 1].bounce;
            sh.stream[index].Trans = sh.dupe[sh.max - 1].transform;
            --sh.max;
            sh.index = sh.max;
          }
          else
          {
            sh.max = 0;
            sh.index = 0;
          }
          --index;
        }
        else if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index].mypos) < (double) range)
        {
          sh.stream[index].Trans = sh.dupe[index].transform;
          sh.stream[index].tint = sh.dupe[index].tint;
          sh.displayList[sh.tempindex] = sh.stream[index];
          ++sh.tempindex;
        }
      }
    }

    private void updateChar(ref BloodnBacon4PT.shell sh, float range)
    {
      Vector3 vector3 = -Vector3.Normalize(this.camlookpos - this.campos) * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        if (sh.dupe[index].move > 0)
          sh.dupe[index].Update3(ref this.heights);
        ++sh.dupe[index].alive;
        if (sh.dupe[index].alive > 100)
          sh.dupe[index].scale *= 0.97f;
        if (sh.dupe[index].alive > 200)
        {
          if (sh.max - 1 > 0)
          {
            sh.dupe[index].transform = sh.dupe[sh.max - 1].transform;
            sh.dupe[index].mypos = sh.dupe[sh.max - 1].mypos;
            sh.dupe[index].velocity = sh.dupe[sh.max - 1].velocity;
            sh.dupe[index].turnRate = sh.dupe[sh.max - 1].turnRate;
            sh.dupe[index].myRot = sh.dupe[sh.max - 1].myRot;
            sh.dupe[index].inertRot = sh.dupe[sh.max - 1].inertRot;
            sh.dupe[index].scale = sh.dupe[sh.max - 1].scale;
            sh.dupe[index].ratio = sh.dupe[sh.max - 1].ratio;
            sh.dupe[index].move = sh.dupe[sh.max - 1].move;
            sh.dupe[index].alive = sh.dupe[sh.max - 1].alive;
            sh.dupe[index].sloper = sh.dupe[sh.max - 1].sloper;
            sh.dupe[index].randBounce = sh.dupe[sh.max - 1].randBounce;
            sh.dupe[index].bounce = sh.dupe[sh.max - 1].bounce;
            sh.dupe[index].tint = sh.dupe[sh.max - 1].tint;
            sh.stream[index].Trans = sh.dupe[sh.max - 1].transform;
            --sh.max;
            sh.index = sh.max;
          }
          else
          {
            sh.max = 0;
            sh.index = 0;
          }
          --index;
        }
        else if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index].mypos) < (double) range)
        {
          sh.stream[index].Trans = sh.dupe[index].transform;
          sh.stream[index].tint = sh.dupe[index].tint;
          sh.displayList[sh.tempindex] = sh.stream[index];
          ++sh.tempindex;
        }
      }
    }

    private void updateZolt(ref BloodnBacon4PT.shell sh, float range)
    {
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        Vector3 scales = new Vector3((float) this.rr.Next(1, 160) / 100f, (float) this.rr.Next(1, 160) / 100f, 1f);
        if (this.rr.Next(1, 100) < 2)
          scales.X = 5f;
        if (this.rr.Next(1, 100) < 2)
          scales.Y = 5f;
        if (this.rr.Next(1, 100) < 50)
          scales.X *= -1f;
        if (this.rr.Next(1, 100) < 50)
          scales.Y *= -1f;
        this.zoltPos[index].Y += (float) this.rr.Next(10, 100) / 100f;
        if ((double) this.zoltPos[index].Y > 5.0)
          this.zoltPos[index].Y = (float) this.rr.Next(-35, -20);
        float radians = (float) this.rr.Next(-900, 900) / 100f;
        sh.stream[index].Trans = Matrix.CreateScale(scales) * Matrix.CreateRotationZ(radians) * Matrix.CreateTranslation(this.zoltPos[index]) * this.zoltOrigTrans[index];
        sh.displayList[sh.tempindex] = sh.stream[index];
        ++sh.tempindex;
      }
    }

    private void throwGrenade(
      ref BloodnBacon4PT.pickup sh,
      Vector3 pos,
      Vector3 veloc,
      byte bounce,
      ushort seed,
      bool isLocal,
      int small,
      int myage)
    {
      if (isLocal)
        invDupe.glowIndex = sh.index;
      sh.dupe[sh.index].initGrenade(pos, veloc, bounce, (int) seed, isLocal, myage, small);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.stream[sh.index].tint = (float) sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updateGrenade(ref BloodnBacon4PT.pickup sh, float range, int type)
    {
      Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3 = -vector2 * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        bool flag = false;
        int num1 = 250;
        if (sh.dupe[index].move > 0)
        {
          if (this.myPlayer.inBarn)
            sh.dupe[index].UpdateInBarn(ref this.heights);
          else
            sh.dupe[index].Update(ref this.farmheights);
          if (this.tunneladd && this.inFarm == 2)
          {
            sh.dupe[index].gravity = -0.06f;
            flag = true;
            num1 = 500;
            if ((double) this.myPlayer.displayState.npcPosition.Y < -275.0 && (double) sh.dupe[index].mypos.Y > -199.0)
              sh.dupe[index].velocity.Y = -Math.Abs(sh.dupe[index].velocity.Y);
          }
          if ((double) sh.dupe[index].mypos.Y > 2500.0 && sh.dupe[index].isLocal)
            this.sc.trophy.win(this.sc.trophy.thelongestyard);
          if (sh.dupe[index].firstHit % 3 == 1)
          {
            this.grenade.sound.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            ++sh.dupe[index].firstHit;
          }
        }
        if (!flag && sh.dupe[index].age < 240 && sh.dupe[index].firstHit > 1)
          sh.dupe[index].age = (int) MathHelper.Max(240f, (float) sh.dupe[index].age);
        ++sh.dupe[index].age;
        if (sh.dupe[index].age <= num1)
        {
          if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index].mypos) < (double) range && (double) Vector3.Dot(Vector3.Normalize(sh.dupe[index].mypos - vector3), vector2) > 0.74000000953674316)
          {
            sh.stream[index].Trans = sh.dupe[index].transform;
            sh.stream[index].tint = (float) sh.dupe[index].tint;
            sh.displayList[sh.tempindex] = sh.stream[index];
            ++sh.tempindex;
          }
        }
        else
        {
          float num2 = 0.0f;
          if ((double) sh.dupe[index].mypos.Y - (double) sh.dupe[index].groundHeight < 15.0)
            num2 = 22f;
          this.addExplosion(ref this.grenExplosion, new Vector3(sh.dupe[index].mypos.X, sh.dupe[index].mypos.Y + num2, sh.dupe[index].mypos.Z), sh.dupe[index].mypos.Y - sh.dupe[index].groundHeight, sh.dupe[index].isLocal);
          if (sh.max - 1 > 0)
          {
            if (invDupe.glowIndex == index)
              invDupe.glowIndex = -1;
            if (invDupe.glowIndex == sh.max - 1)
              invDupe.glowIndex = index;
            sh.dupe[index].firstHit = sh.dupe[sh.max - 1].firstHit;
            sh.dupe[index].transform = sh.dupe[sh.max - 1].transform;
            sh.dupe[index].mypos = sh.dupe[sh.max - 1].mypos;
            sh.dupe[index].velocity = sh.dupe[sh.max - 1].velocity;
            sh.dupe[index].turnRate = sh.dupe[sh.max - 1].turnRate;
            sh.dupe[index].myRot = sh.dupe[sh.max - 1].myRot;
            sh.dupe[index].inertRot = sh.dupe[sh.max - 1].inertRot;
            sh.dupe[index].scale = sh.dupe[sh.max - 1].scale;
            sh.dupe[index].ratio = sh.dupe[sh.max - 1].ratio;
            sh.dupe[index].move = sh.dupe[sh.max - 1].move;
            sh.dupe[index].age = sh.dupe[sh.max - 1].age;
            sh.dupe[index].sloper = sh.dupe[sh.max - 1].sloper;
            sh.dupe[index].randBounce = sh.dupe[sh.max - 1].randBounce;
            sh.dupe[index].bounce = sh.dupe[sh.max - 1].bounce;
            sh.dupe[index].isLocal = sh.dupe[sh.max - 1].isLocal;
            sh.stream[index].Trans = sh.dupe[sh.max - 1].transform;
            --sh.max;
            sh.index = sh.max;
            break;
          }
          sh.max = 0;
          sh.index = 0;
          invDupe.glowIndex = -1;
          break;
        }
      }
    }

    private void updateGrenadeDebris(ref BloodnBacon4PT.pickup sh, float range, int type)
    {
      Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3 = -vector2 * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        if (sh.dupe[index].move > 0)
        {
          if (this.myPlayer.inBarn)
            sh.dupe[index].UpdateInBarn(ref this.heights);
          else
            sh.dupe[index].Update(ref this.farmheights);
          if (this.tunneladd && this.inFarm == 2 && (double) this.myPlayer.displayState.npcPosition.Y < -275.0 && (double) sh.dupe[index].mypos.Y > -199.0)
            sh.dupe[index].velocity.Y = -Math.Abs(sh.dupe[index].velocity.Y);
          if (sh.dupe[index].firstHit % 16 == 1)
          {
            sh.sound.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            ++sh.dupe[index].firstHit;
          }
        }
        else
          sh.dupe[index].transform = Matrix.CreateScale(sh.dupe[index].scale) * sh.dupe[index].myRot * Matrix.CreateTranslation(sh.dupe[index].mypos);
        ++sh.dupe[index].age;
        if (sh.dupe[index].age > 70)
          sh.dupe[index].scale *= 0.98f;
        if (sh.dupe[index].age <= 200)
        {
          if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index].mypos) < (double) range && (double) Vector3.Dot(Vector3.Normalize(sh.dupe[index].mypos - vector3), vector2) > 0.74000000953674316)
          {
            sh.stream[index].Trans = sh.dupe[index].transform;
            sh.stream[index].tint = (float) sh.dupe[index].tint;
            sh.displayList[sh.tempindex] = sh.stream[index];
            ++sh.tempindex;
          }
        }
        else
        {
          if (sh.max - 1 > 0)
          {
            sh.dupe[index].firstHit = sh.dupe[sh.max - 1].firstHit;
            sh.dupe[index].transform = sh.dupe[sh.max - 1].transform;
            sh.dupe[index].mypos = sh.dupe[sh.max - 1].mypos;
            sh.dupe[index].velocity = sh.dupe[sh.max - 1].velocity;
            sh.dupe[index].turnRate = sh.dupe[sh.max - 1].turnRate;
            sh.dupe[index].myRot = sh.dupe[sh.max - 1].myRot;
            sh.dupe[index].inertRot = sh.dupe[sh.max - 1].inertRot;
            sh.dupe[index].scale = sh.dupe[sh.max - 1].scale;
            sh.dupe[index].ratio = sh.dupe[sh.max - 1].ratio;
            sh.dupe[index].move = sh.dupe[sh.max - 1].move;
            sh.dupe[index].age = sh.dupe[sh.max - 1].age;
            sh.dupe[index].sloper = sh.dupe[sh.max - 1].sloper;
            sh.dupe[index].randBounce = sh.dupe[sh.max - 1].randBounce;
            sh.dupe[index].bounce = sh.dupe[sh.max - 1].bounce;
            sh.dupe[index].isLocal = sh.dupe[sh.max - 1].isLocal;
            sh.stream[index].Trans = sh.dupe[sh.max - 1].transform;
            --sh.max;
            sh.index = sh.max;
            break;
          }
          sh.max = 0;
          sh.index = 0;
          break;
        }
      }
    }

    private void dropGore(
      ref BloodnBacon4PT.goreDrop sh,
      float bounce,
      float scale,
      Vector3 pos,
      Vector3 vel,
      float ta,
      float tb,
      bool oblong)
    {
      sh.dupe[sh.index].init(bounce, scale, pos, vel, ta, tb, oblong);
      sh.dupe[sh.index].tint = this.rr.Next(0, 7);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.stream[sh.index].tint = (float) sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updateGore(ref BloodnBacon4PT.goreDrop sh, float range)
    {
      Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3_1 = -vector2 * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index1 = 0; index1 < sh.max; ++index1)
      {
        if (sh.dupe[index1].move > 0)
        {
          sh.dupe[index1].Update(ref this.heights);
          if ((double) this.sc.myTimer % 2.0 == 0.0)
            this.miniSpray(sh.dupe[index1].mypos, new Vector3(10f, 0.0f, 0.0f) + sh.dupe[index1].mypos, 0.4f);
        }
        ++sh.dupe[index1].age;
        if (sh.dupe[index1].age > 550)
        {
          if (sh.max - 1 > 0)
          {
            sh.dupe[index1].transform = sh.dupe[sh.max - 1].transform;
            sh.dupe[index1].mypos = sh.dupe[sh.max - 1].mypos;
            sh.dupe[index1].velocity = sh.dupe[sh.max - 1].velocity;
            sh.dupe[index1].turnRate = sh.dupe[sh.max - 1].turnRate;
            sh.dupe[index1].myRot = sh.dupe[sh.max - 1].myRot;
            sh.dupe[index1].inertRot = sh.dupe[sh.max - 1].inertRot;
            sh.dupe[index1].scale = sh.dupe[sh.max - 1].scale;
            sh.dupe[index1].move = sh.dupe[sh.max - 1].move;
            sh.dupe[index1].age = sh.dupe[sh.max - 1].age;
            sh.stream[index1].Trans = sh.dupe[sh.max - 1].transform;
            --sh.max;
            sh.index = sh.max;
          }
          else
          {
            sh.max = 0;
            sh.index = 0;
          }
          --index1;
        }
        else
        {
          if (sh.dupe[index1].age > 80)
          {
            sh.dupe[index1].age = 600;
            for (int index2 = 0; index2 < 2; ++index2)
            {
              Vector3 mypos = sh.dupe[index1].mypos;
              Vector3 vector3_2 = new Vector3((float) this.rr.Next(-3600, 3600) / 500f, (float) this.rr.Next(-3500, 3500) / 500f, (float) this.rr.Next(-3600, 3600) / 300f);
              Vector3 velocity = sh.dupe[index1].velocity;
              this.dropGore(ref sh, sh.dupe[index1].grav + (float) this.rr.Next(60, 100) / 100f, sh.dupe[index1].scale.X * 0.7f, mypos + vector3_2, velocity, 70f, 610f, false);
            }
          }
          if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index1].mypos) < (double) range && (double) Vector3.Dot(Vector3.Normalize(sh.dupe[index1].mypos - vector3_1), vector2) > 0.75)
          {
            sh.stream[index1].Trans = sh.dupe[index1].transform;
            sh.stream[index1].tint = (float) sh.dupe[index1].tint;
            sh.displayList[sh.tempindex] = sh.stream[index1];
            ++sh.tempindex;
          }
        }
      }
    }

    private void dropPickup(
      ref BloodnBacon4PT.pickup sh,
      float bounce,
      float radius,
      float ratio,
      Matrix pos,
      Vector3 vel,
      int move,
      float grav,
      int rbounce,
      float ta,
      float tb,
      int landupright,
      bool oblong)
    {
      sh.dupe[sh.index].init(bounce, radius, ratio, pos, vel, move, grav, rbounce, ta, tb, landupright, oblong);
      sh.stream[sh.index].Trans = sh.dupe[sh.index].transform;
      sh.stream[sh.index].tint = (float) sh.dupe[sh.index].tint;
      ++sh.index;
      if (sh.index > sh.maxCapacity - 1)
        sh.index = 0;
      ++sh.max;
      if (sh.max <= sh.maxCapacity - 1)
        return;
      sh.max = sh.maxCapacity;
    }

    private void updatePickup(ref BloodnBacon4PT.pickup sh, float range, int type)
    {
      Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
      Vector3 vector3 = -vector2 * 10f + this.campos;
      range *= range;
      sh.tempindex = 0;
      for (int index = 0; index < sh.max; ++index)
      {
        if (sh.dupe[index].move > 0)
        {
          if (this.myPlayer.inBarn)
            sh.dupe[index].UpdateInBarn(ref this.heights);
          else
            sh.dupe[index].Update(ref this.heights);
          if (sh.dupe[index].firstHit % 2 == 1)
          {
            sh.sound.Play(this.sc.ev * 1f, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            ++sh.dupe[index].firstHit;
          }
        }
        float num = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, sh.dupe[index].mypos);
        if ((double) num < (double) range)
        {
          Vector3 vector1 = Vector3.Normalize(sh.dupe[index].mypos - vector3);
          if ((double) Vector3.Dot(vector1, vector2) > 0.74000000953674316)
          {
            sh.stream[index].Trans = sh.dupe[index].transform;
            sh.stream[index].tint = (float) sh.dupe[index].tint;
            sh.displayList[sh.tempindex] = sh.stream[index];
            ++sh.tempindex;
            if ((double) num < 160000.0 && (double) Vector3.Dot(vector1, vector2) >= 0.85000002384185791 && (double) Vector3.Dot(vector1, vector2) >= (double) this.pickupDot)
            {
              this.pickupGlow = true;
              this.pickupIndex = index;
              this.pickupType = type;
              this.pickupDist = num;
              this.pickupDot = Vector3.Dot(vector1, vector2);
            }
          }
        }
      }
    }

    private void addExplosion(ref BloodnBacon4PT.hole hole, Vector3 pos, float hite, bool isLocal)
    {
      Matrix billboard = Matrix.CreateBillboard(pos, this.campos, this.view.Up, new Vector3?(this.view.Forward));
      Vector3 scales = new Vector3(400f, 300f, 400f) * (float) this.rr.Next(90, 100) / 200f;
      hole.scaleRot[hole.stainIndex] = Matrix.CreateScale(scales) * Matrix.CreateRotationZ((float) this.rr.Next(-800, 800) / 100f);
      this.hitstreamTemp.Trans = hole.scaleRot[hole.stainIndex] * billboard;
      this.hitstreamTemp.Fade = (float) this.rr.Next(80, 110) / 100f;
      Vector4 vector4 = hole.stainR[0];
      this.hitstreamTemp.Coord = new Vector4(3840f / vector4.Z, vector4.X / 3840f, 1920f / vector4.W, vector4.Y / 1920f);
      hole.stainTrans[hole.stainIndex] = this.hitstreamTemp;
      hole.frame[hole.stainIndex] = 0;
      hole.isLocal[hole.stainIndex] = isLocal;
      hole.inAir[hole.stainIndex] = true;
      if ((double) hite < 15.0)
      {
        hole.inAir[hole.stainIndex] = false;
        pos.Y += 50f;
        this.UpdatePicking(this.proj, Matrix.CreateLookAt(pos, new Vector3(pos.X, pos.Y - 1000f, pos.Z), Vector3.Forward), ref this.genCursor, false);
        this.bloodDecal(ref this.farm, this.genCursor, this.rr.Next(0, 70000), true, 9, 15, 0);
      }
      ++hole.stainIndex;
      if (hole.stainIndex > hole.stainCapacity - 1)
        hole.stainIndex = 0;
      ++hole.stainMax;
      if (hole.stainMax > hole.stainCapacity - 1)
        hole.stainMax = hole.stainCapacity;
      this.sc.grenadePop1[this.rr.Next(0, 2)].Play(this.sc.ev * 1f, (float) this.rr.Next(-5, 5) / 100f, 0.0f);
      this.vibroTimer = 30;
      this.vibroTimerAmt = 90f;
      float num = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, pos);
      if ((double) num < 32400.0)
      {
        if (!this.myPlayer.isDown)
          this.myPlayer.damHealth(30f, this.sc.cheat_Invincible);
        this.grinderVibro = 60;
        this.grinderVibroAmt = 80f;
        if ((double) num < 12100.0 && !this.myPlayer.isDown)
        {
          if (!this.myPlayer.noArms)
            this.localModel = this.sc.model_1;
          this.myPlayer.noArms = true;
          this.sc.trophy.win(this.sc.trophy.ambidextrous);
          this.myPlayer.gunChoice = 200;
          this.myPlayer.nextgunChoice = 200;
          this.sc.manyell.Play(this.sc.ev * 1f, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
        }
        else
          this.sc.manyell.Play(this.sc.ev * 0.6f, (float) this.rr.Next(30, 70) / 100f, 0.0f);
      }
      if (Cutty4.cuttyCount <= 0 || !this.sc.host)
        return;
      for (int index = 0; index < Cutty4.cuttyCount; ++index)
      {
        if ((double) Vector3.DistanceSquared(this.cuttyBoss[index].cuttyPos, pos) < 90000.0)
        {
          this.cuttyBoss[index].fireTimer = 800;
          this.cuttyBoss[index].onFire = true;
          this.cuttyBoss[index].endHealing();
        }
      }
    }

    private void updateExplosion(ref BloodnBacon4PT.hole hole)
    {
      if (hole.stainMax == 0)
        return;
      bool flag = false;
      for (int index1 = 0; index1 < hole.stainMax; ++index1)
      {
        ++hole.frame[index1];
        if (hole.frame[index1] <= hole.stainR.Length - 1)
        {
          Vector4 vector4 = hole.stainR[hole.frame[index1]];
          this.hitstreamTemp.Coord = new Vector4(3840f / vector4.Z, vector4.X / 3840f, 1920f / vector4.W, vector4.Y / 1920f);
          Matrix billboard = Matrix.CreateBillboard(Vector3.Transform(Vector3.Zero, hole.stainTrans[index1].Trans), this.campos, this.view.Up, new Vector3?(this.view.Forward));
          hole.scaleRot[index1] = Matrix.CreateScale(1.025f) * hole.scaleRot[index1] * Matrix.CreateRotationZ(1f / 1000f);
          hole.stainTrans[index1].Trans = hole.scaleRot[index1] * billboard * Matrix.CreateTranslation(0.0f, 0.8f, 0.0f);
          hole.stainTrans[index1].Coord = this.hitstreamTemp.Coord;
          flag = true;
          if (hole.frame[index1] == 1)
          {
            Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, hole.stainTrans[index1].Trans);
            vector3_1.Y -= 30f;
            if (hole.isLocal[index1])
              hole.location = vector3_1;
            vector3_1.Y += 5f;
            for (int index2 = 0; index2 < 20; ++index2)
            {
              int minValue = -500;
              if (!hole.inAir[index1])
                minValue = 200;
              float num = (float) this.rr.Next(180, 400) / 100f;
              Vector3 vector3_2 = new Vector3((float) this.rr.Next(-600, 600) / 100f, (float) this.rr.Next(minValue, 600) / 100f, (float) this.rr.Next(-600, 600) / 100f);
              Vector3 vel = Vector3.Normalize(vector3_2) * num;
              if (!hole.inAir[index1])
                vel.Y += 2.4f;
              this.Gunoffspin = Matrix.CreateFromYawPitchRoll((float) this.rr.Next(-900, 800) / 100f, (float) this.rr.Next(-900, 800) / 100f, (float) this.rr.Next(-900, 800) / 100f) * Matrix.CreateTranslation(vector3_1 + vector3_2);
              this.dropPickup(ref this.debris, (float) this.rr.Next(30, 65) / 100f, (float) this.rr.Next(130, 250) / 100f, 0.5f, this.Gunoffspin, vel, 1, -0.09f, 25, 170f, 310f, 0, true);
            }
          }
          if (hole.frame[index1] == 18)
          {
            Vector3 vector3_3 = Vector3.Transform(Vector3.Zero, hole.stainTrans[index1].Trans);
            vector3_3.Y -= 30f;
            this.rr.Next(120, 500);
            int num = this.rr.Next(200, 325);
            for (int index3 = 0; index3 < num; ++index3)
            {
              int maxValue1 = this.rr.Next(10, 125);
              int maxValue2 = this.rr.Next(350, 1650);
              Vector3 vector3_4 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f);
              this.sparks.AddParticle(vector3_3 + vector3_4 * 60f, new Vector3(0.0f + vector3_4.X, 1f + vector3_4.Y, 0.0f + vector3_4.Z) * (float) this.rr.Next(120, maxValue2) / 10f);
            }
          }
        }
      }
      if (flag)
        return;
      hole.stainIndex = 0;
      hole.stainMax = 0;
    }

    private void addExplosion2(
      ref BloodnBacon4PT.hole hole,
      Vector3 pos,
      float hite,
      bool sparks,
      bool fpsFast,
      float scaleAdjust)
    {
      pos.Y = hite;
      Matrix billboard = Matrix.CreateBillboard(pos, this.campos, this.view.Up, new Vector3?(this.view.Forward));
      Vector3 scales = scaleAdjust * new Vector3(400f, 300f, 400f) * (float) this.rr.Next(100, 220) / 100f;
      hole.scaleRot[hole.stainIndex] = Matrix.CreateScale(scales) * Matrix.CreateRotationZ((float) this.rr.Next(-800, 800) / 100f);
      this.hitstreamTemp.Trans = hole.scaleRot[hole.stainIndex] * billboard;
      this.hitstreamTemp.Fade = (float) this.rr.Next(100, 140) / 100f;
      Vector4 vector4 = hole.stainR[0];
      this.hitstreamTemp.Coord = new Vector4(3840f / vector4.Z, vector4.X / 3840f, 1920f / vector4.W, vector4.Y / 1920f);
      hole.stainTrans[hole.stainIndex] = this.hitstreamTemp;
      hole.frame[hole.stainIndex] = 0;
      hole.isLocal[hole.stainIndex] = sparks;
      hole.inAir[hole.stainIndex] = fpsFast;
      ++hole.stainIndex;
      if (hole.stainIndex > hole.stainCapacity - 1)
        hole.stainIndex = 0;
      ++hole.stainMax;
      if (hole.stainMax > hole.stainCapacity - 1)
        hole.stainMax = hole.stainCapacity;
      this.vibroTimer = 60;
      this.vibroTimerAmt = 90f;
      if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, pos) < 640000.0)
        this.camshaker = 60f;
      float num = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, pos);
      if ((double) num < 32400.0)
      {
        if (!this.myPlayer.isDown)
          this.myPlayer.damHealth(30f, this.sc.cheat_Invincible);
        this.grinderVibro = 60;
        this.grinderVibroAmt = 80f;
        if ((double) num < 12100.0 && !this.myPlayer.isDown)
        {
          if (!this.myPlayer.noArms)
            this.localModel = this.sc.model_1;
          this.myPlayer.noArms = true;
          this.sc.trophy.win(this.sc.trophy.ambidextrous);
          this.myPlayer.gunChoice = 200;
          this.myPlayer.nextgunChoice = 200;
          this.sc.manyell.Play(this.sc.ev * 1f, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
        }
        else
          this.sc.manyell.Play(this.sc.ev * 0.6f, (float) this.rr.Next(30, 70) / 100f, 0.0f);
      }
      if (Cutty4.cuttyCount <= 0 || !this.sc.host)
        return;
      for (int index = 0; index < Cutty4.cuttyCount; ++index)
      {
        if ((double) Vector3.DistanceSquared(this.cuttyBoss[index].cuttyPos, pos) < 90000.0)
        {
          this.cuttyBoss[index].fireTimer = 800;
          this.cuttyBoss[index].onFire = true;
          this.cuttyBoss[index].endHealing();
        }
      }
    }

    private void updateExplosion2(ref BloodnBacon4PT.hole hole)
    {
      if (hole.stainMax == 0)
        return;
      bool flag = false;
      for (int index1 = 0; index1 < hole.stainMax; ++index1)
      {
        if ((double) this.sc.myTimer % 2.0 == 0.0 && !hole.inAir[index1])
          ++hole.frame[index1];
        if (hole.inAir[index1])
          hole.frame[index1] += 2;
        if (hole.frame[index1] <= hole.stainR.Length - 1)
        {
          Vector4 vector4 = hole.stainR[hole.frame[index1]];
          this.hitstreamTemp.Coord = new Vector4(3840f / vector4.Z, vector4.X / 3840f, 1920f / vector4.W, vector4.Y / 1920f);
          Matrix billboard = Matrix.CreateBillboard(Vector3.Transform(Vector3.Zero, hole.stainTrans[index1].Trans), this.campos, this.view.Up, new Vector3?(this.view.Forward));
          hole.scaleRot[index1] = Matrix.CreateScale(1.01f) * hole.scaleRot[index1] * Matrix.CreateRotationZ(1f / 1000f);
          hole.stainTrans[index1].Trans = hole.scaleRot[index1] * billboard * Matrix.CreateTranslation(0.0f, 0.8f, 0.0f);
          hole.stainTrans[index1].Coord = this.hitstreamTemp.Coord;
          flag = true;
        }
        if (hole.frame[index1] == 18 && hole.isLocal[index1])
        {
          int mycolorx = 250;
          int mycolory = 200;
          int mycolorz = 200;
          Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, hole.stainTrans[index1].Trans);
          this.rr.Next(120, 500);
          int num = this.rr.Next(400, 650);
          for (int index2 = 0; index2 < num; ++index2)
          {
            int maxValue1 = this.rr.Next(100, 250);
            int maxValue2 = this.rr.Next(500, 3650);
            Vector3 vector3_2 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f);
            this.debrisFire.AddParticle5(vector3_1 + vector3_2 * 80f, new Vector3(0.0f + vector3_2.X, 0.0f + vector3_2.Y, 0.0f + vector3_2.Z) * (float) this.rr.Next(120, maxValue2) / 10f, 125, mycolorx, mycolory, mycolorz);
          }
        }
      }
      if (flag)
        return;
      hole.stainIndex = 0;
      hole.stainMax = 0;
    }

    private void addScreenSplat(bool makeYell, int type)
    {
      if (makeYell)
      {
        if (this.rr.Next(1, 100) < 10)
          this.sc.hurt.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-30, 0) / 100f, 0.0f);
        this.sc.boarbite[this.rr.Next(0, 5)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(30, 70) / 100.0), (float) this.rr.Next(-30, 0) / 100f, (float) this.rr.Next(-70, 70) / 100f);
      }
      float yScale = (float) this.rr.Next(110, 230) / 100f;
      int num = this.rr.Next(1, 5);
      float xPosition = 0.0f;
      float yPosition = 0.0f;
      if (num == 1)
      {
        xPosition = (float) this.rr.Next(-9, -3) / 10f;
        yPosition = (float) this.rr.Next(-9, 9) / 10f;
      }
      if (num == 2)
      {
        xPosition = (float) this.rr.Next(4, 9) / 10f;
        yPosition = (float) this.rr.Next(-9, 9) / 10f;
      }
      if (num == 3)
      {
        xPosition = (float) this.rr.Next(-9, 9) / 10f;
        yPosition = (float) this.rr.Next(-9, -3) / 10f;
      }
      if (num == 4)
      {
        xPosition = (float) this.rr.Next(-9, 9) / 10f;
        yPosition = (float) this.rr.Next(4, 9) / 10f;
      }
      int index = 0;
      if (type == 1)
        index = this.rr.Next(0, 6);
      if (type == 2)
        index = this.rr.Next(9, 12);
      if (type == 3 || type == 4)
        index = this.rr.Next(6, 9);
      Vector4 vector4 = this.hudsplats.stainR[index];
      this.hitstreamTemp.Trans = Matrix.CreateRotationZ((float) this.rr.Next(-8500, 8500) / 100f) * Matrix.CreateScale(yScale * 0.7f, yScale, 0.0f) * Matrix.CreateTranslation(xPosition, yPosition, 0.0f);
      this.hitstreamTemp.Fade = (float) this.rr.Next(75, 110) / 100f;
      this.hudsplats.drift[this.hudsplats.stainIndex] = 0.0f;
      this.hitstreamTemp.Coord = new Vector4(600f / vector4.Z, vector4.X / 600f, 800f / vector4.W, vector4.Y / 800f);
      if (type == 2)
      {
        this.hitstreamTemp.Fade = (float) this.rr.Next(150, 300) / 100f;
        this.hudsplats.drift[this.hudsplats.stainIndex] = (float) (-(double) this.rr.Next(3, 7) / 10000.0);
      }
      if (type == 4)
      {
        this.hitstreamTemp.Fade = (float) this.rr.Next(300, 400) / 100f;
        this.hudsplats.drift[this.hudsplats.stainIndex] = (float) (-(double) this.rr.Next(4, 7) / 10000.0);
      }
      this.hudsplats.stainTrans[this.hudsplats.stainIndex] = this.hitstreamTemp;
      ++this.hudsplats.stainIndex;
      if (this.hudsplats.stainIndex > this.hudsplats.stainCapacity - 1)
        this.hudsplats.stainIndex = 0;
      ++this.hudsplats.stainMax;
      if (this.hudsplats.stainMax <= this.hudsplats.stainCapacity - 1)
        return;
      this.hudsplats.stainMax = this.hudsplats.stainCapacity;
    }

    private void updateScreenSplat()
    {
      for (int index = 0; index < this.hudsplats.stainMax; ++index)
      {
        float num = 0.005f;
        float yPosition = this.hudsplats.drift[index];
        if ((double) this.localClean > 0.0)
        {
          num = 0.01f;
          yPosition = -3f / 1000f;
        }
        this.hudsplats.stainTrans[index].Fade -= num;
        this.hudsplats.stainTrans[index].Trans = this.hudsplats.stainTrans[index].Trans * Matrix.CreateTranslation(0.0f, yPosition, 0.0f) * Matrix.CreateScale(1f, (float) (1.0 - (double) yPosition / 2.0), 1f);
        if ((double) this.hudsplats.stainTrans[index].Fade <= 0.0)
        {
          this.hudsplats.stainTrans[index].Fade = this.hudsplats.stainTrans[this.hudsplats.stainMax - 1].Fade;
          this.hudsplats.drift[index] = this.hudsplats.drift[this.hudsplats.stainMax - 1];
          this.hudsplats.stainTrans[index].Trans = this.hudsplats.stainTrans[this.hudsplats.stainMax - 1].Trans;
          this.hudsplats.stainTrans[index].Coord = this.hudsplats.stainTrans[this.hudsplats.stainMax - 1].Coord;
          --this.hudsplats.stainMax;
          if (this.hudsplats.stainMax < 0)
            this.hudsplats.stainMax = 0;
          if (this.hudsplats.stainIndex > this.hudsplats.stainMax - 1)
            --this.hudsplats.stainIndex;
          if (this.hudsplats.stainIndex < 0)
            this.hudsplats.stainIndex = 0;
        }
      }
    }

    public void buildbotherStory()
    {
      List<int> intList1 = new List<int>()
      {
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      };
      this.botherStory.Clear();
      for (int index1 = 0; index1 < 13; ++index1)
      {
        int index2 = this.rr.Next(0, intList1.Count);
        this.botherStory.Add(intList1[index2]);
        intList1.RemoveAt(index2);
      }
      List<int> intList2 = new List<int>()
      {
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      };
      for (int index3 = 0; index3 < 13; ++index3)
      {
        int index4 = this.rr.Next(0, intList2.Count);
        this.botherStory.Add(intList2[index4]);
        intList2.RemoveAt(index4);
      }
      List<int> intList3 = new List<int>()
      {
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86
      };
      for (int index5 = 0; index5 < 13; ++index5)
      {
        int index6 = this.rr.Next(0, intList3.Count);
        this.botherStory.Add(intList3[index6]);
        intList3.RemoveAt(index6);
      }
    }

    public void noTunnelCheats()
    {
      this.sc.tunnelMode = true;
      this.sc.cheat_InfiniteAmmo = false;
      this.sc.cheat_Invincible = false;
      this.sc.myplayerCheats = false;
      if (this.myPlayer.gunChoice == 14 || this.myPlayer.secondaryChoice == 14)
      {
        this.myPlayer.secondaryChoice = 6;
        if (this.myPlayer.gunChoice == 14)
        {
          this.myPlayer.lastWeapon = this.myPlayer.secondaryChoice;
          this.myPlayer.gunChoice = this.myPlayer.secondaryChoice;
          this.myPlayer.nextgunChoice = this.myPlayer.secondaryChoice;
          this.myPlayer.mag[6] = this.myPlayer.resetmag[6];
          this.myPlayer.ammo[6] = this.myPlayer.resetammo[6];
        }
        this.buildSecondaryWeapon(6);
      }
      if (this.myPlayer.gunChoice != 16 && this.myPlayer.primaryChoice != 16)
        return;
      this.myPlayer.primaryChoice = 2;
      if (this.handtype[this.myPlayer.secondaryChoice] != 2)
        this.myPlayer.secondaryChoice = 6;
      if (this.myPlayer.gunChoice == 16)
      {
        this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
        this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
        this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
        this.myPlayer.mag[2] = this.myPlayer.resetmag[2];
        this.myPlayer.ammo[2] = this.myPlayer.resetammo[2];
      }
      this.buildPrimaryWeapon(2);
    }

    public void webInstancing()
    {
      this.web = new BloodnBacon4PT.npcWeb();
      this.web.hitindex = -1;
      this.web.alive = (ushort) 0;
      this.web.data = this.webProxy.Tag as SkinningDataX;
      this.makeImage(this.web.data.Bones, this.web.data.Width, this.web.data.Hite, ref this.web.bitmap);
      this.web.boar1Texture = this.webTexture;
      this.web.model1 = this.webProxy;
      this.web.max = 25;
      this.web.dupe = new List<webDupe>(this.web.max);
      this.web.dupe.Capacity = 25;
      this.web.display1 = new BloodnBacon4PT.skinstream[this.web.max];
      this.web.buffer1 = new DynamicVertexBuffer(this.sc.GraphicsDevice, BloodnBacon4PT.vd, this.web.max, BufferUsage.WriteOnly);
      this.enemyEffect = this.Content.Load<Effect>("effects\\Effectweb1");
      this.web.eff = this.enemyEffect;
      this.web.eff.Parameters["BoneDelta"].SetValue(1f / (float) this.web.data.Width);
      this.web.eff.Parameters["RowDelta"].SetValue(1f / (float) this.web.data.Hite);
      this.web.eff.Parameters["AnimationTexture"].SetValue((Texture) this.web.bitmap);
      this.web.npcDist = 20000f;
      webDupe.sics = new List<int>(2 * (this.web.data.Clips.Length + 1));
      webDupe.sics.Add(this.web.data.Clips[0]);
      webDupe.sics.Add(0);
      for (int index = 1; index < this.web.data.Clips.Length; ++index)
      {
        webDupe.sics.Add(this.web.data.Clips[index] - this.web.data.Clips[index - 1]);
        webDupe.sics.Add(this.web.data.Clips[index - 1]);
      }
    }

    public void updateWebs(ref BloodnBacon4PT.npcWeb n)
    {
      n.index1 = 0;
      for (int index = 0; index < n.dupe.Count; ++index)
      {
        n.dupe[index].UpdateWeb(ref this.farmheights);
        n.dupe[index].transform = n.dupe[index].myRot2 * Matrix.CreateTranslation(n.dupe[index].mypos);
        this.tempySkin.Transformation = n.dupe[index].transform;
        this.tempySkin.tween = n.dupe[index].tween;
        this.tempySkin.frame1 = (float) n.dupe[index].frame1;
        this.tempySkin.frame2 = (float) n.dupe[index].frame2;
        this.tempySkin.blood = (float) n.dupe[index].blood;
        this.tempySkin.tint = n.dupe[index].tint;
        n.display1[n.index1] = this.tempySkin;
        ++n.index1;
      }
    }

    private void UpdatePicking3(Matrix projection, Matrix view, ref Cursor c, bool insideTunnels)
    {
      c.isCrypt = false;
      c.isCrypt2 = false;
      c.isTunnel = false;
      c.isDoor = false;
      for (int index = 0; index < this.combo.Count; ++index)
        this.combo[index].doorFlag = false;
      for (int index = 0; index < this.plain.Count; ++index)
        this.plain[index].doorFlag = false;
      for (int index = 0; index < this.hidden.Count; ++index)
        this.hidden[index].doorFlag = false;
      this.cursorRay = c.CalculateCursorRay(projection, view);
      c.rayDir = c.rayPos = c.pickedTriangle[0] = c.pickedTriangle[1] = c.pickedTriangle[2] = Vector3.Zero;
      c.rayDir = this.cursorRay.Direction;
      c.rayPos = this.cursorRay.Position;
      c.closestIntersection = 10000f;
      if (!insideTunnels)
        c.RayIntersectsModel3(this.cursorRay, this.buildingMatrix, this.barnDoorMatrix);
      c.RayInteresectGeneric(this.cursorRay, this.cryptMatrix, ref c.cryptVertices, ref c.isCrypt);
      c.RayInteresectGeneric(this.cursorRay, this.cryptMatrix2, ref c.cryptVertices2, ref c.isCrypt2);
      if (!insideTunnels)
        return;
      c.ignorebounds = true;
      c.RayInteresectGeneric(this.cursorRay, this.buildingMatrix, ref c.tunnelvertices3, ref c.isTunnel);
      int num1 = 0;
      for (int index = 0; index < this.combo.Count; ++index)
      {
        c.RayInteresectGeneric(this.cursorRay, this.combo[index].doorMatrix, ref c.door1Vertices, ref this.combo[index].doorFlag);
        if (this.combo[index].doorFlag)
          num1 = index;
      }
      for (int index = 0; index < num1; ++index)
        this.combo[index].doorFlag = false;
      int num2 = 0;
      for (int index = 0; index < this.plain.Count; ++index)
      {
        c.RayInteresectGeneric(this.cursorRay, this.plain[index].doorMatrix, ref c.door1Vertices, ref this.plain[index].doorFlag);
        if (this.plain[index].doorFlag)
          num2 = index;
      }
      for (int index = 0; index < num2; ++index)
        this.plain[index].doorFlag = false;
      int num3 = 0;
      for (int index = 0; index < this.hidden.Count; ++index)
      {
        c.RayInteresectGeneric(this.cursorRay, this.hidden[index].doorMatrix, ref c.door2Vertices, ref this.hidden[index].doorFlag);
        if (this.hidden[index].doorFlag)
          num3 = index;
      }
      for (int index = 0; index < num3; ++index)
        this.hidden[index].doorFlag = false;
    }

    private void initFogofWar()
    {
      this.sc.GraphicsDevice.SetRenderTarget(this.maptarget1);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.minimapReveal = (Texture2D) this.maptarget1;
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
      this.sc.GraphicsDevice.SetRenderTarget(this.maptarget2);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.minimapReveal = (Texture2D) this.maptarget2;
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
      string path = "World//minimap" + this.mazeid.ToString();
      if (!File.Exists(path))
        return;
      this.eraseBlobList.Clear();
      try
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) File.Open(path, FileMode.Open)))
        {
          while (binaryReader.BaseStream.Position != binaryReader.BaseStream.Length)
            this.eraseBlobList.Add(new Vector2((float) binaryReader.ReadByte(), (float) binaryReader.ReadByte()));
          binaryReader.Close();
          this.sc.rebuildFog = true;
        }
      }
      catch
      {
      }
    }

    private void fogofwar()
    {
      if (!this.haveCryptMap)
        return;
      int num = 8;
      if (this.sc.deactivated || this.sc.rebuildTargets)
        return;
      if (this.eraseBlobList.Count > 180000)
        this.sc.rebuildFog = true;
      bool flag = false;
      if ((int) ((double) this.m_xx / (double) num) == (int) ((double) this.m_oldx / (double) num) && (int) ((double) this.m_yy / (double) num) == (int) ((double) this.m_oldy / (double) num))
        flag = true;
      if (!this.sc.rebuildFog && flag)
        return;
      ++this.targetchoice;
      if (this.targetchoice % 2 == 1)
        this.sc.GraphicsDevice.SetRenderTarget(this.mapCombineTarget1);
      else
        this.sc.GraphicsDevice.SetRenderTarget(this.mapCombineTarget2);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearWrap, (DepthStencilState) null, (RasterizerState) null, (Effect) null);
      this.spriteBatch.Draw(this.combineTexture, Vector2.Zero, Color.White);
      if (!this.sc.rebuildFog)
      {
        if (!flag)
          this.eraseBlobList.Add(new Vector2(this.m_xx, this.m_yy) / (float) num);
        this.spriteBatch.Draw(this.eraseblob, new Vector2(this.m_xx, this.m_yy), new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
        if ((double) this.m_xx < 10.0)
        {
          this.spriteBatch.Draw(this.eraseblob, new Vector2((float) this.minimap1.Width + this.m_xx, this.m_yy), new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
          if (!flag)
            this.eraseBlobList.Add(new Vector2(((float) this.minimap1.Width + this.m_xx) / (float) num, this.m_yy / (float) num));
        }
        if ((double) this.m_xx > (double) (this.minimap1.Width - 10))
        {
          this.spriteBatch.Draw(this.eraseblob, new Vector2(this.m_xx - (float) this.minimap1.Width, this.m_yy), new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
          if (!flag)
            this.eraseBlobList.Add(new Vector2((this.m_xx - (float) this.minimap1.Width) / (float) num, this.m_yy / (float) num));
        }
        if ((double) this.m_yy < 10.0)
        {
          this.spriteBatch.Draw(this.eraseblob, new Vector2(this.m_xx, this.m_yy + (float) this.minimap1.Height), new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
          if (!flag)
            this.eraseBlobList.Add(new Vector2(this.m_xx / (float) num, (this.m_yy + (float) this.minimap1.Height) / (float) num));
        }
        if ((double) this.m_yy > (double) (this.minimap1.Height - 10))
        {
          this.spriteBatch.Draw(this.eraseblob, new Vector2(this.m_xx, this.m_yy - (float) this.minimap1.Height), new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
          if (!flag)
            this.eraseBlobList.Add(new Vector2(this.m_xx / (float) num, (this.m_yy - (float) this.minimap1.Height) / (float) num));
        }
        this.m_oldx = this.m_xx;
        this.m_oldy = this.m_yy;
      }
      if (this.sc.rebuildFog)
      {
        for (int index = 0; index < this.eraseBlobList.Count; ++index)
          this.spriteBatch.Draw(this.eraseblob, this.eraseBlobList[index] * (float) num, new Rectangle?(new Rectangle(0, 0, this.eraseblob.Width, this.eraseblob.Height)), new Color(5, 0, 0, (int) byte.MaxValue), (float) this.rr.Next(-1000, 1000) / 100f, new Vector2((float) this.eraseblob.Width, (float) this.eraseblob.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
        this.eraseBlobList = this.eraseBlobList.Distinct<Vector2>().ToList<Vector2>();
        this.sc.rebuildFog = false;
      }
      this.spriteBatch.End();
      this.combineTexture = this.targetchoice % 2 != 1 ? (Texture2D) this.mapCombineTarget2 : (Texture2D) this.mapCombineTarget1;
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
      if (this.targetchoice % 2 == 1)
        this.sc.GraphicsDevice.SetRenderTarget(this.maptarget1);
      else
        this.sc.GraphicsDevice.SetRenderTarget(this.maptarget2);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearWrap, (DepthStencilState) null, (RasterizerState) null, (Effect) null);
      this.spriteBatch.Draw(this.minimap1, Vector2.Zero, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue));
      this.spriteBatch.End();
      this.spriteBatch.Begin(SpriteSortMode.Deferred, this.customBlend2, SamplerState.LinearWrap, (DepthStencilState) null, (RasterizerState) null, (Effect) null);
      this.spriteBatch.Draw(this.combineTexture, Vector2.Zero, new Color(45, 45, 45, (int) byte.MaxValue));
      this.spriteBatch.End();
      this.minimapReveal = this.targetchoice % 2 != 1 ? (Texture2D) this.maptarget2 : (Texture2D) this.maptarget1;
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
    }

    private void twinSplat(int x, int y, bool splatit)
    {
      bool flag = false;
      if (this.sc.deactivated || this.sc.rebuildTargets)
        return;
      if (this.twinBlobList.Count > 90 && !this.sc.rebuildTwinSplat)
      {
        this.sc.toneer.Play(this.sc.ev * 1f, -0.2f, 0.0f);
        this.sc.rebuildTwinSplat = true;
        flag = true;
      }
      if (this.twinBlobList.Count == 45)
        flag = true;
      if (flag)
      {
        int action = 0;
        if (this.twinpowerIndex % 2 == 1)
        {
          if (this.rr.Next(1, 100) < 50)
          {
            this.twinactionList.Clear();
            this.twinactionList.Add("power1");
            this.twinactionList.Add("standlaugh");
            this.twinActNow = true;
            this.twinstandingtired = 300;
            action = 1;
          }
          else
          {
            this.twinactionList.Clear();
            this.twinactionList.Add("power2");
            this.twinactionList.Add("standlaugh");
            this.twinActNow = true;
            this.twinstandingtired = 300;
            action = 2;
          }
        }
        ++this.twinpowerIndex;
        if (this.twinpowerIndex > this.powerStory.Count - 1)
          this.twinpowerIndex = 0;
        if (this.sc.rebuildTwinSplat)
          this.PlayTwinDialogue(this.powerStory[this.twinpowerIndex], true, true, action, this.twinpowerIndex + 100);
        else
          this.PlayTwinDialogue(this.powerStory[this.twinpowerIndex], true, true, action, this.twinpowerIndex);
      }
      ++this.twintargetchoice;
      if (this.twintargetchoice % 2 == 1)
        this.sc.GraphicsDevice.SetRenderTarget(this.twinSplat1);
      else
        this.sc.GraphicsDevice.SetRenderTarget(this.twinSplat2);
      this.sc.GraphicsDevice.Clear(Color.Transparent);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearWrap, (DepthStencilState) null, (RasterizerState) null, (Effect) null);
      if (!this.sc.rebuildTwinSplat)
      {
        this.spriteBatch.Draw(this.twinTexture, Vector2.Zero, Color.White);
        if (splatit)
        {
          this.tempblob = new BloodnBacon4PT.blobbo();
          this.tempblob.pos = new Vector2((float) x, (float) y);
          this.tempblob.scale = (float) this.rr.Next(20, 90) / 100f;
          this.tempblob.rot = (float) this.rr.Next(-800, 800) / 100f;
          this.spriteBatch.Draw(this.splat3, new Vector2((float) x, (float) y), new Rectangle?(new Rectangle(0, 0, this.splat3.Width, this.splat3.Width)), Color.White, this.tempblob.rot, new Vector2((float) (this.splat3.Width / 2), (float) (this.splat3.Width / 2)), this.tempblob.scale, SpriteEffects.None, 0.0f);
          this.twinBlobList.Add(this.tempblob);
        }
      }
      if (this.sc.rebuildTwinSplat)
      {
        this.spriteBatch.Draw(this.twinOrigTexture, Vector2.Zero, Color.White);
        if ((double) this.twinBlobScale < 0.0099999997764825821)
        {
          this.twinBlobList.Clear();
          this.twinBlobScale = 1f;
          this.sc.rebuildTwinSplat = false;
        }
        for (int index = 0; index < this.twinBlobList.Count - 1; ++index)
        {
          this.spriteBatch.Draw(this.splat3, this.twinBlobList[index].pos, new Rectangle?(new Rectangle(0, 0, this.splat3.Width, this.splat3.Width)), Color.White, this.twinBlobList[index].rot, new Vector2((float) (this.splat3.Width / 2), (float) (this.splat3.Width / 2)), this.twinBlobList[index].scale, SpriteEffects.None, 0.0f);
          this.twinBlobList[index].scale -= 0.0015f;
          if ((double) this.twinBlobList[index].scale <= 1.0 / 1000.0)
            this.twinBlobList[index].scale = 1f / 1000f;
        }
        this.twinBlobScale -= 0.0015f;
      }
      this.spriteBatch.End();
      this.twinTexture = this.twintargetchoice % 2 != 1 ? (Texture2D) this.twinSplat2 : (Texture2D) this.twinSplat1;
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
    }

    protected void PlayTwinDialogue(
      int myIndex,
      bool interrupt,
      bool sendData,
      int action,
      int val1)
    {
      if (this.loads.Contains(7) || !interrupt && this.twinJawIndex != -1)
        return;
      if (myIndex != 250)
      {
        this.talktwinIndex = myIndex;
        this.twinJawIndex = -1;
        this.loads.Add(7);
      }
      if (sendData && this.remPlayer.Count > 1)
      {
        this.twinTalk = true;
        this.twinTalki = myIndex;
        this.twinTalkaction = action;
        this.twinTalkval1 = val1;
      }
      if (sendData)
        return;
      if (action == 99)
        this.twinNextaction = val1;
      if (action == 100)
      {
        if (this.twinactionindex == 0 || this.twinactionindex == 6)
        {
          this.twinactionList.Add("jumpup");
          this.twinactionList.Add("standlaugh");
        }
        this.twinstorychoice = 0;
        this.twinstoryIndex = 0;
        this.twinstandingtired = 300;
        this.twinActNow = true;
      }
      if (action == 101)
      {
        if (this.hillbillyTime <= 0)
          this.hillbilly.Play(this.sc.ev, 0.0f, 0.0f);
        this.hillbillyTime = 250;
        this.twinactionList.Clear();
        this.twinactionList.Add("gangum");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
        this.twinNextaction = -1;
      }
      if (action == 102)
      {
        if (this.hillbillyTime <= 0)
          this.hillbilly.Play(this.sc.ev, 0.0f, 0.0f);
        this.hillbillyTime = 250;
        this.twinactionList.Clear();
        this.twinactionList.Add("dance4");
        this.twinactionList.Add("dance4");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
        this.twinNextaction = -1;
      }
      if (action == 1)
      {
        this.twinactionList.Clear();
        this.twinactionList.Add("power1");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
        this.twinstandingtired = 300;
        if (val1 >= 100)
        {
          this.sc.toneer.Play(this.sc.ev * 1f, -0.2f, 0.0f);
          this.sc.rebuildTwinSplat = true;
          val1 -= 100;
        }
        this.twinpowerIndex = val1;
      }
      if (action == 2)
      {
        this.twinactionList.Clear();
        this.twinactionList.Add("power2");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
        this.twinstandingtired = 300;
        if (val1 >= 100)
        {
          this.sc.toneer.Play(this.sc.ev * 1f, -0.2f, 0.0f);
          this.sc.rebuildTwinSplat = true;
          val1 -= 100;
        }
        this.twinpowerIndex = val1;
      }
      if (action == 3)
      {
        this.twinactionList.Clear();
        this.twinactionList.Add("dickkick");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
      }
      if (action == 4)
      {
        this.twinactionList.Clear();
        this.twinactionList.Add("asskick");
        this.twinactionList.Add("standlaugh");
        this.twinActNow = true;
      }
      if (action == 5 || action == 6)
      {
        this.twinWaitTimer1 = this.rr.Next(300, 600);
        if (action == 6)
        {
          this.twinactionList.Add("sitcry");
          this.twinactionList.Add("sitlaugh");
          this.twinActNow = true;
        }
      }
      if (action == 7 || action == 8)
      {
        this.twinstoryIndex = 0;
        this.twinskullIndex = 0;
        this.twinaltIndex = 0;
        this.twintuskIndex = 0;
        this.twintuskIndex = 4;
        this.twinstorychoice = 3;
        this.twinstandingtired = 450;
        this.twinActNow = true;
        if (action == 7)
        {
          this.twinactionList.Add("sit2stand");
          this.twinactionList.Add("standlaugh");
        }
        if (action == 8)
        {
          this.twinactionList.Add("standtalk");
          this.twinactionList.Add("standlaugh");
        }
      }
      if (action == 9 || action == 10)
      {
        this.twinstoryIndex = 0;
        this.twinskullIndex = 0;
        this.twinaltIndex = 0;
        this.twintuskIndex = 0;
        this.twinskullIndex = 1;
        this.twinstorychoice = 2;
        if (action == 9)
        {
          this.twinactionList.Add("sit2stand");
          this.twinactionList.Add("standlaugh");
        }
        if (action == 10)
        {
          this.twinactionList.Add("standtalk");
          this.twinactionList.Add("standlaugh");
        }
        this.twinstandingtired = 450;
        this.twinActNow = true;
      }
      if (action == 12 || action == 13)
      {
        this.twinstoryIndex = 0;
        this.twinskullIndex = 0;
        this.twinaltIndex = 0;
        this.twintuskIndex = 0;
        this.twinaltIndex = val1;
        this.twinstorychoice = 1;
        if (action == 13)
        {
          this.twinactionList.Add("sittalk");
          this.twinactionList.Add("sitlaugh");
          this.twinActNow = true;
        }
      }
      if (action == 14)
        this.twinbotherIndex = val1;
      if (action == 15 || action == 16)
      {
        this.twinstoryIndex = 0;
        this.twinskullIndex = 0;
        this.twinaltIndex = 0;
        this.twintuskIndex = 0;
        this.twinstoryIndex = val1;
        this.twinstorychoice = 0;
        this.twinstandingtired = 300;
        if (action == 16)
        {
          if (this.rr.Next(1, 100) < 50)
            this.twinactionList.Add("standargue");
          else
            this.twinactionList.Add("standtalk");
          this.twinactionList.Add("standlaugh");
          this.twinActNow = true;
        }
      }
      if (action == 17 || action == 18)
      {
        this.twinstoryIndex = 0;
        this.twinskullIndex = 0;
        this.twinaltIndex = 0;
        this.twintuskIndex = 0;
        this.twinskullIndex = val1;
        this.twinstorychoice = 2;
        if (this.twinskullIndex > this.skullStory.Count - 1)
          this.sc.trophy.win(this.sc.trophy.mrgreen);
        this.twinstandingtired = 300;
        if (action == 18)
        {
          if (this.rr.Next(1, 100) < 50)
            this.twinactionList.Add("standargue");
          else
            this.twinactionList.Add("standtalk");
          this.twinactionList.Add("standlaugh");
          this.twinActNow = true;
        }
      }
      if (action != 19 && action != 20)
        return;
      this.twinstoryIndex = 0;
      this.twinskullIndex = 0;
      this.twinaltIndex = 0;
      this.twintuskIndex = 0;
      this.twintuskIndex = val1;
      this.twinstorychoice = 3;
      this.twinstandingtired = 300;
      if (action != 20)
        return;
      if (this.rr.Next(1, 100) < 50)
        this.twinactionList.Add("standargue");
      else
        this.twinactionList.Add("standtalk");
      this.twinactionList.Add("standlaugh");
      this.twinActNow = true;
    }

    private void twinManager(string type)
    {
      switch (type)
      {
        case "standtalk":
          ++this.twintalkIndex;
          if (this.twintalkIndex > 2)
            this.twintalkIndex = 0;
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 9;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          int twintalkIndex = this.twintalkIndex;
          if (twintalkIndex == 0)
          {
            this.twinAnim.animCount = 0.0f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 650;
          }
          if (twintalkIndex == 1)
          {
            this.twinAnim.animCount = 397f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 847;
          }
          if (twintalkIndex == 2)
          {
            this.twinAnim.animCount = 847f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 1197;
          }
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "standargue":
          ++this.twinargueIndex;
          if (this.twinargueIndex > 2)
            this.twinargueIndex = 0;
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 7;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          int twinargueIndex = this.twinargueIndex;
          if (twinargueIndex == 0)
          {
            this.twinAnim.animCount = 0.0f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 712;
          }
          if (twinargueIndex == 1)
          {
            this.twinAnim.animCount = 812f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 1550;
          }
          if (twinargueIndex == 2)
          {
            this.twinAnim.animCount = 1540f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 2050;
          }
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "sittalk":
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 6;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animMax = 537;
          int num = this.rr.Next(0, 2);
          if (num == 0)
          {
            this.twinAnim.animCount = 0.0f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 500;
          }
          if (num == 1)
          {
            this.twinAnim.animCount = 625f;
            this.twinAnim.animMin = (int) this.twinAnim.animCount;
            this.twinAnim.animMax = 1187;
          }
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "gangum":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 8;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 740;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "dance4":
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 14;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 3;
          this.twinAnim.animMax = 150;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "asskick":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 10;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 5f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 107;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "dickkick":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 11;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 5f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 197;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "power1":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 12;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 5f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 335;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "power2":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 13;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 5f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 375;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "jumpup":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 5;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 420;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "sitcry":
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 4;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 280;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "sitlaugh":
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 0;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 1000;
          this.twinAnim.animMax = 495;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "sit2stand":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 1;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 130;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "standlaugh":
          this.twinAnim.looped = true;
          this.twinAnim.animClip = 2;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 585;
          this.twinactionindex = this.twinAnim.animClip;
          break;
        case "stand2sit":
          this.twinAnim.looped = false;
          this.twinAnim.animClip = 3;
          this.twinAnim.animCount = 0.0f;
          this.twinAnim.animMin = 0;
          this.twinAnim.animTween = 0.0f;
          this.twinAnim.tweenspeed = 20f;
          this.twinAnim.animLoop = 0;
          this.twinAnim.animMax = 130;
          this.twinactionindex = this.twinAnim.animClip;
          break;
      }
    }

    private void shotTwinFx(int flag, Vector3 pp)
    {
      Vector3 direction1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 51f, 1.8f) * this.twin1[this.twinbase].skinTransforms[19]);
      Vector3 direction2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 41.8f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
      Vector3 direction3 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 32.1f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
      if (flag == 30)
      {
        this.bloodSprayTwin(pp * 0.7f + direction1 * 0.3f, direction1, 0.5f);
        this.twinSplat(this.rr.Next(131, 216), this.rr.Next(431, 547), true);
      }
      if (flag == 31)
      {
        this.bloodSprayTwin(pp * 0.7f + direction1 * 0.3f, direction1, 0.5f);
        this.twinSplat(this.rr.Next(50, 116), this.rr.Next(409, 544), true);
        this.twinSplat(this.rr.Next(220, 285), this.rr.Next(410, 545), true);
      }
      if (flag == 32)
      {
        Vector3 direction4 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.12f, 25f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
        this.bloodSprayTwin(pp, direction4, 0.5f);
        this.twinSplat(this.rr.Next(49, 104), this.rr.Next(256, 308), true);
      }
      if (flag == 33)
      {
        Vector3 direction5 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.12f, 27.23f, 0.07f) * this.twin1[this.twinbase].skinTransforms[16]);
        this.bloodSprayTwin(pp, direction5, 0.5f);
        this.twinSplat(this.rr.Next(174, 257), this.rr.Next(208, 278), true);
      }
      if (flag == 34)
      {
        this.bloodSprayTwin(pp * 0.7f + direction2 * 0.3f, direction2, 0.5f);
        this.twinSplat(this.rr.Next(16, 139), this.rr.Next(9, 165), true);
        this.twinSplat(this.rr.Next(519, 579), this.rr.Next(17, 192), true);
        this.twinSplat(this.rr.Next(433, 493), this.rr.Next(14, 189), true);
      }
      if (flag == 35)
      {
        this.bloodSprayTwin(pp * 0.7f + direction2 * 0.3f, direction2, 0.5f);
        this.twinSplat(this.rr.Next(161, 269), this.rr.Next(8, 164), true);
        this.twinSplat(this.rr.Next(519, 579), this.rr.Next(17, 192), true);
        this.twinSplat(this.rr.Next(433, 493), this.rr.Next(14, 189), true);
      }
      if (flag == 36)
      {
        this.bloodSprayTwin(pp * 0.7f + direction3 * 0.3f, direction3, 0.5f);
        this.twinSplat(this.rr.Next(10, 133), this.rr.Next(182, 385), true);
      }
      if (flag == 37)
      {
        this.bloodSprayTwin(pp * 0.7f + direction3 * 0.3f, direction3, 0.5f);
        this.twinSplat(this.rr.Next(166, 266), this.rr.Next(166, 366), true);
      }
      if (flag == 38)
      {
        Vector3 direction6 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-5.313f, 0.223f, 5.649f) * this.twin1[this.twinbase].skinTransforms[13]);
        this.bloodSprayTwin(pp, direction6, 0.5f);
      }
      if (flag != 39)
        return;
      Vector3 direction7 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(5.563f, 0.223f, 6f) * this.twin1[this.twinbase].skinTransforms[7]);
      this.bloodSprayTwin(pp, direction7, 0.5f);
    }

    private void twinBones(ref AnimationPlayer a)
    {
      --this.hillbillyTime;
      Vector3 twinPosition = this.twinPosition;
      float num1 = Vector3.Distance(this.myPlayer.displayState.npcPosition, twinPosition);
      if ((double) num1 > 800.0)
      {
        this.atTwinFar = true;
        this.twinJawIndex = -1;
      }
      else
      {
        bool flag = false;
        if (this.sc.rebuildTwinSplat)
          this.twinSplat(0, 0, false);
        else if (this.myPlayer.gunFired && (double) num1 < 250.0)
        {
          this.twindist = new float?(5000f);
          Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 51f, 1.8f) * this.twin1[this.twinbase].skinTransforms[19]);
          Vector3 vector3_2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.12f, 25f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
          Vector3 vector3_3 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.12f, 27.23f, 0.07f) * this.twin1[this.twinbase].skinTransforms[16]);
          this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_1, 4f);
          if (this.twindist.HasValue)
          {
            float? twindist = this.twindist;
            if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
            {
              Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
              Vector3 vector3_4 = Vector3.Transform(center - vector3_1, Matrix.Invert(this.twinRot));
              if ((double) vector3_4.Z > 0.0)
              {
                this.bloodSprayTwin(center, vector3_1, 0.5f);
                this.twinshot = true;
                this.twinDestiny = center;
                this.myPlayer.now.gunfired = 30;
                this.twinSplat(this.rr.Next(131, 216), this.rr.Next(431, 547), true);
                flag = true;
              }
              if ((double) vector3_4.Z < 0.0)
              {
                this.bloodSprayTwin(center, vector3_1, 0.5f);
                this.twinshot = true;
                this.twinDestiny = center;
                this.myPlayer.now.gunfired = 31;
                this.twinSplat(this.rr.Next(50, 116), this.rr.Next(409, 544), true);
                this.twinSplat(this.rr.Next(220, 285), this.rr.Next(410, 545), true);
                flag = true;
              }
            }
          }
          if (!flag)
          {
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_2, 3.255f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                if ((double) Vector3.Transform(center - vector3_2, Matrix.Invert(this.twinRot)).Z > 0.0)
                {
                  this.bloodSprayTwin(center, vector3_2, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 32;
                  this.twinSplat(this.rr.Next(49, 104), this.rr.Next(256, 308), true);
                  flag = true;
                  if (this.twinactionindex == 2)
                  {
                    this.PlayTwinDialogue(44, true, true, 3, 0);
                    this.twinactionList.Clear();
                    this.twinactionList.Add("dickkick");
                    this.twinactionList.Add("standlaugh");
                    this.twinActNow = true;
                  }
                }
              }
            }
          }
          if (!flag)
          {
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_3, 3.728f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                if ((double) Vector3.Transform(center - vector3_3, Matrix.Invert(this.twinRot)).Z < 0.0)
                {
                  this.bloodSprayTwin(center, vector3_3, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 33;
                  this.twinSplat(this.rr.Next(174, 257), this.rr.Next(208, 278), true);
                  flag = true;
                  if (this.twinactionindex == 2)
                  {
                    this.PlayTwinDialogue(this.rr.Next(46, 48), true, true, 4, 0);
                    this.twinactionList.Clear();
                    this.twinactionList.Add("asskick");
                    this.twinactionList.Add("standlaugh");
                    this.twinActNow = true;
                  }
                }
              }
            }
          }
          if (!flag)
          {
            Vector3 vector3_5 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 41.8f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_5, 5.9f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                Vector3 vector3_6 = Vector3.Transform(center - vector3_5, Matrix.Invert(this.twinRot));
                if ((double) vector3_6.Z > 0.0)
                {
                  this.bloodSprayTwin(center, vector3_5, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 34;
                  this.twinSplat(this.rr.Next(16, 139), this.rr.Next(9, 165), true);
                  flag = true;
                }
                if ((double) vector3_6.Z < 0.0)
                {
                  this.bloodSprayTwin(center, vector3_5, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 35;
                  this.twinSplat(this.rr.Next(161, 269), this.rr.Next(8, 164), true);
                  flag = true;
                }
                if ((double) vector3_6.X < -3.0)
                {
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.twinSplat(this.rr.Next(519, 579), this.rr.Next(17, 192), true);
                  flag = true;
                }
                if ((double) vector3_6.X > 3.0)
                {
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.twinSplat(this.rr.Next(433, 493), this.rr.Next(14, 189), true);
                  flag = true;
                }
              }
            }
          }
          if (!flag)
          {
            Vector3 vector3_7 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 32.1f, 1.8f) * this.twin1[this.twinbase].skinTransforms[16]);
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_7, 5.55f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                Vector3 vector3_8 = Vector3.Transform(center - vector3_7, Matrix.Invert(this.twinRot));
                if ((double) vector3_8.Z > 0.0)
                {
                  this.bloodSprayTwin(center, vector3_7, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 36;
                  this.twinSplat(this.rr.Next(10, 133), this.rr.Next(182, 385), true);
                }
                if ((double) vector3_8.Z < 0.0)
                {
                  this.bloodSprayTwin(center, vector3_7, 0.5f);
                  this.twinshot = true;
                  this.twinDestiny = center;
                  this.myPlayer.now.gunfired = 37;
                  this.twinSplat(this.rr.Next(166, 266), this.rr.Next(166, 366), true);
                }
              }
            }
          }
          if (!flag)
          {
            Vector3 vector3_9 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-5.313f, 0.223f, 5.649f) * this.twin1[this.twinbase].skinTransforms[13]);
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_9, 3.75f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                Vector3.Transform(center - vector3_9, Matrix.Invert(this.twinRot));
                this.bloodSprayTwin(center, vector3_9, 0.5f);
                this.twinshot = true;
                this.twinDestiny = center;
                this.myPlayer.now.gunfired = 38;
                if (this.sc.redskull2 + this.sc.redskull3 + this.sc.redskull1 == 6)
                {
                  if (this.hillbillyTime <= 0)
                    this.hillbilly.Play(this.sc.ev, 0.0f, 0.0f);
                  this.hillbillyTime = 250;
                  this.twinactionList.Clear();
                  this.twinactionList.Add("gangum");
                  this.twinactionList.Add("standlaugh");
                  this.twinActNow = true;
                  this.twinNextaction = -1;
                  this.PlayTwinDialogue(250, true, true, 101, 0);
                }
              }
            }
          }
          if (!flag)
          {
            Vector3 vector3_10 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(5.563f, 0.223f, 6f) * this.twin1[this.twinbase].skinTransforms[7]);
            this.twindist = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.camlookpos, vector3_10, 3.75f);
            if (this.twindist.HasValue)
            {
              float? twindist = this.twindist;
              if (((double) twindist.GetValueOrDefault() >= 400.0 ? 0 : (twindist.HasValue ? 1 : 0)) != 0)
              {
                Vector3 center = this.genCursor.rayPos + this.genCursor.rayDir * this.twindist.Value;
                Vector3.Transform(center - vector3_10, Matrix.Invert(this.twinRot));
                this.bloodSprayTwin(center, vector3_10, 0.5f);
                this.twinshot = true;
                this.twinDestiny = center;
                this.myPlayer.now.gunfired = 39;
                if (this.sc.tusk1 + this.sc.tusk2 + this.sc.tusk3 == 6)
                {
                  if (this.hillbillyTime <= 0)
                    this.hillbilly.Play(this.sc.ev, 0.0f, 0.0f);
                  this.hillbillyTime = 250;
                  this.twinactionList.Clear();
                  this.twinactionList.Add("dance4");
                  this.twinactionList.Add("dance4");
                  this.twinactionList.Add("standlaugh");
                  this.twinActNow = true;
                  this.twinNextaction = -1;
                  this.PlayTwinDialogue(250, true, true, 102, 0);
                }
              }
            }
          }
        }
        this.atTwinFar = false;
        float num2 = 6f;
        if (this.twinactionList.Count == 0)
          --this.twinactionTimer;
        if ((this.twinstorychoice == 1 || this.twinstorychoice == 0 || this.twinstorychoice == 2 || this.twinstorychoice == 3) && this.twinJawIndex == -1)
          --this.twinstandingtired;
        if (this.twinactionList.Count == 0 && this.twinactionindex != 7 && this.twinactionindex != 9)
        {
          if ((this.twinactionindex == 0 || this.twinactionindex == 6) && this.myPlayer.gunFired && flag)
          {
            int num3 = this.rr.Next(0, 2);
            if (num3 == 0)
            {
              this.twinactionList.Add("sit2stand");
              this.twinactionList.Add("standlaugh");
              this.PlayTwinDialogue(250, true, true, 100, 0);
            }
            if (num3 == 1)
            {
              this.twinactionList.Add("jumpup");
              this.twinactionList.Add("standlaugh");
              this.PlayTwinDialogue(250, true, true, 100, 0);
            }
            this.twinstorychoice = 0;
            this.twinstoryIndex = 0;
            this.twinstandingtired = 300;
            this.twinActNow = true;
          }
          if (this.twinactionindex == 2 && this.twinstandingtired <= 0)
          {
            this.twinactionList.Add("stand2sit");
            this.twinactionList.Add("sitlaugh");
            this.twinActNow = true;
            this.twinstorychoice = 1;
            this.twinaltIndex = 0;
          }
        }
        if ((double) this.sc.myTimer % 9.0 == 0.0)
        {
          this.lookatTwin = false;
          this.atTwin = false;
          Vector3 vector1_1 = Vector3.Normalize(this.camlookpos - this.campos);
          Vector3 vector2_1 = Vector3.Normalize(twinPosition - this.campos);
          if ((double) num1 < 90.0 && (double) Vector3.Dot(vector1_1, vector2_1) > 0.75)
            this.atTwin = true;
          Vector3 vector1_2 = Vector3.Normalize(this.myPlayer.gunlook - this.myPlayer.gunpos);
          Vector3 vector2_2 = Vector3.Normalize(twinPosition - this.myPlayer.gunpos);
          if ((double) num1 < 400.0 && (double) Vector3.Dot(vector1_2, vector2_2) > 0.85000002384185791)
            this.lookatTwin = true;
        }
        if ((double) num1 < 500.0 && this.twinJawIndex == -1)
        {
          --this.twinWaitTimer1;
          if (this.twinWaitTimer1 <= 0)
          {
            int action = 5;
            this.twinWaitTimer1 = this.rr.Next(300, 600);
            if (this.twinactionindex == 0 && this.rr.Next(1, 100) < 50)
            {
              this.twinactionList.Add("sitcry");
              this.twinactionList.Add("sitlaugh");
              this.twinActNow = true;
              action = 6;
            }
            this.PlayTwinDialogue(this.twinMumble[this.rr.Next(0, this.twinMumble.Count)], false, true, action, 0);
          }
        }
        if (this.twinJawIndex >= 0 && this.twinDialog1Loaded)
        {
          if ((double) this.sc.myTimer % 2.0 == 0.0)
          {
            this.twinTalkAverage = this.twinJaw[this.twinJawIndex] * 0.4f;
            this.twinTalkAverage = MathHelper.Clamp(this.twinTalkAverage, 0.0f, 23f);
          }
          this.twinTalkSmooth = MathHelper.Lerp(this.twinTalkSmooth, this.twinTalkAverage, 0.39f);
          ++this.twinJawIndex;
          try
          {
            SoundEffect.DistanceScale = 220f;
            this.audioemitter.Position = new Vector3(this.twinPosition.X, 0.0f, this.twinPosition.Z);
            this.audiolistener.Position = new Vector3(this.campos.X, 0.0f, this.campos.Z);
            this.audiolistener.Forward = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            this.twinDialog1.sound[0].Volume = this.sc.vv * (1f - MathHelper.Clamp((float) (((double) Vector3.Distance(this.campos, this.twinPosition) - 150.0) / 250.0), 0.0f, 0.9f));
            this.twinDialog1.sound[0].Apply3D(this.audiolistener, this.audioemitter);
          }
          catch
          {
          }
          if ((double) this.twinJaw[this.twinJawIndex] == -1.0)
          {
            this.twinWaitTimer1 = this.rr.Next(300, 600);
            this.twinJawIndex = -1;
            this.talktwinIndex = -1;
            if (this.twinNextLine != -1)
            {
              int action = 0;
              if (this.twinNextLine == 70)
              {
                this.twinNextaction = 1;
                action = 99;
              }
              this.PlayTwinDialogue(this.twinNextLine, false, true, action, this.twinNextaction);
              this.twinNextLine = -1;
            }
            else if (this.twinNextaction == 1)
            {
              if (this.hillbillyTime <= 0)
                this.hillbilly.Play(this.sc.ev, 0.0f, 0.0f);
              this.hillbillyTime = 250;
              this.twinactionList.Clear();
              this.twinactionList.Add("gangum");
              this.twinactionList.Add("standlaugh");
              this.twinActNow = true;
              this.twinNextaction = -1;
            }
            else if (this.twinactionindex != 7 && this.twinactionindex != 9)
            {
              if (this.twinactionindex == 6)
              {
                this.twinactionList.Clear();
                this.twinactionList.Add("sitlaugh");
                this.twinActNow = true;
              }
            }
            else
            {
              this.twinactionList.Clear();
              this.twinactionList.Add("standlaugh");
              this.twinActNow = true;
            }
          }
        }
        else
          this.twinTalkSmooth *= 0.995f;
        if ((double) this.twinAnim.animCount > -1.0)
        {
          this.currentTimeValue = TimeSpan.FromSeconds(((double) this.twinAnim.animCount * 0.40000000596046448 * 0.0416666679084301 + 0.0416666604578495) % this.twin1[this.twinAnim.animClip].currentClipValue.Duration.TotalSeconds);
          this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 59.0 * 31.0);
          this.currentTimeValue += TimeSpan.FromSeconds(0.042);
          this.twin1[this.twinAnim.animClip].UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
          this.currentTimeValue = TimeSpan.FromSeconds(((double) this.twinAnimOld.animCount * 0.40000000596046448 * 0.0416666679084301 + 0.0416666604578495) % this.twin1[this.twinAnimOld.animClip].currentClipValue.Duration.TotalSeconds);
          this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 59.0 * 31.0);
          this.currentTimeValue += TimeSpan.FromSeconds(0.042);
          this.twin1[this.twinAnimOld.animClip].UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
          this.twinAnim.animTween = MathHelper.Clamp(this.twinAnim.animTween, 0.0f, 1f);
          for (int index = 0; index < this.twinAnim.animList.Count; ++index)
            a.boneTransforms[this.twinAnim.animList[index]] = this.twin1[this.twinAnimOld.animClip].boneTransforms[this.twinAnim.animList[index]] * (1f - this.twinAnim.animTween) + this.twin1[this.twinAnim.animClip].boneTransforms[this.twinAnim.animList[index]] * this.twinAnim.animTween;
          ++this.twinAnimOld.animCount;
          if ((double) this.twinAnimOld.animCount > (double) this.twinAnimOld.animMax)
            this.twinAnimOld.animCount = !this.twinAnimOld.looped ? (float) this.twinAnimOld.animMax : 0.0f;
          ++this.twinAnim.animCount;
          if ((double) this.twinAnim.animCount <= (double) this.twinAnim.animMax && !this.twinActNow)
          {
            float tweenspeed = this.twinAnim.tweenspeed;
            if ((double) this.twinAnim.animCount < (double) this.twinAnim.animMin + (double) tweenspeed)
              this.twinAnim.animTween += 1f / tweenspeed;
            else
              this.twinAnim.animTween = 1f;
          }
          else
          {
            this.twinActNow = false;
            if ((double) this.twinAnim.animCount > (double) this.twinAnim.animMax)
              this.twinAnim.animCount = !this.twinAnim.looped ? (float) this.twinAnim.animMax : 0.0f;
            if (this.twinactionList.Count > 0)
            {
              this.twinAnimOld.animLoop = 900;
              this.twinAnimOld.looped = this.twinAnim.looped;
              this.twinAnimOld.animClip = this.twinAnim.animClip;
              this.twinAnimOld.animCount = this.twinAnim.animCount;
              this.twinAnimOld.animMax = this.twinAnim.animMax;
              this.twinAnimOld.animMin = this.twinAnim.animMin;
              this.twinManager(this.twinactionList[0]);
              this.twinactionList.RemoveAt(0);
            }
          }
        }
        Vector3 vector3 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 50f, 3f) * this.twin1[this.twinbase].skinTransforms[19]);
        this.twinlook = MathHelper.Clamp(BloodnBacon4PT.WrapAngle(this.twinlook + MathHelper.Clamp(BloodnBacon4PT.WrapAngle((float) (-Math.Atan2((double) vector3.Z - (double) this.myPlayer.displayState.npcPosition.Z, (double) vector3.X - (double) this.myPlayer.displayState.npcPosition.X) - 1.5700000524520874) - this.twinlook), -0.1f, 0.1f)), -1.2f, 1.2f);
        a.boneTransforms[19] = Matrix.CreateRotationY(this.twinlook) * a.boneTransforms[19];
        if (this.twinactionindex == 4 || this.twinactionindex == 6 || this.twinactionindex == 0)
        {
          float degrees = (float) (-30.0 * (1.0 - (double) MathHelper.Clamp(num1 / 300f, 0.0f, 1f)));
          a.boneTransforms[18] = Matrix.CreateRotationX(MathHelper.ToRadians(degrees)) * a.boneTransforms[18];
        }
        a.boneTransforms[21] = Matrix.CreateRotationZ(MathHelper.ToRadians(num2 - this.twinTalkSmooth)) * a.boneTransforms[21];
        a.UpdateWorldTransforms(Matrix.CreateScale(1f) * this.twinRot * Matrix.CreateTranslation(this.twinPosition), a.boneTransforms);
      }
    }

    private bool updateChain_shotbyPlayer()
    {
      bool flag = false;
      this.chain.tempindex = 0;
      for (int index1 = 0; index1 < this.chain.maxCapacity; ++index1)
      {
        this.chain.stream[index1].Trans = this.chainRope.tranforms[index1];
        this.chain.displayList[index1] = this.chain.stream[index1];
        ++this.chain.tempindex;
        if (this.myPlayer.gunFired && !flag && this.myPlayer.gunChoice != 14)
        {
          this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, new Vector3(this.chainRope.pX[index1], this.chainRope.pY[index1], this.chainRope.pZ[index1]), 10f);
          if (this.distCheck.HasValue)
          {
            Vector3 position = this.genCursor.rayDir * (float) this.rr.Next(10, 20);
            position = Vector3.Transform(position, Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f));
            flag = true;
            this.chainRope.aX[index1] = position.X;
            this.chainRope.aY[index1] = position.Y;
            this.chainRope.aZ[index1] = position.Z;
            Vector3 vector3_1 = Vector3.Transform(-this.genCursor.rayDir, Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f));
            Vector3 vector3_2 = this.genCursor.rayDir * this.distCheck.Value + this.genCursor.rayPos;
            this.sc.ricochete[this.rr.Next(0, 3)].Play(this.sc.ev * 0.4f, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            this.sc.chain.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            for (int index2 = 0; index2 < 80; ++index2)
            {
              Vector3 vector3_3 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
              this.sparks2.AddParticle(vector3_2 + vector3_3 * (float) this.rr.Next(1, 8), (vector3_1 + vector3_3) * (float) this.rr.Next(50, 1150) / 10f);
            }
          }
        }
      }
      this.chain2.tempindex = 0;
      for (int index3 = 0; index3 < this.chain2.maxCapacity; ++index3)
      {
        this.chain2.stream[index3].Trans = this.chainRope2.tranforms[index3];
        this.chain2.displayList[index3] = this.chain2.stream[index3];
        ++this.chain2.tempindex;
        if (this.myPlayer.gunFired && !flag && this.myPlayer.gunChoice != 14)
        {
          this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, new Vector3(this.chainRope2.pX[index3], this.chainRope2.pY[index3], this.chainRope2.pZ[index3]), 10f);
          if (this.distCheck.HasValue)
          {
            Vector3 position = this.genCursor.rayDir * (float) this.rr.Next(10, 20);
            position = Vector3.Transform(position, Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f));
            flag = true;
            this.chainRope2.aX[index3] = position.X;
            this.chainRope2.aY[index3] = position.Y;
            this.chainRope2.aZ[index3] = position.Z;
            Vector3 vector3_4 = Vector3.Transform(-this.genCursor.rayDir, Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f));
            Vector3 vector3_5 = this.genCursor.rayDir * this.distCheck.Value + this.genCursor.rayPos;
            this.sc.ricochete[this.rr.Next(0, 3)].Play(this.sc.ev * 0.4f, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            this.sc.chain.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            for (int index4 = 0; index4 < 80; ++index4)
            {
              Vector3 vector3_6 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
              this.sparks2.AddParticle(vector3_5 + vector3_6 * (float) this.rr.Next(1, 8), (vector3_4 + vector3_6) * (float) this.rr.Next(50, 1150) / 10f);
            }
          }
        }
      }
      return flag;
    }

    private bool updateChain_shotbyRemote(int ii)
    {
      if (this.remPlayer[ii].r.now.gunfired <= 0)
        return false;
      bool flag = false;
      this.chain.tempindex = 0;
      for (int index1 = 0; index1 < this.chain.maxCapacity; ++index1)
      {
        if (this.remPlayer[ii].r.now.gunfired > 0 && !flag)
        {
          this.distCheck = this.genCursor.hitSphere2(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, new Vector3(this.chainRope.pX[index1], this.chainRope.pY[index1], this.chainRope.pZ[index1]), 10f);
          if (this.distCheck.HasValue)
          {
            Vector3 vector3_1 = Vector3.Transform(this.genCursor.rayDir * (float) this.rr.Next(10, 20), Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f));
            this.chainRope.aX[index1] = vector3_1.X;
            this.chainRope.aY[index1] = vector3_1.Y;
            this.chainRope.aZ[index1] = vector3_1.Z;
            Vector3 vector3_2 = Vector3.Transform(-this.genCursor.rayDir, Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f));
            Vector3 vector3_3 = this.genCursor.rayDir * this.distCheck.Value + this.genCursor.rayPos;
            this.sc.ricochete[this.rr.Next(0, 3)].Play(this.sc.ev * 0.6f * this.remPlayer[ii].r.vol, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            this.sc.chain.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            for (int index2 = 0; index2 < 80; ++index2)
            {
              Vector3 vector3_4 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
              this.sparks2.AddParticle(vector3_3 + vector3_4 * (float) this.rr.Next(1, 8), (vector3_2 + vector3_4) * (float) this.rr.Next(50, 1150) / 10f);
            }
            flag = true;
            break;
          }
        }
      }
      this.chain2.tempindex = 0;
      for (int index3 = 0; index3 < this.chain2.maxCapacity; ++index3)
      {
        if (this.remPlayer[ii].r.now.gunfired > 0 && !flag)
        {
          this.distCheck = this.genCursor.hitSphere2(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, new Vector3(this.chainRope2.pX[index3], this.chainRope2.pY[index3], this.chainRope2.pZ[index3]), 10f);
          if (this.distCheck.HasValue)
          {
            Vector3 vector3_5 = Vector3.Transform(this.genCursor.rayDir * (float) this.rr.Next(10, 20), Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f));
            this.chainRope2.aX[index3] = vector3_5.X;
            this.chainRope2.aY[index3] = vector3_5.Y;
            this.chainRope2.aZ[index3] = vector3_5.Z;
            Vector3 vector3_6 = Vector3.Transform(-this.genCursor.rayDir, Matrix.CreateRotationY((float) this.rr.Next(-800, 800) / 100f));
            Vector3 vector3_7 = this.genCursor.rayDir * this.distCheck.Value + this.genCursor.rayPos;
            this.sc.ricochete[this.rr.Next(0, 3)].Play(this.sc.ev * 0.4f * this.remPlayer[ii].r.vol, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            this.sc.chain.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
            for (int index4 = 0; index4 < 80; ++index4)
            {
              Vector3 vector3_8 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
              this.sparks2.AddParticle(vector3_7 + vector3_8 * (float) this.rr.Next(1, 8), (vector3_6 + vector3_8) * (float) this.rr.Next(50, 1150) / 10f);
            }
            flag = true;
            break;
          }
        }
      }
      return flag;
    }

    private bool insideBarn(Vector3 pos)
    {
      return (double) pos.Y <= 200.0 && (double) this.x1 < (double) pos.X && (double) pos.X < (double) this.x2 && (double) this.z1 < (double) pos.Z && (double) pos.Z < (double) this.z2;
    }

    public override void HandleInput(InputState input)
    {
      if (this.sc.deactivated || this.sc.rebuildTargets || this.leavingGame)
        return;
      if (input == null)
        throw new ArgumentNullException(nameof (input));
      if (this.ControllingPlayer.HasValue)
      {
        this.playerIndex = this.ControllingPlayer.Value;
        this.prevState = input.LastGamePadStates[(int) this.playerIndex];
        this.gamePad = input.CurrentGamePadStates[(int) this.playerIndex];
        if (!this.gamePad.IsConnected)
          return;
      }
      this.prevkeyState = input.lastKeyState;
      this.keyState = input.currentKeyState;
      this.prevMouse = this.mouseState;
      this.mouseState = Mouse.GetState();
      if ((int) this.sc.myTimer % 120 == 0)
        this.sc.centerWindow();
      Mouse.SetPosition((int) this.sc.winCorner.X, (int) this.sc.winCorner.Y);
      if (!this.delayinput)
        return;
      this.prevMouse = this.mouseState;
      this.prevkeyState = this.keyState;
      this.delayinput = false;
    }

    public bool KMdown(Microsoft.Xna.Framework.Input.Keys k)
    {
      bool flag;
      switch (k)
      {
        case Microsoft.Xna.Framework.Input.Keys.Print:
          flag = this.mouseState.XButton1 == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          break;
        case Microsoft.Xna.Framework.Input.Keys.PrintScreen:
          flag = this.mouseState.XButton2 == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeMute:
          flag = this.mouseState.MiddleButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeDown:
          flag = this.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeUp:
          flag = this.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          break;
        default:
          flag = this.keyState.IsKeyDown(k);
          break;
      }
      return flag;
    }

    public bool method_1(Microsoft.Xna.Framework.Input.Keys k)
    {
      bool flag;
      switch (k)
      {
        case Microsoft.Xna.Framework.Input.Keys.Print:
          flag = this.prevMouse.XButton1 == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.PrintScreen:
          flag = this.prevMouse.XButton2 == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeMute:
          flag = this.prevMouse.MiddleButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeDown:
          flag = this.prevMouse.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeUp:
          flag = this.prevMouse.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        default:
          flag = this.prevkeyState.IsKeyUp(k);
          break;
      }
      return flag;
    }

    public bool KMtoggle(Microsoft.Xna.Framework.Input.Keys k)
    {
      bool flag;
      switch (k)
      {
        case Microsoft.Xna.Framework.Input.Keys.Print:
          flag = this.mouseState.XButton1 == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevMouse.XButton1 == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.PrintScreen:
          flag = this.mouseState.XButton2 == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevMouse.XButton2 == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeMute:
          flag = this.mouseState.MiddleButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevMouse.MiddleButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeDown:
          flag = this.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevMouse.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        case Microsoft.Xna.Framework.Input.Keys.VolumeUp:
          flag = this.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevMouse.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Released;
          break;
        default:
          flag = this.keyState.IsKeyDown(k) && this.prevkeyState.IsKeyUp(k);
          break;
      }
      return flag;
    }

    public void camTracking()
    {
      if (this.myPlayer.autoCamOn && this.alternateCam > 0)
      {
        if (this.alternateCam == 2)
        {
          if (this.playerfollowIndex != -1 && this.remPlayer.Count > 0)
          {
            if (this.remPlayer[this.playerfollowIndex].id == this.mysteamID)
            {
              ++this.playerfollowIndex;
              if (this.playerfollowIndex > this.remPlayer.Count - 1)
                this.playerfollowIndex = 0;
            }
            this.playerfollowIndex = (int) MathHelper.Clamp((float) this.playerfollowIndex, 0.0f, (float) (this.remPlayer.Count - 1));
            int playerfollowIndex = this.playerfollowIndex;
            this.remPlayer[playerfollowIndex].r.vol = 1f;
            this.autoCamHeight = MathHelper.Clamp(this.autoCamHeight, -4.4f, -3f);
            this.autoCamlook = Vector3.Transform(new Vector3(0.0f, 30f, 0.0f), this.remPlayer[playerfollowIndex].r.skinTransforms[1]);
            float num = -this.remPlayer[playerfollowIndex].r.displayState.npcRotation + this.autoCamrotate;
            this.autoCampos.X = (float) (-Math.Cos((double) this.autoCamHeight) * Math.Sin((double) num) * 120.0) + this.autoCamlook.X;
            this.autoCampos.Z = (float) (-Math.Cos((double) this.autoCamHeight) * -Math.Cos((double) num) * 120.0) + this.autoCamlook.Z;
            this.autoCampos.Y = (float) Math.Sin((double) this.autoCamHeight) * 120f + this.autoCamlook.Y;
            if ((double) this.autoCampos.X > 150.0 && (double) this.autoCampos.X < 5950.0 || (double) this.autoCampos.Z < 5950.0 && (double) this.autoCampos.Z > 150.0)
            {
              float height = 10f;
              if (!this.myPlayer.insideBarn(this.remPlayer[playerfollowIndex].r.displayState.npcPosition))
                this.GetHeightFast(ref this.farmheights, this.autoCampos, ref height);
              if (this.tunneladd && this.inFarm == 2)
                height = this.remPlayer[playerfollowIndex].r.displayState.npcPosition.Y;
              if ((double) this.autoCampos.Y < (double) height + 15.0)
                this.autoCampos.Y = height + 15f;
            }
          }
          else
            this.alternateCam = 3;
        }
        if (this.alternateCam == 3)
        {
          if (Cutty4.cuttyCount > 0)
          {
            if (this.bossindex > Cutty4.cuttyCount - 1)
              this.bossindex = 0;
            if (this.bossindex < 0)
              this.bossindex = Cutty4.cuttyCount - 1;
            this.camradian = (float) (-(double) this.cuttyBoss[this.bossindex].cuttyRot - 6.28000020980835);
            this.camheight = MathHelper.Clamp(this.camheight, 1.7f, 4.5f);
            this.autoCampos.Y = this.cuttyBoss[this.bossindex].cuttyPos.Y + this.cuttyBoss[this.bossindex].cuttyScale * 280f;
            this.autoCampos.X = this.cuttyBoss[this.bossindex].cuttyPos.X;
            this.autoCampos.Z = this.cuttyBoss[this.bossindex].cuttyPos.Z;
            this.autoCamlook.X = (float) (-Math.Cos((double) this.camheight) * Math.Sin((double) this.camradian) * -50.0) + this.autoCampos.X;
            this.autoCamlook.Z = (float) (-Math.Cos((double) this.camheight) * -Math.Cos((double) this.camradian) * -50.0) + this.autoCampos.Z;
            this.autoCamlook.Y = (float) Math.Sin((double) this.camheight) * -50f + this.autoCampos.Y;
          }
          else
            this.alternateCam = 4;
        }
        if (this.alternateCam == 4 && this.boar.dupe.Count > 0 && this.lastBoarAlive >= 0 && this.ridingboar != -1)
        {
          this.camradian = (float) (-(double) this.boar.dupe[this.ridingboar].myRot - 6.28000020980835);
          this.camheight = MathHelper.Clamp(this.camheight, 1.7f, 4.5f);
          this.autoCampos.Y = this.boar.dupe[this.ridingboar].mypos.Y + this.boar.dupe[this.ridingboar].scale * 280f;
          this.autoCampos.X = this.boar.dupe[this.ridingboar].mypos.X;
          this.autoCampos.Z = this.boar.dupe[this.ridingboar].mypos.Z;
          this.autoCamlook.X = (float) (-Math.Cos((double) this.camheight) * Math.Sin((double) this.camradian) * -50.0) + this.autoCampos.X;
          this.autoCamlook.Z = (float) (-Math.Cos((double) this.camheight) * -Math.Cos((double) this.camradian) * -50.0) + this.autoCampos.Z;
          this.autoCamlook.Y = (float) Math.Sin((double) this.camheight) * -50f + this.autoCampos.Y;
        }
      }
      if (this.myPlayer.closeCam && !this.editCam)
      {
        this.campos = this.myPlayer.gunpos;
        this.camlookpos = this.myPlayer.gunlook;
        if (this.tunneladd && this.inFarm == 2)
        {
          this.myPlayer.hulkEffects = 0;
          this.myPlayer.milkEffects = 0;
        }
      }
      else
      {
        float y = this.myPlayer.displayState.npcPosition.Y;
        this.campos = Vector3.Transform(this.vector3_0, Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation - 1.57f)) + this.myPlayer.displayState.npcPosition;
        this.camlookpos = Vector3.Transform(this.camlookpos3rd, Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation - 1.57f)) + this.myPlayer.displayState.npcPosition;
        this.campos.Y = this.vector3_0.Y + y;
        this.camlookpos.Y = this.camlookpos3rd.Y + y;
        if ((double) this.campos.Y < 2.0 || (double) this.campos.X < 850.0 || (double) this.campos.X > 5150.0 || (double) this.campos.Z > 5150.0 || (double) this.campos.Z < 850.0)
        {
          this.GetHeightFast(ref this.farmheights, this.campos, ref y);
          if ((double) this.campos.Y < (double) y + 2.0)
          {
            this.camlookpos.Y += y + 2f - this.campos.Y;
            this.campos.Y = y + 2f;
          }
        }
        if (this.tunneladd && this.inFarm == 2)
        {
          this.editCam = false;
          if ((double) this.myPlayer.now.health > 0.0)
            this.myPlayer.closeCam = true;
          this.campos = this.myPlayer.gunpos;
          this.camlookpos = this.myPlayer.gunlook;
        }
      }
      this.lensOffset = 0.0f;
      if ((double) this.myPlayer.recoilTimer > 0.0 && this.myPlayer.closeCam)
      {
        if (this.myPlayer.gunChoice < 6)
        {
          if (this.myPlayer.isDown)
          {
            this.camlookpos.Y += this.myPlayer.recoilTimer * 0.5f;
            this.lensOffset = (float) (-(double) this.myPlayer.recoilTimer * 1.5);
          }
          else
          {
            this.camlookpos.Y += this.myPlayer.recoilTimer * 1.3f;
            this.lensOffset = (float) (-(double) this.myPlayer.recoilTimer * 0.5);
          }
        }
        else
          this.camlookpos.Y += this.myPlayer.recoilTimer * 0.3f;
      }
      if (this.myPlayer.closeCam)
      {
        this.mindistance = 2f;
        if (this.myPlayer.animClip == 12 || this.myPlayer.animClip == 14)
          this.mindistance = 1.5f;
        if (this.myPlayer.animClip == 13)
          this.mindistance = 5f;
        if ((double) this.myPlayer.now.health <= 0.0)
          this.mindistance = 1f;
      }
      else
        this.mindistance = 1f;
      if ((double) this.camshaker > 1.0)
      {
        float num = Math.Max(this.camshaker / 700f, 0.07f);
        this.camshake = new Vector3((float) this.rr.Next(-20, 20) * num, (float) this.rr.Next(-20, 20) * num, (float) this.rr.Next(-20, 20) * num);
        this.camlookpos += this.camshake;
        --this.camshaker;
      }
      this.camuppy = Vector3.Up;
      if (this.myPlayer.isDown && this.myPlayer.closeCam)
      {
        this.camuppy = new Vector3(this.myPlayer.oldpistolHand.Right.X, this.myPlayer.oldpistolHand.Right.Y + 0.3f, this.myPlayer.oldpistolHand.Right.Z);
        if (this.myPlayer.fallState == 4)
          this.camuppy = this.myPlayer.cambone.Up;
      }
      if (this.myPlayer.autoCamOn)
      {
        this.campos = Vector3.Hermite(this.campos, Vector3.Zero, this.autoCampos, Vector3.Zero, this.myPlayer.autoCamTimer);
        this.camlookpos = Vector3.Hermite(this.camlookpos, Vector3.Zero, this.autoCamlook, Vector3.Zero, this.myPlayer.autoCamTimer);
        this.camuppy = Vector3.Up;
      }
      if ((double) this.sc.introCamera > 0.0)
      {
        float position = MathHelper.Hermite(0.0f, 0.0f, 1f, 0.0f, 1f - MathHelper.Clamp(this.sc.introCamera / 600f, 0.0f, 1f));
        this.campos = new Vector3(this.camCurveX.Evaluate(position), this.camCurveY.Evaluate(position), this.camCurveZ.Evaluate(position));
        this.camlookpos = new Vector3(this.lookCurveX.Evaluate(position), this.lookCurveY.Evaluate(position), this.lookCurveZ.Evaluate(position));
        this.camuppy = Vector3.Up;
      }
      --this.maxdistTimer;
      this.maxdistance = 160000f;
      this.view = Matrix.CreateLookAt(this.campos, this.camlookpos, this.camuppy);
      this.proj = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(this.sc.mylens - this.lensOffset), 1.78f, this.mindistance, this.maxdistance);
      this.gunProj = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(this.sc.mylens), 1.78f, 3f, this.maxdistance);
      if (this.particlesLoaded)
      {
        this.electric.SetCamera(this.view, this.proj);
        this.sparks.SetCamera(this.view, this.proj);
        this.sparks2.SetCamera(this.view, this.proj);
        this.blood.SetCamera(this.view, this.proj);
        this.bloodg.SetCamera(this.view, this.proj);
        if (this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID))
              this.remPlayer[index].r.bloodrem.SetCamera(this.view, this.proj);
          }
        }
        this.bits.SetCamera(this.view, this.proj);
        this.debrisblood.SetCamera(this.view, this.proj);
        this.debrisFire.SetCamera(this.view, this.proj);
        this.humanblood.SetCamera(this.view, this.proj);
        this.headblood.SetCamera(this.view, this.proj);
      }
      this.farmerspit.SetCamera(this.view, this.proj);
      this.gunsmoke.SetCamera(this.view, this.proj);
      this.rocketsmoke.SetCamera(this.view, this.proj);
      if (!this.lampON)
        return;
      this.lampGlow.SetCamera(this.view, this.proj);
    }

    private void fenceRespond()
    {
      int val = this.timeFrame + this.leverTimer;
      if (this.leverLevel > 0 && this.leverTimer <= 0)
      {
        val = this.timeFrame + 350;
        this.sc.fence.Play(this.sc.ev, (float) this.rr.Next(-30, 30) / 100f, 0.0f);
        this.leverRamp = 0.0001f;
        this.leverTimer = 350;
        --this.leverLevel;
        if (this.leverLevel < 0)
          this.leverLevel = 0;
      }
      if (remotePlayer4.leverRespond <= 0 && this.remPlayer.Count > 1)
      {
        packetSender packetSender = new packetSender();
        packetSender.clean();
        packetSender.Write((byte) 62);
        packetSender.Write(val);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        packetSender.Write((ushort) 65000);
        byte[] array = packetSender.packet.ToArray();
        this.SendP2PPacket(ref array, EP2PSend.k_EP2PSendReliable);
      }
      remotePlayer4.leverRespond = 80;
    }

    public override void Update(
      GameTime gameTime,
      bool otherScreenHasFocus,
      bool coveredByOtherScreen)
    {
      if (this.ExitFlag)
        this.ExitNow();
      if (this.leavingGame)
        return;
      if (this.sc.rebuildTargets)
      {
        if (Princess4.cuttyCount > 0)
        {
          this.princess[0].addTargetBlood(this.sc.paintColor, 0, 0, 2, 2);
          this.princess[0].addCanvasBlood(this.sc.paintColorCanvas, 0.0f, 0.0f);
        }
        for (int index = 0; index < Cutty4.cuttyCount; ++index)
          this.cuttyBoss[index].addTargetBlood(5, 0, 0, 2, 2);
        this.localClean = 0.45f;
        this.localCleanOn = true;
        if (this.remPlayer.Count > 1)
        {
          this.buildLocalSkin();
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID))
            {
              this.buildCharSkin(index);
              this.remPlayer[index].r.remoteClean = 0.45f;
              this.remPlayer[index].r.remoteCleanOn = true;
            }
          }
        }
        this.sc.rebuildTargets = false;
      }
      if (this.loader)
      {
        this.loadNextDay(this.loaderFlag1, this.loaderFlag2);
        this.leavingGame = true;
      }
      else
      {
        if (this.addedPlayers.Count > 0)
        {
          for (int index = 0; index < this.addedPlayers.Count; ++index)
          {
            this.addPlayer(this.addedPlayers[index], this.thisLobbyID);
            this.addedPlayers.RemoveAt(index);
          }
        }
        base.Update(gameTime, otherScreenHasFocus, coveredByOtherScreen);
        if ((double) this.sc.introCamera <= 0.0 && this.memoTimer <= 0 && this.sc.gameState == 0)
        {
          if (!this.saveWarning && this.sc.keepShowingWarning)
          {
            this.saveWarning = true;
            int num = this.sc.currentDay - 1;
            if ((int) this.sc.maxDay() < num)
            {
              MessageBoxScreen2 screen = new MessageBoxScreen2("can't Save on skipped days\nyour best was Day " + ((int) this.sc.maxDay() + 1).ToString() + "\nremind you again later ?\n", 1);
              screen.Cancelled += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
              {
                this.sc.keepShowingWarning = false;
                this.delayinput = true;
              });
              screen.Accepted += (EventHandler<PlayerIndexEventArgs>) ((sender, e) => this.delayinput = true);
              this.sc.AddScreen((GameScreen) screen, new PlayerIndex?(this.playerIndex));
              this.sc.newtip.Play(this.sc.ev, (float) this.rr.Next(-30, -10) / 100f, 0.0f);
            }
          }
          if (!this.easyWarning && this.sc.weFailed >= 2)
          {
            this.easyWarning = true;
            if (this.sc.df > 0)
            {
              MessageBoxScreen2 screen = new MessageBoxScreen2("* This level may be too difficult.\nDo you want to make it easier?\n", 1);
              screen.Accepted += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
              {
                this.sc.df = 0;
                this.sc.weFailed = 0;
                this.delayinput = true;
              });
              screen.Cancelled += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
              {
                this.sc.weFailed = 0;
                this.delayinput = true;
              });
              this.sc.AddScreen((GameScreen) screen, new PlayerIndex?(this.playerIndex));
              this.sc.newtip.Play(this.sc.ev, (float) this.rr.Next(-30, -10) / 100f, 0.0f);
            }
          }
        }
        if ((double) this.sc.introCamera <= 0.0)
          ++this.preClock;
        if ((double) this.sc.myTimer % 60.0 == 0.0 && this.sc.gameState == 0 && this.sc.currentDay < this.sc.predayList.Length && this.preClock > 350 && this.sc.predayList[this.sc.currentDay].Count > 0)
        {
          string tip = this.sc.getTip(this.sc.predayList[this.sc.currentDay][0]);
          if (tip != "")
          {
            this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.predayList[this.sc.currentDay].RemoveAt(0);
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(tip);
            this.memoTimer = 320;
            this.memoIcon = 1;
            this.preClock = 0;
          }
        }
        if (((double) this.sc.myTimer % 60.0 == 0.0 || this.enemyDied) && this.sc.gameState > 0)
        {
          if (this.sc.currentDay < this.sc.dayList.Length)
          {
            if (this.sc.dayList[this.sc.currentDay].Count > 0)
            {
              string str = "";
              this.enemyDied = false;
              if (this.boar.alive > (ushort) 1 && this.tipCount == 0)
                str = this.sc.getTip(this.sc.dayList[this.sc.currentDay][0]);
              if (this.boar.alive == (ushort) 3 && this.tipCount == 1)
                str = this.sc.getTip(this.sc.dayList[this.sc.currentDay][0]);
              if (this.afterClock > 300)
                str = this.sc.getTip(this.sc.dayList[this.sc.currentDay][0]);
              if (str != "")
              {
                if (this.afterClock > 300)
                  this.afterClock = -200;
                ++this.tipCount;
                this.sc.dayList[this.sc.currentDay].RemoveAt(0);
                BloodnBacon4PT.memo.Length = 0;
                BloodnBacon4PT.memo.Append(str);
                this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
                this.memoTimer = 380;
                this.memoIcon = 1;
              }
            }
          }
          else if (this.sc.revengeDay > 0 && this.boar.alive > (ushort) 1 && this.tipCount == 0)
          {
            ++this.tipCount;
            string[] strArray = new string[5]
            {
              "Revenge-Day !!",
              "Today is Revenge-Day !!",
              "Revenge-Day means infinite Ammo",
              "insta-Kill on Revenge-Day !!",
              "Revenge-Day is today !!"
            };
            int index = this.rr.Next(0, strArray.Length);
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(strArray[index]);
            this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
            this.memoTimer = 350;
            this.memoIcon = 1;
          }
        }
        this.timeFrame = this.getTick(this.startGame) + this.tickOffset;
        ++this.sc.myTimer;
        if (this.sc.gameMusicPlaying && (double) this.sc.myTimer % 50.0 == 0.0 && (this.sc.corncobMusic.State == SoundState.Stopped || this.sc.corncobMusic.State == SoundState.Paused))
        {
          this.sc.corncobMusic.Play();
          this.sc.corncobMusic.Volume = this.sc.mv * this.victoryMusic;
        }
        this.UpdateNetworkSession(gameTime);
        if (this.leavingGame)
          return;
        if (this.barnTriangle && this.lampON)
          this.lampGlow.Update(gameTime);
        if (this.particlesLoaded)
        {
          this.sparks.Update(gameTime);
          this.sparks2.Update(gameTime);
          this.electric.Update(gameTime);
          this.blood.Update(gameTime);
          if (this.remPlayer.Count > 1)
          {
            for (int index = 0; index < this.remPlayer.Count; ++index)
            {
              if (!(this.remPlayer[index].id == this.mysteamID))
                this.remPlayer[index].r.bloodrem.Update(gameTime);
            }
          }
          this.bloodg.Update(gameTime);
          this.bits.Update(gameTime);
          this.humanblood.Update(gameTime);
          this.debrisblood.Update(gameTime);
          this.debrisFire.Update(gameTime);
          this.headblood.Update(gameTime);
        }
        this.gunsmoke.Update(gameTime);
        this.rocketsmoke.Update(gameTime);
        this.farmerspit.Update(gameTime);
        this.calcPaintTargets();
        this.camTracking();
      }
    }

    private void UpdateNetworkSession(GameTime gameTime)
    {
      if (this.GrinderOn)
      {
        float num = Vector2.DistanceSquared(new Vector2(this.campos.X, this.campos.Z), new Vector2((float) ((double) this.grid / 2.0 - 810.0), (float) ((double) this.grid / 2.0 - 1666.0)));
        this.grinderVol = MathHelper.Clamp((float) (1.0 - (double) num / 5290000.0), 0.4f, 0.9f);
        this.sc.grinderMotor.ramp(this.sc.ev * this.grinderVol * this.grinderVol, this.grinderSpinUp * 10f);
        if ((double) num < 360000.0)
        {
          this.grinderVibro = 1;
          this.grinderVibroAmt = (float) ((double) this.grinderSpinUp * 10.0 * (1000.0 * ((double) num / 360000.0) + 100.0));
        }
        this.spinner += this.grinderSpinUp;
        if ((double) this.grinderTimer > (double) (this.grinderRuntime - 200))
          this.grinderSpinUp += 0.0005f;
        if ((double) this.grinderTimer < 200.0)
          this.grinderSpinUp -= 0.0005f;
        this.grinderSpinUp = MathHelper.Clamp(this.grinderSpinUp, 0.0f, 0.1f);
        --this.grinderTimer;
        if ((double) this.grinderTimer <= 0.0)
        {
          this.GrinderOn = false;
          this.sc.grinderMotor.sound[0].Pause();
        }
      }
      if ((double) this.sc.myTimer % 10.0 == 0.0)
        this.updatebloodLevel();
      skullkins.pumpkindistance = 10000f;
      this.HandleLocal();
      if (this.boarDropTimer.Count > 0 && this.boarDropTimer[0] <= this.timeFrame)
      {
        this.dropBoar(ref this.boar, this.boarSeed[0]);
        this.boarDropTimer.Clear();
        this.boarSeed.Clear();
      }
      if (this.myPlayer.triggerEvent > 0)
      {
        if (this.myPlayer.triggerEvent == 1)
        {
          if (!remotePlayer4.pillTaken && this.wearebeingliftedIndex != 0UL && !this.sc.strangers.Contains(this.wearebeingliftedIndex))
          {
            this.sc.strangers.Add(this.wearebeingliftedIndex);
            ++this.sc.drwhoCount;
            this.wearebeingliftedIndex = 0UL;
          }
          remotePlayer4.pillTaken = false;
          this.myPlayer.isDown = false;
          this.sc.ring.Play(this.sc.ev * 0.5f, 0.1f, 0.0f);
          this.myPlayer.bloodExists = false;
          this.hitVel = Vector2.Zero;
          this.attackWait = 50;
          this.myPlayer.now.health = (float) this.rr.Next(180, 195);
        }
        else if (this.myPlayer.triggerEvent == 2)
          this.sc.ruffles.Play(this.sc.ev * 0.2f, 0.0f, 0.0f);
        else if (this.myPlayer.triggerEvent == 3)
        {
          this.sc.falldown.Play(this.sc.ev * 0.5f, 0.0f, 0.0f);
          if (!this.myPlayer.bloodExists)
          {
            Vector3 npcPosition1 = this.myPlayer.displayState.npcPosition;
            Vector3 npcPosition2 = this.myPlayer.displayState.npcPosition;
            npcPosition2.Y += 200f;
            this.UpdatePicking(this.proj, Matrix.CreateLookAt(npcPosition2, new Vector3(npcPosition2.X + (float) this.rr.Next(-70, 70) / 20f, npcPosition2.Y - 900f, npcPosition2.Z + (float) this.rr.Next(-70, 70) / 20f), Vector3.Right), ref this.genCursor, false);
            Vector3 vector3_1 = this.genCursor.pickedTriangle[0];
            Vector3 vector3_2 = this.genCursor.pickedTriangle[1];
            Vector3 vector3_3 = this.genCursor.pickedTriangle[2];
            Vector3 vector3_4 = -Vector3.Normalize(Vector3.Cross(vector3_1 - vector3_2, vector3_1 - vector3_3));
            Vector3 vector2 = new Vector3((float) this.rr.Next(-800, 800) / 1000f, (float) this.rr.Next(-990, 990) / 1000f, (float) this.rr.Next(-800, 800) / 1000f);
            Vector3 result1 = vector3_4;
            Vector3.Normalize(ref result1, out result1);
            Vector3 result2 = Vector3.Cross(result1, vector2);
            Vector3.Normalize(ref result2, out result2);
            Vector3 vector3_5 = Vector3.Cross(result2, result1);
            Matrix matrix = new Matrix(result1.X, result1.Y, result1.Z, 0.0f, vector3_5.X, vector3_5.Y, vector3_5.Z, 0.0f, result2.X, result2.Y, result2.Z, 0.0f, 0.0f, 0.0f, 0.0f, 1f);
            if (this.myPlayer.insideBarn(npcPosition1))
            {
              npcPosition1.Y = 1.8f;
              matrix = Matrix.CreateRotationX((float) this.rr.Next(-800, 800) / 100f) * Matrix.CreateRotationZ(1.57f);
            }
            else
            {
              this.GetHeightFast(ref this.farmheights, npcPosition1, ref npcPosition1.Y);
              npcPosition1.Y += 1.2f;
            }
            this.myPlayer.bloodPos = matrix * Matrix.CreateTranslation(npcPosition1);
            if (this.tunneladd && this.inFarm == 2)
              this.myPlayer.bloodPos = Matrix.CreateRotationX((float) this.rr.Next(-800, 800) / 100f) * Matrix.CreateRotationZ(1.57f) * Matrix.CreateTranslation(npcPosition1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(this.myPlayer.bloodPool) * this.myPlayer.bloodPos;
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4 = this.farm.stainR[this.rr.Next(15, 17)];
            this.hitstreamTemp.Coord = new Vector4(this.bulletMapWidth / vector4.Z, vector4.X / this.bulletMapWidth, this.bulletMapHite / vector4.W, vector4.Y / this.bulletMapHite);
            if (this.farm.stainMax == this.farm.stainCapacity - 1)
            {
              this.farm.stainTrans[this.farm.stainMax - 1] = this.hitstreamTemp;
              this.myPlayer.bloodIndex = this.farm.stainMax - 1;
            }
            else
            {
              this.myPlayer.bloodIndex = this.farm.stainIndex;
              this.farm.stainTrans[this.farm.stainIndex] = this.hitstreamTemp;
              ++this.farm.stainIndex;
              if (this.farm.stainIndex > this.farm.stainCapacity - 1)
                this.farm.stainIndex = 0;
              ++this.farm.stainMax;
              if (this.farm.stainMax > this.farm.stainCapacity - 1)
                this.farm.stainMax = this.farm.stainCapacity - 1;
            }
            this.myPlayer.bloodPool = 30f;
          }
          this.myPlayer.bloodExists = true;
        }
        else if (this.myPlayer.triggerEvent == 4)
          this.sc.dying.Play(this.sc.ev * 0.6f, 0.0f, 0.0f);
        this.myPlayer.triggerEvent = 0;
      }
      if (this.myPlayer.bloodExists)
      {
        float num = this.myPlayer.now.health % 100f;
        if ((double) this.myPlayer.now.health == 100.0)
          num = this.myPlayer.now.tempHealth % 100f;
        if ((double) this.myPlayer.bloodPool <= 30.0 + (1.0 - (double) num / 100.0) * 28.0 || this.myPlayer.fallState == 12)
          this.myPlayer.bloodPool += 0.03f;
        if (this.myPlayer.fallState == 12)
          this.myPlayer.bloodPool += 0.03f;
        if ((double) this.myPlayer.bloodPool > 52.0 && (double) this.myPlayer.bloodPool < 52.5 && this.myPlayer.bloodCoil <= 0)
        {
          this.myPlayer.bloodCoil = 150;
          this.vibroTimer = 160;
          this.vibroTimerAmt = 100f;
        }
        if ((double) this.myPlayer.bloodPool > 44.0 && (double) this.myPlayer.bloodPool < 44.5 && this.myPlayer.bloodCoil <= 0)
        {
          this.myPlayer.bloodCoil = 170;
          this.vibroTimer = 160;
          this.vibroTimerAmt = 100f;
        }
        this.farm.stainTrans[this.myPlayer.bloodIndex].Trans = Matrix.CreateScale(this.myPlayer.bloodPool) * this.myPlayer.bloodPos;
        if ((double) this.myPlayer.bloodPool >= 65.0 && this.myPlayer.fallState == 12)
        {
          this.myPlayer.bloodCoil = 150;
          this.vibroTimer = 160;
          this.vibroTimerAmt = 100f;
          this.memoTimer = 320;
          BloodnBacon4PT.memo.Length = 0;
          this.memoIcon = 3;
          BloodnBacon4PT.memo.Append(" you died...");
          if (!this.sc.walletHint)
            this.sc.walletHintShow = true;
          this.deathMusic.Play(this.sc.ev, 0.0f, 0.0f);
          this.myPlayer.bloodExists = false;
        }
      }
      if (this.myPlayer.fallState == 12 && this.rr.Next(1, 5000) < 3)
        this.myPlayer.bloodCoil = 150;
      if (this.barnDoorState != 0)
      {
        if (this.barnDoorState == 1)
        {
          if ((double) this.barnDoorslide.Z == 0.0)
            this.sc.barndoor.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          this.barnDoorslide.Z += 2f;
          this.barnDoorOpen = true;
          if ((double) this.barnDoorslide.Z >= 120.0)
          {
            this.barnDoorslide.Z = 120f;
            this.barnDoorState = 0;
          }
        }
        else
        {
          if ((double) this.barnDoorslide.Z == 120.0)
            this.sc.barndoor.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          this.barnDoorslide.Z -= 2f;
          this.barnDoorOpen = false;
          if ((double) this.barnDoorslide.Z <= 0.0)
          {
            this.barnDoorslide.Z = 0.0f;
            this.barnDoorState = 0;
            if (this.sc.gameState == 0 && this.myPlayer.insideBarn(this.myPlayer.displayState.npcPosition))
              this.sc.trophy.win(this.sc.trophy.coward);
          }
        }
      }
      if (this.sc.gameState == 0 && !this.barnDoorLocked && !this.myPlayer.insideBarn(this.myPlayer.displayState.npcPosition))
      {
        bool flag = false;
        if (this.remPlayer.Count > 1)
        {
          flag = true;
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID) && this.myPlayer.insideBarn(this.remPlayer[index].r.displayState.npcPosition))
            {
              flag = false;
              break;
            }
          }
        }
        if (flag || this.playalone && this.remPlayer.Count <= 1 && this.sc.developer)
        {
          if (this.barnDoorOpen)
          {
            if (this.sc.host)
              this.barnDoorState = -1;
            else
              this.myPlayer.now.doorOpen = (byte) 1;
          }
          if (this.sc.host && this.sc.lobby.createdLobby.Count > 0)
            SteamMatchmaking.SetLobbyData(this.sc.lobby.createdLobby[0], "state", "20");
          this.barnDoorLocked = true;
          this.weAreOutdoors = true;
          if (Cutty4.cuttyCount > 0)
            Cutty4.allplayersReady = true;
          if (Princess4.cuttyCount > 0)
            Princess4.allplayersReady = true;
        }
      }
      if (this.barnTriangle && (double) this.barnDoorslide.Z <= 0.0 && this.weAreOutdoors && this.sc.gameState != 2)
      {
        this.barnTriangle = false;
        this.cursor.delTriangles();
        this.oppCursor.delTriangles();
        this.genCursor.delTriangles();
      }
      if (this.sc.gameState == 2)
      {
        if ((double) this.sc.myTimer % 120.0 == 0.0)
        {
          if (this.sc.drwhoCount > 0)
          {
            --this.sc.drwhoCount;
            this.sc.trophy.win(this.sc.trophy.drwho);
          }
          if (!this.sc.friended)
          {
            if (this.sc.host)
            {
              for (int index = 0; index < this.remPlayer.Count; ++index)
              {
                if (!(this.remPlayer[index].id == this.mysteamID) && !this.sc.kickers.Contains(this.remPlayer[index].id.m_SteamID))
                {
                  this.sc.trophy.win(this.sc.trophy.unfriended);
                  this.sc.kickers.Add(this.remPlayer[index].id.m_SteamID);
                  break;
                }
              }
            }
            else if (!this.sc.kickers.Contains(this.HostOwner.m_SteamID))
            {
              this.sc.trophy.win(this.sc.trophy.unfriended);
              this.sc.kickers.Add(this.HostOwner.m_SteamID);
            }
            this.sc.friended = true;
          }
        }
        if (!this.barnTriangle)
        {
          if (Princess4.cuttyCount == 0)
            this.victoryMusic = 1f;
          this.myPlayer.stats_countdown = 600;
          if (Princess4.cuttyCount > 0)
            this.myPlayer.stats_countdown = 2500;
          this.myPlayer.stats_show = false;
          this.myPlayer.stats_record = false;
          this.myPlayer.stats_send = true;
          this.handleBarnEvents();
          bool flag = false;
          this.sc.weaponDayEnd(ref this.sc.weapon_Unlock);
          if (this.sc.weaponEndofDay != this.sc.previousWeapons)
            flag = true;
          if (flag && this.sc.currentDay > 1)
          {
            this.memoTimer = 340;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 5;
            BloodnBacon4PT.memo.Append(" new Weapon in the barn !!");
            this.sc.fanfare.Play(this.sc.ev, 0.0f, 0.0f);
          }
          else
          {
            this.memoTimer = 340;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 2;
            if (!this.tunneladd)
            {
              BloodnBacon4PT.memo.Append("go Talk to the Farmer !!");
            }
            else
            {
              this.memoTimer = 400;
              this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
              List<string> stringList = new List<string>()
              {
                "explore tunnels or talk to farmer",
                "enter tunnels or talk to farmer",
                "see tunnels or talk to farmer",
                "risk tunnels or talk to farmer"
              };
              string str = stringList[this.rr.Next(0, stringList.Count)];
              BloodnBacon4PT.memo.Append(str);
              this.showTunnelArrow = true;
            }
          }
          if (this.sc.currentDay == 30 && this.hardened)
            this.sc.trophy.win(this.sc.trophy.hardened);
          if (this.sc.currentDay == 100 || this.sc.currentDay == 101)
          {
            this.sc.FarmerUnlocked = true;
            this.sc.trophy.win(this.sc.trophy.youarethechampion);
          }
          if (this.sc.currentDay == 10)
            this.sc.trophy.win(this.sc.trophy.needygreedy);
          if (this.sc.currentDay == 20)
            this.sc.trophy.win(this.sc.trophy.royaltykiller);
        }
        else
        {
          if ((double) this.victoryMusic > 0.0)
          {
            try
            {
              this.victoryMusic -= 1f / 500f;
              if ((double) this.victoryMusic <= 0.0)
                this.victoryMusic = 0.0f;
              this.sc.corncobMusic.Volume = this.victoryMusic * this.sc.mv;
              if (this.sc.dayTime == "pm")
              {
                if (this.sc.crickets.State != SoundState.Playing)
                  this.sc.crickets.Play();
                if (this.sc.crickets.State == SoundState.Playing)
                  this.sc.crickets.Volume = MathHelper.Clamp(1f - this.victoryMusic, 0.0f, 1f) * this.sc.mv;
              }
            }
            catch
            {
            }
          }
          ++this.afterClock;
        }
      }
      if (this.barnTriangle && this.myPlayer.inBarn)
        this.checkWeaponGlow();
      if (((double) this.sc.myTimer + 2.0) % 10.0 == 0.0)
      {
        if (this.tunneladd && this.inFarm == 2)
        {
          this.fogofwar();
          string str1 = this.sc.goldKeys.updatetunnel(this.myPlayer.displayState.npcPosition, this.campos, this.alternateCam, this.myPlayer.displayState.npcTilt, this.myPlayer.displayState.npcRotation);
          if (str1 == this.sc.goldKeys.kb)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.gun_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Weapon Scar-H Unlocked");
            this.sc.fanfare.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.scarh_Unlock = true;
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          if (str1 == this.sc.goldKeys.ke)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.key_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Exit Key Found");
            this.haveCryptKey = true;
            this.sc.exitkey[this.mazeid] = 1;
          }
          if (str1 == this.sc.goldKeys.km)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.map_Rect;
            this.memoTimer = 360;
            BloodnBacon4PT.memo.Length = 0;
            string str2 = this.sc.tab_key.ToString();
            if (!this.sc.usingMouse)
              str2 = "LeftBumper";
            BloodnBacon4PT.memo.Append("  Minimap Found : " + str2);
            this.haveCryptMap = true;
            this.sc.map[this.mazeid] = 1;
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          if (str1 == this.sc.goldKeys.kg)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.goggle_Rect;
            this.memoTimer = 360;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("  Geiger Goggles");
            this.sc.goggles = 1;
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          if (str1 == this.sc.goldKeys.kh1)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.peruvian_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Treasure Found : Peruvian-Pom");
            this.sc.hats[13] = 1;
          }
          if (str1 == this.sc.goldKeys.kh2)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.tweed_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Treasure Found : Irish-Tweed");
            this.sc.hats[14] = 1;
          }
          if (str1 == this.sc.goldKeys.kh3)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.bowler_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Treasure Found : Bowler Hat");
            this.sc.hats[15] = 1;
          }
          if (str1 == this.sc.goldKeys.kc1)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.cog_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.cog1[this.mazeid] = 1;
            this.haveCogs = true;
            this.setCode(1);
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            this.sc.cogCount = this.sc.cog1[this.mazeid] + this.sc.cog2[this.mazeid] + this.sc.cog3[this.mazeid];
            this.sc.goldKeys.keyCog = this.sc.cogCount <= 0;
            BloodnBacon4PT.memo.Append(" Door Code Found #" + this.sc.code1[this.mazeid, 0].ToString() + this.sc.code1[this.mazeid, 1].ToString() + this.sc.code1[this.mazeid, 2].ToString());
          }
          if (str1 == this.sc.goldKeys.kc2)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.cog_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.cog2[this.mazeid] = 1;
            this.haveCogs = true;
            this.setCode(2);
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            this.sc.cogCount = this.sc.cog1[this.mazeid] + this.sc.cog2[this.mazeid] + this.sc.cog3[this.mazeid];
            this.sc.goldKeys.keyCog = this.sc.cogCount <= 0;
            BloodnBacon4PT.memo.Append(" Broken Gear #" + this.sc.code2[this.mazeid, 0].ToString() + this.sc.code2[this.mazeid, 1].ToString() + this.sc.code2[this.mazeid, 2].ToString());
          }
          if (str1 == this.sc.goldKeys.kc3)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.cog_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.cog3[this.mazeid] = 1;
            this.haveCogs = true;
            this.setCode(3);
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            this.sc.cogCount = this.sc.cog1[this.mazeid] + this.sc.cog2[this.mazeid] + this.sc.cog3[this.mazeid];
            this.sc.goldKeys.keyCog = this.sc.cogCount <= 0;
            BloodnBacon4PT.memo.Append(" Metal Scrap #" + this.sc.code3[this.mazeid, 0].ToString() + this.sc.code3[this.mazeid, 1].ToString() + this.sc.code3[this.mazeid, 2].ToString());
          }
          if (str1 == this.sc.goldKeys.ka1)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.ammo_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Armor Piercing Ammo");
            this.sc.ammobox1[this.mazeid] = 1;
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            if (this.explosiveCount < 0)
              this.explosiveCount = 0;
            this.explosiveCount += 25;
            if (this.explosiveCount > 300)
              this.explosiveCount = 300;
            if (this.explosiveCount > this.myPlayer.ammo[this.myPlayer.secondaryChoice])
              this.explosiveCount = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
          }
          if (str1 == this.sc.goldKeys.ka2)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.ammo_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.ammobox2[this.mazeid] = 1;
            BloodnBacon4PT.memo.Append(" Armor Piercing Ammo");
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            if (this.explosiveCount < 0)
              this.explosiveCount = 0;
            this.explosiveCount += 25;
            if (this.explosiveCount > 300)
              this.explosiveCount = 300;
            if (this.explosiveCount > this.myPlayer.ammo[this.myPlayer.secondaryChoice])
              this.explosiveCount = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
          }
          if (str1 == this.sc.goldKeys.ka3)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.ammo_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.ammobox3[this.mazeid] = 1;
            BloodnBacon4PT.memo.Append(" Armor Piercing Ammo");
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
            if (this.explosiveCount < 0)
              this.explosiveCount = 0;
            this.explosiveCount += 25;
            if (this.explosiveCount > 300)
              this.explosiveCount = 300;
            if (this.explosiveCount > this.myPlayer.ammo[this.myPlayer.secondaryChoice])
              this.explosiveCount = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
          }
          if (str1 == this.sc.goldKeys.kf1)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.flash1_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.flashlight1 = 1;
            BloodnBacon4PT.memo.Append(" New Flashlight Found");
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          if (str1 == this.sc.goldKeys.kf2)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.flash2_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.flashlight2 = 1;
            BloodnBacon4PT.memo.Append(" New Flashlight Found");
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          if (str1 == this.sc.goldKeys.kf3)
          {
            this.memoIcon = 77;
            this.gen_Rect = this.flash3_Rect;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            this.sc.flashlight3 = 1;
            BloodnBacon4PT.memo.Append(" New Flashlight Found");
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          this.atFlashlight1 = false;
          if (str1 == "4")
            this.atFlashlight1 = true;
          this.atFlashlight2 = false;
          if (str1 == "5")
            this.atFlashlight2 = true;
          this.atFlashlight3 = false;
          if (str1 == "6")
            this.atFlashlight3 = true;
          this.atAmmobox = false;
          if (str1 == "7")
            this.atAmmobox = true;
          this.atGoggles = false;
          if (str1 == "8")
            this.atGoggles = true;
          this.atCogs = false;
          if (str1 == "9")
            this.atCogs = true;
          this.atMap = false;
          if (str1 == "10")
            this.atMap = true;
          this.atExitkey = false;
          if (str1 == "11")
            this.atExitkey = true;
          this.atRedSkull1 = false;
          if (str1 == "13")
            this.atRedSkull1 = true;
          this.atRedSkull2 = false;
          if (str1 == "14")
            this.atRedSkull2 = true;
          this.atRedSkull3 = false;
          if (str1 == "15")
            this.atRedSkull3 = true;
          this.atDisplayCase = false;
          if (str1 == "16")
            this.atDisplayCase = true;
          this.atDisplayCase2 = false;
          if (str1 == "17")
            this.atDisplayCase2 = true;
          this.atTusk1 = false;
          if (str1 == "18")
            this.atTusk1 = true;
          this.atTusk2 = false;
          if (str1 == "19")
            this.atTusk2 = true;
          this.atTusk3 = false;
          if (str1 == "20")
            this.atTusk3 = true;
        }
        if (this.inFarm == 1)
        {
          int num = this.sc.goldKeys.update(this.myPlayer.displayState.npcPosition, this.campos, this.alternateCam);
          if (num == 1)
          {
            this.memoIcon = 2;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("Secret Item Found : TopHat");
          }
          if (num == 2)
          {
            this.memoIcon = 2;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("Secret Item Found : CowboyHat");
          }
          if (num == 3)
          {
            this.memoIcon = 2;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("Secret Item Found : Russian Bol");
          }
          if (num == 4)
          {
            this.memoIcon = 2;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("Secret Item Found : Tracktor Cap");
          }
          if (num == 5)
          {
            this.memoIcon = 2;
            this.memoTimer = 320;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("Secret Item Found : WW2 Helmut");
          }
        }
      }
      if ((double) this.sc.myTimer % 10.0 == 0.0)
      {
        if (this.inFarm == 1)
        {
          this.atBarnDoor = false;
          if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, new Vector3((float) ((double) this.grid / 2.0 + 688.41302490234375), 86.649f, (float) ((double) this.grid / 2.0 + 1619.0) + this.barnDoorslide.Z)) < 32400.0)
          {
            this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
            this.v2 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 + 688.41302490234375), 55f, (float) ((double) this.grid / 2.0 + 1619.0) + this.barnDoorslide.Z) - this.campos);
            if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
              this.atBarnDoor = true;
          }
          if (this.sc.currentDay < 7)
          {
            this.atGrinder = false;
            if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, new Vector3((float) ((double) this.grid / 2.0 - 1390.0), 142f, (float) ((double) this.grid / 2.0 - 1581.0))) < 72900.0)
            {
              this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
              this.v2 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 - 1390.0), 142f, (float) ((double) this.grid / 2.0 - 1581.0)) - this.campos);
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
                this.atGrinder = true;
            }
          }
          float num1 = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, new Vector3((float) ((double) this.grid / 2.0 + 1589.0), 40f, (float) ((double) this.grid / 2.0 + 1604.5400390625)));
          this.atPump1 = false;
          this.viewPump1 = false;
          if ((double) num1 < 8100.0)
          {
            this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
            this.v2 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 + 1589.0), 40f, (float) ((double) this.grid / 2.0 + 1604.5400390625)) - this.campos);
            if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
              this.atPump1 = true;
          }
          if ((double) num1 < 2890000.0)
            this.viewPump1 = true;
          float num2 = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, new Vector3((float) ((double) this.grid / 2.0 - 2127.429931640625), 40f, (float) ((double) this.grid / 2.0 + 131.2969970703125)));
          this.atPump2 = false;
          this.viewPump2 = false;
          if ((double) num2 < 8100.0)
          {
            this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
            this.v2 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 - 2127.429931640625), 40f, (float) ((double) this.grid / 2.0 + 131.2969970703125)) - this.campos);
            if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
              this.atPump2 = true;
          }
          if ((double) num2 < 2890000.0)
            this.viewPump2 = true;
          float num3 = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, new Vector3((float) ((double) this.grid / 2.0 + 1620.0), 40f, (float) ((double) this.grid / 2.0 - 164.0)));
          this.atLever = false;
          if ((double) num3 < 10000.0 && this.sc.gameState >= 1 && this.boarDropTimer.Count == 0)
          {
            this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
            this.v2 = Vector3.Normalize(new Vector3((float) ((double) this.grid / 2.0 + 1620.0), 40f, (float) ((double) this.grid / 2.0 - 164.0)) - this.campos);
            if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
              this.atLever = true;
          }
          this.atLobby = false;
          --this.atLobbyTimer;
          if (this.sc.gameState == 0)
          {
            Vector3 vector3 = new Vector3(3507f, 0.0f, 4806f);
            if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, vector3) < 8100.0)
            {
              this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
              this.v2 = Vector3.Normalize(new Vector3(vector3.X, 45f, vector3.Z) - this.campos);
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.64999997615814209)
                this.atLobby = true;
            }
          }
          this.atKissing = false;
          if (this.sc.gameState != 1)
          {
            Vector3 vector3 = new Vector3(3615f, 0.0f, 4806f);
            if ((double) Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, vector3) < 6400.0)
            {
              this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
              this.v2 = Vector3.Normalize(new Vector3(vector3.X, 45f, vector3.Z) - this.campos);
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.800000011920929)
                this.atKissing = true;
            }
          }
        }
        if (this.tunneladd)
        {
          this.atCrypt = false;
          this.atCrypt2 = false;
          if (this.sc.gameState == 2 && this.inFarm == 2)
          {
            for (int index = 0; index < this.skullemit.Count; ++index)
            {
              if (!this.skullemit[index].found && (double) Vector3.Distance(this.campos, this.skullemit[index].triggerPos) < 135.0)
              {
                this.skullemit[index].found = true;
                --this.skullemit[index].repeat;
                this.skullemit[index].amt = this.skullemit[index].amtorig;
                this.skullemitNetSendNum = index;
              }
              if (this.skullemit[index].repeat > 0 && this.skullemit[index].amt <= 0 && (double) Vector3.Distance(this.campos, this.skullemit[index].triggerPos) >= 135.0)
                this.skullemit[index].found = false;
            }
            for (int index = 0; index < this.skulldrop.Count; ++index)
            {
              if (!this.skulldrop[index].found && (double) Vector3.Distance(this.campos, this.skulldrop[index].triggerPos) < 500.0)
              {
                this.skulldrop[index].found = true;
                this.skulldropNetSendNum = index;
              }
            }
            --BloodnBacon4PT.interact.atPhotoTimer;
            this.atanyPhoto = false;
            for (int index = 0; index < this.photo.Count; ++index)
            {
              Vector3 vector30 = this.photo[index].vector3_0;
              if ((double) Vector2.DistanceSquared(new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z), new Vector2(vector30.X, vector30.Z)) < 8100.0)
              {
                this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
                this.v2 = Vector3.Normalize(vector30 - this.campos);
                if ((double) Vector3.Dot(this.v1, this.v2) > 0.800000011920929)
                {
                  if (this.minimapLevelsaved == -1)
                    this.minimapLevelsaved = this.minimapLevel;
                  this.minimapLevel = 2;
                  if (this.photo[index].atPhoto1 == 0)
                    this.photo[index].atPhoto1 = 1;
                  this.atanyPhoto = true;
                }
              }
              else
                this.photo[index].atPhoto1 = 0;
            }
            if (!this.atanyPhoto && this.minimapLevelsaved != -1)
            {
              this.minimapLevel = this.minimapLevelsaved;
              this.minimapLevelsaved = -1;
            }
          }
          if (this.cryptLock)
          {
            float num4 = Vector2.DistanceSquared(new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z), new Vector2(this.crypt1location.X, this.crypt1location.Z));
            float num5 = 12100f;
            if (this.inFarm == 2)
              num5 = 302500f;
            if ((double) num4 < (double) num5)
            {
              this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
              this.v2 = Vector3.Normalize(this.crypt1location - this.campos);
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.800000011920929)
                this.atCrypt = true;
            }
          }
          if (this.cryptLock2)
          {
            bool flag = true;
            float num6 = 12100f;
            float num7 = Vector2.DistanceSquared(new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z), new Vector2(this.crypt2location.X, this.crypt2location.Z));
            if (this.inFarm == 2)
            {
              num6 = 302500f;
              flag = this.inbox(this.myPlayer.displayState.npcPosition, new BoundingBox(new Vector3(2820f, -306f, 4265f), new Vector3(2944f, -135f, 4772f)));
            }
            if ((double) num7 < (double) num6 && flag)
            {
              this.v1 = Vector3.Normalize(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
              this.v2 = Vector3.Normalize(this.crypt2location - this.campos);
              if ((double) Vector3.Dot(this.v1, this.v2) > 0.800000011920929)
                this.atCrypt2 = true;
            }
          }
        }
      }
      bool flag1 = false;
      this.myPlayer.remoteUsingMilk = false;
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (!(this.remPlayer[index].id == this.mysteamID))
        {
          this.remPlayer[index].r.now.gunfired = 0;
          this.remPlayer[index].r.now.animation = 0;
          if (this.remPlayer[index].r.isLiftingYou == this.sc.myplayerindex)
          {
            flag1 = true;
            this.wearebeingliftedIndex = this.remPlayer[index].id.m_SteamID;
            if (this.remPlayer[index].r.onMilk)
              this.myPlayer.remoteUsingMilk = true;
          }
        }
      }
      this.ReadIncomingPackets();
      if (this.leavingGame)
        return;
      if ((remotePlayer4.pillTaken || flag1) && this.myPlayer.isDown && this.myPlayer.fallState <= 2)
        this.myPlayer.fallState = 3;
      if ((remotePlayer4.pillTaken ? 0 : (!flag1 ? 1 : 0)) != 0 && this.myPlayer.isDown && this.myPlayer.fallState >= 3 && this.myPlayer.fallState <= 5)
      {
        this.myPlayer.fallState = 0;
        this.myPlayer.now.health = this.myPlayer.now.tempHealth;
      }
      if (this.sc.currentDay != 30)
        this.hardened = false;
      if (this.sc.gameState >= 1 && this.remPlayer.Count < 4)
        this.hardened = false;
      if (this.sc.gameState >= 1 && this.sc.df != 2)
        this.hardened = false;
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (!(this.mysteamID == this.remPlayer[index].id))
        {
          this.remotePlayerCalc(index);
          if (this.remPlayer[index].r.cheats)
            this.hardened = false;
        }
      }
      if (this.myPlayer.gunFired)
      {
        bool insideTunnels = (double) this.myPlayer.displayState.npcPosition.Y < -40.0;
        if (this.tunneladd)
          this.UpdatePicking3(this.gunProj, this.gunView, ref this.cursor, insideTunnels);
        else
          this.UpdatePicking(this.gunProj, this.gunView, ref this.cursor, true);
      }
      if (Cutty4.cuttyCount > 0)
      {
        Cutty4.shortestDistance = 20000f;
        for (int index = 0; index < Cutty4.cuttyCount; ++index)
        {
          if (this.myPlayer.gunFired && this.myPlayer.gunChoice != 14)
          {
            this.cuttyBoss[index].checkTargets(this.myPlayer.gunpos, this.myPlayer.gunlook, ref this.genCursor, this.cursor.closestIntersection);
            if (this.cuttyBoss[index].cuttyisHit)
            {
              if (this.myPlayer.stats_record)
                ++this.myPlayer.stats_shotshit;
              if ((double) this.cuttyBoss[index].cuttyDistance < (double) Cutty4.shortestDistance)
                Cutty4.shortestDistance = this.cuttyBoss[index].cuttyDistance;
              if (this.cuttyBoss[index].boneStrike)
              {
                this.cuttyFragments(this.cuttyBoss[index].hitEdge, this.cuttyBoss[index].hitEdge - this.cuttyBoss[index].hitCenter);
              }
              else
              {
                Vector3 inherit = (this.cuttyBoss[index].cuttyVeloc * (float) this.rr.Next(15, 25)) with
                {
                  Y = 0.0f
                };
                this.bossbloodSpray(this.cuttyBoss[index].hitEdge, this.cuttyBoss[index].hitCenter, (float) this.rr.Next(20, 70) / 100f, 1f, inherit, 6, true, 0);
              }
              this.UpdatePicking(this.proj, Matrix.CreateLookAt(this.cuttyBoss[index].hitCenter, new Vector3(this.cuttyBoss[index].hitCenter.X + (float) this.rr.Next(-9000, 9000) / 15f, this.cuttyBoss[index].hitCenter.Y - 1200f, this.cuttyBoss[index].hitCenter.Z + (float) this.rr.Next(-9000, 9000) / 15f), Vector3.Right), ref this.genCursor, false);
              if ((double) this.sc.myTimer % 2.0 == 0.0)
                this.bloodDecal2(ref this.farm, this.genCursor, this.rr.Next(1, 50000));
              this.myPlayer.now.gunfired = !this.cuttyBoss[index].boneStrike ? 4 : 5;
              this.myPlayer.uvIndex = Cutty4.uvIndex;
              this.myPlayer.cuttyXcoord = (byte) ((double) Cutty4.xcoord / 1024.0 * (double) byte.MaxValue);
              this.myPlayer.cuttyYcoord = (byte) ((double) Cutty4.ycoord / 1024.0 * (double) byte.MaxValue);
              this.cuttyBoss[index].boneStrike = false;
              if ((double) Cutty4.shortestDistance < 200.0 && (double) this.sc.myTimer % 2.0 == 0.0)
                this.addBlood2Body(7, ref this.player1Paint, 0, 599, 0, 599);
            }
          }
          if (this.cuttyBoss[index].cuttyChunkRelease)
          {
            this.cuttyChunkSpray(this.cuttyBoss[index].hitEdge2, this.cuttyBoss[index].hitCenter2, (float) this.rr.Next(20, 80) / 100f, 0.7f);
            this.cuttyBoss[index].cuttyChunkRelease = false;
          }
          this.cuttyBoss[index].Update(gameTime, this.campos, this.timeFrame, this.myPlayer.gunlook - this.myPlayer.gunpos, this.myPlayer.displayState.npcPosition, this.sc.myplayerindex, this.myPlayer.now.health, ref this.remPlayer, ref this.heights);
          if (this.cuttyBoss[index].talkIndex > -1)
          {
            this.PlayPigDialog(this.cuttyBoss[index].talkIndex);
            this.cuttyBoss[index].talkIndex = -1;
          }
          --this.cuttyBoss[0].cuttyWait;
          if (this.cuttyBoss[index].cuttyAssPush)
          {
            this.cuttyBoss[index].cuttyAssPush = false;
            this.vibroTimer = this.rr.Next(5, 15);
            this.vibroTimerAmt = 100f;
            if (!this.myPlayer.isLiftingOpponent && !this.myPlayer.isDown)
            {
              Vector3 vector3 = Vector3.Transform(new Vector3(0.0f, 0.0f, -1f), Matrix.CreateRotationY(this.cuttyBoss[index].cuttyRot)) * (float) this.rr.Next(150, 200) / 100f;
              this.myPlayer.jump = vector3;
              this.hitVel = Vector2.Transform(new Vector2(-vector3.X, vector3.Z), Matrix.CreateRotationZ(-this.headRot));
            }
          }
          if (this.cuttyBoss[index].cuttyMouthCollide)
          {
            this.cuttyBoss[index].cuttyMouthCollide = false;
            float num = this.miniBossDam[Cutty4.cuttyCount];
            this.vibroTimer = this.rr.Next(12, 24);
            this.vibroTimerAmt = 100f;
            if (!this.myPlayer.isLiftingOpponent && !this.myPlayer.isDown)
            {
              Vector3 vector3 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationY(this.cuttyBoss[index].pigPush + this.cuttyBoss[index].cuttyRot)) * (float) this.rr.Next(120, 380) / 100f;
              this.myPlayer.jump.X = vector3.X;
              this.myPlayer.jump.Z = vector3.Z;
              this.hitVel = Vector2.Transform(new Vector2(-vector3.X, vector3.Z), Matrix.CreateRotationZ(-this.headRot));
            }
            if (this.cuttyBoss[0].cuttyWait <= 0)
            {
              float dam;
              if (this.cuttyBoss[index].animClip == 3)
              {
                this.addScreenSplat(false, 1);
                this.sc.hurt.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-10, 0) / 100f, 0.0f);
                this.sc.boarbite[this.rr.Next(0, 5)].Play(this.sc.ev * 0.8f, (float) this.rr.Next(-30, 0) / 100f, (float) this.rr.Next(-70, 70) / 100f);
                dam = 0.0f;
                if (this.cuttyBoss[index].df == 0)
                  dam = 1f;
                if (this.cuttyBoss[index].df == 1)
                  dam = 1.5f;
                if (this.cuttyBoss[index].df == 2)
                  dam = 3f;
                if (this.cuttyBoss[index].df == 3)
                  dam = 6f * num;
                if (this.cuttyBoss[index].df == 4)
                  dam = 11f * num;
                if (this.cuttyBoss[index].df == 5)
                  dam = 14f * num;
                this.cuttyBoss[0].cuttyWait = 20;
              }
              else
              {
                dam = (float) this.rr.Next(0, 2);
                if (this.cuttyBoss[index].df == 0)
                  dam += 0.3f;
                if (this.cuttyBoss[index].df == 1)
                  dam += 0.5f;
                if (this.cuttyBoss[index].df == 2)
                  dam += 1.2f;
                if (this.cuttyBoss[index].df == 3)
                  dam += 6f * num;
                if (this.cuttyBoss[index].df == 4)
                  dam += 10f * num;
                if (this.cuttyBoss[index].df == 5)
                  dam += 13f * num;
                this.addScreenSplat(false, 1);
                this.sc.boarbite[this.rr.Next(0, 5)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(30, 70) / 100.0), (float) this.rr.Next(-30, 0) / 100f, (float) this.rr.Next(-70, 70) / 100f);
                this.cuttyBoss[0].cuttyWait = 10;
              }
              if (this.myPlayer.isDown)
                this.myPlayer.damHealth(dam * 0.5f, this.sc.cheat_Invincible);
              else
                this.myPlayer.damHealth(dam, this.sc.cheat_Invincible);
            }
          }
          if (this.cuttyBoss[index].shockHit)
          {
            float num = this.miniBossDam[Cutty4.cuttyCount];
            this.myPlayer.damHealth((float) (1000.0 / (double) this.cuttyBoss[index].shockRadius * 20.0) * num, this.sc.cheat_Invincible);
            this.vibroTimer = 120;
            this.vibroTimerAmt = 100f;
            this.myPlayer.bloodCoil = 120;
            this.cuttyBoss[index].shockHit = false;
            if (!this.myPlayer.isLiftingOpponent && !this.myPlayer.isDown)
            {
              Vector2 vector2 = new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z) - new Vector2(this.cuttyBoss[index].cuttyPos.X, this.cuttyBoss[index].cuttyPos.Z);
              if ((double) vector2.Length() > 50.0)
              {
                this.hitVel = Vector2.Normalize(vector2) * (float) this.rr.Next(310, 520) / 100f;
                this.myPlayer.jump.X = this.hitVel.X;
                this.myPlayer.jump.Z = this.hitVel.Y;
                this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
              }
            }
          }
        }
      }
      if (Princess4.cuttyCount > 0)
      {
        Princess4.shortestDistance = 20000f;
        int index1 = 0;
        if (this.myPlayer.gunFired && this.myPlayer.gunChoice != 14)
        {
          this.princess[index1].checkTargets(this.myPlayer.gunpos, this.myPlayer.gunlook, ref this.genCursor, this.cursor.closestIntersection);
          if (this.princess[index1].cuttyisHit)
          {
            if (this.myPlayer.stats_record)
              ++this.myPlayer.stats_shotshit;
            Princess4.shortestDistance = this.princess[0].cuttyDistance;
            if ((double) this.princess[0].distanceCutty < (double) this.princess[0].minDistance[this.princess[0].df])
            {
              if (this.princess[index1].boneStrike)
              {
                this.cuttyFragments(this.princess[index1].hitEdge, this.princess[index1].hitEdge - this.princess[index1].hitCenter);
              }
              else
              {
                Vector3 inherit = (this.princess[index1].cuttyVeloc * (float) this.rr.Next(15, 25)) with
                {
                  Y = 0.0f
                };
                this.bossbloodSpray(this.princess[index1].hitEdge, this.princess[index1].hitCenter, (float) this.rr.Next(20, 70) / 100f, 1f, inherit, 6, true, 0);
              }
              float num8 = (float) this.rr.Next(-2500, 2500) / 50f;
              float num9 = (float) this.rr.Next(-2500, 2500) / 50f;
              this.princess[index1].addCanvasCrap(this.sc.paintColorCanvas, this.princess[index1].hitEdge.X + num8, this.princess[index1].hitEdge.Z + num9);
            }
            else
            {
              Vector3 inherit = (this.princess[index1].cuttyVeloc * (float) this.rr.Next(15, 25)) with
              {
                Y = 0.0f
              };
              this.bossbloodSpray(this.princess[index1].hitEdge, this.princess[index1].hitCenter, (float) this.rr.Next(40, 110) / 100f, 0.3f, inherit, 10, true, 0);
              if (this.memoTimer <= 0 && this.princess[0].notcloseCount < 3 && this.sc.currentDay < 30 && !this.princess[0].heartExposed)
              {
                BloodnBacon4PT.memo.Length = 0;
                this.memoIcon = 1;
                if (this.princess[0].notcloseCount % 3 == 0)
                  BloodnBacon4PT.memo.Append("You are not close enough !");
                else if (this.princess[0].notcloseCount % 3 == 1)
                  BloodnBacon4PT.memo.Append("Get closer to do Damage !");
                else if (this.princess[0].notcloseCount % 3 == 2)
                  BloodnBacon4PT.memo.Append("Black Blood means no Boss Damage !");
                ++this.princess[0].notcloseCount;
                this.sc.newtip.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                this.memoTimer = 290;
              }
            }
            this.myPlayer.now.gunfired = !this.princess[index1].boneStrike ? 6 : 7;
            this.myPlayer.uvIndex = Princess4.uvIndex;
            this.myPlayer.cuttyXcoord = (byte) ((double) Princess4.xcoord / 1024.0 * (double) byte.MaxValue);
            this.myPlayer.cuttyYcoord = (byte) ((double) Princess4.ycoord / 1024.0 * (double) byte.MaxValue);
            this.princess[index1].boneStrike = false;
            if ((double) Princess4.shortestDistance < 600.0)
              this.addBlood2Body(7, ref this.player1Paint, 0, 599, 0, 599);
          }
        }
        if (this.princess[0].shootHeartMessage)
        {
          this.princess[0].shootHeartMessage = false;
          BloodnBacon4PT.memo.Length = 0;
          this.memoIcon = 1;
          if (this.princess[0].heartMessCount % 2 == 0)
            BloodnBacon4PT.memo.Append("Get Close, Shoot the Heart when she Jumps !");
          else
            BloodnBacon4PT.memo.Append("Only Shoot the Heart when she Jumps !");
          this.memoTimer = 250;
        }
        if (this.princess[0].shootWoundMessage)
        {
          this.princess[0].shootWoundMessage = false;
          BloodnBacon4PT.memo.Length = 0;
          this.memoIcon = 1;
          BloodnBacon4PT.memo.Append("Shoot the open Wound !");
          this.memoTimer = 300;
        }
        if (this.remPlayer.Count > 1)
        {
          for (int index2 = 0; index2 < this.remPlayer.Count; ++index2)
          {
            if (this.mysteamID == this.remPlayer[index2].id)
              this.sc.myplayerindex = index2;
            else if (this.remPlayer[index2].r.gunfired)
            {
              this.remPlayer[index2].r.gunfired = false;
              float num10 = (float) ((double) this.remPlayer[index2].r.cuttyXcoord / (double) byte.MaxValue * 1024.0);
              float num11 = (float) ((double) this.remPlayer[index2].r.cuttyYcoord / (double) byte.MaxValue * 1024.0);
              if ((double) this.princess[0].distanceCutty2[index2] < (double) this.princess[0].minDistance[this.princess[0].df])
                this.princess[0].addTargetBlood(this.sc.paintRemColor, (int) num10 - 25, (int) num10 + 25, (int) num11 - 25, (int) num11 + 25);
              else
                this.princess[0].addTargetBlood(6, (int) num10 - 25, (int) num10 + 25, (int) num11 - 25, (int) num11 + 25);
            }
          }
        }
        if (this.princess[index1].explodeTimer <= 5)
        {
          --this.debrisTimer;
          if (this.princess[index1].explodeTimer == 5)
            this.debrisSparks(new Vector3(3000f, -20f, 3000f));
          if (this.princess[index1].explodeTimer == -650)
          {
            this.debrisSparks2(new Vector3(3000f, 0.0f, 3000f));
            this.debrisTimer = 240;
          }
          for (int index3 = (int) this.sc.myTimer % 3; index3 < this.princess[index1].bloody.max; index3 += 3)
          {
            if (this.princess[index1].bloody.dupe[index3].move == 1)
            {
              this.debrisBlood(ref this.princess[index1].bloody.dupe[index3].offset, ref this.princess[index1].bloody.dupe[index3].oldpos, ref this.princess[index1].bloody.dupe[index3].mypos, this.princess[index1].bloody.dupe[index3].myscale, 2000f, this.princess[index1].bloody.dupe[index3].cChoice, (float) this.princess[index1].bloody.dupe[index3].age, this.princess[index1].bloody.dupe[index3].poofy);
              if (this.princess[index1].bloody.dupe[index3].firstHit == 1)
              {
                this.princess[index1].bloody.dupe[index3].firstHit = 5;
                if ((double) this.princess[index1].bloody.dupe[index3].mypos.X > 300.0 && (double) this.princess[index1].bloody.dupe[index3].mypos.X < 5700.0 && this.debrisTimer <= 0 && (double) this.princess[index1].bloody.dupe[index3].mypos.Z > 300.0 && (double) this.princess[index1].bloody.dupe[index3].mypos.Z < 5700.0)
                {
                  this.debrisTimer = 130;
                  this.debrisSparks3(this.princess[index1].bloody.dupe[index3].mypos);
                  this.vibroTimer = 60;
                  this.vibroTimerAmt = 170f;
                  this.sc.grenadePop1[this.rr.Next(0, 2)].Play(this.sc.ev * 0.5f, (float) this.rr.Next(-90, -60) / 100f, (float) this.rr.Next(-90, 90) / 100f);
                }
              }
            }
          }
        }
        if (this.princess[index1].cuttyChunkRelease)
        {
          this.cuttyChunkSpray2(this.princess[index1].hitEdge2, this.princess[index1].hitCenter2, (float) this.rr.Next(70, 130) / 100f, 1f);
          this.princess[index1].cuttyChunkRelease = false;
        }
        this.princess[index1].Update(gameTime, this.timeFrame, this.myPlayer.gunlook - this.myPlayer.gunpos, this.myPlayer.displayState.npcPosition, this.sc.myplayerindex, this.myPlayer.now.health, ref this.remPlayer, ref this.heights);
        if (this.princess[index1].talkIndex > -1)
        {
          this.PlayBossDialog(this.princess[index1].talkIndex);
          this.princess[index1].talkIndex = -1;
        }
        if (!this.princess[0].playingBossMusic && this.princess[0].heartExposed)
        {
          this.switchBossMusic();
          this.princess[0].playingBossMusic = true;
        }
        if (this.princess[0].playingBossMusic && !this.sc.corncobMusic.IsDisposed)
        {
          if (this.princess[0].death1)
          {
            this.victoryMusic -= 1f / 400f;
            this.victoryMusic = MathHelper.Clamp(this.victoryMusic, 0.0f, 1f);
            this.sc.corncobMusic.Volume = this.victoryMusic * this.sc.mv;
          }
          else
          {
            if (!this.princess[0].volumeFade)
            {
              this.victoryMusic += 0.013f;
              this.victoryMusic = MathHelper.Clamp(this.victoryMusic, 0.2f, 1f);
              this.sc.corncobMusic.Volume = this.victoryMusic * this.sc.mv;
            }
            if (this.princess[0].volumeFade)
            {
              this.victoryMusic -= 0.013f;
              this.victoryMusic = MathHelper.Clamp(this.victoryMusic, 0.2f, 1f);
              this.sc.corncobMusic.Volume = this.victoryMusic * this.sc.mv;
            }
          }
        }
        --this.princess[0].cuttyWait;
        if (this.princess[index1].cuttyCollide && !this.myPlayer.isLiftingOpponent && !this.myPlayer.isDown)
        {
          this.princess[index1].cuttyCollide = false;
          int dam = this.rr.Next(1, 3);
          Vector2 vector2 = new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z) - new Vector2(this.princess[index1].cuttyPos.X, this.princess[index1].cuttyPos.Z);
          if ((double) vector2.Length() > 0.0)
          {
            if ((double) this.myPlayer.displayState.npcPosition.Y > 40.0)
            {
              if (!this.princess[index1].cuttyRoll)
              {
                dam = 0;
                this.hitVel = Vector2.Normalize(vector2) * (float) this.rr.Next(20, 60) / 100f;
                this.myPlayer.jump.X = this.hitVel.X;
                this.myPlayer.jump.Z = this.hitVel.Y;
                this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
                this.myPlayer.fallGrav = 3f;
                this.myPlayer.fallAcc = 0.2f;
                this.myPlayer.jumpCalled = true;
                ++this.ridewave;
                if (this.ridewave > 20)
                  this.sc.trophy.win(this.sc.trophy.ridethewave);
              }
              else
              {
                this.myPlayer.futureDamage = this.princess[0].futureDam[this.princess[0].df];
                this.hitVel = new Vector2((float) this.rr.Next(-1200, 1200) / 100f, (float) this.rr.Next(-1200, 1200) / 100f);
                this.myPlayer.jump.X = this.hitVel.X;
                this.myPlayer.jump.Z = this.hitVel.Y;
                this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
                this.myPlayer.fallGrav = 12f;
                this.myPlayer.fallAcc = 0.65f;
                this.myPlayer.jumpCalled = true;
                this.sc.manyell.Play(this.sc.ev, 0.0f, 0.0f);
              }
            }
            else if (!this.princess[index1].cuttyRoll)
            {
              this.hitVel = Vector2.Normalize(vector2) * (float) this.rr.Next(210, 520) / 100f;
              this.myPlayer.jump.X = this.hitVel.X;
              this.myPlayer.jump.Z = this.hitVel.Y;
              this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
              this.vibroTimer = this.rr.Next(12, 24);
              this.vibroTimerAmt = 100f;
              this.addScreenSplat(false, 3);
              this.sc.boarbite[this.rr.Next(0, 5)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(30, 70) / 100.0), (float) this.rr.Next(-30, 0) / 100f, (float) this.rr.Next(-70, 70) / 100f);
            }
            else
            {
              dam = this.princess[0].rollDam[this.princess[0].df];
              this.hitVel = Vector2.Normalize(vector2) * (float) this.rr.Next(200, 290) / 100f;
              this.myPlayer.jump.X = this.hitVel.X;
              this.myPlayer.jump.Z = this.hitVel.Y;
              this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
              this.vibroTimer = this.rr.Next(12, 24);
              this.vibroTimerAmt = 100f;
              this.addScreenSplat(false, 3);
              this.sc.boarbite[this.rr.Next(0, 5)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(30, 70) / 100.0), (float) this.rr.Next(-30, 0) / 100f, (float) this.rr.Next(-70, 70) / 100f);
            }
          }
          this.myPlayer.damHealth((float) dam, this.sc.cheat_Invincible);
          this.princess[0].cuttyWait = 5;
        }
        if (this.princess[index1].cuttyRoll && this.princess[0].cuttyWait <= 0 && (double) this.myPlayer.futureDamage == 0.0)
        {
          Vector2 vector2 = new Vector2(this.princess[index1].cuttyPos.X, this.princess[index1].cuttyPos.Z) - new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z);
          float num = vector2.Length();
          if ((double) num > 50.0 && (double) num < 2000.0 && ((double) num >= 200.0 || (double) this.myPlayer.displayState.npcPosition.Y <= 40.0))
          {
            float min = this.princess[0].rollPower[this.princess[0].df];
            this.hitVel = Vector2.Normalize(vector2) * ((float) this.rr.Next(180, 240) / 100f) * MathHelper.Clamp(num / 2000f, min, 1.5f);
            this.myPlayer.jump.X = this.hitVel.X;
            this.myPlayer.jump.Z = this.hitVel.Y;
            this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
          }
        }
        if (this.princess[index1].groundhit)
        {
          this.camshaker = 60f;
          this.vibroTimer = 40;
          this.vibroTimerAmt = 100f;
          this.princess[index1].groundhit = false;
        }
        if (this.princess[0].explodeTimer < 10)
        {
          if (this.princess[index1].explodeTimer == 5)
          {
            this.camshaker = 180f;
            this.vibroTimer = 180;
            this.vibroTimerAmt = 220f;
          }
          if (this.princess[index1].explodeTimer == -250)
          {
            this.camshaker = 100f;
            this.vibroTimer = 80;
            this.vibroTimerAmt = 160f;
          }
          if (this.princess[index1].explodeTimer == -650)
          {
            this.camshaker = 90f;
            this.vibroTimer = 250;
            this.vibroTimerAmt = 370f;
          }
          if (this.princess[index1].explodeTimer == -1200 || this.princess[index1].explodeTimer == -1600)
          {
            this.camshaker = 80f;
            this.vibroTimer = 250;
            this.vibroTimerAmt = 370f;
          }
        }
        --this.princess[index1].cuttyVomitTimer;
        if (this.princess[index1].cuttyVomitHit)
        {
          this.addBlood2Body(4, ref this.player1Paint, 0, 599, 0, 599);
          if ((double) this.princess[index1].cuttyVomitTimer <= 70.0)
          {
            this.addScreenSplat(false, 2);
            this.sc.trophy.win(this.sc.trophy.acidwashed);
            if ((double) this.princess[index1].cuttyVomitTimer < 0.0)
              this.princess[index1].cuttyVomitTimer = 0.0f;
            this.princess[index1].cuttyVomitTimer += 65f;
            this.myPlayer.damHealth((float) this.rr.Next(5, 10), this.sc.cheat_Invincible);
          }
          this.camshaker = 60f;
          this.vibroTimer = 10;
          this.vibroTimerAmt = 150f;
          this.princess[index1].cuttyVomitHit = false;
        }
        if (this.princess[index1].cuttyVomitHit2 > -1)
        {
          this.addBlood2Body2(4, this.princess[index1].cuttyVomitHit2, 0, 599, 0, 599);
          this.princess[index1].cuttyVomitHit2 = -1;
        }
        --this.princess[index1].cuttyShitTimer;
        if (this.princess[index1].cuttyShitHit)
        {
          this.addBlood2Body(this.rr.Next(9, 13), ref this.player1Paint, 0, 599, 0, 599);
          if ((double) this.princess[index1].cuttyShitTimer <= 70.0)
          {
            this.addScreenSplat(false, 4);
            this.addScreenSplat(false, 4);
            this.sc.trophy.win(this.sc.trophy.skidmarked);
            if ((double) this.princess[index1].cuttyShitTimer < 0.0)
              this.princess[index1].cuttyShitTimer = 0.0f;
            this.princess[index1].cuttyShitTimer += 65f;
            this.myPlayer.damHealth((float) this.rr.Next(2, this.princess[0].shitDam[this.princess[0].df]), this.sc.cheat_Invincible);
            this.slowDown = 0.15f;
          }
          this.camshaker = 120f;
          this.vibroTimer = 60;
          this.vibroTimerAmt = 150f;
          this.princess[index1].cuttyShitHit = false;
        }
        if (this.princess[index1].cuttyShitHit2 > -1)
        {
          int cuttyShitHit2 = this.princess[index1].cuttyShitHit2;
          this.addBlood2Body2(this.rr.Next(9, 13), cuttyShitHit2, 0, 599, 0, 599);
          this.princess[index1].cuttyShitHit2 = -1;
        }
        if (this.princess[index1].shockHit)
        {
          float dam = (float) (3000.0 / (double) this.princess[index1].shockRadius * 5.0);
          if (this.myPlayer.jumping)
            dam /= (float) (0.10000000149011612 * (double) Math.Abs(this.myPlayer.displayState.npcPosition.Y - this.myPlayer.ground) + 1.0);
          this.myPlayer.damHealth(dam, this.sc.cheat_Invincible);
          this.camshaker = MathHelper.Min((float) (40.0 * (4000.0 / (double) this.princess[index1].shockRadius)), 150f);
          this.vibroTimer = 80;
          this.vibroTimerAmt = 100f;
          this.myPlayer.bloodCoil = (int) this.camshaker / 3;
          this.princess[index1].shockHit = false;
          if (!this.myPlayer.isLiftingOpponent && !this.myPlayer.isDown)
          {
            Vector2 vector2 = new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z) - new Vector2(this.princess[index1].cuttyPos.X, this.princess[index1].cuttyPos.Z);
            if ((double) vector2.Length() > 50.0)
            {
              this.hitVel = Vector2.Normalize(vector2) * (float) this.rr.Next(410, 720) / 100f;
              if (this.myPlayer.jumping)
                this.hitVel /= (float) (0.10000000149011612 * (double) Math.Abs(this.myPlayer.displayState.npcPosition.Y - this.myPlayer.ground) + 1.0);
              this.myPlayer.jump.X = this.hitVel.X;
              this.myPlayer.jump.Z = this.hitVel.Y;
              this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
            }
          }
        }
      }
      if (this.batsLoaded)
        this.updateBats(ref this.bat);
      bool flag2 = this.sc.gameState < 2 || this.inFarm == 1 || this.inFarm == 2 && (this.cryptLockMove < 188 || this.cryptLockMove2 < 188);
      if (this.boar.dupe.Count > 0 && flag2)
      {
        this.boarSchedulethisFrame = false;
        this.method_0(ref this.boar);
        if (this.myPlayer.gunFired && this.myPlayer.gunChoice != 14)
          this.splatNPC(ref this.boar);
        this.runConductor(ref this.boar);
      }
      if (this.tunneladd && this.sc.gameState == 2)
      {
        if (this.bool_0 && this.inFarm == 2)
        {
          if (!this.bool_1)
          {
            if ((double) this.myPlayer.displayState.npcPosition.Y > (double) this.wall1Pos.Y + 100.0)
            {
              this.lockWall(true, this.wall1Pos, this.int_0, this.int_1);
              this.bool_1 = true;
            }
          }
          else if ((double) this.myPlayer.displayState.npcPosition.Y < (double) this.wall1Pos.Y + 90.0)
          {
            this.lockWall(false, this.wall1Pos, this.int_0, this.int_1);
            this.bool_1 = false;
          }
        }
        if (this.myPlayer.jumping && this.teleportExists && this.inFarm == 2 && (double) Vector3.Distance(this.campos, this.teleportA) < 90.0)
        {
          this.myPlayer.displayState.npcPosition = this.teleportB;
          this.myPlayer.simulationState.npcPosition = this.teleportB;
        }
        this.updateWebs(ref this.web);
        this.enemy1.flashlightDepth = this.flashlightDepth;
        this.enemy1.explosiveCount = this.explosiveCount;
        this.enemy1.campos = this.campos;
        this.enemy1.camlookpos = this.camlookpos;
        this.enemy1.headRot = this.headRot;
        this.enemy1.tunnelAvoidDamage = this.tunnelAvoidDamage;
        this.enemy1.buildingMatrix = this.buildingMatrix;
        this.enemy1.lightON = this.lightON;
        this.enemy1.Update2(ref this.cursor, ref this.genCursor, ref this.myPlayer, ref this.hitVel, ref this.camshaker, ref this.tunnelheights, ref this.farmheights, this.combo, this.plain);
        if (this.inFarm == 2)
        {
          if (this.enemy1.bitSpray)
            this.bitSpray2(this.enemy1.outside, this.enemy1.cubeCenter, this.enemy1.scale);
          if (this.enemy1.bloodSpray)
            this.bloodSpraySkull(this.enemy1.outside, this.enemy1.cubeCenter, this.enemy1.scale);
          if (this.enemy1.decalSpray)
          {
            this.UpdatePicking3(this.proj, this.enemy1.skullView, ref this.genCursor, (double) this.myPlayer.displayState.npcPosition.Y < -40.0);
            this.bloodDecal(ref this.farm, this.genCursor, this.rr.Next(0, 70000), false, 9, 15, 0);
          }
        }
      }
      if ((double) this.sc.myTimer % 20.0 == 0.0 && this.boar.alive == (ushort) 0 && this.sc.gameState == 1)
      {
        bool flag3 = true;
        if (Cutty4.cuttyCount > 0)
        {
          for (int index = 0; index < Cutty4.cuttyCount; ++index)
          {
            if (!this.cuttyBoss[index].cuttyisDead)
              flag3 = false;
          }
        }
        if (Princess4.cuttyCount > 0 && !this.princess[0].cuttyisDead)
          flag3 = false;
        if (flag3)
          this.sc.gameState = 2;
      }
      if ((double) this.sc.myTimer % 5.0 == 0.0 && this.sc.dayTime == "pm" && this.sc.gameState >= 1)
      {
        if (Cutty4.cuttyCount > 0)
        {
          bool flag4 = true;
          bool flag5 = true;
          for (int index = 0; index < Cutty4.cuttyCount; ++index)
          {
            if ((double) this.cuttyBoss[index].shockTimer > 0.0)
              flag4 = false;
            if ((int) this.cuttyBoss[index].health > (int) this.cuttyBoss[index].startHealth / 5)
              flag5 = false;
          }
          if (this.pim1.mirvSeeStreaks || this.pim2.mirvSeeStreaks)
            flag4 = false;
          if (this.leverTimer > 0)
            flag4 = false;
          if (flag5 && this.sc.gameState == 2)
          {
            this.sc.darkness += 1f / 1000f;
            if ((double) this.sc.darkness > 1.0)
              this.sc.darkness = 1f;
            if (flag4)
            {
              for (int index = 0; index < Cutty4.cuttyCount; ++index)
                this.cuttyBoss[index].olderDarkness = this.sc.darkness;
              this.sc.olderdarkness = this.sc.darkness;
            }
          }
        }
        else if (this.boar.alive <= (ushort) 3 && (double) this.sc.darkness < 1.0 && Cutty4.cuttyCount == 0 && Princess4.cuttyCount == 0)
        {
          bool flag6 = true;
          if (this.pim1.mirvSeeStreaks || this.pim2.mirvSeeStreaks)
            flag6 = false;
          if (this.leverTimer > 0)
            flag6 = false;
          this.sc.darkness += 0.0003f;
          if ((double) this.sc.darkness > 1.0)
            this.sc.darkness = 1f;
          if (flag6)
            this.sc.olderdarkness = this.sc.darkness;
        }
      }
      bool flag7 = false;
      if (this.barnTriangle && this.sc.gameState != 1)
      {
        List<Vector3> pos = new List<Vector3>();
        pos.Add(Vector3.Transform(Vector3.Zero, this.sc.flashOffset[6] * this.myPlayer.pistolHand));
        if (this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID))
            {
              Vector3 vector3 = Vector3.Transform(Vector3.Zero, this.sc.flashOffset[6] * this.remPlayer[index].r.pistolHand);
              pos.Add(vector3);
            }
          }
        }
        this.chainRope.UpdateMore(ref pos, Matrix.Identity, new Vector3(0.0f, 0.0f, 0.0f), ref this.heights);
        this.chainRope2.UpdateMore(ref pos, Matrix.Identity, new Vector3(0.0f, 0.0f, 0.0f), ref this.heights);
        if (this.chainRope.chainBump || this.chainRope2.chainBump)
          this.sc.chain.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
        if ((this.inFarm == 1 || this.sc.gameState == 0) && (flag7 = this.updateChain_shotbyPlayer()))
          this.myPlayer.now.destiny = this.cursor.rayPos + this.cursor.closestIntersection * this.cursor.rayDir;
      }
      if (this.myPlayer.gunFired)
      {
        if (this.handtype[this.myPlayer.lastWeapon] == 1)
        {
          --this.myPlayer.mag[this.myPlayer.lastWeapon];
          this.myPlayer.mag[this.myPlayer.lastWeapon] = (int) MathHelper.Clamp((float) this.myPlayer.mag[this.myPlayer.lastWeapon], 0.0f, (float) this.myPlayer.resetmag[this.myPlayer.lastWeapon]);
          if (this.sc.cheat_InfiniteAmmo)
            this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon];
          bool flag8 = this.myPlayer.now.gunfired == 1 || this.myPlayer.now.gunfired == 5 || this.myPlayer.now.gunfired == 7;
          bool flag9 = this.myPlayer.now.gunfired >= 30 || this.myPlayer.now.gunfired == 13 || this.myPlayer.now.gunfired == 3 || this.myPlayer.now.gunfired == 2 || this.myPlayer.now.gunfired == 4 || this.myPlayer.now.gunfired == 6;
          if (flag8)
            this.primBang.Play((float) ((double) this.sc.ev * (double) this.rr.Next(70, 99) / 100.0), (float) this.rr.Next(-20, 0) / 100f, 0.0f);
          if (flag9)
            this.primMuffle.Play(this.sc.ev, (float) this.rr.Next(-30, 0) / 100f, 0.0f);
        }
        else if (this.myPlayer.lastWeapon != 14 && this.handtype[this.myPlayer.lastWeapon] == 2)
        {
          --this.myPlayer.mag[this.myPlayer.lastWeapon];
          this.myPlayer.mag[this.myPlayer.lastWeapon] = (int) MathHelper.Clamp((float) this.myPlayer.mag[this.myPlayer.lastWeapon], 0.0f, (float) this.myPlayer.resetmag[this.myPlayer.lastWeapon]);
          if (this.sc.cheat_InfiniteAmmo)
            this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon];
          bool flag10 = this.myPlayer.now.gunfired == 1 || this.myPlayer.now.gunfired == 5 || this.myPlayer.now.gunfired == 7;
          bool flag11 = this.myPlayer.now.gunfired >= 30 || this.myPlayer.now.gunfired == 13 || this.myPlayer.now.gunfired == 3 || this.myPlayer.now.gunfired == 2 || this.myPlayer.now.gunfired == 4 || this.myPlayer.now.gunfired == 6;
          if (flag10)
            this.secBang.Play(this.sc.ev, (float) this.rr.Next(-40, -20) / 100f, 0.0f);
          if (flag11)
            this.secMuffle.Play(this.sc.ev, (float) this.rr.Next(-50, -30) / 100f, 0.0f);
        }
        else if (this.myPlayer.lastWeapon == 14)
        {
          bool flag12 = false;
          if ((double) this.cursor.closestIntersection < (double) this.boar.npcDist && (double) this.cursor.closestIntersection < 10000.0)
          {
            flag12 = true;
            this.myPlayer.now.destiny = this.cursor.rayPos + this.cursor.closestIntersection * this.cursor.rayDir;
          }
          else if ((double) this.boar.npcDist < 10000.0)
          {
            flag12 = true;
            this.myPlayer.now.destiny = this.cursor.rayPos + this.boar.npcDist * this.cursor.rayDir;
          }
          if (this.pim1.mirvMoving || this.pim1.mirvSeeStreaks)
            flag12 = false;
          if (this.myPlayer.inBarn)
          {
            flag12 = false;
            this.memoTimer = 250;
            this.memoIcon = 4;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" Not in the Barn !!");
          }
          else if (this.sc.gameState == 0)
          {
            flag12 = false;
            this.memoTimer = 250;
            this.memoIcon = 4;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append(" weapon jammed. . .");
          }
          if (flag12)
          {
            this.myPlayer.rocketLaunch = true;
            this.pim1.mirvMoving = true;
            this.pim1.mirvTimer = (float) this.rr.Next(1, 5000);
            this.pim1.mirvFreq1 = (float) this.rr.Next(70, 90) / 10f;
            if (this.rr.Next(1, 500) < 250)
              this.pim1.mirvFreq2 *= -1f;
            this.pim1.mirvFreq2 = (float) this.rr.Next(110, 140) / 10f;
            if (this.rr.Next(1, 500) < 250)
              this.pim1.mirvFreq2 *= -1f;
            this.pim1.mirvAge = 0.0f;
            this.myPlayer.mag[14] = 0;
            --this.sc.rockets;
            if (this.sc.rockets < 0)
              this.sc.rockets = 0;
            this.secBang.Play(this.sc.ev, (float) this.rr.Next(-40, -20) / 100f, 0.0f);
            this.pim1.mirvDest = this.myPlayer.now.destiny;
            Quaternion rotation = new Quaternion();
            this.pim1.mirvTrans = this.sc.flashOffset[14] * this.myPlayer.pistolHand;
            this.pim1.mirvTrans.Decompose(out Vector3 _, out rotation, out this.pim1.mirvPos);
            this.pim1.mirvRot = Matrix.CreateFromQuaternion(rotation);
          }
          else
          {
            this.myPlayer.gunFired = false;
            this.myPlayer.now.gunfired = 0;
            this.myPlayer.flashTimer = 0.0f;
            this.myPlayer.blastTimer = 0.0f;
            this.myPlayer.blastRot = 0.0f;
            this.myPlayer.recoilTimer = 0.0f;
            this.vibroTimer = 0;
            this.vibroTimerAmt = 0.0f;
            this.sc.abort.Play(this.sc.ev, -0.5f, 0.0f);
          }
        }
        this.myPlayer.flashfromSide = false;
        if (this.myPlayer.gunFired)
        {
          if (!this.myPlayer.closeCam && this.myPlayer.gunChoice != 16)
          {
            this.myPlayer.flashfromSide = true;
            if ((double) Math.Abs(Vector3.Dot(Vector3.Normalize(Vector3.Transform(Vector3.Zero, this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand) - this.campos), Vector3.Normalize(Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand) - Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand)))) > 0.800000011920929)
              this.myPlayer.flashfromSide = false;
          }
          this.gunsmokeDrift(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
          if (this.myPlayer.gunChoice == 8)
          {
            Vector3 vector3_6 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            Vector3 vector3_7 = Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.sc.flashOffset[8] * this.myPlayer.pistolHand);
            for (int index = 0; index < 90; ++index)
            {
              Vector3 vector3_8 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
              this.sparks2.AddParticle(vector3_7 + vector3_8 * (float) this.rr.Next(1, 8), (vector3_6 + vector3_8) * (float) this.rr.Next(50, 1650) / 10f);
            }
            this.gunsmokeDrift(Vector3.Transform(new Vector3(0.0f, 0.0f, 2f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation)));
          }
          if (this.handtype[this.myPlayer.gunChoice] == 1 && this.myPlayer.gunChoice != 16)
          {
            this.Gunleft = (float) this.rr.Next(-30, -15) / 100f;
            this.GunupForce = (float) this.rr.Next(50, 70) / 100f;
            this.GunvelocShell = Vector3.Transform(new Vector3(this.Gunleft, this.GunupForce, 0.0f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            this.GunInherit = Vector3.Transform(new Vector3(-this.dirInput.X, 0.0f, this.dirInput.Y), Matrix.CreateRotationY(this.headRot)) * (float) ((double) Math.Abs(this.dirInput.X) * 1.7999999523162842 + (double) Math.Abs(this.dirInput.Y) * 2.0);
            this.Gunoffspin = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
            this.dropBulletShell(ref this.primShell, 0.35f, 0.5f, 0.388f, this.Gunoffspin * this.sc.shellExit[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, 0.8f * this.GunInherit + this.GunvelocShell, true, -0.06f, 18, 150f, 350f);
          }
          else if (this.handtype[this.myPlayer.gunChoice] == 2 && this.myPlayer.gunChoice != 8 && this.myPlayer.gunChoice != 14 && this.myPlayer.gunChoice != 18)
          {
            this.Gunleft = (float) this.rr.Next(-30, -15) / 100f;
            if (this.myPlayer.gunChoice == 20)
              this.Gunleft = (float) this.rr.Next(-80, -60) / 100f;
            this.GunupForce = (float) this.rr.Next(50, 70) / 100f;
            this.GunvelocShell = Vector3.Transform(new Vector3(this.Gunleft, this.GunupForce, 0.0f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            this.GunInherit = Vector3.Transform(new Vector3(-this.dirInput.X, 0.0f, this.dirInput.Y), Matrix.CreateRotationY(this.headRot)) * (float) ((double) Math.Abs(this.dirInput.X) * 1.7999999523162842 + (double) Math.Abs(this.dirInput.Y) * 2.0);
            this.Gunoffspin = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
            this.dropBulletShell(ref this.secondShell, 0.45f, 0.7f, 0.28f, this.Gunoffspin * this.sc.shellExit[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, 0.8f * this.GunInherit + this.GunvelocShell, true, -0.06f, 15, 150f, 350f);
          }
          this.BossDistance = Math.Min(Cutty4.shortestDistance, Princess4.shortestDistance);
          if (!flag7)
          {
            if ((double) this.cursor.closestIntersection < (double) this.boar.npcDist && (double) this.cursor.closestIntersection < (double) this.BossDistance)
            {
              if (this.sc.mustarDay && this.sc.goldKeys.blimpHit > 0 && (double) this.cursor.closestIntersection >= 10000.0)
              {
                this.distCheck = this.cursor.hitSphere(this.myPlayer.gunpos, this.myPlayer.gunlook, new Vector3(0.0f, 0.0f, -41f) + this.sc.goldKeys.blimpTrans, 419f);
                if (this.distCheck.HasValue)
                {
                  bool flag13 = false;
                  if (this.sc.goldKeys.propHit > 0)
                  {
                    float? nullable = this.cursor.hitSphere(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Transform(new Vector3(0.0f, 0.0f, -243f), this.sc.goldKeys.myRot) + this.sc.goldKeys.blimpTrans, 20f);
                    if (nullable.HasValue)
                    {
                      --this.sc.goldKeys.propHit;
                      flag13 = true;
                      if (this.sc.goldKeys.propHit <= 0)
                        this.blimp2(Vector3.Transform(new Vector3(0.0f, 0.0f, -243f), this.sc.goldKeys.myRot) + this.sc.goldKeys.blimpTrans);
                      else
                        this.sc.buzz.Play(this.sc.ev, 0.3f, 0.0f);
                      Vector3 vector3_9 = this.cursor.rayDir * nullable.Value + this.cursor.rayPos;
                      int num = this.rr.Next(215, 325);
                      for (int index = 0; index < num; ++index)
                      {
                        int maxValue1 = this.rr.Next(100, 225);
                        int maxValue2 = this.rr.Next(1250, 1950);
                        Vector3 vector3_10 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f);
                        this.sparks.AddParticle(vector3_9 + vector3_10 * 10f, new Vector3(0.0f + vector3_10.X, 1f + vector3_10.Y, 0.0f + vector3_10.Z) * (float) this.rr.Next(120, maxValue2) / 10f);
                      }
                    }
                  }
                  if (!flag13 && this.sc.goldKeys.carryHit > 0)
                  {
                    float? nullable = this.cursor.hitSphere(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Transform(new Vector3(0.0f, -81f, 22f), this.sc.goldKeys.myRot) + this.sc.goldKeys.blimpTrans, 15f);
                    if (nullable.HasValue)
                    {
                      --this.sc.goldKeys.carryHit;
                      if (this.sc.goldKeys.carryHit <= 0)
                        this.blimp3(Vector3.Transform(new Vector3(0.0f, -81f, 22f), this.sc.goldKeys.myRot) + this.sc.goldKeys.blimpTrans);
                      else
                        this.sc.buzz.Play(this.sc.ev, -0.2f, 0.0f);
                      flag13 = true;
                      Vector3 vector3_11 = this.cursor.rayDir * nullable.Value + this.cursor.rayPos;
                      int num = this.rr.Next(215, 325);
                      for (int index = 0; index < num; ++index)
                      {
                        int maxValue3 = this.rr.Next(100, 225);
                        int maxValue4 = this.rr.Next(1250, 2350);
                        Vector3 vector3_12 = new Vector3((float) this.rr.Next(-maxValue3, maxValue3) / 100f, (float) this.rr.Next(-maxValue3, maxValue3) / 100f, (float) this.rr.Next(-maxValue3, maxValue3) / 100f);
                        this.sparks.AddParticle(vector3_11 + vector3_12 * 10f, new Vector3(0.0f + vector3_12.X, 1f + vector3_12.Y, 0.0f + vector3_12.Z) * (float) this.rr.Next(120, maxValue4) / 10f);
                      }
                    }
                  }
                  if (!flag13)
                  {
                    float? nullable = this.cursor.hitSphere(this.myPlayer.gunpos, this.myPlayer.gunlook, this.sc.goldKeys.blimpTrans, 160f);
                    if (nullable.HasValue)
                    {
                      float num12 = 0.01f;
                      int num13 = this.rr.Next(40, 90);
                      if (this.sc.goldKeys.propHit <= 0 && this.sc.goldKeys.carryHit <= 0)
                      {
                        --this.sc.goldKeys.blimpHit;
                        this.sc.sproing[this.rr.Next(0, 2)].Play(this.sc.ev, 0.4f, 0.0f);
                        num12 = 0.022f;
                        num13 = this.rr.Next(200, 340);
                      }
                      float num14 = nullable.Value;
                      this.sc.goldKeys.blimpVeloc += (float) this.rr.Next(120, 340) / 100f * (this.cursor.rayDir + new Vector3((float) this.rr.Next(-150, 150) / 100f, -this.cursor.rayDir.Y, (float) this.rr.Next(-150, 150) / 100f));
                      Vector3 vector3_13 = Vector3.Normalize(this.sc.goldKeys.blimpTrans - (Vector3.Normalize(this.myPlayer.gunlook - this.myPlayer.gunpos) * (num14 + 200f) + this.myPlayer.gunpos));
                      this.sc.goldKeys.ray = (float) (this.rr.Next(60, 100) / 10) * vector3_13;
                      this.sc.goldKeys.rayAmt = num12;
                      if (this.sc.goldKeys.blimpHit <= 0)
                      {
                        this.blimp1(this.sc.goldKeys.blimpTrans);
                        this.sc.pickup1.Play(this.sc.ev, 0.1f, 0.0f);
                        this.memoIcon = 2;
                        this.memoTimer = 320;
                        BloodnBacon4PT.memo.Length = 0;
                        BloodnBacon4PT.memo.Append("Secret Item Found : Gas Mask");
                        this.sc.hats[7] = 1;
                        this.sc.SaveEquipables();
                        this.sc.hatindex = 7;
                        this.sc.trophy.win(this.sc.trophy.hindenburg);
                      }
                      Vector3 vector3_14 = this.cursor.rayDir * num14 + this.cursor.rayPos;
                      for (int index = 0; index < num13; ++index)
                      {
                        int maxValue5 = this.rr.Next(100, 225);
                        int maxValue6 = this.rr.Next(2250, 3350);
                        Vector3 vector3_15 = new Vector3((float) this.rr.Next(-maxValue5, maxValue5) / 100f, (float) this.rr.Next(-maxValue5, maxValue5) / 100f, (float) this.rr.Next(-maxValue5, maxValue5) / 100f);
                        this.sparks.AddParticle(vector3_14 + vector3_15 * 10f, new Vector3(0.0f + vector3_15.X, 1f + vector3_15.Y, 0.0f + vector3_15.Z) * (float) this.rr.Next(120, maxValue6) / 10f);
                      }
                    }
                  }
                }
              }
              bool onlySparks = false;
              if (this.inFarm == 1)
              {
                this.distCheck = this.cursor.hitBox(this.myPlayer.gunpos, this.myPlayer.gunlook, this.grinderMin, this.grinderMax);
                if (this.distCheck.HasValue)
                {
                  onlySparks = true;
                  this.shootButtons(this.cursor.closestIntersection * this.cursor.rayDir + this.cursor.rayPos);
                }
              }
              if (this.tunneladd)
              {
                if (!this.twinshot && this.enemy1.skull.hitindex == -1 && (double) skullkins.pumpkindistance == 10000.0)
                {
                  bool flag14 = false;
                  for (int index = 0; index < this.combo.Count; ++index)
                  {
                    if (this.combo[index].doorFlag)
                    {
                      this.bulletHit(ref this.combo[index].doorholes, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                      flag14 = true;
                    }
                  }
                  for (int index = 0; index < this.plain.Count; ++index)
                  {
                    if (this.plain[index].doorFlag)
                    {
                      this.bulletHit(ref this.plain[index].doorholes, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                      flag14 = true;
                    }
                  }
                  for (int index = 0; index < this.hidden.Count; ++index)
                  {
                    if (this.hidden[index].doorFlag)
                    {
                      this.bulletHit(ref this.hidden[index].doorholes, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                      flag14 = true;
                    }
                  }
                  if (!flag14)
                  {
                    if (this.cursor.isDoor)
                      this.bulletHit(ref this.door, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                    else if (this.cursor.isCrypt)
                      this.bulletHit(ref this.cryptdoor, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                    else if (this.cursor.isCrypt2)
                      this.bulletHit(ref this.cryptdoor2, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                    else
                      this.bulletHit(ref this.farm, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                  }
                  this.myPlayer.now.destiny = this.cursor.rayPos + this.cursor.closestIntersection * this.cursor.rayDir;
                }
                else
                {
                  if (this.twinshot)
                    this.myPlayer.now.destiny = this.twinDestiny;
                  if (this.enemy1.skull.hitindex != -1)
                    this.myPlayer.now.destiny = this.enemy1.outside;
                }
              }
              else
              {
                if (this.cursor.isDoor)
                  this.bulletHit(ref this.door, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                else
                  this.bulletHit(ref this.farm, this.cursor, this.myPlayer.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.mybloodColor);
                this.myPlayer.now.destiny = this.cursor.rayPos + this.cursor.closestIntersection * this.cursor.rayDir;
              }
            }
            else
              this.myPlayer.now.destiny = (double) this.boar.npcDist >= (double) this.BossDistance ? this.cursor.rayPos + this.BossDistance * this.cursor.rayDir : this.cursor.rayPos + this.boar.npcDist * this.cursor.rayDir;
          }
        }
      }
      if (this.pim1.mirvMoving || this.pim1.mirvSeeStreaks)
        this.updateMirv(ref this.pim1, ref this.mirvs1);
      if (this.pim2.mirvMoving || this.pim2.mirvSeeStreaks)
        this.updateMirv(ref this.pim2, ref this.mirvs2);
      this.updateBulletShell(ref this.primShell, 1200f, 2);
      this.updateBulletShell(ref this.secondShell, 1200f, 4);
      this.updateBulletShell(ref this.primShell_rem, 1200f, 2);
      this.updateBulletShell(ref this.secondShell_rem, 1200f, 4);
      if ((double) this.sc.myTimer % 5.0 == 0.0)
        this.hitOne = false;
      this.updateFireworks();
      this.updatePigPart(ref this.head, 2200f);
      this.updatePigPart(ref this.leg, 2200f);
      this.updatePigPart(ref this.body, 2200f);
      this.updatePigPart(ref this.butt, 2200f);
      this.updateCarnage(ref this.carnage, 4000f);
      this.updateCarnage(ref this.pigbone, 4000f);
      this.updateChar(ref this.charro, 4000f);
      if (this.leverTimer > 0)
        this.updateZolt(ref this.zolt, 4000f);
      this.pickupGlow = false;
      this.pickupIndex = -1;
      this.pickupType = -1;
      this.pickupDot = 0.0f;
      this.updatePickup(ref this.milk, 2000f, 0);
      this.updatePickup(ref this.grenade, 2000f, 1);
      this.updatePickup(ref this.bulletbox, 2000f, 2);
      this.updatePickup(ref this.hulkcan, 2000f, 3);
      this.updatePickup(ref this.pill, 2000f, 4);
      this.updatePickup(ref this.rocket, 2000f, 5);
      this.updateGrenade(ref this.grenadeThrow, 4000f, 4);
      this.updateGrenadeDebris(ref this.debris, 4000f, 5);
      this.updateExplosion(ref this.grenExplosion);
      this.updateExplosion2(ref this.mirvExplosion);
      this.updateGore(ref this.pigchunk, 2000f);
      this.updateScreenSplat();
      if (this.sc.host && this.sc.gameState == 0 && !this.barnDoorOpen && this.weAreOutdoors && this.barnDoorLocked && this.boarDropTimer.Count <= 0 && (Cutty4.cuttyCount == 0 || Cutty4.cuttyDoneSpeech))
        this.boarDropTrigger = true;
      this.sendPacketThisFrame = false;
      ++this.framesSinceLastSend;
      if (this.framesSinceLastSend >= this.framesBetweenPackets)
      {
        this.sendPacketThisFrame = true;
        this.framesSinceLastSend = 0;
      }
      this.SendOutgoingPackets();
      int num15 = 400;
      if (this.sc.gameState == 0)
        num15 = 250;
      if ((double) this.sc.myTimer % (double) num15 != 0.0 && !this.kickme)
        return;
      if (this.sc.host && this.sc.lobby.createdLobby.Count > 0)
      {
        CSteamID csteamId = this.sc.lobby.createdLobby[0];
        int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(csteamId);
        if (numLobbyMembers < this.remPlayer.Count || this.sc.gameState == 0)
        {
          this.deletePlayers.Clear();
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            CSteamID id = this.remPlayer[index].id;
            bool flag15 = true;
            for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
            {
              if (SteamMatchmaking.GetLobbyMemberByIndex(csteamId, iMember) == id)
              {
                flag15 = false;
                break;
              }
            }
            if (flag15)
              this.deletePlayers.Add(id);
          }
          for (int index = 0; index < this.deletePlayers.Count; ++index)
            this.delPlayer(this.deletePlayers[index], csteamId);
        }
      }
      else if (this.sc.lobby.joinedLobby.Count > 0)
      {
        CSteamID csteamId = this.sc.lobby.joinedLobby[0];
        int numLobbyMembers = SteamMatchmaking.GetNumLobbyMembers(csteamId);
        if (numLobbyMembers >= 2 && !this.kickme)
        {
          if (numLobbyMembers < this.remPlayer.Count || this.sc.gameState == 0)
          {
            this.deletePlayers.Clear();
            for (int index = 0; index < this.remPlayer.Count; ++index)
            {
              CSteamID id = this.remPlayer[index].id;
              bool flag16 = true;
              for (int iMember = 0; iMember < numLobbyMembers; ++iMember)
              {
                if (SteamMatchmaking.GetLobbyMemberByIndex(csteamId, iMember) == id)
                {
                  flag16 = false;
                  break;
                }
              }
              if (flag16)
              {
                if (!this.remPlayer[index].r.isHost)
                {
                  this.deletePlayers.Add(id);
                }
                else
                {
                  this.sc.errorMessage = "#2 the host left the game ";
                  this.sc.errorMessageTimer = 360;
                  this.ExitNow();
                  return;
                }
              }
            }
            for (int index = 0; index < this.deletePlayers.Count; ++index)
              this.delPlayer(this.deletePlayers[index], csteamId);
          }
        }
        else
        {
          int num16 = this.rr.Next(0, 10);
          this.sc.errorMessage = "get out you bum";
          if (num16 == 1)
            this.sc.errorMessage = "someone doesnt like you";
          if (num16 == 2)
            this.sc.errorMessage = "stop your trollin";
          if (num16 == 3)
            this.sc.errorMessage = "you got kicked out";
          if (num16 == 4)
            this.sc.errorMessage = "your not wanted in there";
          if (num16 == 5)
            this.sc.errorMessage = "find your own game";
          if (num16 == 6)
            this.sc.errorMessage = "see you later skater";
          if (num16 == 7)
            this.sc.errorMessage = "dont try that again";
          if (num16 == 8)
            this.sc.errorMessage = "go eat your feelings";
          if (num16 == 9)
            this.sc.errorMessage = "yes you were kicked";
          this.sc.errorMessageTimer = 300;
          if (!this.kickme)
          {
            this.sc.errorMessage = "#1 you were alone";
            this.sc.errorMessageTimer = 360;
          }
          this.ExitNow();
          return;
        }
      }
      this.kickme = false;
    }

    private void setPaintBallGun(bool setit)
    {
      if (setit)
      {
        this.mybloodColor = this.paintballColor;
        this.sendmybloodColor = this.mybloodColor;
        this.myPlayer.reload = true;
        this.sc.paintColor = 12 + this.mybloodColor;
        this.sc.paintColorCanvas = 12 + this.mybloodColor;
        this.blood.setPaintball(this.sprayTexture[this.mybloodColor], new Vector4(1f, 1f, 1f, 1f), new Vector4(1f, 1f, 1f, 1f));
      }
      else
      {
        this.mybloodColor = 0;
        this.sendmybloodColor = 0;
        this.myPlayer.reload = true;
        this.sc.paintColor = 5;
        this.sc.paintColorCanvas = 8;
        this.blood.setPaintball(this.sprayTexture[0], new Vector4(0.4f, 0.4f, 0.4f, 1f), new Vector4(0.8f, 0.8f, 0.8f, 1f));
      }
    }

    public void HandleLocal()
    {
      if (this.leavingGame)
        return;
      if ((this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.Space) || this.gamePad.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Released) && (double) this.introSpeed < 10.0)
        this.introSpeed *= 2f;
      if (this.KMtoggle(this.sc.plus_key))
        this.sc.nextLoadout();
      this.myPlayer.isLiftingOpponent = false;
      this.myPlayer.isLiftingIndex = 0;
      bool flag1 = this.gamePad.IsButtonDown(Buttons.Back) && this.prevState.IsButtonUp(Buttons.Back) || this.keyState.IsKeyDown(this.sc.escape_key) && this.prevkeyState.IsKeyUp(this.sc.escape_key);
      if (this.IsActive && flag1 && (double) this.sc.introCamera <= 0.0 && !this.editCam)
      {
        if (this.myPlayer.stats_record && (double) this.myPlayer.stats_sendTimer <= (double) this.sc.myTimer + 500.0)
        {
          this.myPlayer.stats_send = true;
          this.myPlayer.stats_sendTimer = (int) this.sc.myTimer;
        }
        this.memoTimer = 0;
        walletScreen screen1 = new walletScreen();
        screen1.Cancelled += (EventHandler<PlayerIndexEventArgs>) ((sender, e) => this.walletOpen = false);
        screen1.Restart += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
        {
          this.walletOpen = false;
          if ((double) this.myPlayer.now.health < 100.0)
            ++this.sc.weFailed;
          this.loader = true;
          this.loaderFlag1 = false;
          this.loaderFlag2 = false;
          this.sc.harp2.Play(this.sc.ev * 0.9f, 0.2f, 0.0f);
        });
        this.sc.kickplayerID.Clear();
        this.sc.kickplayerName.Clear();
        if (this.sc.host && this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID) && !this.sc.kickplayerID.Contains(this.remPlayer[index].id))
            {
              this.sc.kickplayerID.Add(this.remPlayer[index].id);
              this.sc.kickplayerName.Add(this.remPlayer[index].r.remgamertag);
            }
          }
        }
        screen1.KickPlayer += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
        {
          this.walletOpen = false;
          if (this.sc.kickplayerID.Count == 1)
          {
            this.myPlayer.kicked = true;
            this.sc.kickID = this.sc.kickplayerID[0];
            this.sc.hurt.Play(this.sc.ev, 0.0f, 0.0f);
            this.memoIcon = 1;
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("kicking " + this.sc.kickplayerName[0]);
            this.memoTimer = 120;
          }
          this.delayinput = true;
        });
        screen1.ExitGame += (EventHandler<PlayerIndexEventArgs>) ((sender1, e1) =>
        {
          this.walletOpen = false;
          MessageBoxScreen2 screen2 = new MessageBoxScreen2("You Done?\n", 1);
          screen2.Accepted += (EventHandler<PlayerIndexEventArgs>) ((sender2, e2) =>
          {
            this.sc.protectScreen = false;
            this.exitNicer();
            this.leavingGame = true;
            GC.Collect();
            int num = this.rr.Next(0, 24);
            this.sc.errorMessage = "we don't like quitters. . .";
            if (num == 1)
              this.sc.errorMessage = "the farm won't miss you";
            if (num == 2)
              this.sc.errorMessage = "that was your choice";
            if (num == 3)
              this.sc.errorMessage = "see you later ragequitter";
            if (num == 4)
              this.sc.errorMessage = "come back if you got a pair";
            if (num == 5)
              this.sc.errorMessage = "play with a friend";
            if (num == 6)
              this.sc.errorMessage = "go play some minecraft";
            if (num == 7)
              this.sc.errorMessage = "xna is alive and kicking";
            if (num == 8)
              this.sc.errorMessage = "go eat your feelings";
            if (num == 9)
              this.sc.errorMessage = "go play some fallout4";
            if (num == 10)
              this.sc.errorMessage = "get out and stay out";
            if (num == 11)
              this.sc.errorMessage = "how do you like me now?";
            if (num == 12)
              this.sc.errorMessage = "go cry into your pillow";
            if (num == 13)
              this.sc.errorMessage = "cruelty to dirty parts";
            if (num == 14)
              this.sc.errorMessage = "you hurt all the creatures";
            if (num == 15)
              this.sc.errorMessage = "this game is too violent";
            if (num == 16)
              this.sc.errorMessage = "steam games are the best";
            if (num == 17)
              this.sc.errorMessage = "go stuff your face now";
            if (num == 18)
              this.sc.errorMessage = "mac and cheese and guns";
            if (num == 19)
              this.sc.errorMessage = "your pizza is ready";
            if (num == 20)
              this.sc.errorMessage = "go play some dota 2";
            if (num == 21)
              this.sc.errorMessage = "go play some team fortress";
            if (num == 22)
              this.sc.errorMessage = "go play some gta v";
            if (num == 23)
              this.sc.errorMessage = "go play that cs:go game";
            this.sc.errorMessageTimer = 400;
            this.closeallSessions();
            LoadingScreen1.Load(this.sc, false, new PlayerIndex?(), this.networkSession, (GameScreen) new MainMenu(false));
          });
          this.sc.AddScreen((GameScreen) screen2, new PlayerIndex?(this.playerIndex));
        });
        this.sc.AddScreen((GameScreen) screen1, new PlayerIndex?(this.playerIndex));
        this.walletOpen = true;
      }
      if ((double) this.sc.introCamera <= 0.0)
      {
        bool flag2 = this.KMtoggle(this.sc.enter_key);
        if (!this.sc.chat.message2send && flag2 && !this.editCam)
        {
          this.sc.chatIndex = 0;
          MessageBoxScreen2 screen = new MessageBoxScreen2("", 5, this.mysteamID.m_SteamID);
          screen.Failed += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
          {
            this.sc.chatFade = 1f;
            this.sc.abort.Play(this.sc.ev, -0.5f, 0.0f);
            this.delayinput = true;
            this.sc.chat.message2send = false;
            this.sc.chat.message = "";
          });
          screen.Cancelled += (EventHandler<PlayerIndexEventArgs>) ((sender, e) =>
          {
            this.sc.chatFade = 1f;
            this.sc.abort.Play(this.sc.ev, 0.4f, 0.0f);
            this.sc.chat.message2send = false;
            this.sc.chat.message = "";
            this.delayinput = true;
          });
          this.sc.AddScreen((GameScreen) screen, new PlayerIndex?(this.playerIndex));
        }
        this.dirInput = Vector2.Zero;
        this.myPlayer.bool_0 = false;
        this.myPlayer.dropshellAK = false;
        this.myPlayer.gunFired = false;
        --this.myPlayer.gunDelay;
        this.myPlayer.recoilTimer -= 0.2f;
        this.myPlayer.recoilTimer2 -= 0.1f;
        if (!this.emptyGun && (double) this.myPlayer.gunDelay == 1.0 && this.myPlayer.gunChoice == 8)
          this.overRide = true;
        if ((double) this.myPlayer.recoilTimer <= 0.0)
          this.myPlayer.recoilTimer = 0.0f;
        if ((double) this.myPlayer.recoilTimer2 <= 0.0)
          this.myPlayer.recoilTimer2 = 0.0f;
        this.myPlayer.flashTimer -= 0.24f;
        this.myPlayer.blastTimer -= 0.8f;
        --this.myPlayer.milkEffects;
        --this.myPlayer.hulkEffects;
        if (this.myPlayer.milkEffects <= 0 && this.myPlayer.onMilk)
        {
          this.myPlayer.milkEffects = 0;
          this.myPlayer.onMilk = false;
          remotePlayer4.weareUsingMilk = false;
          this.sc.protectScreen = false;
        }
        if (this.myPlayer.hulkEffects <= 0 && this.myPlayer.onHulk)
        {
          this.myPlayer.hulkEffects = 0;
          if (this.myPlayer.onHulk)
          {
            if (this.localID == 0)
              this.texture2D_1 = this.sc.texture2D_4;
            if (this.localID == 1)
              this.texture2D_1 = this.sc.texture2D_13;
            if (this.localID == 2)
              this.texture2D_1 = this.sc.texture2D_5;
            if (this.localID == 3)
              this.texture2D_1 = this.sc.texture2D_6;
            if (this.localID == 4)
              this.texture2D_1 = this.sc.texture2D_7;
            if (this.localID == 5)
              this.texture2D_1 = this.sc.texture2D_8;
            if (this.localID == 7)
              this.texture2D_1 = this.sc.texture2D_9;
            if (this.localID == 8)
              this.texture2D_1 = this.sc.texture2D_10;
            if (this.localID == 9)
              this.texture2D_1 = this.sc.texture2D_11;
            if (this.localID == 10)
              this.texture2D_1 = this.sc.texture2D_12;
            this.localClean = 0.4f;
            this.localCleanOn = true;
            this.sc.hulkRoar2.Play(this.sc.ev, 0.0f, 0.0f);
          }
          this.myPlayer.onHulk = false;
        }
        this.myPlayer.now.weapon = this.myPlayer.gunChoice;
        string type = "";
        bool flag3 = this.keyState.IsKeyDown(this.sc.f10_key) && this.prevkeyState.IsKeyUp(this.sc.f10_key);
        if (this.inFarm == 1 && (this.gamePad.Buttons.Start == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.Start == Microsoft.Xna.Framework.Input.ButtonState.Released || flag3))
        {
          if (!this.editCam && !this.myPlayer.autoCamOn && !this.myPlayer.isDown)
          {
            if (this.myPlayer.closeCam)
            {
              this.myPlayer.closeCam = false;
              this.camIndex = 0;
            }
            this.camheight = this.camheightArray[this.camIndex];
            this.camradian = this.camradianArray[this.camIndex];
            this.vector3_0 = this.camposArray[this.camIndex];
            this.camlookpos3rd = this.camlookArray[this.camIndex];
            this.editCam = true;
            this.myPlayer.closeCam = false;
            this.old_camheight = this.camheight;
            this.old_camradian = this.camradian;
            this.old_campos3rd = this.vector3_0;
            this.old_camlookpos3rd = this.camlookpos3rd;
            this.int_2 = this.camIndex;
          }
          else
          {
            this.editCam = false;
            this.camheight = this.old_camheight;
            this.camradian = this.old_camradian;
            this.vector3_0 = this.old_campos3rd;
            this.camlookpos3rd = this.old_camlookpos3rd;
            this.sc.abort.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.myPlayer.closeCam = true;
            this.camIndex = 0;
          }
        }
        if (this.editCam)
        {
          if (this.gamePad.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Released || this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.A) || this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.Enter))
          {
            if (this.camIndex == 0)
            {
              this.sc.camradian1 = this.camradian;
              this.sc.camheight1 = this.camheight;
              this.sc.vector3_0 = this.vector3_0;
              this.sc.camlookpos3rd1 = this.camlookpos3rd;
            }
            if (this.camIndex == 1)
            {
              this.sc.camradian2 = this.camradian;
              this.sc.camheight2 = this.camheight;
              this.sc.vector3_1 = this.vector3_0;
              this.sc.camlookpos3rd2 = this.camlookpos3rd;
            }
            this.sc.SavePrefs();
            this.editCam = false;
            this.sc.harp2.Play(this.sc.ev * 0.8f, 0.0f, 0.0f);
            this.camradianArray[this.camIndex] = this.camradian;
            this.camheightArray[this.camIndex] = this.camheight;
            this.camposArray[this.camIndex] = this.vector3_0;
            this.camlookArray[this.camIndex] = this.camlookpos3rd;
            this.delayinput = true;
            this.prevkeyState = this.keyState;
          }
          if (this.gamePad.Buttons.B == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.B == Microsoft.Xna.Framework.Input.ButtonState.Released || this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.B) || this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.Escape))
          {
            this.editCam = false;
            this.camheight = this.old_camheight;
            this.camradian = this.old_camradian;
            this.vector3_0 = this.old_campos3rd;
            this.camlookpos3rd = this.old_camlookpos3rd;
            this.sc.abort.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            this.myPlayer.closeCam = true;
            this.camIndex = 0;
          }
          bool flag4 = this.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && this.prevkeyState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys.X);
          GamePadButtons buttons = this.gamePad.Buttons;
          if (buttons.X == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
          {
            buttons = this.prevState.Buttons;
            if (buttons.X == Microsoft.Xna.Framework.Input.ButtonState.Released)
              goto label_69;
          }
          if (!flag4)
            goto label_72;
label_69:
          ++this.int_2;
          if (this.int_2 > this.string_0.Length - 1)
            this.int_2 = 0;
          this.camradian = this.camradianArray[this.int_2];
          this.camheight = this.camheightArray[this.int_2];
          this.vector3_0 = this.camposArray[this.int_2];
          this.camlookpos3rd = this.camlookArray[this.int_2];
label_72:
          float num1 = 1.5f;
          float num2 = 1.5f;
          float max1 = 900f;
          float max2 = 400f;
          float num3 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
          float num4 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
          bool flag5 = this.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          bool flag6 = this.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed;
          this.camradian += this.gamePad.ThumbSticks.Right.X / 40f;
          if (flag5)
            this.camradian += num3 / 420f;
          this.camheight += (float) ((double) this.sc.pad_invertY * (double) this.gamePad.ThumbSticks.Right.Y / 40.0);
          if (flag5)
            this.camheight -= num4 / 420f * this.sc.pad_invertY;
          this.camheight = MathHelper.Clamp(this.camheight, 1.7f, 4.5f);
          Vector2 vector2 = -(this.gamePad.ThumbSticks.Left * num1);
          vector2.X *= Math.Abs(vector2.X);
          vector2.Y *= Math.Abs(vector2.Y);
          if (flag6)
            vector2.Y = num4 / 20f;
          if (!flag5 && !flag6)
            vector2.X -= num3 / 20f;
          Vector3 vector3 = (Vector3.Transform(new Vector3((float) (-(double) vector2.X * 0.800000011920929), 0.0f, vector2.Y), Matrix.CreateRotationY(-3.14f - this.camradian)) * -(float) Math.Cos((double) this.camheight) * 1.5f) with
          {
            Y = vector2.Y * (float) Math.Sin((double) this.camheight)
          };
          vector3.Y -= this.gamePad.Triggers.Right * this.gamePad.Triggers.Right * num2;
          vector3.Y += this.gamePad.Triggers.Left * this.gamePad.Triggers.Left * num2;
          if (!flag5 && !flag6)
            vector3.Y -= num4 / 20f;
          this.vector3_0 += vector3;
          float height = 0.0f;
          this.GetHeightFast(ref this.farmheights, this.campos, ref height);
          if (((double) height < 0.0 || (double) this.campos.X < 850.0 || (double) this.campos.X > 5150.0 || (double) this.campos.Z > 5150.0 ? 1 : ((double) this.campos.Z < 850.0 ? 1 : 0)) == 0 && this.inFarm == 1)
            height = 0.0f;
          this.vector3_0.Y = MathHelper.Clamp(this.vector3_0.Y, (float) (2.0 + ((double) height - (double) this.myPlayer.displayState.npcPosition.Y)), max1);
          this.vector3_0.X = MathHelper.Clamp(this.vector3_0.X, -max2, max2);
          this.vector3_0.Z = MathHelper.Clamp(this.vector3_0.Z, -max2, max2);
          this.camlookpos3rd.X = (float) (-Math.Cos((double) this.camheight) * Math.Sin((double) this.camradian) * -50.0) + this.vector3_0.X;
          this.camlookpos3rd.Z = (float) (-Math.Cos((double) this.camheight) * -Math.Cos((double) this.camradian) * -50.0) + this.vector3_0.Z;
          this.camlookpos3rd.Y = (float) Math.Sin((double) this.camheight) * -50f + this.vector3_0.Y;
        }
        else if (this.IsActive)
        {
          if (this.sc.cheat_killboss && this.gamePad.Buttons.RightShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.RightShoulder == Microsoft.Xna.Framework.Input.ButtonState.Released && Princess4.cuttyCount > 0)
          {
            this.princess[0].death1 = true;
            this.princess[0].cuttyisDead = false;
            this.princess[0].health = (ushort) 0;
          }
          bool flag7 = (double) this.gamePad.Triggers.Right > 0.0 || this.KMdown(this.sc.lmb_key);
          GamePadTriggers triggers = this.prevState.Triggers;
          bool flag8 = (double) triggers.Right <= 0.0 && this.method_1(this.sc.lmb_key);
          bool flag9 = this.myPlayer.gunChoice == 6 || this.myPlayer.gunChoice == 10 || this.myPlayer.gunChoice == 12 || this.myPlayer.gunChoice == 16 || this.myPlayer.gunChoice == 18 || this.myPlayer.gunChoice == 20;
          if ((double) this.myPlayer.now.health > 0.0 && this.myPlayer.animClip != 3 && this.myPlayer.gunChoice < this.gType && flag7 && (flag8 || flag9) && (double) this.myPlayer.gunDelay <= 0.0)
          {
            if (this.myPlayer.mag[this.myPlayer.lastWeapon] == 0)
            {
              this.myPlayer.gunDelay = 20f;
              this.emptyGun = true;
              if (this.handtype[this.myPlayer.gunChoice] == 1)
              {
                if (this.myPlayer.animClip == -1)
                  this.primDry.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                if (this.myPlayer.gunChoice == 0)
                  this.chamberSpin = 1f;
                if (this.myPlayer.animClip == -1 && this.myPlayer.ammo[this.myPlayer.gunChoice] > 0 && this.sc.pad_reload)
                  type = "guncock";
              }
              else
              {
                if (this.myPlayer.animClip == -1)
                  this.secDry.Play(this.sc.ev, (float) this.rr.Next(-10, 5) / 100f, 0.0f);
                if (this.myPlayer.animClip == -1 && this.sc.pad_reload)
                {
                  if (this.myPlayer.gunChoice != 14 && this.myPlayer.gunChoice < this.gType && this.myPlayer.ammo[this.myPlayer.gunChoice] > 0)
                    type = "guncock";
                  if (this.myPlayer.gunChoice == 14)
                  {
                    if ((this.sc.rockets > 0 || this.myPlayer.ammo[14] > 0) && this.myPlayer.mag[14] == 0)
                    {
                      this.myPlayer.ammo[14] = this.sc.rockets - 1;
                      if (this.myPlayer.ammo[14] < 0)
                        this.myPlayer.ammo[14] = 0;
                      this.myPlayer.mag[14] = 1;
                      this.secondaryCock.Play(this.sc.ev, -0.2f, 0.0f);
                    }
                    else
                      this.sc.abort.Play(this.sc.ev, -0.5f, 0.0f);
                  }
                }
              }
              if (this.sc.cheat_InfiniteAmmo)
                this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon];
            }
            else
            {
              if (this.myPlayer.stats_record)
                ++this.myPlayer.stats_shotsfired;
              this.emptyGun = false;
              this.myPlayer.gunFired = true;
              if (this.myPlayer.gunChoice == 16 && this.sendmybloodColor != this.mybloodColor)
                this.setPaintBallGun(true);
              if (this.myPlayer.gunChoice != 16 && this.mybloodColor != 0)
                this.setPaintBallGun(false);
              this.myPlayer.now.gunfired = 1;
              if (this.farmerJawIndex < 0)
                this.shootmeCounter = 0;
              this.myPlayer.now.weapon = this.myPlayer.gunChoice;
              this.myPlayer.flashTimer = 1f;
              this.myPlayer.blastTimer = 4.5f;
              this.myPlayer.blastRot = (float) this.rr.Next(-800, 800) / 100f;
              if (this.myPlayer.gunChoice == 10)
              {
                this.myPlayer.blastTimer = 2.5f;
                this.myPlayer.blastRot = (float) this.rr.Next(-10, 10) / 100f;
              }
              if (this.myPlayer.gunChoice < this.gType)
                this.myPlayer.gunsideScale = (float) this.rr.Next((int) this.sc.sf[this.myPlayer.lastWeapon].X, (int) this.sc.sf[this.myPlayer.lastWeapon].Y) / 100f;
              if (this.myPlayer.gunChoice < this.gType)
                this.myPlayer.gunfrontScale = (float) this.rr.Next((int) this.sc.ff[this.myPlayer.lastWeapon].X, (int) this.sc.ff[this.myPlayer.lastWeapon].Y) / 100f;
              this.myPlayer.flashChoice = this.rr.Next(0, 6);
              this.myPlayer.flashSide = 6;
              if (this.myPlayer.gunChoice == 8)
              {
                this.myPlayer.flashChoice = this.rr.Next(6, 12);
                this.myPlayer.flashSide = 12;
              }
              if (this.myPlayer.gunChoice == 10)
              {
                this.myPlayer.flashChoice = this.rr.Next(12, 18);
                this.myPlayer.flashSide = 18;
              }
              if (this.handtype[this.myPlayer.gunChoice] == 1)
              {
                this.myPlayer.recoilTimer = this.sc.recoilTime[this.myPlayer.lastWeapon];
                this.myPlayer.recoilTimer2 = 1.1f;
                this.myPlayer.recoilVec = !this.myPlayer.isDown ? (this.myPlayer.gunChoice == 4 || this.myPlayer.gunChoice == 16 ? new Vector2((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(40, 60) / 10f) : new Vector2((float) this.rr.Next(-80, 40) / 10f, (float) this.rr.Next(120, 150) / 10f)) : (this.myPlayer.closeCam ? new Vector2((float) this.rr.Next(-120, 90) / 10f, (float) this.rr.Next(290, 350) / 10f) : new Vector2((float) this.rr.Next(-80, 50) / 10f, (float) this.rr.Next(90, 150) / 10f));
                this.vibroTimer = this.sc.gunVibro[this.myPlayer.lastWeapon];
                this.vibroTimerAmt = this.sc.gunVibroAmt[this.myPlayer.lastWeapon];
                this.myPlayer.gunDelay = this.sc.gunDelay[this.myPlayer.gunChoice];
              }
              else if (this.handtype[this.myPlayer.gunChoice] == 2)
              {
                this.myPlayer.recoilTimer = this.sc.recoilTime[this.myPlayer.lastWeapon];
                this.myPlayer.recoilTimer2 = 1.2f;
                --this.explosiveCount;
                this.myPlayer.recoilVec = new Vector2((float) this.rr.Next(-40, 20) / 10f, (float) this.rr.Next(40, 60) / 10f);
                if (this.myPlayer.gunChoice == 10)
                  this.myPlayer.recoilVec = new Vector2((float) this.rr.Next(-40, 30) / 20f, (float) this.rr.Next(40, 60) / 30f);
                if (this.myPlayer.gunChoice == 12)
                  this.myPlayer.recoilVec = new Vector2((float) this.rr.Next(-130, 130) / 10f, (float) this.rr.Next(0, 90) / 10f);
                if (this.myPlayer.gunChoice == 18)
                  this.myPlayer.recoilVec = new Vector2((float) this.rr.Next(-10, 10) / 10f, (float) this.rr.Next(5, 40) / 10f);
                if (this.myPlayer.gunChoice == 20)
                  this.myPlayer.recoilVec = new Vector2((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(10, 20) / 10f);
                this.vibroTimer = this.sc.gunVibro[this.myPlayer.lastWeapon];
                this.vibroTimerAmt = this.sc.gunVibroAmt[this.myPlayer.lastWeapon];
                this.myPlayer.gunDelay = this.sc.gunDelay[this.myPlayer.lastWeapon];
              }
              this.hitOpponent = false;
              if (this.remPlayer.Count > 1 && this.sc.hostFriendly)
              {
                for (int index1 = 0; index1 < this.remPlayer.Count; ++index1)
                {
                  if (this.mysteamID == this.remPlayer[index1].id)
                    this.sc.myplayerindex = index1;
                  else if ((double) this.remPlayer[index1].r.player2player < 9000000.0)
                  {
                    int index2 = 7;
                    if (this.myPlayer.gunChoice == 16)
                      index2 = 12 + this.mybloodColor;
                    this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Transform(new Vector3(0.0f, 49f, 0.0f), this.remPlayer[index1].r.skinTransforms[19]), 7f);
                    if (this.distCheck.HasValue)
                    {
                      this.hitOpponent = true;
                      this.addBlood2Body2(index2, index1, 48, 303, 373, 595);
                      Vector3 hit = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
                      if (index2 == 7)
                        this.humanSpray(hit, Vector3.Transform(new Vector3(0.0f, 52f, 0.0f), this.remPlayer[index1].r.skinTransforms[20]));
                    }
                    else
                    {
                      this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Transform(new Vector3(0.0f, 35f, 0.0f), this.remPlayer[index1].r.skinTransforms[16]), 10f);
                      if (this.distCheck.HasValue)
                      {
                        this.hitOpponent = true;
                        this.addBlood2Body2(index2, index1, 0, 286, 0, 191);
                        this.addBlood2Body2(index2, index1, 394, 600, 0, 584);
                        Vector3 hit = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
                        if (index2 == 7)
                          this.humanSpray(hit, Vector3.Transform(new Vector3(0.0f, 35f, 0.0f), this.remPlayer[index1].r.skinTransforms[16]));
                      }
                      else
                      {
                        this.distCheck = this.genCursor.hitSphere2(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Transform(new Vector3(0.0f, 18f, 0.0f), this.remPlayer[index1].r.skinTransforms[1]), 10f);
                        if (this.distCheck.HasValue)
                        {
                          this.hitOpponent = true;
                          this.addBlood2Body2(index2, index1, 272, 418, 0, 426);
                          this.addBlood2Body2(index2, index1, 0, 317, 183, 368);
                          Vector3 hit = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
                          if (index2 == 7)
                            this.humanSpray(hit, Vector3.Transform(new Vector3(4f, 13f, 2f), this.remPlayer[index1].r.skinTransforms[4]));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          this.cursor.Position = new Vector2((float) this.sc.width, (float) this.sc.hite) / 2f;
          this.oppCursor.Position = new Vector2((float) this.sc.width, (float) this.sc.hite) / 2f;
          this.genCursor.Position = new Vector2((float) this.sc.width, (float) this.sc.hite) / 2f;
          if (this.vibroTimer > 0 && this.sc.pad_vibro)
          {
            --this.vibroTimer;
            GamePad.SetVibration(this.playerIndex, 40f / this.vibroTimerAmt, 80f / this.vibroTimerAmt);
          }
          else if (this.grinderVibro > 0 && this.sc.pad_vibro)
          {
            --this.grinderVibro;
            GamePad.SetVibration(this.playerIndex, 20f / this.grinderVibroAmt, 50f / this.grinderVibroAmt);
          }
          else
            GamePad.SetVibration(this.playerIndex, 0.0f, 0.0f);
          bool flag10;
          if (!(flag10 = this.KMdown(this.sc.lmb_key)))
          {
            triggers = this.gamePad.Triggers;
            if ((double) triggers.Right <= 0.0 && this.myPlayer.gunChoice != this.gType)
              this.myPlayer.grenState = (byte) 0;
          }
          if ((this.myPlayer.gunChoice == 100 || this.myPlayer.gunChoice == this.gType) && this.myPlayer.animClip != 13 && this.sc.grenades > 0)
          {
            triggers = this.gamePad.Triggers;
            if (((double) triggers.Right > 0.10000000149011612 || flag10) && this.myPlayer.grenState == (byte) 0)
              this.myPlayer.grenState = (byte) 1;
            triggers = this.gamePad.Triggers;
            if ((double) triggers.Right > 0.85000002384185791 || flag10)
            {
              this.myPlayer.grenState = (byte) 2;
              ++this.myPlayer.grenCook;
              if (this.myPlayer.grenCook > (byte) 250)
              {
                this.myPlayer.grenAge = (byte) 230;
                type = "throw";
                --this.sc.grenades;
                if (this.sc.grenades < 0)
                  this.sc.grenades = 0;
                this.myPlayer.grenCook = (byte) 0;
                this.myPlayer.grenState = (byte) 0;
              }
            }
            triggers = this.gamePad.Triggers;
            if ((double) triggers.Right <= 0.699999988079071 && !flag10 && this.myPlayer.grenState == (byte) 2)
            {
              this.myPlayer.grenAge = this.myPlayer.grenCook <= (byte) 230 ? this.myPlayer.grenCook : (byte) 230;
              type = "throw";
              --this.sc.grenades;
              if (this.sc.grenades < 0)
                this.sc.grenades = 0;
              this.myPlayer.grenCook = (byte) 0;
              this.myPlayer.grenState = (byte) 0;
            }
          }
          triggers = this.gamePad.Triggers;
          if ((double) triggers.Right > 0.0)
          {
            triggers = this.prevState.Triggers;
            if ((double) triggers.Right <= 0.0)
              goto label_181;
          }
          if (!this.KMtoggle(this.sc.lmb_key))
            goto label_202;
label_181:
          if (this.myPlayer.noArms)
          {
            type = "noarms";
          }
          else
          {
            if (this.myPlayer.gunChoice == this.mType && this.myPlayer.animClip != 14 && this.sc.milks > 0)
              type = "drink";
            if (this.myPlayer.gunChoice == this.hType && this.myPlayer.animClip != 14 && this.sc.hulks > 0)
              type = "gulp";
            if (this.myPlayer.gunChoice == this.pType && this.myPlayer.animClip != 14 && this.sc.pills > 0)
            {
              if (this.myPlayer.isDown)
              {
                for (int index = 0; index < 180; ++index)
                  this.sparks.AddParticle(Vector3.Transform(this.vZero, this.sc.gunOffset * this.myPlayer.pistolHand), new Vector3((float) this.rr.Next(-250, 250) / 200f, (float) this.rr.Next(-50, 250) / 200f, (float) this.rr.Next(-250, 250) / 200f) * (float) this.rr.Next(20, 1150) / 20f);
                this.sc.pillswallow.Play(this.sc.ev, (float) this.rr.Next(-5, 5) / 100f, 0.0f);
                remotePlayer4.pillTaken = true;
                if (this.myPlayer.fallState <= 2)
                  this.myPlayer.fallState = 3;
                --this.sc.pills;
                if (this.sc.pills < 0)
                  this.sc.pills = 0;
                this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
                this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
              }
              else
              {
                ++this.buttonsmash;
                if (this.buttonsmash > 3)
                {
                  this.memoTimer = 0;
                  this.buttonsmash = 0;
                  this.sc.pillRattler.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
                }
                if (this.memoTimer <= 0)
                {
                  this.buttonsmash = 0;
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append(this.sc.dumAss[this.dummyIndex]);
                  this.memoTimer = 190;
                  this.sc.newtip.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                  this.memoIcon = 1;
                  ++this.dummyIndex;
                  if (this.dummyIndex > this.sc.dumAss.Length - 1)
                    this.dummyIndex = 0;
                }
              }
            }
          }
label_202:
          if (this.sc.developer && this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.K))
          {
            this.sc.buttonPress.Play(this.sc.ev, 1f, 0.0f);
            this.sc.hover = true;
          }
          if (this.sc.developer && this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.J))
          {
            this.sc.buttonPress.Play(this.sc.ev, -1f, 0.0f);
            this.sc.hover = false;
          }
          if (this.sc.developer && this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.L) && this.lastBoarAlive >= 0)
          {
            this.tempConduct.veloc = new Vector3((float) this.rr.Next(-100, 100) / 100f, (float) this.rr.Next(10, 500) / 100f, (float) this.rr.Next(-100, 100) / 100f);
            this.scheduleAction(ref this.boar, this.lastBoarAlive, 0, 5, true);
          }
          GamePadThumbSticks thumbSticks;
          if (!this.myPlayer.isDown && !this.myPlayer.isLiftingOpponent)
          {
            thumbSticks = this.gamePad.ThumbSticks;
            this.dirInput = thumbSticks.Left;
            if (this.KMdown(this.sc.w_key))
              this.dirInput.Y = 1f;
            if (this.KMdown(this.sc.s_key))
              this.dirInput.Y = -1f;
            if (this.keyState.IsKeyDown(this.sc.a_key))
              this.dirInput.X = -1f;
            if (this.keyState.IsKeyDown(this.sc.d_key))
              this.dirInput.X = 1f;
            if (this.sc.hover && (double) this.dirInput.Y > 0.0)
            {
              if ((double) this.headTilt > 0.10000000149011612)
                this.myPlayer.floaty -= 10f * Math.Abs(this.headTilt);
              if ((double) this.headTilt < -0.10000000149011612)
                this.myPlayer.floaty += 10f * Math.Abs(this.headTilt);
            }
            float num = this.dirInput.LengthSquared();
            if ((double) num < 0.022500000894069672 && !this.keyboardRunToggle)
              this.myPlayer.sprintRest = 0.0f;
            if ((double) num > 0.64000004529953)
              this.dirInput = Vector2.Normalize(this.dirInput);
            else if ((double) num < 0.20000000298023224)
              this.dirInput = Vector2.Zero;
            if (this.myPlayer.milkEffects > 0 && this.inFarm == 1)
            {
              this.dirInput *= 1.5f;
              if (this.myPlayer.isLiftingOpponent)
                remotePlayer4.weareUsingMilk = true;
            }
            this.slowDown += 3f / 1000f;
            if ((double) this.slowDown < 1.0)
              this.dirInput *= this.slowDown;
            this.dirInput *= this.myPlayer.sprint;
            this.dirInput += this.hitVel;
            this.hitVel *= 0.87f;
          }
          thumbSticks = this.gamePad.ThumbSticks;
          float x = thumbSticks.Right.X;
          thumbSticks = this.gamePad.ThumbSticks;
          float y1 = thumbSticks.Right.Y;
          float num5 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
          float num6 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
          float num7 = 20f * this.sc.pad_sensitivity;
          float num8 = 40f * this.sc.pad_sensitivity;
          if (!this.myPlayer.closeCam)
            num8 = 120f * this.sc.pad_sensitivity;
          float num9;
          float num10;
          if ((double) num5 == 0.0 && (double) num6 == 0.0)
          {
            num9 = x * x / num7 * (float) Math.Sign(x);
            num10 = y1 * y1 / num8 * (float) Math.Sign(y1) * this.sc.pad_invertY;
          }
          else
          {
            num9 = num5 / (600f * this.sc.pad_sensitivity);
            num10 = (float) (-(double) num6 / (600.0 * (double) this.sc.pad_sensitivity)) * this.sc.pad_invertY;
          }
          if (this.myPlayer.fallState < 4 && !this.myPlayer.isLiftingOpponent && (double) this.myPlayer.now.health > 0.0)
            this.headRot -= num9;
          if (this.myPlayer.isDown && (double) this.myPlayer.now.health > 0.0)
          {
            float num11 = 40f * this.sc.pad_sensitivity;
            this.headTilt -= num10;
            this.headTilt = MathHelper.Clamp(this.headTilt, 0.0f, 1.2f);
            if (this.myPlayer.fallState == 1)
            {
              this.headTilt = MathHelper.Lerp(this.headTilt, 0.8f, this.myPlayer.frame1 / 30f);
              this.headRot = MathHelper.Lerp(this.headRot, this.myPlayer.feetRot - 0.3f, this.myPlayer.frame1 / 30f);
            }
            else if (this.myPlayer.fallState == 4)
            {
              this.headTilt *= 0.93f;
              this.headRot = MathHelper.Hermite(this.headRot, 0.0f, this.myPlayer.feetRot, 0.0f, this.myPlayer.frame1 / 100f);
            }
          }
          else if (!this.myPlayer.isLiftingOpponent && (double) this.myPlayer.now.health > 0.0)
          {
            this.headTilt -= num10;
            this.headTilt = MathHelper.Clamp(this.headTilt, -1.5f, 1.4f);
          }
          else
          {
            if (this.myPlayer.isLiftingOpponent)
            {
              int index = this.myPlayer.isLiftingIndex - 1;
              if (index >= 0 && index < this.remPlayer.Count && this.remPlayer.Count > 1 && this.remPlayer[index].r.fallState >= 4 && this.remPlayer[index].r.fallState <= 5)
              {
                if ((double) this.remPlayer[index].r.frame1 < 5.0)
                  this.oldHeadTilt = this.headTilt;
                this.headTilt = MathHelper.Lerp(this.oldHeadTilt, 0.0f, (float) ((double) this.remPlayer[index].r.frame1 / 94.0 * ((double) this.remPlayer[index].r.frame1 / 94.0)));
              }
            }
            if (this.myPlayer.fallState >= 11)
            {
              this.headTilt = MathHelper.Lerp(this.headTilt, 0.0f, this.myPlayer.frame1 / 100f);
              this.headRot = MathHelper.Hermite(this.headRot, 0.0f, this.myPlayer.feetRot, 0.0f, this.myPlayer.frame1 / 100f);
            }
          }
          if (this.sc.developer && this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.D0))
          {
            if (this.sc.scarh_Unlock)
            {
              this.sc.scarh_Unlock = false;
              this.sc.weapon_Unlock[20] = 0;
              this.sc.abort.Play(1f, -0.5f, 0.0f);
            }
            else
            {
              this.sc.scarh_Unlock = true;
              this.sc.fanfare.Play(1f, 0.0f, 0.0f);
            }
            this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
          }
          bool flag11 = this.keyState.IsKeyDown(this.sc.f1_key) && this.prevkeyState.IsKeyUp(this.sc.f1_key);
          bool flag12 = this.keyState.IsKeyDown(this.sc.f2_key) && this.prevkeyState.IsKeyUp(this.sc.f2_key);
          bool flag13 = this.keyState.IsKeyDown(this.sc.f3_key) && this.prevkeyState.IsKeyUp(this.sc.f3_key);
          bool flag14 = this.KMtoggle(this.sc.mmb_key) && this.myPlayer.isDown && (double) this.myPlayer.now.health <= 0.0;
          if (this.inFarm == 1 && (flag14 || flag11 || flag12 || flag13 || this.gamePad.Buttons.RightStick == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.RightStick == Microsoft.Xna.Framework.Input.ButtonState.Released) && ((double) this.myPlayer.autoCamTimer <= 0.0 || (double) this.myPlayer.autoCamTimer >= 1.0))
          {
            this.myPlayer.step1 = this.myPlayer.frame1;
            if (this.myPlayer.isDown)
            {
              flag11 = false;
              flag12 = false;
              flag13 = false;
            }
            if (!flag11 && !flag12 && !flag13)
            {
              if (this.myPlayer.closeCam)
              {
                this.camIndex = 0;
                this.myPlayer.closeCam = false;
                if (this.memoIcon == 0)
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Camera 2");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                }
                if (this.myPlayer.isDown)
                  this.autoCamrotate = this.oldCamrotate;
              }
              else if (this.camIndex == 0)
              {
                if (this.myPlayer.isDown)
                {
                  if ((double) this.myPlayer.now.health <= 0.0)
                  {
                    ++this.alternateCam;
                    if (this.alternateCam > 4)
                      this.alternateCam = 0;
                    if (this.alternateCam == 0)
                    {
                      this.alternateCam = 0;
                      this.camIndex = 1;
                      this.myPlayer.closeCam = true;
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Camera 1");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                      this.oldCamrotate = this.autoCamrotate;
                    }
                    if (this.alternateCam == 1)
                    {
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Free Roam");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                    }
                    if (this.alternateCam == 2)
                    {
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Player Camera");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                    }
                    if (this.alternateCam == 3)
                    {
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Boss Camera");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                    }
                    if (this.alternateCam == 4)
                    {
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Enemy Camera");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                    }
                  }
                  else
                  {
                    this.alternateCam = 0;
                    this.camIndex = 1;
                    this.myPlayer.closeCam = true;
                    if (this.memoIcon == 0)
                    {
                      BloodnBacon4PT.memo.Length = 0;
                      BloodnBacon4PT.memo.Append("Camera 1");
                      this.memoIcon = 0;
                      this.memoTimer = 140;
                    }
                    this.oldCamrotate = this.autoCamrotate;
                  }
                }
                else
                {
                  this.camIndex = 1;
                  this.myPlayer.closeCam = false;
                  if (this.memoIcon == 0)
                  {
                    BloodnBacon4PT.memo.Length = 0;
                    BloodnBacon4PT.memo.Append("Camera 3");
                    this.memoIcon = 0;
                    this.memoTimer = 140;
                  }
                }
              }
              else if (this.camIndex == 1)
              {
                this.myPlayer.closeCam = true;
                if (this.memoIcon == 0)
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Camera 1");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                }
                if (this.myPlayer.isDown)
                  this.oldCamrotate = this.autoCamrotate;
              }
            }
            else
            {
              if (flag11)
              {
                this.myPlayer.closeCam = true;
                if (this.memoIcon == 0)
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Camera 1");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                }
              }
              if (flag12)
              {
                this.camIndex = 0;
                this.myPlayer.closeCam = false;
                if (this.memoIcon == 0)
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Camera 2");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                }
              }
              if (flag13)
              {
                this.camIndex = 1;
                this.myPlayer.closeCam = false;
                if (this.memoIcon == 0)
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Camera 3");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                }
              }
            }
            if (this.myPlayer.isDown)
            {
              if (!this.myPlayer.closeCam)
              {
                this.myPlayer.autoCamOn = true;
                this.myPlayer.autoCamTarget = 1;
                this.myPlayer.autoCamTimer = 1f;
              }
              else
              {
                this.myPlayer.autoCamOn = false;
                this.myPlayer.autoCamTarget = 0;
                this.myPlayer.autoCamTimer = 0.0f;
              }
            }
            else
            {
              this.camheight = this.camheightArray[this.camIndex];
              this.camradian = this.camradianArray[this.camIndex];
              this.camlookpos3rd = this.camlookArray[this.camIndex];
              this.vector3_0 = this.camposArray[this.camIndex];
            }
          }
          bool flag15 = this.KMtoggle(this.sc.rmb_key);
          triggers = this.gamePad.Triggers;
          if ((double) triggers.Left > 0.0)
          {
            triggers = this.prevState.Triggers;
            if ((double) triggers.Left <= 0.0)
              goto label_311;
          }
          if (!flag15)
            goto label_313;
label_311:
          if (this.myPlayer.animClip != 13)
            type = "melee";
label_313:
          if (this.sc.gameState > 0 && this.sc.gameState < 2)
            this.echoTime = this.timeFrame;
          if (this.sc.gameState == 0)
            this.echoTime = 0;
          if (!this.KMdown(this.sc.x_key) && this.gamePad.Buttons.X != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
          {
            this.myPlayer.isLiftingOpponent = false;
            this.myPlayer.isLiftingIndex = 0;
          }
          else
          {
            this.myPlayer.isLiftingOpponent = false;
            this.myPlayer.isLiftingIndex = 0;
            if (this.remPlayer.Count > 1)
            {
              for (int index = 0; index < this.remPlayer.Count; ++index)
              {
                if (this.mysteamID == this.remPlayer[index].id)
                  this.sc.myplayerindex = index;
                else if (this.remPlayer[index].r.fallState < 11 && this.remPlayer[index].r.isDown && !this.myPlayer.isDown && (double) this.remPlayer[index].r.playerDotplayer > 0.699999988079071 && (double) this.remPlayer[index].r.player2player < 4900.0)
                {
                  this.myPlayer.isLiftingOpponent = true;
                  this.myPlayer.isLiftingIndex = index + 1;
                  break;
                }
              }
            }
          }
          bool flag16 = this.KMtoggle(this.sc.x_key);
          bool flag17 = this.KMdown(this.sc.x_key);
          bool flag18 = this.gamePad.Buttons.X == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.X == Microsoft.Xna.Framework.Input.ButtonState.Released;
          if ((flag17 || this.gamePad.Buttons.X == Microsoft.Xna.Framework.Input.ButtonState.Pressed) && this.atBarnDoor)
          {
            if (this.barnDoorState == 0 && !this.barnDoorLocked)
            {
              if ((double) this.barnDoorslide.Z == 0.0)
              {
                if (this.sc.host)
                  this.barnDoorState = 1;
                else
                  this.myPlayer.now.doorOpen = (byte) 2;
              }
              if ((double) this.barnDoorslide.Z == 120.0)
              {
                if (this.sc.host)
                  this.barnDoorState = -1;
                else
                  this.myPlayer.now.doorOpen = (byte) 1;
              }
            }
            if ((flag18 || flag16) && this.barnDoorLocked)
              this.sc.doorRattle.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          }
          if (flag18 || flag16)
          {
            if (this.tunneladd && this.inFarm == 2)
            {
              if (this.atFlashlight1)
              {
                if ((double) this.flashlightDepth == 320.0)
                {
                  this.sc.pickup1.Play(this.sc.ev, -0.6f, 0.0f);
                  this.flashlightDepth = this.lowestDepth;
                  this.flashlightIndex = 0;
                  this.spotTexture = this.flashlightPack[this.flashlightIndex];
                }
                else
                {
                  this.sc.pickup1.Play(this.sc.ev, -0.2f, 0.0f);
                  this.flashlightDepth = 320f;
                  this.flashlightIndex = 1;
                  this.spotTexture = this.flashlightPack[this.flashlightIndex];
                }
              }
              if (this.atFlashlight2)
              {
                this.sc.pickup1.Play(this.sc.ev, 0.1f, 0.0f);
                this.flashlightDepth = 520f;
                this.flashlightIndex = 2;
                this.spotTexture = this.flashlightPack[this.flashlightIndex];
              }
              if (this.atFlashlight3)
              {
                this.sc.pickup1.Play(this.sc.ev, 0.5f, 0.0f);
                this.flashlightDepth = 800f;
                this.flashlightIndex = 3;
                this.spotTexture = this.flashlightPack[this.flashlightIndex];
              }
              if (this.atAmmobox)
              {
                if (this.explosiveCount < 0)
                  this.explosiveCount = 0;
                if (this.sc.ammoboxCount > 0)
                {
                  --this.sc.ammoboxCount;
                  this.explosiveCount += 25;
                  if (this.explosiveCount > 300)
                    this.explosiveCount = 300;
                  if (this.explosiveCount > this.myPlayer.ammo[this.myPlayer.secondaryChoice])
                    this.explosiveCount = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
                  this.sc.pickup1.Play(this.sc.ev, -0.9f, 0.0f);
                }
              }
              if (this.atGoggles)
              {
                this.sc.pickup1.Play(this.sc.ev, 0.0f, 0.0f);
                this.wearingGoggles = !this.wearingGoggles;
                this.sc.crossIndex = 0;
                if (!this.wearingGoggles)
                  this.sc.crosshair1[0].texture = this.sc.basicCrosshair1;
                if (this.wearingGoggles)
                  this.sc.crosshair1[0].texture = this.goggleHud;
              }
              if (this.atExitkey)
              {
                this.haveCryptKey = true;
                this.sc.pickup1.Play(this.sc.ev, 0.0f, 0.0f);
              }
              if (this.atRedSkull1)
              {
                if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1)
                  return;
                if (this.sc.redskull1 != 1 && this.sc.redskull2 != 1 && this.sc.redskull3 != 1)
                {
                  this.sc.redskull1 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, -0.2f, 0.0f);
                  this.sc.goldKeys.keySkull1 = true;
                  this.atRedSkull1 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atRedSkull2)
              {
                if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1)
                  return;
                if (this.sc.redskull1 != 1 && this.sc.redskull2 != 1 && this.sc.redskull3 != 1)
                {
                  this.sc.redskull2 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, -0.1f, 0.0f);
                  this.sc.goldKeys.keySkull2 = true;
                  this.atRedSkull2 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atRedSkull3)
              {
                if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1)
                  return;
                if (this.sc.redskull1 != 1 && this.sc.redskull2 != 1 && this.sc.redskull3 != 1)
                {
                  this.sc.redskull3 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, -0.15f, 0.0f);
                  this.sc.goldKeys.keySkull3 = true;
                  this.atRedSkull3 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atTusk1)
              {
                if ((this.sc.tusk1 == 1 || this.sc.tusk2 == 1 ? 0 : (this.sc.tusk3 != 1 ? 1 : 0)) != 0)
                {
                  this.sc.tusk1 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, 0.15f, 0.0f);
                  this.sc.goldKeys.keyTusk1 = true;
                  this.atTusk1 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atTusk2)
              {
                if ((this.sc.tusk1 == 1 || this.sc.tusk2 == 1 ? 0 : (this.sc.tusk3 != 1 ? 1 : 0)) != 0)
                {
                  this.sc.tusk2 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, 0.05f, 0.0f);
                  this.sc.goldKeys.keyTusk2 = true;
                  this.atTusk2 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atTusk3)
              {
                if ((this.sc.tusk1 == 1 || this.sc.tusk2 == 1 ? 0 : (this.sc.tusk3 != 1 ? 1 : 0)) != 0)
                {
                  this.sc.tusk3 = 1;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  this.sc.toneer.Play(this.sc.ev, 0.1f, 0.0f);
                  this.sc.goldKeys.keyTusk3 = true;
                  this.atTusk3 = false;
                }
                else
                  this.sc.abort.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
              }
              if (this.atCogs)
              {
                this.haveCogs = true;
                this.sc.pickup1.Play(this.sc.ev, -0.4f, 0.0f);
              }
              if (this.atMap)
              {
                this.haveCryptMap = true;
                this.sc.pickup1.Play(this.sc.ev, 0.0f, 0.0f);
                ++this.haveCryptMapCount;
              }
              if (this.atanyPhoto)
              {
                for (int index = 0; index < this.photo.Count; ++index)
                {
                  if (this.photo[index].atPhoto1 > 0)
                  {
                    ++this.photo[index].atPhoto1;
                    this.sc.tick.Play(this.sc.ev, 0.0f, 0.0f);
                    if (this.sc.heirlooms[this.photo[index].indexer] == 0 && this.photo[index].indexer != 6)
                    {
                      this.sc.heirlooms[this.photo[index].indexer] = 1;
                      int num12 = this.sc.heirlooms[1] + this.sc.heirlooms[2] + this.sc.heirlooms[3] + this.sc.heirlooms[4] + this.sc.heirlooms[5];
                      this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
                      this.memoHigh = true;
                      this.memoIcon = 2;
                      BloodnBacon4PT.memo.Length = 0;
                      this.memoTimer = 260;
                      BloodnBacon4PT.memo.Append(num12.ToString() + " of 5 heirlooms");
                      this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                    }
                    if (this.sc.heirlooms[1] == 1 && this.sc.heirlooms[2] == 1 && this.sc.heirlooms[3] == 1 && this.sc.heirlooms[4] == 1 && this.sc.heirlooms[5] == 1)
                      this.sc.trophy.win(this.sc.trophy.heirlooms);
                    if (this.photo[index].atPhoto1 == 2 && BloodnBacon4PT.interact.atPhotoTimer < 0)
                    {
                      if (this.photo[index].indexer == 3)
                      {
                        if (this.sc.hats[4] == 1)
                        {
                          if (this.sc.hatindex == 4)
                            this.specialTalka.Play(this.sc.vv, 0.0f, 0.0f);
                          else
                            this.specialTalkb.Play(this.sc.vv, 0.0f, 0.0f);
                        }
                        else
                          this.photo[index].soundEffect_0.Play(this.sc.vv, 0.0f, -0.2f);
                        BloodnBacon4PT.interact.atPhotoTimer = this.photo[index].length;
                      }
                      else
                      {
                        this.photo[index].soundEffect_0.Play(this.sc.vv, 0.0f, -0.2f);
                        BloodnBacon4PT.interact.atPhotoTimer = this.photo[index].length;
                      }
                    }
                    if (this.photo[index].atPhoto1 > 2)
                      this.photo[index].atPhoto1 = 1;
                  }
                }
              }
              if (this.atDisplayCase2)
              {
                if (this.twinstorychoice != 3 && !this.loads.Contains(7) && this.twinJawIndex == -1 && this.sc.tusk1 + this.sc.tusk2 + this.sc.tusk3 == 6)
                {
                  this.twintuskIndex = 4;
                  this.twinstorychoice = 3;
                  this.twinskullIndex = 0;
                  this.twinstoryIndex = 0;
                  this.twinaltIndex = 0;
                  int action;
                  if (this.twinactionindex != 4 && this.twinactionindex != 6 && this.twinactionindex != 0)
                  {
                    this.twinactionList.Add("standtalk");
                    this.twinactionList.Add("standlaugh");
                    action = 8;
                  }
                  else
                  {
                    this.twinactionList.Add("sit2stand");
                    this.twinactionList.Add("standlaugh");
                    action = 7;
                  }
                  this.twinstandingtired = 450;
                  this.twinActNow = true;
                  this.PlayTwinDialogue(this.tuskStory[3], false, true, action, 0);
                }
                else
                  this.sc.pickup1.Play(this.sc.ev, 0.0f, 0.0f);
              }
              if (this.atDisplayCase)
              {
                if (this.twinstorychoice != 2 && !this.loads.Contains(7) && this.twinJawIndex == -1 && this.sc.redskull2 + this.sc.redskull3 + this.sc.redskull1 == 6)
                {
                  this.twinskullIndex = 1;
                  this.twinstorychoice = 2;
                  this.twinstoryIndex = 0;
                  this.twintuskIndex = 0;
                  this.twinaltIndex = 0;
                  int action;
                  if (this.twinactionindex != 4 && this.twinactionindex != 6 && this.twinactionindex != 0)
                  {
                    this.twinactionList.Add("standtalk");
                    this.twinactionList.Add("standlaugh");
                    action = 10;
                  }
                  else
                  {
                    this.twinactionList.Add("sit2stand");
                    this.twinactionList.Add("standlaugh");
                    action = 9;
                  }
                  this.twinstandingtired = 450;
                  this.twinActNow = true;
                  this.PlayTwinDialogue(this.skullStory[0], false, true, action, 0);
                }
                else
                {
                  this.maryPitch = this.maryPitches[this.maryPitchList[this.maryIndex]];
                  if (this.maryIndex < 5)
                    this.sc.pickup1.Play(this.sc.ev, this.maryPitch, 0.0f);
                  else
                    this.sc.pickup2.Play(this.sc.ev, this.maryPitch, 0.0f);
                  ++this.maryIndex;
                  if (this.maryIndex > this.maryPitchList.Length - 1)
                  {
                    this.maryIndex = 0;
                    this.myPlayer.fallGrav = 16f;
                    this.myPlayer.fallAcc = 3.85f;
                    this.myPlayer.jumpCalled = true;
                    this.sc.manyell.Play(this.sc.ev, 0.0f, 0.0f);
                    this.myPlayer.futureDamage = 100f;
                    this.inFarm = 1;
                    this.atDisplayCase = false;
                    this.atDisplayCase2 = false;
                    this.deathyell.Play(this.sc.ev, 0.0f, 0.0f);
                    this.moonScale = Matrix.CreateScale(350f);
                    this.specialMoon = true;
                    this.greyDay = new Color(10, 10, 24, (int) byte.MaxValue);
                    this.atTwin = false;
                  }
                }
              }
              if (this.atTwin)
              {
                if (this.sc.redskull1 != 1 && this.sc.redskull2 != 1 && this.sc.redskull3 != 1)
                {
                  if (this.sc.tusk1 != 1 && this.sc.tusk2 != 1 && this.sc.tusk3 != 1)
                  {
                    if (!this.loads.Contains(7))
                    {
                      if (this.twinstorychoice == 1)
                      {
                        if (this.twinaltIndex <= this.twinAlt.Count - 1)
                        {
                          ++this.twinaltIndex;
                          int action = 12;
                          if (this.twinactionindex == 0 && this.rr.Next(1, 100) < 50 && this.twinactionList.Count == 0)
                          {
                            this.twinactionList.Add("sittalk");
                            this.twinactionList.Add("sitlaugh");
                            this.twinActNow = true;
                            action = 13;
                          }
                          this.PlayTwinDialogue(this.twinAlt[this.twinaltIndex - 1], true, true, action, this.twinaltIndex);
                        }
                        else if (this.twinbotherIndex <= this.botherStory.Count - 1)
                        {
                          ++this.twinbotherIndex;
                          this.PlayTwinDialogue(this.botherStory[this.twinbotherIndex - 1], false, true, 14, this.twinbotherIndex);
                        }
                        else
                          this.twinbotherIndex = 0;
                      }
                      if (this.twinstorychoice == 0)
                      {
                        if (this.twinstoryIndex <= this.twinStory.Count - 1)
                        {
                          ++this.twinstoryIndex;
                          this.twinstandingtired = 300;
                          int action = 15;
                          if (this.twinactionindex == 2 && this.rr.Next(1, 100) < 70 && this.twinactionList.Count == 0)
                          {
                            if (this.rr.Next(1, 100) < 50)
                              this.twinactionList.Add("standargue");
                            else
                              this.twinactionList.Add("standtalk");
                            this.twinactionList.Add("standlaugh");
                            this.twinActNow = true;
                            action = 16;
                          }
                          this.PlayTwinDialogue(this.twinStory[this.twinstoryIndex - 1], true, true, action, this.twinstoryIndex);
                        }
                        else if (this.twinbotherIndex <= this.botherStory.Count - 1)
                        {
                          ++this.twinbotherIndex;
                          this.PlayTwinDialogue(this.botherStory[this.twinbotherIndex - 1], false, true, 14, this.twinbotherIndex);
                        }
                        else
                          this.twinbotherIndex = 0;
                      }
                      if (this.twinstorychoice == 2)
                      {
                        if (this.twinskullIndex <= this.skullStory.Count - 1)
                        {
                          ++this.twinskullIndex;
                          int action = 17;
                          if (this.twinskullIndex > this.skullStory.Count - 1)
                            this.sc.trophy.win(this.sc.trophy.mrgreen);
                          this.twinstandingtired = 300;
                          if (this.twinactionindex == 2 && this.rr.Next(1, 100) < 70 && this.twinactionList.Count == 0)
                          {
                            if (this.rr.Next(1, 100) < 50)
                              this.twinactionList.Add("standargue");
                            else
                              this.twinactionList.Add("standtalk");
                            this.twinactionList.Add("standlaugh");
                            this.twinActNow = true;
                            action = 18;
                          }
                          this.PlayTwinDialogue(this.skullStory[this.twinskullIndex - 1], true, true, action, this.twinskullIndex);
                        }
                        else if (this.twinbotherIndex <= this.botherStory.Count - 1)
                        {
                          ++this.twinbotherIndex;
                          this.PlayTwinDialogue(this.botherStory[this.twinbotherIndex - 1], false, true, 14, this.twinbotherIndex);
                        }
                        else
                          this.twinbotherIndex = 0;
                      }
                      if (this.twinstorychoice == 3)
                      {
                        if (this.twintuskIndex <= this.tuskStory.Count - 1)
                        {
                          ++this.twintuskIndex;
                          this.twinstandingtired = 300;
                          int action = 19;
                          if (this.twinactionindex == 2 && this.rr.Next(1, 100) < 70 && this.twinactionList.Count == 0)
                          {
                            if (this.rr.Next(1, 100) < 50)
                              this.twinactionList.Add("standargue");
                            else
                              this.twinactionList.Add("standtalk");
                            this.twinactionList.Add("standlaugh");
                            this.twinActNow = true;
                            action = 20;
                          }
                          this.PlayTwinDialogue(this.tuskStory[this.twintuskIndex - 1], true, true, action, this.twintuskIndex);
                        }
                        else if (this.twinbotherIndex <= this.botherStory.Count - 1)
                        {
                          ++this.twinbotherIndex;
                          this.PlayTwinDialogue(this.botherStory[this.twinbotherIndex - 1], false, true, 14, this.twinbotherIndex);
                        }
                        else
                          this.twinbotherIndex = 0;
                      }
                    }
                  }
                  else
                  {
                    this.giveitem.Play(this.sc.ev, 0.0f, 0.0f);
                    if (this.sc.tusk1 == 1)
                      this.sc.tusk1 = 2;
                    else if (this.sc.tusk2 == 1)
                      this.sc.tusk2 = 2;
                    else if (this.sc.tusk3 == 1)
                      this.sc.tusk3 = 2;
                    int num13 = this.sc.tusk1 + this.sc.tusk2 + this.sc.tusk3;
                    if (num13 >= 2 && num13 < 4)
                      this.PlayTwinDialogue(this.tuskStory[0], true, true, 0, 0);
                    if (num13 >= 4 && num13 < 6)
                      this.PlayTwinDialogue(this.tuskStory[1], true, true, 0, 0);
                    if (num13 == 6)
                      this.PlayTwinDialogue(this.tuskStory[2], true, true, 0, 0);
                    this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                  }
                }
                else
                {
                  this.giveitem.Play(this.sc.ev, 0.0f, 0.0f);
                  if (this.sc.redskull1 == 1)
                  {
                    this.sc.redskull1 = 2;
                    this.PlayTwinDialogue(71, true, true, 0, 0);
                  }
                  else if (this.sc.redskull2 == 1)
                  {
                    this.sc.redskull2 = 2;
                    this.PlayTwinDialogue(73, true, true, 0, 0);
                  }
                  else if (this.sc.redskull3 == 1)
                  {
                    this.sc.redskull3 = 2;
                    this.PlayTwinDialogue(72, true, true, 0, 0);
                  }
                  int num14 = this.sc.redskull1 + this.sc.redskull2 + this.sc.redskull3;
                  if (num14 >= 2 && num14 < 4)
                    this.twinNextLine = 68;
                  if (num14 >= 4 && num14 < 6)
                    this.twinNextLine = 69;
                  if (num14 == 6)
                    this.twinNextLine = 70;
                  this.sc.saveTunnelItems(false, ref this.eraseBlobList, this.mazeid);
                }
              }
            }
            if (this.atLobby && this.atLobbyTimer < 0)
            {
              this.PlayDialogue(this.rr.Next(153, 156), true);
              this.ring.Play(this.sc.ev, (float) this.rr.Next(-4, 4) / 100f, 0.0f);
              this.atLobbyTimer = 5;
              if (this.sc.lobby.createdLobby.Count > 0)
                this.sc.lobby.inviteFriend(this.sc.lobby.createdLobby[0]);
              if (this.sc.lobby.joinedLobby.Count > 0)
                this.sc.lobby.inviteFriend(this.sc.lobby.joinedLobby[0]);
            }
            if (this.atKissing)
            {
              if (this.sc.hatindex == 0 && this.rr.Next(1, 100) < 50 && this.farmerJawIndex < 0)
                this.PlayDialogue(this.rr.Next(150, 153), true);
              bool flag19 = this.sc.hatindex == 0;
              ++this.sc.hatindex;
              if (this.sc.hatindex > this.sc.hats.Length - 1)
              {
                this.sc.hatindex = 0;
                BloodnBacon4PT.memo.Length = 0;
                BloodnBacon4PT.memo.Append("wearing nothing");
                this.memoIcon = 2;
                this.memoTimer = 80;
                this.sc.buttonDeny.Play(this.sc.ev, 0.0f, 0.0f);
              }
              else
              {
                while (this.sc.hats[this.sc.hatindex] == 0)
                {
                  ++this.sc.hatindex;
                  if (this.sc.hatindex > this.sc.hats.Length - 1)
                  {
                    this.sc.hatindex = 0;
                    break;
                  }
                }
                if (this.sc.hatindex != 0)
                {
                  this.sc.equipx.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
                  string str = "wearing cowboy hat";
                  if (this.sc.hatindex == 1)
                    str = "wearing top-hat";
                  if (this.sc.hatindex == 2)
                    str = "wearing cowboy hat";
                  if (this.sc.hatindex == 3)
                    str = "wearing russian bol";
                  if (this.sc.hatindex == 4)
                    str = "wearing tracktor cap";
                  if (this.sc.hatindex == 5)
                    str = "wearing german helmut";
                  if (this.sc.hatindex == 6)
                    str = "wearing wizard hat";
                  if (this.sc.hatindex == 7)
                    str = "wearing gas mask";
                  if (this.sc.hatindex == 8)
                    str = "wearing pumpkin";
                  if (this.sc.hatindex == 9)
                    str = "wearing elfinhat";
                  if (this.sc.hatindex == 10)
                    str = "wearing redsun hat";
                  if (this.sc.hatindex == 11)
                    str = "wearing macarthur";
                  if (this.sc.hatindex == 12)
                    str = "wearing snowcap";
                  if (this.sc.hatindex == 13)
                    str = "wearing peruvian pom";
                  if (this.sc.hatindex == 14)
                    str = "wearing irish tweed";
                  if (this.sc.hatindex == 15)
                    str = "wearing bowler hat";
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append(str);
                  this.memoIcon = 2;
                  this.memoTimer = 80;
                  int num15 = 1;
                  if (this.remPlayer.Count > 1)
                  {
                    for (int index = 0; index < this.remPlayer.Count; ++index)
                    {
                      if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.hatindex == this.sc.hatindex)
                        ++num15;
                    }
                  }
                  if (num15 >= 4)
                    this.sc.trophy.win(this.sc.trophy.birds);
                  if (this.sc.hats[3] == 1 || this.sc.hats[5] == 1)
                    this.sc.trophy.win(this.sc.trophy.death);
                  bool flag20 = true;
                  for (int index = 1; index < 6; ++index)
                  {
                    if (this.sc.hats[index] == 0)
                    {
                      flag20 = false;
                      break;
                    }
                  }
                  if (flag20)
                    this.sc.trophy.win(this.sc.trophy.madhatter);
                  if (this.sc.hats[7] == 1)
                    this.sc.trophy.win(this.sc.trophy.hindenburg);
                }
                else
                {
                  BloodnBacon4PT.memo.Length = 0;
                  if (flag19)
                    BloodnBacon4PT.memo.Append("you have no items");
                  else
                    BloodnBacon4PT.memo.Append("wearing nothing");
                  this.memoIcon = 2;
                  this.memoTimer = 80;
                  this.sc.buttonDeny.Play(this.sc.ev, 0.0f, 0.0f);
                }
              }
            }
            if (this.atPump1)
            {
              if (this.int_9 > 0 && (double) this.waterRamp1 == 0.0)
                type = "pump1";
              if (this.int_9 <= 1)
                this.sc.trophy.win(this.sc.trophy.gasguzzler);
            }
            if (this.atPump2)
            {
              if (this.int_10 > 0 && (double) this.waterRamp2 == 0.0)
                type = "pump2";
              if (this.int_10 <= 1)
                this.sc.trophy.win(this.sc.trophy.gasguzzler);
            }
            if (this.sc.host)
            {
              if (this.atLever && this.leverLevel > 0 && this.leverTimer <= 0)
                this.fenceRespond();
            }
            else if (this.atLever && this.leverLevel > 0 && this.leverTimer <= 0 && !this.myPlayer.now.leverOn)
            {
              this.myPlayer.now.leverOn = true;
              this.leverRamp = 0.0001f;
            }
            if (this.atFarmer)
              this.PlayDialogue(this.talkDayIndex, true);
            if (this.myPlayer.animClip == -1 && this.weaponIsGlowing && (double) this.weaponGlowDist < 12100.0)
            {
              if (this.handtype[this.weaponGlowIndex] == 1)
              {
                this.weaponGrabTimer = 0.0f;
                this.sc.grabby.Play(this.sc.ev * 0.6f, (float) this.rr.Next(5, 20) / 100f, 0.0f);
                if (this.myPlayer.primaryChoice == this.myPlayer.secondaryChoice)
                  this.myPlayer.secondaryChoice = this.weaponGlowIndex;
                this.myPlayer.primaryChoice = this.weaponGlowIndex;
                this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
                type = "quickswitch";
                this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
                this.myPlayer.mag[this.weaponGlowIndex] = this.myPlayer.resetmag[this.weaponGlowIndex];
                this.myPlayer.ammo[this.weaponGlowIndex] = this.myPlayer.resetammo[this.weaponGlowIndex];
                this.buildPrimaryWeapon(this.weaponGlowIndex);
                if (this.weaponGlowIndex == 16)
                  this.setPaintBallGun(true);
              }
              else
              {
                this.weaponGrabTimer = 0.0f;
                this.sc.grabby.Play(this.sc.ev * 0.6f, (float) this.rr.Next(-30, -10) / 100f, 0.0f);
                this.myPlayer.secondaryChoice = this.weaponGlowIndex;
                type = "quickswitch";
                this.myPlayer.nextgunChoice = this.myPlayer.secondaryChoice;
                this.myPlayer.lastWeapon = this.myPlayer.secondaryChoice;
                this.myPlayer.mag[this.weaponGlowIndex] = this.myPlayer.resetmag[this.weaponGlowIndex];
                this.myPlayer.ammo[this.weaponGlowIndex] = this.myPlayer.resetammo[this.weaponGlowIndex];
                if (this.weaponGlowIndex == 14)
                {
                  this.myPlayer.mag[this.weaponGlowIndex] = 0;
                  this.myPlayer.ammo[this.weaponGlowIndex] = this.sc.rockets;
                  if (this.sc.rockets < 1)
                    this.myPlayer.ammo[this.weaponGlowIndex] = 1;
                }
                this.buildSecondaryWeapon(this.weaponGlowIndex);
              }
            }
            if (this.pickupGlow && (double) this.pickupDist < 40000.0)
            {
              if (this.pickupType == 0)
              {
                if (this.sc.milks > 9)
                {
                  this.sc.milks = 10;
                }
                else
                {
                  ++this.sc.milks;
                  this.sc.pickup1.Play(this.sc.ev * 1f, 0.0f, 0.0f);
                  if (this.milk.max - 1 > 0)
                  {
                    this.milk.dupe[this.pickupIndex].transform = this.milk.dupe[this.milk.max - 1].transform;
                    this.milk.dupe[this.pickupIndex].mypos = this.milk.dupe[this.milk.max - 1].mypos;
                    this.milk.dupe[this.pickupIndex].velocity = this.milk.dupe[this.milk.max - 1].velocity;
                    this.milk.dupe[this.pickupIndex].sloper = this.milk.dupe[this.milk.max - 1].sloper;
                    this.milk.dupe[this.pickupIndex].move = this.milk.dupe[this.milk.max - 1].move;
                    this.milk.stream[this.pickupIndex].Trans = this.milk.dupe[this.milk.max - 1].transform;
                    --this.milk.max;
                    this.milk.index = this.milk.max;
                  }
                  else
                  {
                    this.milk.max = 0;
                    this.milk.index = 0;
                  }
                }
                this.pickupGlow = false;
              }
              else if (this.pickupType == 1)
              {
                if (this.sc.grenades > 9)
                {
                  this.sc.grenades = 10;
                }
                else
                {
                  ++this.sc.grenades;
                  this.sc.pickupGrenade.Play((float) ((double) this.sc.ev * (double) this.rr.Next(80, 100) / 100.0), 0.0f, (float) this.rr.Next(-30, 30) / 100f);
                  if (this.grenade.max - 1 > 0)
                  {
                    this.grenade.dupe[this.pickupIndex].transform = this.grenade.dupe[this.grenade.max - 1].transform;
                    this.grenade.dupe[this.pickupIndex].mypos = this.grenade.dupe[this.grenade.max - 1].mypos;
                    this.grenade.dupe[this.pickupIndex].velocity = this.grenade.dupe[this.grenade.max - 1].velocity;
                    this.grenade.dupe[this.pickupIndex].sloper = this.grenade.dupe[this.grenade.max - 1].sloper;
                    this.grenade.dupe[this.pickupIndex].move = this.grenade.dupe[this.grenade.max - 1].move;
                    this.grenade.stream[this.pickupIndex].Trans = this.grenade.dupe[this.grenade.max - 1].transform;
                    --this.grenade.max;
                    this.grenade.index = this.grenade.max;
                  }
                  else
                  {
                    this.grenade.max = 0;
                    this.grenade.index = 0;
                  }
                }
                this.pickupGlow = false;
              }
              else if (this.pickupType == 2)
              {
                int num16 = 80;
                int num17 = 1200;
                if (this.myPlayer.secondaryChoice == 6)
                  num16 = 80;
                if (this.myPlayer.secondaryChoice == 8)
                  num16 = 40;
                if (this.myPlayer.secondaryChoice == 10)
                  num16 = 100;
                if (this.myPlayer.secondaryChoice == 14)
                  num16 = 0;
                this.myPlayer.ammo[this.myPlayer.secondaryChoice] += num16;
                if (this.myPlayer.ammo[this.myPlayer.secondaryChoice] > num17)
                  this.myPlayer.ammo[this.myPlayer.secondaryChoice] = num17;
                this.sc.pickup1.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
                if (this.bulletbox.max - 1 > 0)
                {
                  this.bulletbox.dupe[this.pickupIndex].transform = this.bulletbox.dupe[this.bulletbox.max - 1].transform;
                  this.bulletbox.dupe[this.pickupIndex].mypos = this.bulletbox.dupe[this.bulletbox.max - 1].mypos;
                  this.bulletbox.dupe[this.pickupIndex].velocity = this.bulletbox.dupe[this.bulletbox.max - 1].velocity;
                  this.bulletbox.dupe[this.pickupIndex].sloper = this.bulletbox.dupe[this.bulletbox.max - 1].sloper;
                  this.bulletbox.dupe[this.pickupIndex].move = this.bulletbox.dupe[this.bulletbox.max - 1].move;
                  this.bulletbox.stream[this.pickupIndex].Trans = this.bulletbox.dupe[this.bulletbox.max - 1].transform;
                  --this.bulletbox.max;
                  this.bulletbox.index = this.bulletbox.max;
                }
                else
                {
                  this.bulletbox.max = 0;
                  this.bulletbox.index = 0;
                }
                this.pickupGlow = false;
              }
              else if (this.pickupType == 3)
              {
                if (this.sc.hulks > 4)
                {
                  this.sc.hulks = 5;
                }
                else
                {
                  ++this.sc.hulks;
                  this.sc.pickup1.Play(this.sc.ev * 1f, -0.3f, 0.0f);
                  if (this.hulkcan.max - 1 > 0)
                  {
                    this.hulkcan.dupe[this.pickupIndex].transform = this.hulkcan.dupe[this.hulkcan.max - 1].transform;
                    this.hulkcan.dupe[this.pickupIndex].mypos = this.hulkcan.dupe[this.hulkcan.max - 1].mypos;
                    this.hulkcan.dupe[this.pickupIndex].velocity = this.hulkcan.dupe[this.hulkcan.max - 1].velocity;
                    this.hulkcan.dupe[this.pickupIndex].sloper = this.hulkcan.dupe[this.hulkcan.max - 1].sloper;
                    this.hulkcan.dupe[this.pickupIndex].move = this.hulkcan.dupe[this.hulkcan.max - 1].move;
                    this.hulkcan.stream[this.pickupIndex].Trans = this.hulkcan.dupe[this.hulkcan.max - 1].transform;
                    --this.hulkcan.max;
                    this.hulkcan.index = this.hulkcan.max;
                  }
                  else
                  {
                    this.hulkcan.max = 0;
                    this.hulkcan.index = 0;
                  }
                }
                this.pickupGlow = false;
              }
              else if (this.pickupType == 4)
              {
                if (this.sc.pills > 1)
                {
                  this.sc.pills = 2;
                }
                else
                {
                  ++this.sc.pills;
                  this.sc.pickup1.Play(this.sc.ev * 1f, -0.3f, 0.0f);
                  if (this.pill.max - 1 > 0)
                  {
                    this.pill.dupe[this.pickupIndex].transform = this.pill.dupe[this.pill.max - 1].transform;
                    this.pill.dupe[this.pickupIndex].mypos = this.pill.dupe[this.pill.max - 1].mypos;
                    this.pill.dupe[this.pickupIndex].velocity = this.pill.dupe[this.pill.max - 1].velocity;
                    this.pill.dupe[this.pickupIndex].sloper = this.pill.dupe[this.pill.max - 1].sloper;
                    this.pill.dupe[this.pickupIndex].move = this.pill.dupe[this.pill.max - 1].move;
                    this.pill.stream[this.pickupIndex].Trans = this.pill.dupe[this.pill.max - 1].transform;
                    --this.pill.max;
                    this.pill.index = this.pill.max;
                  }
                  else
                  {
                    this.pill.max = 0;
                    this.pill.index = 0;
                  }
                }
                this.pickupGlow = false;
              }
              else if (this.pickupType == 5)
              {
                if (this.sc.rockets > 5)
                {
                  this.sc.rockets = 5;
                  this.myPlayer.ammo[14] = this.sc.rockets;
                }
                else
                {
                  ++this.sc.rockets;
                  this.myPlayer.ammo[14] = this.sc.rockets;
                  this.sc.pickup1.Play(this.sc.ev * 1f, -0.3f, 0.0f);
                  if (this.rocket.max - 1 > 0)
                  {
                    this.rocket.dupe[this.pickupIndex].transform = this.rocket.dupe[this.rocket.max - 1].transform;
                    this.rocket.dupe[this.pickupIndex].mypos = this.rocket.dupe[this.rocket.max - 1].mypos;
                    this.rocket.dupe[this.pickupIndex].velocity = this.rocket.dupe[this.rocket.max - 1].velocity;
                    this.rocket.dupe[this.pickupIndex].sloper = this.rocket.dupe[this.rocket.max - 1].sloper;
                    this.rocket.dupe[this.pickupIndex].move = this.rocket.dupe[this.rocket.max - 1].move;
                    this.rocket.stream[this.pickupIndex].Trans = this.rocket.dupe[this.rocket.max - 1].transform;
                    --this.rocket.max;
                    this.rocket.index = this.rocket.max;
                  }
                  else
                  {
                    this.rocket.max = 0;
                    this.rocket.index = 0;
                  }
                }
                this.pickupGlow = false;
              }
            }
          }
          bool flag21 = this.KMtoggle(this.sc.q_key);
          if (!this.myPlayer.noArms && (flag21 || this.gamePad.Buttons.Y == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.Y == Microsoft.Xna.Framework.Input.ButtonState.Released) && this.myPlayer.animClip != 13 && (this.myPlayer.secondaryChoice != this.myPlayer.primaryChoice || this.myPlayer.gunChoice >= this.gType && this.myPlayer.gunChoice < 100))
          {
            if (this.myPlayer.gunChoice == this.pType && this.myPlayer.isDown)
            {
              this.sc.switchweapon.Play(this.sc.ev, 0.1f, 0.0f);
              this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
              this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
            }
            else
            {
              type = "switch";
              if (this.handtype[this.myPlayer.gunChoice] == 1)
                this.myPlayer.nextgunChoice = this.myPlayer.secondaryChoice;
              if (this.handtype[this.myPlayer.gunChoice] != 1)
                this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
            }
          }
          if ((double) this.sc.myTimer % 30.0 == 0.0 && !this.sc.allWeapons)
          {
            int index = 2;
            if (this.myPlayer.gunChoice != 2 && this.myPlayer.gunChoice < this.gType)
            {
              this.myPlayer.primaryChoice = index;
              this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
              this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
              this.myPlayer.mag[index] = this.myPlayer.resetmag[index];
              this.myPlayer.ammo[index] = this.myPlayer.resetammo[index];
              this.buildPrimaryWeapon(index);
            }
          }
          bool flag22 = this.KMdown(this.sc.e_key);
          this.leftBumperGlow = this.gamePad.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed || flag22;
          bool flag23 = this.KMdown(this.sc.leftshift_key);
          if (!this.sc.pad_togglesprint)
            this.myPlayer.sprint = flag23 || this.gamePad.Buttons.LeftStick == Microsoft.Xna.Framework.Input.ButtonState.Pressed ? 1.5f : 1f;
          else if (this.gamePad.Buttons.LeftStick == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.LeftStick == Microsoft.Xna.Framework.Input.ButtonState.Released || this.KMtoggle(this.sc.leftshift_key))
          {
            if ((double) this.myPlayer.sprintRest == 5.0)
            {
              this.myPlayer.sprintRest = 1f;
              this.myPlayer.sprint = 1f;
              this.keyboardRunToggle = true;
            }
            else
            {
              this.myPlayer.sprintRest = 5f;
              this.myPlayer.sprint = 1.5f;
              this.keyboardRunToggle = true;
            }
          }
          else
          {
            this.myPlayer.sprint = 1f;
            if ((double) this.myPlayer.sprintRest == 5.0)
              this.myPlayer.sprint = 1.5f;
          }
          if (this.tunneladd && this.inFarm == 2)
            this.myPlayer.sprint = (double) this.myPlayer.sprintRest != 5.0 ? 1.2f : (this.inExcavation ? 1.7f : ((double) this.myPlayer.displayState.npcPosition.Y >= -290.0 ? 1f : 1.6f));
          bool flag24 = this.prevState.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Released && this.gamePad.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed || this.keyState.IsKeyDown(this.sc.tab_key) && this.prevkeyState.IsKeyUp(this.sc.tab_key) && this.keyState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys.LeftShift);
          if (this.tunneladd && this.inFarm == 2 && this.haveCryptMap)
          {
            if (flag24)
            {
              ++this.minimapLevel;
              if (this.minimapLevel > 1)
                this.minimapLevel = 0;
              this.sc.tick.Play(this.sc.ev, -0.2f, 0.0f);
              if (this.minimapLevel == 0)
              {
                this.widthG = 240f;
                this.hiteG = 240f;
                this.miniLerp = 0.0f;
                this.x0 = 50f;
                this.y0 = 220f;
                this.ww0 = 300;
                this.hh0 = 270;
              }
              if (this.minimapLevel == 1)
              {
                this.widthG = 470f;
                this.hiteG = 470f;
                this.miniLerp = 0.0f;
                this.x0 = 50f;
                this.y0 = 220f;
                this.ww0 = 300;
                this.hh0 = 270;
              }
            }
            if (!this.keyState.IsKeyDown(this.sc.tab_key) && this.gamePad.Buttons.LeftShoulder != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
            {
              this.minimapCounter = 0;
            }
            else
            {
              ++this.minimapCounter;
              if (this.minimapCounter > 30)
              {
                this.widthG = 5f;
                this.hiteG = 5f;
                this.miniLerp = 0.0f;
              }
            }
            if ((double) this.miniLerp < 1.0)
            {
              this.miniLerp += 0.05f;
              this.width0 = MathHelper.Lerp(this.width0, this.widthG, this.miniLerp);
              this.hite0 = MathHelper.Lerp(this.hite0, this.hiteG, this.miniLerp);
              if ((double) this.widthG == 5.0 && (double) this.miniLerp >= 1.0)
                this.minimapLevel = 2;
              this.divver = this.width0 / (float) this.ww0;
              this.divver2 = this.hite0 / (float) this.hh0;
              this.offxx = this.width0 / 2f / this.divver + this.x0;
              this.offyy = this.hite0 / 2f / this.divver2 + this.y0;
            }
          }
          if (this.tunneladd && this.sc.developer)
          {
            if (this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.M))
            {
              this.haveEntranceKey = !this.haveEntranceKey;
              this.sc.tick.Play(1f, 0.0f, 0.0f);
              if (this.haveCryptMap)
              {
                this.haveCryptMap = false;
                this.sc.goldKeys.kmHide = false;
                this.sc.goldKeys.keyMap = false;
              }
              else
              {
                this.haveCryptMap = true;
                this.sc.goldKeys.kmHide = true;
                this.sc.goldKeys.keyMap = true;
              }
            }
            if (this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.P))
            {
              ++this.liteRot;
              if ((double) this.liteRot > 5.0)
                this.liteRot = 0.0f;
              if (this.sc.redskull1 == 1)
              {
                this.sc.redskull1 = 0;
                this.sc.goldKeys.keySkull1 = false;
              }
              if (this.sc.redskull2 == 1)
              {
                this.sc.redskull2 = 0;
                this.sc.goldKeys.keySkull2 = false;
              }
              if (this.sc.redskull3 == 1)
              {
                this.sc.redskull3 = 0;
                this.sc.goldKeys.keySkull3 = false;
              }
              if ((double) this.liteRot == 0.0 && this.sc.redskull1 == 0)
                this.sc.redskull1 = 1;
              if ((double) this.liteRot == 1.0 && this.sc.redskull2 == 0)
                this.sc.redskull2 = 1;
              if ((double) this.liteRot == 2.0 && this.sc.redskull3 == 0)
                this.sc.redskull3 = 1;
              if (this.sc.tusk1 == 1)
              {
                this.sc.tusk1 = 0;
                this.sc.goldKeys.keyTusk1 = false;
              }
              if (this.sc.tusk2 == 1)
              {
                this.sc.tusk2 = 0;
                this.sc.goldKeys.keyTusk2 = false;
              }
              if (this.sc.tusk3 == 1)
              {
                this.sc.tusk3 = 0;
                this.sc.goldKeys.keyTusk3 = false;
              }
              if ((double) this.liteRot == 3.0 && this.sc.tusk1 == 0)
                this.sc.tusk1 = 1;
              if ((double) this.liteRot == 4.0 && this.sc.tusk2 == 0)
                this.sc.tusk2 = 1;
              if ((double) this.liteRot == 5.0 && this.sc.tusk3 == 0)
                this.sc.tusk3 = 1;
              this.sc.tick.Play(this.sc.ev, 0.0f, 0.0f);
            }
            if (this.KMtoggle(Microsoft.Xna.Framework.Input.Keys.O))
            {
              this.sc.redskull1 = 0;
              this.sc.goldKeys.keySkull1 = false;
              this.sc.redskull2 = 0;
              this.sc.goldKeys.keySkull2 = false;
              this.sc.redskull3 = 0;
              this.sc.goldKeys.keySkull3 = false;
              this.sc.tusk1 = 0;
              this.sc.goldKeys.keyTusk1 = true;
              this.sc.tusk2 = 0;
              this.sc.goldKeys.keyTusk2 = true;
              this.sc.tusk3 = 0;
              this.sc.goldKeys.keyTusk3 = true;
            }
          }
          if ((this.gamePad.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Released || flag24) && this.inFarm == 1 && this.sc.gameState == 2)
          {
            if (this.myPlayer.stats_show)
            {
              this.myPlayer.stats_show = false;
              this.sc.switch2.Play(this.sc.ev, 0.2f, 0.0f);
            }
            else
            {
              this.myPlayer.stats_show = true;
              this.myPlayer.stats_timer = 600;
              this.sc.switch2.Play(this.sc.ev, -0.2f, 0.0f);
            }
          }
          if (!this.myPlayer.isDown && (this.KMtoggle(this.sc.t_key) || this.gamePad.Buttons.RightShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.RightShoulder == Microsoft.Xna.Framework.Input.ButtonState.Released) && this.myPlayer.animClip == -1 && !this.myPlayer.gunFired && (double) this.localClean <= 0.0)
          {
            this.localClean = 1f;
            this.localCleanOn = true;
            type = "clean";
          }
          if (this.KMtoggle(this.sc.r_key) || this.gamePad.Buttons.B == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.B == Microsoft.Xna.Framework.Input.ButtonState.Released && this.myPlayer.animClip == -1)
          {
            if (this.myPlayer.gunChoice < this.gType && this.myPlayer.gunChoice != 14)
            {
              type = "guncock";
              if (this.myPlayer.gunChoice == 16)
              {
                ++this.paintballColor;
                if (this.paintballColor > 4)
                  this.paintballColor = 1;
                this.setPaintBallGun(true);
              }
            }
            if (this.myPlayer.gunChoice == 14)
            {
              if (this.sc.rockets > 0 && this.myPlayer.mag[14] == 0)
              {
                this.myPlayer.ammo[14] = this.sc.rockets - 1;
                this.myPlayer.mag[14] = 1;
                this.secondaryCock.Play(this.sc.ev, -0.2f, 0.0f);
              }
              else
                this.sc.abort.Play(this.sc.ev, -0.5f, 0.0f);
            }
          }
          bool flag25 = this.KMtoggle(this.sc.space_key);
          if (!this.myPlayer.isLiftingOpponent && (flag25 || this.gamePad.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.Buttons.A == Microsoft.Xna.Framework.Input.ButtonState.Released) && !this.myPlayer.jumpCalled && !this.myPlayer.jumping && !this.myPlayer.isDown)
          {
            this.myPlayer.jumpCalled = true;
            this.myPlayer.fallAcc = 0.23f;
            this.myPlayer.fallGrav = 2f;
            if ((double) this.myPlayer.sprint > 1.0)
            {
              this.myPlayer.fallAcc = 0.29f;
              this.myPlayer.fallGrav = 2.2f;
            }
            if (this.myPlayer.milkEffects > 0 && !this.myPlayer.inBarn && this.inFarm == 1)
            {
              this.myPlayer.fallAcc = 0.75f;
              this.myPlayer.fallGrav = 4f;
            }
            if (this.tunneladd && this.inFarm == 2 && !this.inExcavation)
            {
              if ((double) this.myPlayer.displayState.npcPosition.Y < -290.0)
              {
                this.myPlayer.fallAcc = 0.12f;
                this.myPlayer.fallGrav = 1f;
              }
              else
              {
                this.myPlayer.fallAcc = 0.05f;
                this.myPlayer.fallGrav = 0.0f;
              }
            }
          }
          if ((!this.keyState.IsKeyDown(this.sc.f_key) ? 0 : (this.prevkeyState.IsKeyUp(this.sc.f_key) ? 1 : 0)) != 0 || this.gamePad.DPad.Up == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.DPad.Up == Microsoft.Xna.Framework.Input.ButtonState.Released)
          {
            this.lightON = !this.lightON;
            if (this.farmerJawIndex < 0)
              this.flashlightCounter = 0;
            this.sc.lightClick.Play(this.sc.ev * 0.6f, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.myPlayer.now.flashlight = this.lightON;
          }
          if (((!this.keyState.IsKeyDown(this.sc.one_key) ? 0 : (this.prevkeyState.IsKeyUp(this.sc.one_key) ? 1 : 0)) != 0 || this.gamePad.DPad.Left == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.DPad.Left == Microsoft.Xna.Framework.Input.ButtonState.Released) && this.sc.grenades > 0 && this.myPlayer.animClip != 13 && !this.myPlayer.isDown)
          {
            type = "switch";
            this.myPlayer.nextgunChoice = this.gType;
            if (this.myPlayer.gunChoice == this.gType)
            {
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
            }
            else
            {
              this.dpadCount = this.sc.grenades;
              this.dpadTimer = 130;
            }
          }
          if (((!this.keyState.IsKeyDown(this.sc.two_key) ? 0 : (this.prevkeyState.IsKeyUp(this.sc.two_key) ? 1 : 0)) != 0 || this.gamePad.DPad.Down == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.DPad.Down == Microsoft.Xna.Framework.Input.ButtonState.Released) && this.sc.milks > 0 && this.myPlayer.animClip != 13 && !this.myPlayer.isDown)
          {
            type = "switch";
            this.myPlayer.nextgunChoice = this.mType;
            if (this.myPlayer.gunChoice == this.mType)
            {
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
            }
            else
            {
              this.dpadCount = this.sc.milks;
              this.dpadTimer = 130;
            }
          }
          if ((!this.keyState.IsKeyDown(this.sc.three_key) ? 0 : (this.prevkeyState.IsKeyUp(this.sc.three_key) ? 1 : 0)) != 0 && this.sc.hulks > 0 && this.myPlayer.animClip != 13 && !this.myPlayer.isDown)
          {
            type = "switch";
            this.myPlayer.nextgunChoice = this.hType;
            if (this.myPlayer.gunChoice == this.hType)
            {
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
            }
            else
            {
              this.dpadCount = this.sc.hulks;
              this.dpadTimer = 130;
            }
          }
          if ((!this.keyState.IsKeyDown(this.sc.four_key) ? 0 : (this.prevkeyState.IsKeyUp(this.sc.four_key) ? 1 : 0)) != 0)
          {
            if (!this.myPlayer.isDown)
            {
              if (this.sc.pills > 0 && this.myPlayer.animClip != 13)
              {
                type = "switch";
                this.myPlayer.nextgunChoice = this.pType;
                if (this.myPlayer.gunChoice == this.pType)
                {
                  this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
                }
                else
                {
                  this.dpadCount = this.sc.pills;
                  this.dpadTimer = 130;
                }
              }
            }
            else if (!this.myPlayer.noArms)
            {
              if (this.myPlayer.gunChoice != this.pType)
              {
                if (this.sc.pills > 0)
                {
                  this.sc.pillselect.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
                  this.myPlayer.gunChoice = this.pType;
                  this.dpadCount = this.sc.pills;
                  this.dpadTimer = 130;
                }
              }
              else
              {
                this.sc.switchweapon.Play(this.sc.ev, 0.1f, 0.0f);
                this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
                this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
              }
            }
          }
          if (this.gamePad.DPad.Right == Microsoft.Xna.Framework.Input.ButtonState.Pressed && this.prevState.DPad.Right == Microsoft.Xna.Framework.Input.ButtonState.Released)
          {
            if (!this.myPlayer.isDown)
            {
              if ((this.sc.pills > 0 || this.sc.hulks > 0) && this.myPlayer.animClip != 13)
              {
                type = "switch";
                if (this.sc.hulks > 0)
                {
                  this.myPlayer.nextgunChoice = this.hType;
                  this.dpadCount = this.sc.hulks;
                  this.dpadTimer = 130;
                }
                else
                {
                  this.myPlayer.nextgunChoice = this.pType;
                  this.dpadCount = this.sc.pills;
                  this.dpadTimer = 130;
                }
                if (this.myPlayer.gunChoice == this.hType)
                {
                  this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
                  if (this.sc.pills > 0)
                  {
                    this.myPlayer.nextgunChoice = this.pType;
                    this.dpadCount = this.sc.pills;
                    this.dpadTimer = 130;
                  }
                }
                else if (this.myPlayer.gunChoice == this.pType)
                {
                  this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
                  if (this.sc.hulks > 0)
                  {
                    this.myPlayer.nextgunChoice = this.hType;
                    this.dpadCount = this.sc.hulks;
                    this.dpadTimer = 130;
                  }
                }
              }
            }
            else if (!this.myPlayer.noArms)
            {
              if (this.myPlayer.gunChoice != this.pType)
              {
                if (this.sc.pills > 0)
                {
                  this.sc.pillselect.Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
                  this.myPlayer.gunChoice = this.pType;
                  this.dpadCount = this.sc.pills;
                  this.dpadTimer = 130;
                }
              }
              else
              {
                this.sc.switchweapon.Play(this.sc.ev, 0.1f, 0.0f);
                this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
                this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
              }
            }
          }
          if (this.overRide)
          {
            type = "pumpit";
            this.overRide = false;
          }
          if (this.myPlayer.autoCamOn)
          {
            if (this.alternateCam > 0)
            {
              int num18;
              if (!this.KMtoggle(this.sc.rmb_key))
              {
                triggers = this.gamePad.Triggers;
                if ((double) triggers.Right > 0.0)
                {
                  triggers = this.prevState.Triggers;
                  num18 = (double) triggers.Right <= 0.0 ? 1 : 0;
                }
                else
                  num18 = 0;
              }
              else
                num18 = 1;
              bool flag26 = num18 != 0;
              int num19;
              if (!this.KMtoggle(this.sc.lmb_key))
              {
                triggers = this.gamePad.Triggers;
                if ((double) triggers.Left > 0.0)
                {
                  triggers = this.prevState.Triggers;
                  num19 = (double) triggers.Left <= 0.0 ? 1 : 0;
                }
                else
                  num19 = 0;
              }
              else
                num19 = 1;
              bool flag27 = num19 != 0;
              if (flag26)
              {
                if (this.remPlayer.Count > 1)
                {
                  ++this.playerfollowIndex;
                  if (this.playerfollowIndex > this.remPlayer.Count - 1)
                    this.playerfollowIndex = 0;
                  if (this.remPlayer[this.playerfollowIndex].id == this.mysteamID)
                    ++this.playerfollowIndex;
                  if (this.playerfollowIndex > this.remPlayer.Count - 1)
                    this.playerfollowIndex = 0;
                }
                ++this.bossindex;
                ++this.enemyindex;
                if (this.enemyindex > (int) this.boar.alive)
                  this.enemyindex = 1;
              }
              if (flag27)
              {
                if (this.remPlayer.Count > 1)
                {
                  --this.playerfollowIndex;
                  if (this.playerfollowIndex < 0)
                    this.playerfollowIndex = this.remPlayer.Count - 1;
                  if (this.remPlayer[this.playerfollowIndex].id == this.mysteamID)
                    --this.playerfollowIndex;
                  if (this.playerfollowIndex < 0)
                    this.playerfollowIndex = this.remPlayer.Count - 1;
                }
                --this.bossindex;
                --this.enemyindex;
                if (this.enemyindex < 1)
                  this.enemyindex = (int) this.boar.alive;
              }
              if (this.sc.dayTime == "pm" && this.sc.gameState > 0)
                this.sc.darkness = 0.5f;
              if (this.alternateCam == 1)
              {
                float num20 = 3f;
                float num21 = 5f;
                float max = 3900f;
                float num22 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
                float num23 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
                BloodnBacon4PT bloodnBacon4Pt1 = this;
                double camradian = (double) bloodnBacon4Pt1.camradian;
                thumbSticks = this.gamePad.ThumbSticks;
                double num24 = (double) thumbSticks.Right.X / 40.0;
                bloodnBacon4Pt1.camradian = (float) (camradian + num24);
                this.camradian += num22 / (800f * this.sc.pad_sensitivity);
                BloodnBacon4PT bloodnBacon4Pt2 = this;
                double camheight = (double) bloodnBacon4Pt2.camheight;
                double padInvertY = (double) this.sc.pad_invertY;
                thumbSticks = this.gamePad.ThumbSticks;
                double y2 = (double) thumbSticks.Right.Y;
                double num25 = padInvertY * y2 / 40.0;
                bloodnBacon4Pt2.camheight = (float) (camheight + num25);
                this.camheight -= num23 / (800f * this.sc.pad_sensitivity) * this.sc.pad_invertY;
                this.camheight = MathHelper.Clamp(this.camheight, 1.7f, 4.5f);
                thumbSticks = this.gamePad.ThumbSticks;
                Vector2 vector2 = -(thumbSticks.Left * num20);
                vector2.X *= Math.Abs(vector2.X);
                vector2.Y *= Math.Abs(vector2.Y);
                if (this.keyState.IsKeyDown(this.sc.a_key))
                  vector2.X += 10f;
                if (this.keyState.IsKeyDown(this.sc.d_key))
                  vector2.X -= 10f;
                if (this.keyState.IsKeyDown(this.sc.w_key))
                  vector2.Y -= 10f;
                if (this.keyState.IsKeyDown(this.sc.s_key))
                  vector2.Y += 10f;
                Vector3 vector3 = (Vector3.Transform(new Vector3((float) (-(double) vector2.X * 0.800000011920929), 0.0f, vector2.Y), Matrix.CreateRotationY(-3.14f - this.camradian)) * -(float) Math.Cos((double) this.camheight) * 1.5f) with
                {
                  Y = vector2.Y * (float) Math.Sin((double) this.camheight)
                };
                ref Vector3 local1 = ref vector3;
                double y3 = (double) local1.Y;
                triggers = this.gamePad.Triggers;
                double right1 = (double) triggers.Right;
                triggers = this.gamePad.Triggers;
                double right2 = (double) triggers.Right;
                double num26 = right1 * right2 * (double) num21;
                local1.Y = (float) (y3 - num26);
                ref Vector3 local2 = ref vector3;
                double y4 = (double) local2.Y;
                triggers = this.gamePad.Triggers;
                double left1 = (double) triggers.Left;
                triggers = this.gamePad.Triggers;
                double left2 = (double) triggers.Left;
                double num27 = left1 * left2 * (double) num21;
                local2.Y = (float) (y4 + num27);
                if (this.KMdown(this.sc.lmb_key))
                  vector3.Y -= num21;
                if (this.KMdown(this.sc.rmb_key))
                  vector3.Y += num21;
                this.autoCampos += vector3;
                this.autoCampos.Y = MathHelper.Clamp(this.autoCampos.Y, 25f, max);
                this.autoCampos.X = MathHelper.Clamp(this.autoCampos.X, -1700f, 7300f);
                this.autoCampos.Z = MathHelper.Clamp(this.autoCampos.Z, -1700f, 7300f);
                this.autoCamlook.X = (float) (-Math.Cos((double) this.camheight) * Math.Sin((double) this.camradian) * -50.0) + this.autoCampos.X;
                this.autoCamlook.Z = (float) (-Math.Cos((double) this.camheight) * -Math.Cos((double) this.camradian) * -50.0) + this.autoCampos.Z;
                this.autoCamlook.Y = (float) Math.Sin((double) this.camheight) * -50f + this.autoCampos.Y;
              }
              if (this.alternateCam == 2)
              {
                float num28 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
                float num29 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
                BloodnBacon4PT bloodnBacon4Pt3 = this;
                double autoCamrotate = (double) bloodnBacon4Pt3.autoCamrotate;
                thumbSticks = this.gamePad.ThumbSticks;
                double num30 = (double) thumbSticks.Left.X / 30.0;
                bloodnBacon4Pt3.autoCamrotate = (float) (autoCamrotate - num30);
                this.autoCamrotate -= num28 / 520f;
                BloodnBacon4PT bloodnBacon4Pt4 = this;
                double autoCamHeight = (double) bloodnBacon4Pt4.autoCamHeight;
                thumbSticks = this.gamePad.ThumbSticks;
                double num31 = (double) thumbSticks.Left.Y / 30.0;
                bloodnBacon4Pt4.autoCamHeight = (float) (autoCamHeight - num31);
                this.autoCamHeight += num29 / 520f * this.sc.pad_invertY;
              }
              float num32;
              if (this.alternateCam == 3)
              {
                if (Cutty4.cuttyCount > 0)
                {
                  num32 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
                  float num33 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
                  BloodnBacon4PT bloodnBacon4Pt = this;
                  double camheight = (double) bloodnBacon4Pt.camheight;
                  double padInvertY = (double) this.sc.pad_invertY;
                  thumbSticks = this.gamePad.ThumbSticks;
                  double y5 = (double) thumbSticks.Right.Y;
                  double num34 = padInvertY * y5 / 40.0;
                  bloodnBacon4Pt.camheight = (float) (camheight + num34);
                  this.camheight -= num33 / 420f * this.sc.pad_invertY;
                }
                else
                {
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("Enemy Camera");
                  this.memoIcon = 0;
                  this.memoTimer = 140;
                  this.alternateCam = 4;
                }
              }
              if (this.alternateCam == 4)
              {
                if (this.boar.dupe.Count > 0 && this.lastBoarAlive >= 0)
                {
                  num32 = (float) (this.mouseState.X - (int) this.sc.winCorner.X);
                  float num35 = (float) (this.mouseState.Y - (int) this.sc.winCorner.Y);
                  BloodnBacon4PT bloodnBacon4Pt = this;
                  double camheight = (double) bloodnBacon4Pt.camheight;
                  double padInvertY = (double) this.sc.pad_invertY;
                  thumbSticks = this.gamePad.ThumbSticks;
                  double y6 = (double) thumbSticks.Right.Y;
                  double num36 = padInvertY * y6 / 40.0;
                  bloodnBacon4Pt.camheight = (float) (camheight + num36);
                  this.camheight -= num35 / 420f * this.sc.pad_invertY;
                }
                else
                  this.alternateCam = 0;
              }
            }
            else
            {
              if (this.myPlayer.autoCamTarget == 1 && (double) this.myPlayer.autoCamTimer < 1.0)
                this.myPlayer.autoCamTimer += 0.015f;
              if (this.myPlayer.autoCamTarget == 0 && (double) this.myPlayer.autoCamTimer > 0.0)
              {
                this.myPlayer.autoCamTimer -= 0.015f;
                if ((double) this.myPlayer.autoCamTimer <= 0.0)
                  this.myPlayer.autoCamOn = false;
              }
              float autoCamHeight1 = this.autoCamHeight;
              if ((double) this.myPlayer.autoCamTimer <= 0.0 || (double) this.myPlayer.autoCamTimer >= 1.0)
              {
                BloodnBacon4PT bloodnBacon4Pt5 = this;
                double autoCamrotate = (double) bloodnBacon4Pt5.autoCamrotate;
                thumbSticks = this.gamePad.ThumbSticks;
                double num37 = (double) thumbSticks.Left.X / 50.0;
                bloodnBacon4Pt5.autoCamrotate = (float) (autoCamrotate - num37);
                BloodnBacon4PT bloodnBacon4Pt6 = this;
                double autoCamHeight2 = (double) bloodnBacon4Pt6.autoCamHeight;
                thumbSticks = this.gamePad.ThumbSticks;
                double num38 = (double) thumbSticks.Left.Y / 50.0;
                bloodnBacon4Pt6.autoCamHeight = (float) (autoCamHeight2 - num38);
                if (this.keyState.IsKeyDown(this.sc.a_key))
                  this.autoCamrotate += 0.04f;
                if (this.keyState.IsKeyDown(this.sc.d_key))
                  this.autoCamrotate -= 0.04f;
                if (this.keyState.IsKeyDown(this.sc.w_key))
                  this.autoCamHeight -= 0.04f;
                if (this.keyState.IsKeyDown(this.sc.s_key))
                  this.autoCamHeight += 0.04f;
              }
              if ((double) this.myPlayer.now.health <= 0.0 && (double) this.myPlayer.frame1 < 128.0)
              {
                this.autoCamrotate += 1f / 500f;
                this.autoCamDistance = MathHelper.Hermite(this.autoCamRadius, 0.0f, 150f, 0.0f, (this.myPlayer.frame1 - 30f) / 97f);
                if ((double) this.myPlayer.frame1 > 126.0)
                  this.autoCamRadius = 150f;
              }
              else
              {
                if (this.gamePad.Buttons.RightShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                  this.autoCamRadius -= 5f;
                if (this.gamePad.Buttons.LeftShoulder == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                  this.autoCamRadius += 5f;
                this.autoCamRadius = MathHelper.Clamp(this.autoCamRadius, 30f, 600f);
                this.autoCamDistance = this.autoCamRadius;
              }
              float height1 = 0.0f;
              this.autoCamHeight = MathHelper.Clamp(this.autoCamHeight, -4.3f, -1.9f);
              this.autoCamlook = Vector3.Transform(new Vector3(0.0f, 40f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[1]);
              if (this.myPlayer.insideBarn(this.myPlayer.displayState.npcPosition))
                height1 = 0.0f;
              else
                this.GetHeightFast(ref this.farmheights, this.autoCamlook, ref height1);
              if (this.tunneladd && this.inFarm == 2)
                height1 = this.myPlayer.displayState.npcPosition.Y;
              this.autoCamlook.Y += 5f;
              this.autoCampos.X = (float) (-Math.Cos((double) this.autoCamHeight) * Math.Sin((double) this.autoCamrotate)) * this.autoCamDistance + this.autoCamlook.X;
              this.autoCampos.Z = (float) (-Math.Cos((double) this.autoCamHeight) * -Math.Cos((double) this.autoCamrotate)) * this.autoCamDistance + this.autoCamlook.Z;
              this.autoCampos.Y = (float) Math.Sin((double) this.autoCamHeight) * this.autoCamDistance + height1;
              if ((double) this.autoCampos.X > 150.0 && (double) this.autoCampos.X < 5950.0 || (double) this.autoCampos.Z < 5950.0 && (double) this.autoCampos.Z > 150.0)
              {
                float height2 = 10f;
                if (!this.myPlayer.inBarn)
                  this.GetHeightFast(ref this.farmheights, this.autoCampos, ref height2);
                if (this.tunneladd && this.inFarm == 2)
                  height2 = this.myPlayer.displayState.npcPosition.Y;
                if ((double) this.autoCampos.Y < (double) height2 + 15.0)
                {
                  this.autoCampos.Y = height2 + 15f;
                  this.autoCamHeight = MathHelper.Min(this.autoCamHeight, autoCamHeight1);
                }
              }
            }
          }
          if ((double) this.sc.myTimer % 180.0 == 0.0 && !this.sc.trophy.milehighclub.trophywon && (double) this.myPlayer.displayState.npcPosition.X > 4860.0 && (double) this.myPlayer.displayState.npcPosition.X < 4890.0 && (double) this.myPlayer.displayState.npcPosition.Y > 950.0 && (double) this.myPlayer.displayState.npcPosition.Y < 955.0 && (double) this.myPlayer.displayState.npcPosition.Z > 1252.0 && (double) this.myPlayer.displayState.npcPosition.Z < 1280.0)
            this.sc.trophy.win(this.sc.trophy.milehighclub);
        }
        this.animManager(type);
        if (!this.myPlayer.isDown && (double) this.myPlayer.now.health <= 105.0)
        {
          ++this.myPlayer.stats_knockdown;
          this.myPlayer.isDown = true;
          this.myPlayer.fallState = 0;
          this.myPlayer.now.health = (float) this.rr.Next(70, 92);
          this.myPlayer.animClip = -1;
          this.myPlayer.animCount = -1f;
          this.dirInput = Vector2.Zero;
          this.myPlayer.fallVec = Vector3.Zero;
          this.myPlayer.motionVec = Vector3.Zero;
          this.myPlayer.jump = Vector3.Zero;
        }
        if (this.tunneladd && this.sc.gameState == 2)
        {
          if (this.sc.host && !this.hostcodeSent)
          {
            this.hostcodeSend = 1;
            this.hostcodeSent = true;
          }
          if (this.skullemit.Count > 0)
          {
            for (int index = 0; index < this.skullemit.Count; ++index)
            {
              if (this.skullemit[index].amt > 0 && this.skullemit[index].found && (double) this.sc.myTimer % (double) this.skullemit[index].freq == 0.0)
              {
                --this.skullemit[index].amt;
                this.orange.emitPumpkins(index * 200 + this.skullemit[index].repeat * 10 + this.skullemit[index].amt, this.skullemit[index].emitterPos, this.skullemit[index].rotMatrix, ref this.farmheights, false, this.skullemit[index].placeit, this.skullemit[index].triggerPos.Y);
                this.skullplunge.Play(this.sc.ev * MathHelper.Clamp((float) (1.0 - (double) Vector3.Distance(this.myPlayer.displayState.npcPosition, this.skullemit[index].emitterPos) / 1800.0), 0.2f, 1f), (float) this.rr.Next(-30, 5) / 100f, 0.0f);
              }
            }
          }
          if (this.skulldrop.Count > 0)
          {
            for (int index = 0; index < this.skulldrop.Count; ++index)
            {
              if (this.skulldrop[index].amt > 0 && this.skulldrop[index].found && (double) this.sc.myTimer % (double) this.skulldrop[index].freq == 0.0)
              {
                --this.skulldrop[index].amt;
                Vector3 vector3 = new Vector3((float) this.rr.Next(-1400, 1400) / 10f, 0.0f, (float) this.rr.Next(-1400, 1400) / 10f);
                this.orange.emitPumpkins(index * 200 + this.skulldrop[index].repeat * 10 + this.skulldrop[index].amt, vector3 + this.skulldrop[index].emitterPos, this.skulldrop[index].rotMatrix, ref this.farmheights, true, false, this.skulldrop[index].triggerPos.Y);
              }
            }
          }
          Vector3 remVec = Vector3.Zero;
          Vector3 remplayerPOS = Vector3.Zero;
          if (this.remPlayer.Count > 1)
          {
            for (int index = 0; index < this.remPlayer.Count; ++index)
            {
              if (!(this.remPlayer[index].id == this.mysteamID))
              {
                remVec = this.remPlayer[index].r.vec;
                remplayerPOS = this.remPlayer[index].r.displayState.npcPosition;
                this.remPlayer[index].r.m2_location = (this.remPlayer[index].r.displayState.npcPosition - this.m_center) / 5.580357f;
                this.remPlayer[index].r.m2_rot = (float) (-(double) this.remPlayer[index].r.displayState.npcRotation + 1.5700000524520874);
                this.remPlayer[index].r.m2_xx = (float) ((int) (((double) this.remPlayer[index].r.m2_location.X + 450.0) / (double) this.divver) - (int) ((double) this.m_xx / (double) this.divver)) + this.offxx;
                this.remPlayer[index].r.m2_yy = (float) ((int) (((double) this.remPlayer[index].r.m2_location.Z + 450.0) / (double) this.divver2) - (int) ((double) this.m_yy / (double) this.divver2)) + this.offyy;
                this.remPlayer[index].r.insideMinimap = (double) this.remPlayer[index].r.m2_xx > (double) this.x0 && (double) this.remPlayer[index].r.m2_yy > (double) this.y0 && (double) this.remPlayer[index].r.m2_xx < (double) this.x0 + (double) this.ww0 && (double) this.remPlayer[index].r.m2_yy < (double) this.y0 + (double) this.hh0;
              }
            }
          }
          this.orange.updateSkullkin(ref this.orange.pump, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor, ref this.hitVel, this.headRot, remVec, remplayerPOS);
          this.orange.updateSkullParts(ref this.orange.p_stem, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor);
          this.orange.updateSkullParts(ref this.orange.p_rind, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor);
          this.orange.updateSkullParts(ref this.orange.p_base, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor);
          this.orange.updateSkullParts(ref this.orange.p_chunk, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor);
          this.orange.updateSkullParts(ref this.orange.p_bitty, 3000f, ref this.farmheights, this.campos, this.camlookpos, ref this.myPlayer, ref this.genCursor);
          this.m_location = (this.myPlayer.displayState.npcPosition - this.m_center) / 5.580357f;
          this.m_xx = (float) ((int) this.m_location.X + 450);
          this.m_yy = (float) ((int) this.m_location.Z + 450);
          this.rr5 = new Rectangle((int) ((double) this.m_xx - (double) this.width0 / 2.0), (int) ((double) this.m_yy - (double) this.hite0 / 2.0), (int) this.width0, (int) this.width0);
          if (this.inFarm == 2 && (double) this.myPlayer.displayState.npcPosition.Y < -220.0 && !this.cryptLock)
          {
            bool flag28 = true;
            if (this.remPlayer.Count > 1)
            {
              for (int index = 0; index < this.remPlayer.Count; ++index)
              {
                if (!(this.remPlayer[index].id == this.mysteamID) && (double) this.remPlayer[index].r.displayState.npcPosition.Y > -220.0)
                  flag28 = false;
              }
            }
            if (flag28)
            {
              this.vaultopen.Play(this.sc.ev, 0.0f, 0.0f);
              this.lockCrypt(true);
              this.cryptLock = true;
              this.crypt1bnetsend = true;
            }
          }
          if (this.sc.host)
          {
            bool flag29 = this.inFarm == 1 && !this.cryptLock2;
            if ((this.cryptLock2 || this.inFarm != 2 ? 0 : ((double) this.myPlayer.displayState.npcPosition.Y < -290.0 ? 1 : 0)) != 0 || flag29)
            {
              bool flag30 = true;
              if (this.remPlayer.Count > 1)
              {
                for (int index = 0; index < this.remPlayer.Count; ++index)
                {
                  if (!(this.remPlayer[index].id == this.mysteamID))
                  {
                    double y = (double) this.remPlayer[index].r.displayState.npcPosition.Y;
                    if ((double) this.remPlayer[index].r.displayState.npcPosition.Y < -5.0)
                      flag30 = false;
                  }
                }
              }
              if (flag30 && flag29)
              {
                this.vaultopen.Play(this.sc.ev, -0.2f, 0.0f);
                this.lockCrypt2(true);
                this.cryptLock2 = true;
                this.crypt2bnetsend = true;
              }
            }
          }
          int inFarm = this.inFarm;
          bool flag31 = this.inbox(this.myPlayer.displayState.npcPosition, this.farmTunnelTrig);
          this.tunnelTrig1 = new BoundingBox(new Vector3(1124f, -146f, 4504f), new Vector3((float) (1317 - this.cryptLockMove), 34f, 4586f));
          bool flag32 = this.inbox(this.myPlayer.displayState.npcPosition, this.tunnelTrig1);
          bool flag33 = this.inbox(this.myPlayer.displayState.npcPosition, this.tunnelTrig2);
          if (this.mazeid == 0)
            this.inExcavation = this.inbox(this.myPlayer.displayState.npcPosition, this.tunnelTrig3);
          if (!flag33 && !flag32 && flag31)
            this.inFarm = 1;
          if (flag32 || flag33)
            this.inFarm = 2;
          if (this.cryptLock && flag32)
            this.inFarm = 1;
          if (this.cryptLock2 && flag33)
            this.inFarm = 1;
          if (this.inFarm == 2 && inFarm == 1)
          {
            this.noTunnelCheats();
            this.myPlayer.jumping = true;
            this.myPlayer.fallGrav = -1f;
            this.myPlayer.fallAcc = -1f;
          }
          if (this.inFarm == 1 && inFarm == 2 && this.notSaved)
          {
            this.sc.saveTunnelItems(true, ref this.eraseBlobList, this.mazeid);
            this.sc.cogCount = this.sc.cog1[this.mazeid] + this.sc.cog2[this.mazeid] + this.sc.cog3[this.mazeid];
            this.sc.goldKeys.keyCog = this.sc.cogCount <= 0;
            this.sc.equipx.Play(this.sc.ev, 0.0f, 0.0f);
            this.memoTimer = 340;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 2;
            BloodnBacon4PT.memo.Append("progress saved");
            this.notSaved = false;
          }
          if (this.inFarm == 2)
          {
            if ((double) this.myPlayer.displayState.npcPosition.Y < -250.0)
              this.notSaved = true;
            if ((double) this.myPlayer.displayState.npcPosition.Y < -300.0)
            {
              if (this.myPlayer.jumping)
              {
                ++this.fallTimer;
                if (this.fallTimer == 55 && (double) Math.Abs(this.campos.Y - this.myPlayer.ground) > 100.0)
                  this.deathyell.Play(this.sc.ev, 0.0f, 0.0f);
                if (this.fallTimer == 120 && (double) Math.Abs(this.campos.Y - this.myPlayer.ground) > 100.0)
                  this.deathyell.Play(this.sc.ev * 0.6f, 0.2f, 0.0f);
                if ((double) this.myPlayer.displayState.npcPosition.Y < -1050.0 && (double) this.myPlayer.displayState.npcPosition.Y > -1200.0)
                  this.sc.trophy.win(this.sc.trophy.freefall);
              }
              else if ((double) this.myPlayer.normal.Y > 0.10000000149011612)
              {
                if (this.fallTimer > 60)
                {
                  this.myPlayer.damHealth(100f, false);
                  this.sc.bonepop.Play(this.sc.ev, (float) this.rr.Next(-30, -5) / 100f, 0.0f);
                }
                this.fallTimer = 0;
              }
            }
            this.farmheights = this.tunnelheights;
            this.myPlayer.inFarm = 2;
            this.myPlayer.nearItems = this.sc.goldKeys.nearItems || this.sc.goldKeys.nearExit;
          }
          else
          {
            this.fallTimer = 0;
            this.farmheights = this.heights;
            this.myPlayer.inFarm = 1;
            this.myPlayer.nearItems = this.sc.goldKeys.nearItems || this.sc.goldKeys.nearExit;
          }
          Vector3 npcPosition = this.myPlayer.displayState.npcPosition;
          this.myPlayer.UpdateLocal(ref this.farmheights, this.dirInput, this.headTilt, this.headRot, this.barnDoorslide.Z, this.sc.gameState, this.sc.hover);
          if (this.inFarm == 2 && (double) this.hitVel.Length() > 0.0 && (double) Math.Abs(this.myPlayer.displayState.npcPosition.Y - npcPosition.Y) > 2.0)
          {
            this.myPlayer.simulationState.npcPosition = npcPosition;
            this.myPlayer.displayState.npcPosition = npcPosition;
            this.hitVel = Vector2.Zero;
          }
          this.fadeHoles(ref this.cryptdoor);
          this.fadeHoles(ref this.cryptdoor2);
          if (this.inFarm == 2)
          {
            for (int index = 0; index < this.combo.Count; ++index)
              this.fadeHoles(ref this.combo[index].doorholes);
          }
          this.twinshot = false;
          this.twinDestiny = Vector3.Zero;
          if (((double) this.twinPosition.Y > 0.0 || this.inFarm == 2) && this.twinFound)
            this.twinBones(ref this.twin1[this.twinbase]);
        }
        else
          this.myPlayer.UpdateLocal(ref this.heights, this.dirInput, this.headTilt, this.headRot, this.barnDoorslide.Z, this.sc.gameState, this.sc.hover);
        Matrix pistolHand = this.myPlayer.pistolHand;
        this.playerBones(ref this.npc1[this.myPlayer.clip1], ref this.npc1[this.myPlayer.clip2], ref this.myPlayer);
        this.m1 = this.myPlayer.gunChoice <= 6 ? this.sc.flashOffset[this.myPlayer.gunChoice] : this.sc.flashOffset[6];
        this.myPlayer.gunpos = this.myPlayer.closeCam ? (!this.myPlayer.isDown ? Vector3.Transform(new Vector3(2.5f, 46.5f, 0.0f), this.myPlayer.cambone) : (this.myPlayer.fallState != 4 ? Vector3.Transform(new Vector3(4.2f, 42.2f, 4.1f), this.myPlayer.cambone) : Vector3.Transform(new Vector3(1.9f, 49.2f, 2.5f), this.myPlayer.cambone))) : Vector3.Transform(Vector3.Zero, this.m1 * this.myPlayer.pistolHand);
        if (this.myPlayer.isDown)
        {
          if (!this.myPlayer.closeCam)
          {
            this.myPlayer.gunlook = this.myPlayer.gunpos + Vector3.Transform(new Vector3(50f, 0.0f, 0.0f), this.m1 * pistolHand) - Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.m1 * pistolHand);
            this.gunView = Matrix.CreateLookAt(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Up);
          }
          else
          {
            this.myPlayer.oldpistolHand = Matrix.CreateFromYawPitchRoll(-0.4099f, -0.16f, -0.2f) * this.myPlayer.oldpistolHand;
            this.myPlayer.gunlook = this.myPlayer.gunpos + (Vector3.Transform(new Vector3(50f, 0.0f, 0.0f), this.m1 * this.myPlayer.oldpistolHand) - Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.m1 * this.myPlayer.oldpistolHand));
            if (this.myPlayer.fallState == 4)
              this.myPlayer.gunlook = Vector3.Transform(new Vector3(0.0f, 16f, -16f), this.m1 * this.myPlayer.pistolHand);
            this.gunView = Matrix.CreateLookAt(this.myPlayer.gunpos, this.myPlayer.gunlook, this.myPlayer.oldpistolHand.Up);
          }
        }
        else
        {
          this.myPlayer.gunlook = this.myPlayer.gunpos + Vector3.Transform(new Vector3(0.0f, 0.0f, 50f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
          this.gunView = Matrix.CreateLookAt(this.myPlayer.gunpos, this.myPlayer.gunlook, Vector3.Up);
        }
      }
      if (this.barnTriangle)
        this.farmerBones(ref this.farmer1[0]);
      if (this.keyState.IsKeyDown(this.sc.up_key) && this.prevkeyState.IsKeyUp(this.sc.up_key))
      {
        this.sc.mylens += 2f;
        if ((double) this.sc.mylens > 150.0)
          this.sc.mylens = 150f;
        this.fovTimer = 70;
        this.sc.myfov = (float) Math.Cos((double) MathHelper.ToRadians((float) (((double) this.sc.mylens + 30.0) / 2.0)));
      }
      if (this.keyState.IsKeyDown(this.sc.down_key) && this.prevkeyState.IsKeyUp(this.sc.down_key))
      {
        this.sc.mylens -= 2f;
        if ((double) this.sc.mylens < 20.0)
          this.sc.mylens = 20f;
        this.fovTimer = 70;
        this.sc.myfov = (float) Math.Cos((double) MathHelper.ToRadians((float) (((double) this.sc.mylens + 30.0) / 2.0)));
      }
      if (this.keyState.IsKeyDown(this.sc.left_key) && this.prevkeyState.IsKeyUp(this.sc.left_key))
      {
        this.sc.mylens = 58f;
        this.fovTimer = 70;
        this.sc.myfov = (float) Math.Cos((double) MathHelper.ToRadians((float) (((double) this.sc.mylens + 30.0) / 2.0)));
      }
      if (this.myPlayer.clip1 == 0 || this.myPlayer.clip1 == 2)
      {
        int num39 = (int) ((double) this.myPlayer.step1 * 0.041666001081466675 % 4.166600227355957 * 24.0);
        if ((double) this.myPlayer.incr != 0.0)
        {
          int num40 = 1;
          int num41 = 35;
          if (num39 <= 1 || num39 > 60 + num41)
          {
            this.rightFoot = false;
            this.leftFoot = false;
          }
          if (num39 > num40 && num39 < 10 + num41 && !this.rightFoot)
          {
            this.sc.steps[this.rr.Next(0, 6)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(20, 30) / 100.0), (float) this.rr.Next(-20, 0) / 100f, 0.0f);
            this.rightFoot = true;
          }
          else if (num39 > 50 + num40 && num39 < 60 + num41 && !this.leftFoot)
          {
            this.sc.steps[this.rr.Next(0, 6)].Play((float) ((double) this.sc.ev * (double) this.rr.Next(20, 30) / 100.0), (float) this.rr.Next(-20, 0) / 100f, 0.0f);
            this.leftFoot = true;
          }
        }
      }
      if (!this.myPlayer.noArms)
        return;
      if (this.myPlayer.armTimer > 0)
      {
        --this.myPlayer.armTimer;
        if (this.localID == 8)
          this.woundSpraySpark();
        else
          this.woundSpray();
      }
      if (this.myPlayer.isDown)
        return;
      this.myPlayer.damHealth(0.06f, this.sc.cheat_Invincible);
    }

    private void calcPaintTargets()
    {
      ++this.cycle;
      if (this.cycle > 9)
        this.cycle = 0;
      if (this.cycle == 1)
      {
        if (this.player1Paint.index.Count > 0)
        {
          this.method_2(ref this.quickSkin1, ref this.player1Paint);
          return;
        }
        if (this.localCleanOn)
        {
          this.localClean -= 0.06f;
          if ((double) this.localClean <= 0.02)
          {
            this.localClean = 0.0f;
            this.localCleanOn = false;
          }
          this.delPlayer1Blood(ref this.quickSkin1, ref this.localClean);
          return;
        }
      }
      if ((this.cycle == 2 || this.cycle == 3 || this.cycle == 4 || this.cycle == 5 || this.cycle == 6 || this.cycle == 7) && this.remPlayer.Count > 1)
      {
        int num = this.cycle - 2;
        if (num < this.remPlayer.Count && this.mysteamID != this.remPlayer[num].id)
        {
          if (this.remPlayer[num].r.player2Paint.index.Count > 0)
          {
            this.method_3(num);
            return;
          }
          if (this.remPlayer[num].r.remoteCleanOn)
          {
            this.remPlayer[num].r.remoteClean -= 0.06f;
            if ((double) this.remPlayer[num].r.remoteClean <= 0.019999999552965164)
            {
              this.remPlayer[num].r.remoteClean = 0.0f;
              this.remPlayer[num].r.remoteCleanOn = false;
            }
            this.delPlayer2Blood(ref this.remPlayer[num].r.remoteClean, num);
            return;
          }
        }
      }
      if (this.cycle == 8 && Princess4.cuttyCount > 0 && this.princess[0].canvasPaint.index.Count > 0)
      {
        this.princess[0].executeCanvasBlood();
      }
      else
      {
        if (this.cycle != 9 || Princess4.cuttyCount <= 0 || this.princess[0].bodyPaint.index.Count <= 0)
          return;
        this.princess[0].executeTargetBlood();
      }
    }

    public void handleBarnEvents()
    {
      if (this.barnDoorLocked)
      {
        this.barnDoorState = 1;
        this.barnDoorLocked = false;
        this.sc.doorUnlock.Play(this.sc.ev * 1f, 0.0f, 0.0f);
      }
      this.talkDayIndex = this.sc.currentDay >= this.dayendLock.Length ? this.dayendLock[this.dayendLock.Length - 1] : this.dayendLock[this.sc.currentDay];
      this.farmerJawIndex = -1;
      this.talkIndex = -1;
      this.talkSmooth = 0.0f;
      this.farmerGonnaSpit = false;
      this.farmerGonnaBleed = false;
      this.farmerGonnaBleedMouth = false;
      this.cursor.addTriangles();
      this.oppCursor.addTriangles();
      this.genCursor.addTriangles();
      this.barnTriangle = true;
    }

    private int ReadFromBitfield(ref int bitfield, int bitCount)
    {
      int num = bitfield & (1 << bitCount) - 1;
      bitfield >>= bitCount;
      return num;
    }

    private void AddToBitfield(ref int bitfield, int bitCount, int value)
    {
      bitfield <<= bitCount;
      bitfield |= value;
    }

    private void remotePlayerCalc(int ii)
    {
      if (this.remPlayer[ii].r.now.gunfired == 6)
        this.remPlayer[ii].r.gunfired = true;
      this.remPlayer[ii].r.UpdateRemote(ref this.heights);
      this.remoteBones(ref this.npc2[this.remPlayer[ii].r.clip1], ref this.npc2[this.remPlayer[ii].r.clip2], this.remPlayer[ii].r);
      if (this.remPlayer[ii].r.isDown)
      {
        Vector2 vector2_1 = Vector2.Normalize(new Vector2(this.camlookpos.X, this.camlookpos.Z) - new Vector2(this.campos.X, this.campos.Z));
        Vector2 vector2_2 = Vector2.Normalize(new Vector2(this.remPlayer[ii].r.displayState.npcPosition.X, this.remPlayer[ii].r.displayState.npcPosition.Z) - new Vector2(this.campos.X, this.campos.Z));
        this.remPlayer[ii].r.playerDotplayer = Vector2.Dot(vector2_1, vector2_2);
      }
      if ((double) this.sc.myTimer % 4.0 == 0.0)
        this.remPlayer[ii].r.player2player = !this.myPlayer.isDown ? Vector2.DistanceSquared(new Vector2(this.remPlayer[ii].r.displayState.npcPosition.X, this.remPlayer[ii].r.displayState.npcPosition.Z), new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z)) : Vector3.DistanceSquared(this.remPlayer[ii].r.displayState.npcPosition, this.campos);
      if ((double) this.sc.myTimer % 30.0 == 0.0)
      {
        this.remPlayer[ii].r.vol = MathHelper.Clamp((float) (1.0 - (double) this.remPlayer[ii].r.player2player / 4410000.0), 0.1f, 1f);
        this.remPlayer[ii].r.vol *= this.remPlayer[ii].r.vol;
      }
      this.remotePlayerUpdate(ii);
      if (this.remPlayer[ii].r.triggerEvent > 0)
      {
        if (this.remPlayer[ii].r.triggerEvent == 1)
        {
          this.sc.ring.Play(this.sc.ev * 0.4f, 0.0f, 0.0f);
          this.remPlayer[ii].r.bloodExists = false;
        }
        else if (this.remPlayer[ii].r.triggerEvent == 2)
          this.sc.ruffles.Play(this.sc.ev * 0.2f, 0.0f, 0.0f);
        else if (this.remPlayer[ii].r.triggerEvent == 3)
        {
          this.sc.falldown.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          if (!this.remPlayer[ii].r.bloodExists)
          {
            Vector3 lastPos1 = this.remPlayer[ii].r.lastPOS;
            Vector3 lastPos2 = this.remPlayer[ii].r.lastPOS;
            lastPos2.Y += 200f;
            this.UpdatePicking(this.proj, Matrix.CreateLookAt(lastPos2, new Vector3(lastPos2.X + (float) this.rr.Next(-70, 70) / 20f, lastPos2.Y - 900f, lastPos2.Z + (float) this.rr.Next(-70, 70) / 20f), Vector3.Right), ref this.genCursor, false);
            Vector3 vector3_1 = this.genCursor.pickedTriangle[0];
            Vector3 vector3_2 = this.genCursor.pickedTriangle[1];
            Vector3 vector3_3 = this.genCursor.pickedTriangle[2];
            Vector3 vector3_4 = -Vector3.Normalize(Vector3.Cross(vector3_1 - vector3_2, vector3_1 - vector3_3));
            Vector3 vector2 = new Vector3((float) this.rr.Next(-800, 800) / 1000f, (float) this.rr.Next(-990, 990) / 1000f, (float) this.rr.Next(-800, 800) / 1000f);
            Vector3 result1 = vector3_4;
            Vector3.Normalize(ref result1, out result1);
            Vector3 result2 = Vector3.Cross(result1, vector2);
            Vector3.Normalize(ref result2, out result2);
            Vector3 vector3_5 = Vector3.Cross(result2, result1);
            Matrix matrix = new Matrix(result1.X, result1.Y, result1.Z, 0.0f, vector3_5.X, vector3_5.Y, vector3_5.Z, 0.0f, result2.X, result2.Y, result2.Z, 0.0f, 0.0f, 0.0f, 0.0f, 1f);
            if (this.myPlayer.insideBarn(lastPos1))
            {
              lastPos1.Y = 1.8f;
              matrix = Matrix.CreateRotationX((float) this.rr.Next(-800, 800) / 100f) * Matrix.CreateRotationZ(1.57f);
            }
            else
            {
              this.GetHeightFast(ref this.farmheights, lastPos1, ref lastPos1.Y);
              lastPos1.Y += 1.2f;
            }
            this.remPlayer[ii].r.bloodPos = matrix * Matrix.CreateTranslation(lastPos1);
            if (this.tunneladd && this.inFarm == 2)
              this.remPlayer[ii].r.bloodPos = Matrix.CreateRotationX((float) this.rr.Next(-800, 800) / 100f) * Matrix.CreateRotationZ(1.57f) * Matrix.CreateTranslation(lastPos1);
            this.hitstreamTemp.Trans = Matrix.CreateScale(this.remPlayer[ii].r.bloodPool) * this.remPlayer[ii].r.bloodPos;
            this.hitstreamTemp.Fade = 1f;
            Vector4 vector4 = this.farm.stainR[this.rr.Next(15, 17)];
            this.hitstreamTemp.Coord = new Vector4(this.bulletMapWidth / vector4.Z, vector4.X / this.bulletMapWidth, this.bulletMapHite / vector4.W, vector4.Y / this.bulletMapHite);
            if (this.farm.stainMax == this.farm.stainCapacity - 1)
            {
              this.farm.stainTrans[this.farm.stainMax - 2] = this.hitstreamTemp;
              this.remPlayer[ii].r.bloodIndex = this.farm.stainMax - 2;
            }
            else
            {
              this.remPlayer[ii].r.bloodIndex = this.farm.stainIndex;
              this.farm.stainTrans[this.farm.stainIndex] = this.hitstreamTemp;
              ++this.farm.stainIndex;
              if (this.farm.stainIndex > this.farm.stainCapacity - 1)
                this.farm.stainIndex = 0;
              ++this.farm.stainMax;
              if (this.farm.stainMax > this.farm.stainCapacity - 1)
                this.farm.stainMax = this.farm.stainCapacity - 1;
            }
            this.remPlayer[ii].r.bloodPool = 30f;
          }
          this.remPlayer[ii].r.bloodExists = true;
        }
        else if (this.remPlayer[ii].r.triggerEvent == 4)
          this.sc.dying.Play(this.sc.ev * 1f, 0.0f, 0.0f);
        this.remPlayer[ii].r.triggerEvent = 0;
      }
      if (!this.remPlayer[ii].r.bloodExists)
        return;
      float num1 = this.remPlayer[ii].r.now.health % 100f;
      if ((double) this.remPlayer[ii].r.now.health == 100.0)
        num1 = this.remPlayer[ii].r.now.liftHealth % 100f;
      float num2 = (float) (30.0 + (1.0 - (double) num1 / 100.0) * 28.0);
      if ((double) this.remPlayer[ii].r.bloodPool <= (double) num2 || this.remPlayer[ii].r.fallState == 12)
        this.remPlayer[ii].r.bloodPool += 0.03f;
      if (this.remPlayer[ii].r.fallState == 12)
        this.remPlayer[ii].r.bloodPool += 0.03f;
      if ((double) this.remPlayer[ii].r.bloodPool > 52.0 && (double) this.remPlayer[ii].r.bloodPool < 52.5 && this.remPlayer[ii].r.bloodCoil <= 0)
        this.remPlayer[ii].r.bloodCoil = 150;
      if ((double) this.remPlayer[ii].r.bloodPool > 44.0 && (double) this.remPlayer[ii].r.bloodPool < 44.5 && this.remPlayer[ii].r.bloodCoil <= 0)
        this.remPlayer[ii].r.bloodCoil = 170;
      this.farm.stainTrans[this.remPlayer[ii].r.bloodIndex].Trans = Matrix.CreateScale(this.remPlayer[ii].r.bloodPool) * this.remPlayer[ii].r.bloodPos;
      if ((double) this.remPlayer[ii].r.bloodPool < 65.0 || this.remPlayer[ii].r.fallState != 12)
        return;
      this.remPlayer[ii].r.bloodCoil = 150;
      this.remPlayer[ii].r.bloodExists = false;
      this.memoTimer = 320;
      BloodnBacon4PT.memo.Length = 0;
      this.memoIcon = 3;
      BloodnBacon4PT.memo.Append("someone died  !!");
    }

    private void remotePlayerUpdate(int ii)
    {
      if ((double) this.sc.myTimer % 15.0 == 0.0)
      {
        if (this.handtype[this.remPlayer[ii].r.now.weapon] == 1 && this.remPlayer[ii].r.now.weapon != this.remPlayer[ii].r.primaryChoice)
        {
          this.buildPrimaryWeaponRemote(this.remPlayer[ii].r.now.weapon, ii);
          this.remPlayer[ii].r.primaryChoice = this.remPlayer[ii].r.now.weapon;
        }
        if (this.handtype[this.remPlayer[ii].r.now.weapon] == 2 && this.remPlayer[ii].r.now.weapon != this.remPlayer[ii].r.secondaryChoice)
        {
          this.buildSecondaryWeaponRemote(this.remPlayer[ii].r.now.weapon, ii);
          this.remPlayer[ii].r.secondaryChoice = this.remPlayer[ii].r.now.weapon;
        }
      }
      this.remPlayer[ii].r.gunChoice = this.remPlayer[ii].r.now.weapon;
      if (this.remPlayer[ii].r.now.weapon < this.gType)
        this.remPlayer[ii].r.lastWeapon = this.remPlayer[ii].r.now.weapon;
      this.animManager2(ii);
      --this.remPlayer[ii].r.guntimer;
      this.remPlayer[ii].r.recoilTimer -= 0.1f;
      this.remPlayer[ii].r.recoilTimer = MathHelper.Clamp(this.remPlayer[ii].r.recoilTimer, 0.0f, 1f);
      this.remPlayer[ii].r.flashTimer -= 0.24f;
      this.remPlayer[ii].r.blastTimer -= 0.8f;
      if (this.remPlayer[ii].r.now.gunfired > 0)
      {
        this.remPlayer[ii].r.guntimer = 7;
        this.remPlayer[ii].r.recoilTimer = 1f;
        this.remPlayer[ii].r.flashTimer = 1f;
        this.remPlayer[ii].r.blastTimer = 6.5f;
        this.remPlayer[ii].r.blastRot = (float) this.rr.Next(-800, 800) / 100f;
        if (this.remPlayer[ii].r.gunChoice == 10)
        {
          this.remPlayer[ii].r.blastTimer = 2.5f;
          this.remPlayer[ii].r.blastRot = (float) this.rr.Next(-10, 10) / 100f;
        }
        this.remPlayer[ii].r.gunsideScale = (float) this.rr.Next((int) this.sc.sf[this.remPlayer[ii].r.lastWeapon].X, (int) this.sc.sf[this.remPlayer[ii].r.lastWeapon].Y) / 100f;
        this.remPlayer[ii].r.gunfrontScale = (float) this.rr.Next((int) this.sc.ff[this.remPlayer[ii].r.lastWeapon].X, (int) this.sc.ff[this.remPlayer[ii].r.lastWeapon].Y) / 100f;
        this.remPlayer[ii].r.flashChoice = this.rr.Next(0, 6);
        this.remPlayer[ii].r.flashSide = 6;
        if (this.remPlayer[ii].r.gunChoice == 8)
        {
          this.remPlayer[ii].r.flashChoice = this.rr.Next(6, 12);
          this.remPlayer[ii].r.flashSide = 12;
        }
        if (this.remPlayer[ii].r.gunChoice == 10)
        {
          this.remPlayer[ii].r.flashChoice = this.rr.Next(12, 18);
          this.remPlayer[ii].r.flashSide = 18;
        }
        this.remPlayer[ii].r.recoilVec = this.handtype[this.remPlayer[ii].r.gunChoice] != 1 ? new Vector2((float) this.rr.Next(-40, 20) / 10f, (float) this.rr.Next(40, 60) / 10f) : new Vector2((float) this.rr.Next(-80, 40) / 10f, (float) this.rr.Next(120, 150) / 10f);
      }
      if (this.remPlayer[ii].r.clip1 == 0 || this.remPlayer[ii].r.clip1 == 2)
      {
        int num1 = (int) ((double) this.remPlayer[ii].r.frame1 * 0.041666001081466675 % 4.166600227355957 * 24.0);
        if ((double) this.remPlayer[ii].r.incr != 0.0)
        {
          int num2 = 1;
          int num3 = 35;
          if (num1 <= 1 || num1 > 60 + num3)
          {
            this.rightFoot2 = false;
            this.leftFoot2 = false;
          }
          if (num1 > num2 && num1 < 10 + num3 && !this.rightFoot2)
          {
            this.sc.steps[this.rr.Next(0, 6)].Play((float) ((double) this.sc.ev * (double) this.remPlayer[ii].r.vol * (double) this.rr.Next(30, 50) / 100.0), (float) this.rr.Next(-20, 0) / 100f, 1f);
            this.rightFoot2 = true;
          }
          else if (num1 > 50 + num2 && num1 < 60 + num3 && !this.leftFoot2)
          {
            this.sc.steps[this.rr.Next(0, 6)].Play((float) ((double) this.sc.ev * (double) this.remPlayer[ii].r.vol * (double) this.rr.Next(30, 50) / 100.0), (float) this.rr.Next(-20, 0) / 100f, -1f);
            this.leftFoot2 = true;
          }
        }
      }
      if (this.remPlayer[ii].r.now.gunfired > 0)
      {
        this.remPlayer[ii].r.gunpos = Vector3.Transform(new Vector3(2.5f, 46.5f, 0.0f), this.remPlayer[ii].r.cambone);
        this.remPlayer[ii].r.gunlook = this.remPlayer[ii].r.now.destiny;
        this.remgunView = Matrix.CreateLookAt(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, Vector3.Up);
        bool insideTunnels = (double) this.remPlayer[ii].r.displayState.npcPosition.Y < -40.0;
        if (this.tunneladd)
          this.UpdatePicking3(this.gunProj, this.remgunView, ref this.oppCursor, insideTunnels);
        else
          this.UpdatePicking(this.gunProj, this.remgunView, ref this.oppCursor, true);
        this.remPlayer[ii].r.flashfromSide = true;
        float num4 = (float) this.rr.Next(70, 99) / 100f;
        if (this.handtype[this.remPlayer[ii].r.gunChoice] == 1)
        {
          bool flag1 = this.remPlayer[ii].r.now.gunfired == 1 || this.remPlayer[ii].r.now.gunfired == 5 || this.remPlayer[ii].r.now.gunfired == 7;
          bool flag2 = this.remPlayer[ii].r.now.gunfired >= 30 || this.remPlayer[ii].r.now.gunfired == 13 || this.remPlayer[ii].r.now.gunfired == 3 || this.remPlayer[ii].r.now.gunfired == 2 || this.remPlayer[ii].r.now.gunfired == 4 || this.remPlayer[ii].r.now.gunfired == 6;
          if (flag1)
            this.remPlayer[ii].r.primBang_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol * num4, (float) this.rr.Next(-20, 5) / 100f, 0.0f);
          if (flag2)
            this.remPlayer[ii].r.primMuffle_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol * num4, (float) this.rr.Next(-20, 10) / 100f, 0.0f);
          this.v1 = Vector3.Normalize(Vector3.Transform(Vector3.Zero, this.sc.flashOffset[2] * this.remPlayer[ii].r.pistolHand) - this.campos);
          this.v2 = Vector3.Normalize(Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), this.sc.flashOffset[2] * this.remPlayer[ii].r.pistolHand) - Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.sc.flashOffset[2] * this.remPlayer[ii].r.pistolHand));
        }
        else if (this.handtype[this.remPlayer[ii].r.gunChoice] == 2)
        {
          bool flag3 = this.remPlayer[ii].r.now.gunfired == 1 || this.remPlayer[ii].r.now.gunfired == 5 || this.remPlayer[ii].r.now.gunfired == 7;
          bool flag4 = this.remPlayer[ii].r.now.gunfired >= 30 || this.remPlayer[ii].r.now.gunfired == 13 || this.remPlayer[ii].r.now.gunfired == 3 || this.remPlayer[ii].r.now.gunfired == 2 || this.remPlayer[ii].r.now.gunfired == 4 || this.remPlayer[ii].r.now.gunfired == 6;
          if (flag3)
            this.remPlayer[ii].r.secBang_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol * num4, (float) this.rr.Next(-30, 10) / 100f, 0.0f);
          if (flag4)
            this.remPlayer[ii].r.secMuffle_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol * num4, (float) this.rr.Next(-50, -30) / 100f, 0.0f);
          this.v1 = Vector3.Normalize(Vector3.Transform(Vector3.Zero, this.sc.flashOffset[4] * this.remPlayer[ii].r.pistolHand) - this.campos);
          this.v2 = Vector3.Normalize(Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), this.sc.flashOffset[4] * this.remPlayer[ii].r.pistolHand) - Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.sc.flashOffset[4] * this.remPlayer[ii].r.pistolHand));
        }
        if ((double) Math.Abs(Vector3.Dot(this.v1, this.v2)) > 0.800000011920929)
          this.remPlayer[ii].r.flashfromSide = false;
        if (this.remPlayer[ii].r.now.gunfired == 5)
        {
          this.cuttyBoss[(int) this.remPlayer[ii].r.uvIndex].buzzSkeleton(8);
          this.cuttyBoss[(int) this.remPlayer[ii].r.uvIndex].seizureTimer = 40;
        }
        if (this.remPlayer[ii].r.now.gunfired == 7)
        {
          this.princess[(int) this.remPlayer[ii].r.uvIndex].buzzSkeleton(8);
          this.princess[(int) this.remPlayer[ii].r.uvIndex].seizureTimer = 40;
        }
        bool flag5 = false;
        if (this.barnTriangle && (this.sc.gameState == 0 || this.insideBarn(this.myPlayer.displayState.npcPosition) && this.sc.gameState == 2) && this.myPlayer.insideBarn(this.remPlayer[ii].r.lastPOS))
          flag5 = this.updateChain_shotbyRemote(ii);
        if (this.remPlayer[ii].r.now.gunfired == 1 && !flag5)
        {
          bool onlySparks = false;
          if (this.inFarm == 1)
          {
            this.distCheck = this.oppCursor.hitBox(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, this.grinderMin, this.grinderMax);
            if (this.distCheck.HasValue)
              onlySparks = true;
          }
          if (!this.hitUs)
          {
            if (this.tunneladd)
            {
              bool flag6 = false;
              for (int index = 0; index < this.combo.Count; ++index)
              {
                if (this.combo[index].doorFlag)
                {
                  this.bulletHit(ref this.combo[index].doorholes, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                  flag6 = true;
                }
              }
              for (int index = 0; index < this.plain.Count; ++index)
              {
                if (this.plain[index].doorFlag)
                {
                  this.bulletHit(ref this.plain[index].doorholes, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                  flag6 = true;
                }
              }
              for (int index = 0; index < this.hidden.Count; ++index)
              {
                if (this.hidden[index].doorFlag)
                {
                  this.bulletHit(ref this.hidden[index].doorholes, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                  flag6 = true;
                }
              }
              if (!flag6)
              {
                if (this.oppCursor.isDoor)
                  this.bulletHit(ref this.door, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                else if (this.oppCursor.isCrypt)
                  this.bulletHit(ref this.cryptdoor, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                else if (this.oppCursor.isCrypt2)
                  this.bulletHit(ref this.cryptdoor2, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
                else
                  this.bulletHit(ref this.farm, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
              }
            }
            else if (this.oppCursor.isDoor)
              this.bulletHit(ref this.door, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
            else
              this.bulletHit(ref this.farm, this.oppCursor, this.remPlayer[ii].r.lastWeapon, this.rr.Next(0, 70000), onlySparks, this.remPlayer[ii].r.remBloodColor);
          }
          if (this.inFarm == 1 && (double) this.remPlayer[ii].r.vol < 0.20000000298023224 && (double) Vector2.DistanceSquared(new Vector2(this.remPlayer[ii].r.gunlook.X, this.remPlayer[ii].r.gunlook.Z), new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z)) < 360000.0)
            this.sc.ricochete[this.rr.Next(0, 3)].Play(this.sc.ev, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
        }
        if (this.remPlayer[ii].r.now.gunfired >= 30)
          this.shotTwinFx(this.remPlayer[ii].r.now.gunfired, this.remPlayer[ii].r.now.destiny);
        if (this.remPlayer[ii].r.now.gunfired == 12 || this.remPlayer[ii].r.now.gunfired == 13)
        {
          int accuracy = (int) this.remPlayer[ii].r.now.accuracy;
          if (accuracy >= 0 && accuracy <= this.enemy1.skull.dupe.Count)
          {
            if (this.sc.host)
            {
              ++this.enemy1.skull.dupe[accuracy].remotehitCount;
              if (this.enemy1.skull.dupe[accuracy].remotehitCount > 3 && !this.enemy1.skull.dupe[accuracy].homing)
              {
                Vector2 dest = new Vector2(this.remPlayer[ii].r.displayState.npcPosition.X, this.remPlayer[ii].r.displayState.npcPosition.Z);
                this.enemy1.findenemyDestination2(ref this.enemy1.skull, accuracy, dest);
                this.enemy1.skull.dupe[accuracy].remotehitCount = 0;
              }
            }
            int gunfired = this.remPlayer[ii].r.now.gunfired;
            Vector3 gunlook = this.remPlayer[ii].r.gunlook;
            Vector3 direction = Vector3.Transform(Vector3.Zero, this.enemy1.skull.dupe[accuracy].transform);
            if (gunfired == 12)
            {
              this.enemy1.skull.dupe[accuracy].health -= this.enemy1.gunDam[this.remPlayer[ii].r.lastWeapon] * 1f;
              if ((double) this.enemy1.skull.dupe[accuracy].health <= 0.0)
                this.enemy1.skull.dupe[accuracy].health = 1f;
              this.bitSpray2(gunlook, direction, 1f);
              this.sc.metalHit[this.rr.Next(0, 4)].Play(this.sc.ev * 0.5f, (float) this.rr.Next(-30, 30) / 100f, (float) this.rr.Next(-30, 30) / 100f);
            }
            if (gunfired == 13)
            {
              this.enemy1.skull.dupe[accuracy].health -= this.enemy1.gunDam[this.remPlayer[ii].r.lastWeapon] * 3f;
              if ((double) this.enemy1.skull.dupe[accuracy].health <= 0.0)
                this.enemy1.skull.dupe[accuracy].health = 1f;
              this.bloodSpraySkull(gunlook, direction, 1f);
              if (this.rr.Next(1, 100) < 50)
                this.enemy1.addEnemyBlood(ref this.enemy1.skull, accuracy, this.rr.Next(0, 9));
            }
          }
        }
        if (this.remPlayer[ii].r.now.gunfired == 2 || this.remPlayer[ii].r.now.gunfired == 3)
        {
          Vector3 gunlook = this.remPlayer[ii].r.gunlook;
          Vector3 vector3 = Vector3.Transform(Vector3.Normalize(this.remPlayer[ii].r.gunpos - this.remPlayer[ii].r.gunlook) * (float) this.rr.Next(30, 150) / 10f, Matrix.CreateFromYawPitchRoll((float) this.rr.Next(-300, 300) / 100f, (float) this.rr.Next(-300, 300) / 100f, (float) this.rr.Next(-300, 300) / 100f)) + this.remPlayer[ii].r.gunlook;
          this.addBlood2Body2(7, ii, 0, 599, 0, 599);
          if (this.remPlayer[ii].r.now.gunfired == 2)
          {
            bool flag7 = true;
            if (this.sc.boar1Variant == 0 || this.sc.boar1Variant == 1)
              this.bloodSprayRem(vector3, gunlook, 0.26f, ii);
            if (this.sc.boar1Variant == 2)
            {
              flag7 = false;
              this.bitSpray(vector3, gunlook, 0.26f, 1f);
            }
            if (this.sc.boar1Variant == 3)
              this.sparkSpray(vector3, gunlook, 0.26f, 1f);
            if (this.sc.boar1Variant == 4)
              this.bloodSprayRem2(vector3, gunlook, 0.26f, ii);
            if (flag7 && this.remPlayer[ii].r.now.accuracy >= (ushort) 0 && (int) this.remPlayer[ii].r.now.accuracy < this.boar.dupe.Count)
              this.addBoarBlood(ref this.boar, (int) this.remPlayer[ii].r.now.accuracy, this.rr.Next(1, 9), this.remPlayer[ii].r.remBloodColor);
          }
          if (this.remPlayer[ii].r.now.gunfired == 3)
          {
            bool flag8 = true;
            if (this.sc.boar2Variant == 0 || this.sc.boar2Variant == 1)
              this.bloodSprayRem(vector3, gunlook, 0.26f, ii);
            if (this.sc.boar2Variant == 2)
            {
              flag8 = false;
              this.bitSpray(vector3, gunlook, 0.26f, 1f);
            }
            if (this.sc.boar2Variant == 3)
              this.sparkSpray(vector3, gunlook, 0.26f, 1f);
            if (this.sc.boar2Variant == 4)
              this.bloodSprayRem2(vector3, gunlook, 0.26f, ii);
            if (flag8 && this.remPlayer[ii].r.now.accuracy >= (ushort) 0 && (int) this.remPlayer[ii].r.now.accuracy < this.boar.dupe.Count)
              this.addBoarBlood(ref this.boar, (int) this.remPlayer[ii].r.now.accuracy, this.rr.Next(1, 9), this.remPlayer[ii].r.remBloodColor);
          }
          if (this.remPlayer[ii].r.now.gunfired == 2)
          {
            this.UpdatePicking(this.proj, Matrix.CreateLookAt(vector3, new Vector3(vector3.X + (float) this.rr.Next(-7000, 7000) / 20f, vector3.Y - 200f, vector3.Z + (float) this.rr.Next(-7000, 7000) / 20f), Vector3.Forward), ref this.oppCursor, false);
            if (this.sc.boar1Variant == 0 || this.sc.boar1Variant == 1)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 9, 15, this.remPlayer[ii].r.remBloodColor);
            if (this.sc.boar1Variant == 2)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 31, 37, this.remPlayer[ii].r.remBloodColor);
            if (this.sc.boar1Variant == 3)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 9, 15, this.remPlayer[ii].r.remBloodColor);
          }
          if (this.remPlayer[ii].r.now.gunfired == 3)
          {
            this.UpdatePicking(this.proj, Matrix.CreateLookAt(vector3, new Vector3(vector3.X + (float) this.rr.Next(-7000, 7000) / 20f, vector3.Y - 200f, vector3.Z + (float) this.rr.Next(-7000, 7000) / 20f), Vector3.Forward), ref this.oppCursor, false);
            if (this.sc.boar2Variant == 0 || this.sc.boar1Variant == 1)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 9, 15, this.remPlayer[ii].r.remBloodColor);
            if (this.sc.boar2Variant == 2)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 31, 37, this.remPlayer[ii].r.remBloodColor);
            if (this.sc.boar2Variant == 3)
              this.bloodDecal(ref this.farm, this.oppCursor, this.rr.Next(0, 70000), false, 9, 15, this.remPlayer[ii].r.remBloodColor);
          }
        }
        if (this.remPlayer[ii].r.now.gunfired >= 4 && this.remPlayer[ii].r.now.gunfired <= 7)
        {
          Vector3 gunlook = this.remPlayer[ii].r.gunlook;
          Vector3 vector3 = Vector3.Transform(Vector3.Normalize(this.remPlayer[ii].r.gunpos - this.remPlayer[ii].r.gunlook) * (float) this.rr.Next(30, 150) / 10f, Matrix.CreateFromYawPitchRoll((float) this.rr.Next(-300, 300) / 100f, (float) this.rr.Next(-300, 300) / 100f, (float) this.rr.Next(-300, 300) / 100f)) + this.remPlayer[ii].r.gunlook;
          if (this.remPlayer[ii].r.now.gunfired != 6 && this.remPlayer[ii].r.now.gunfired != 4)
          {
            this.cuttyFragments(vector3, vector3 - gunlook);
          }
          else
          {
            Vector3 inherit;
            if (this.remPlayer[ii].r.now.gunfired == 6)
            {
              if ((double) this.princess[0].distanceCutty2[ii] < (double) this.princess[0].minDistance[this.princess[0].df])
              {
                inherit = (this.princess[(int) this.remPlayer[ii].r.uvIndex].cuttyVeloc * (float) this.rr.Next(15, 25)) with
                {
                  Y = 0.0f
                };
                this.bossbloodSpray(vector3, gunlook, (float) this.rr.Next(20, 60) / 100f, 1f, inherit, 6, false, ii);
                float num5 = (float) this.rr.Next(-2500, 2500) / 50f;
                float num6 = (float) this.rr.Next(-2500, 2500) / 50f;
                this.princess[0].addCanvasCrap(this.sc.paintRemColorCanvas, vector3.X + num5, vector3.Z + num6);
              }
              else
              {
                inherit = (this.princess[(int) this.remPlayer[ii].r.uvIndex].cuttyVeloc * (float) this.rr.Next(15, 25)) with
                {
                  Y = 0.0f
                };
                this.bossbloodSpray(vector3, gunlook, (float) this.rr.Next(40, 110) / 100f, 0.3f, inherit, 10, false, ii);
              }
            }
            if (this.remPlayer[ii].r.now.gunfired == 4)
            {
              inherit = (this.cuttyBoss[(int) this.remPlayer[ii].r.uvIndex].cuttyVeloc * (float) this.rr.Next(15, 25)) with
              {
                Y = 0.0f
              };
              this.bossbloodSpray(vector3, gunlook, (float) this.rr.Next(20, 70) / 100f, 1f, inherit, 6, false, ii);
            }
          }
        }
        this.hitUs = false;
        if ((double) this.remPlayer[ii].r.player2player < 9000000.0 && this.sc.hostFriendly)
        {
          int index = 7;
          if (this.remPlayer[ii].r.gunChoice == 16)
            index = 12 + this.remPlayer[ii].r.remBloodColor;
          this.distCheck = this.genCursor.hitSphere2(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, Vector3.Transform(new Vector3(0.0f, 49f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[17]), 7f);
          if (this.distCheck.HasValue)
          {
            this.hitUs = true;
            this.addBlood2Body(index, ref this.player1Paint, 48, 303, 373, 595);
            this.addBlood2Body(index, ref this.player1Paint, 48, 303, 373, 595);
            this.v1 = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
            if (index == 7)
            {
              this.humanSpray(this.v1, Vector3.Transform(new Vector3(0.0f, 52f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[20]));
              this.humanSpray(this.v1, Vector3.Transform(new Vector3(0.0f, 52f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[20]));
            }
            this.myPlayer.damHealth(40f, this.sc.cheat_Invincible);
          }
          else
          {
            this.distCheck = this.genCursor.hitSphere2(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, Vector3.Transform(new Vector3(0.0f, 35f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[16]), 10f);
            if (this.distCheck.HasValue)
            {
              this.hitUs = true;
              this.addBlood2Body(index, ref this.player1Paint, 0, 286, 0, 191);
              this.addBlood2Body(index, ref this.player1Paint, 394, 600, 0, 584);
              this.v1 = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
              if (index == 7)
                this.humanSpray(this.v1, Vector3.Transform(new Vector3(0.0f, 35f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[16]));
              this.myPlayer.damHealth(25f, this.sc.cheat_Invincible);
            }
            else
            {
              this.distCheck = this.genCursor.hitSphere2(this.remPlayer[ii].r.gunpos, this.remPlayer[ii].r.gunlook, Vector3.Transform(new Vector3(0.0f, 18f, 0.0f), this.npc1[this.myPlayer.clip1].skinTransforms[1]), 10f);
              if (this.distCheck.HasValue)
              {
                this.hitUs = true;
                this.addBlood2Body(index, ref this.player1Paint, 272, 418, 0, 426);
                this.addBlood2Body(index, ref this.player1Paint, 0, 317, 183, 368);
                this.v1 = this.distCheck.Value * this.genCursor.rayDir + this.genCursor.rayPos;
                if (index == 7)
                  this.humanSpray(this.v1, Vector3.Transform(new Vector3(4f, 13f, 2f), this.npc1[this.myPlayer.clip1].skinTransforms[4]));
                this.myPlayer.damHealth(10f, this.sc.cheat_Invincible);
              }
            }
          }
        }
        this.gunsmokeDriftRemote(Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation)), ii);
        if (this.remPlayer[ii].r.gunChoice == 8)
        {
          Vector3 vector3_1 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation));
          Vector3 vector3_2 = Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), this.sc.flashOffset[8] * this.remPlayer[ii].r.pistolHand);
          for (int index = 0; index < 90; ++index)
          {
            Vector3 vector3_3 = new Vector3((float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f, (float) this.rr.Next(-50, 50) / 200f);
            this.sparks2.AddParticle(vector3_2 + vector3_3 * (float) this.rr.Next(3, 12), (vector3_1 + vector3_3) * (float) this.rr.Next(50, 1650) / 10f);
          }
          this.gunsmokeDriftRemote(Vector3.Transform(new Vector3(0.0f, 0.0f, 2f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation)), ii);
        }
        if (this.remPlayer[ii].r.gunChoice < 6)
        {
          this.f1 = (float) this.rr.Next(-30, -15) / 100f;
          this.f2 = (float) this.rr.Next(50, 70) / 100f;
          this.v1 = Vector3.Transform(new Vector3(this.f1, this.f2, 0.0f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation));
          this.m1 = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
          this.dropBulletShell(ref this.primShell_rem, 0.35f, 0.5f, 0.388f, this.m1 * this.sc.shellExit[this.remPlayer[ii].r.lastWeapon] * this.remPlayer[ii].r.pistolHand, this.v1, false, -0.06f, 18, 150f, 350f);
        }
        else if (this.handtype[this.remPlayer[ii].r.gunChoice] == 2 && this.remPlayer[ii].r.gunChoice != 8 && this.remPlayer[ii].r.gunChoice != 14 && this.remPlayer[ii].r.gunChoice != 18)
        {
          this.f1 = (float) this.rr.Next(-30, -15) / 100f;
          this.f2 = (float) this.rr.Next(50, 70) / 100f;
          this.v1 = Vector3.Transform(new Vector3(this.f1, this.f2, 0.0f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation));
          this.m1 = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
          this.dropBulletShell(ref this.secondShell_rem, 0.45f, 0.7f, 0.28f, this.m1 * this.sc.shellExit[this.remPlayer[ii].r.lastWeapon] * this.remPlayer[ii].r.pistolHand, this.v1, false, -0.06f, 15, 150f, 350f);
        }
      }
      if (!this.remPlayer[ii].r.hasnoArms || this.remPlayer[ii].r.armTimer <= 0)
        return;
      --this.remPlayer[ii].r.armTimer;
      if (this.remPlayer[ii].r.remoteID == 8)
        this.woundSpraySpark2(ii);
      else
        this.woundSpray2(ii);
    }

    private void ReadIncomingPackets()
    {
      if (!SteamAPI.IsSteamRunning())
        return;
      uint pcubMsgSize = 0;
      while (SteamNetworking.IsP2PPacketAvailable(out pcubMsgSize))
      {
        byte[] numArray = new byte[(int)pcubMsgSize];
        CSteamID psteamIDRemote;
        SteamNetworking.ReadP2PPacket(numArray, pcubMsgSize, out uint _, out psteamIDRemote);
        int index1 = this.getplayerIndex(psteamIDRemote);
        if (index1 == -1)
        {
          if (this.sc.host && this.sc.lobby.createdLobby.Count > 0)
            this.addPlayer(psteamIDRemote, this.sc.lobby.createdLobby[0]);
          else if (this.sc.lobby.joinedLobby.Count > 0)
            this.addPlayer(psteamIDRemote, this.sc.lobby.joinedLobby[0]);
          index1 = this.getplayerIndex(psteamIDRemote);
        }
        if (index1 != -1)
        {
          ++this.sendInfoCounter;
          if (this.sendInfoCounter > 10)
            this.sendInfo = true;
          using (MemoryStream input = new MemoryStream(numArray))
          {
            using (BinaryReader binaryReader = new BinaryReader((Stream) input))
            {
              this.remPlayer[index1].r.flag = binaryReader.ReadByte();
              if (this.remPlayer[index1].r.flag == (byte) 10)
              {
                this.remPlayer[index1].r.netquality = (byte) 0;
                this.remPlayer[index1].r.remoteTick = binaryReader.ReadInt32();
                if (this.remPlayer[index1].r.remoteTick < this.remPlayer[index1].r.last_remoteTick)
                {
                  this.remPlayer[index1].r.last_remoteTick = this.remPlayer[index1].r.remoteTick;
                  continue;
                }
                int bitfield1 = (int) binaryReader.ReadByte();
                int num = this.ReadFromBitfield(ref bitfield1, 3);
                this.remPlayer[index1].r.spotlight = num;
                bool flag1 = this.ReadFromBitfield(ref bitfield1, 1) != 0;
                bool flag2 = this.ReadFromBitfield(ref bitfield1, 1) != 0;
                bool flag3 = this.ReadFromBitfield(ref bitfield1, 1) != 0;
                bool flag4 = this.ReadFromBitfield(ref bitfield1, 1) != 0;
                if (this.remPlayer[index1].id == this.HostOwner)
                {
                  this.sc.allWeapons = flag1;
                  this.sc.hostBobbleheads = flag2;
                  this.sc.hostFriendly = flag4;
                  if (this.sc.hostAllowCheats != flag3)
                  {
                    this.sc.hostAllowCheats = flag3;
                    this.handleCheats();
                  }
                  if (this.sc.myplayerCheats && !flag3)
                  {
                    this.sc.myplayerCheats = false;
                    this.sc.hostAllowCheats = false;
                    this.handleCheats();
                  }
                }
                this.remPlayer[index1].r.hatindex = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.now.bonusnpc = binaryReader.ReadByte();
                if ((int) this.remPlayer[index1].r.now.bonusnpc != (int) (byte) this.remPlayer[index1].r.remoteID)
                  this.buildCharSkin(index1);
                this.remPlayer[index1].r.cuttyindexBit = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.cuttyindexBit > (byte) 0)
                  this.remPlayer[index1].r.cuttyhealth = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cuttyDamBit = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.cuttyDamBit > (byte) 0)
                  this.remPlayer[index1].r.cuttyDamage = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.bossindexBit = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.bossindexBit > (byte) 0)
                  this.remPlayer[index1].r.bosshealth = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.bossDamBit = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.bossDamBit > (byte) 0)
                  this.remPlayer[index1].r.bossDamage = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.now.whichLevel = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.now.whichLevel == (byte) 0)
                  this.remPlayer[index1].r.now.byte_0 = binaryReader.ReadByte();
                if (this.remPlayer[index1].r.now.whichLevel == (byte) 1)
                  this.remPlayer[index1].r.now.byte_1 = binaryReader.ReadByte();
                int bitfield2 = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.now.rocketLoaded = this.ReadFromBitfield(ref bitfield2, 1) != 0;
                this.remPlayer[index1].r.now.flashlight = this.ReadFromBitfield(ref bitfield2, 1) != 0;
                this.remPlayer[index1].r.tempOnHulk = this.ReadFromBitfield(ref bitfield2, 1) != 0;
                this.remPlayer[index1].r.tempLever = this.ReadFromBitfield(ref bitfield2, 1) != 0;
                this.remPlayer[index1].r.tempHealthVal = (int) binaryReader.ReadByte();
                int bitfield3 = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.difficulty = (byte) this.ReadFromBitfield(ref bitfield3, 4);
                this.remPlayer[index1].r.tempFire = this.ReadFromBitfield(ref bitfield3, 1) != 0;
                this.remPlayer[index1].r.tempJumping = this.ReadFromBitfield(ref bitfield3, 1) != 0;
                this.remPlayer[index1].r.tempOnMilk = this.ReadFromBitfield(ref bitfield3, 1) != 0;
                this.remPlayer[index1].r.cheats = this.ReadFromBitfield(ref bitfield3, 1) != 0;
                this.remPlayer[index1].r.tempLiftVal = (int) binaryReader.ReadByte();
                --this.remPlayer[index1].r.tempLiftVal;
                this.remPlayer[index1].r.now.animation = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.now.weapon = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.now.gunfired = (int) binaryReader.ReadByte();
                if (this.remPlayer[index1].r.now.gunfired == 4 || this.remPlayer[index1].r.now.gunfired == 5 || this.remPlayer[index1].r.now.gunfired == 6 || this.remPlayer[index1].r.now.gunfired == 7)
                {
                  this.remPlayer[index1].r.uvIndex = binaryReader.ReadByte();
                  this.remPlayer[index1].r.cuttyXcoord = binaryReader.ReadByte();
                  this.remPlayer[index1].r.cuttyYcoord = binaryReader.ReadByte();
                }
                this.remPlayer[index1].r.now.doorOpen = binaryReader.ReadByte();
                this.remPlayer[index1].r.now.destiny.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.now.destiny.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.now.destiny.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.now.accuracy = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.now.grinder = (int) ((double) binaryReader.ReadByte() * 2.3529999256134033);
                this.remPlayer[index1].r.tempState.npcPosition.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.tempState.npcPosition.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.tempState.npcPosition.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.tempState.npcRotation = binaryReader.ReadSingle();
                this.remPlayer[index1].r.tempState.npcTilt = binaryReader.ReadSingle();
                if (this.remPlayer[index1].r.remoteTick > this.remPlayer[index1].r.last_remoteTick)
                {
                  this.remPlayer[index1].r.diff = MathHelper.Clamp((float) (this.remPlayer[index1].r.remoteTick - this.remPlayer[index1].r.last_remoteTick), 6f, 24f);
                  this.remPlayer[index1].r.tempState.decay = 1f / this.remPlayer[index1].r.diff;
                  if (this.remPlayer[index1].r.last_remoteTick == 0)
                  {
                    this.remPlayer[index1].r.tempState.decay = 1f;
                    this.remPlayer[index1].r.displayState.npcRotation = this.remPlayer[index1].r.tempState.npcRotation;
                    this.remPlayer[index1].r.feetRot = this.remPlayer[index1].r.displayState.npcRotation + this.remPlayer[index1].r.rotGoal;
                    this.remPlayer[index1].r.lastFeetRot = this.remPlayer[index1].r.displayState.npcRotation + this.remPlayer[index1].r.rotGoal;
                    this.remPlayer[index1].r.oldRot = this.remPlayer[index1].r.displayState.npcRotation + this.remPlayer[index1].r.rotGoal;
                  }
                  if (this.remPlayer[index1].r.myState.Count < 5)
                  {
                    this.remPlayer[index1].r.myState.Add(this.remPlayer[index1].r.tempState);
                  }
                  else
                  {
                    this.remPlayer[index1].r.myState.RemoveAt(0);
                    this.remPlayer[index1].r.myState.Add(this.remPlayer[index1].r.tempState);
                  }
                  this.remPlayer[index1].r.lastPOS = this.remPlayer[index1].r.tempState.npcPosition;
                  this.remPlayer[index1].r.now.health = (float) this.remPlayer[index1].r.tempHealthVal;
                  if ((double) this.remPlayer[index1].r.now.health != 100.0)
                    this.remPlayer[index1].r.now.liftHealth = this.remPlayer[index1].r.now.health;
                  this.remPlayer[index1].r.isLiftingYou = this.remPlayer[index1].r.tempLiftVal;
                  if (remotePlayer4.pillTaken)
                    this.remPlayer[index1].r.isLiftingYou = -1;
                  this.remPlayer[index1].r.onMilk = this.remPlayer[index1].r.tempOnMilk;
                  this.remPlayer[index1].r.onHulk = this.remPlayer[index1].r.tempOnHulk;
                  this.remPlayer[index1].r.jumping = this.remPlayer[index1].r.tempJumping;
                  this.remPlayer[index1].r.last_remoteTick = this.remPlayer[index1].r.remoteTick;
                  this.remPlayer[index1].r.cuttyonFire = this.remPlayer[index1].r.tempFire;
                  this.remPlayer[index1].r.now.leverOn = this.remPlayer[index1].r.tempLever;
                }
                this.remPlayer[index1].r.handleHealth();
              }
              if (this.remPlayer[index1].r.flag == (byte) 90)
              {
                this.remPlayer[index1].r.farmerTalk = true;
                this.remPlayer[index1].r.farmerIndex = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 50)
              {
                this.remPlayer[index1].r.boarDropTimer = binaryReader.ReadInt32();
                this.remPlayer[index1].r.boarSeed = binaryReader.ReadInt32();
                this.remPlayer[index1].r.boarHandicap = binaryReader.ReadInt32();
                this.totalPlayers = (int) binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 96)
              {
                int num = (int) binaryReader.ReadByte();
                string str = "";
                for (int index2 = 0; index2 < num; ++index2)
                {
                  string stringfromByte = this.sc.chat.getStringfromByte(binaryReader.ReadByte());
                  str += stringfromByte;
                }
                this.remPlayer[index1].r.remgamertag = str;
                this.myPlayer.infoRequest = true;
                this.myPlayer.steamNameID.Add(psteamIDRemote);
              }
              if (this.remPlayer[index1].r.flag == (byte) 97)
              {
                int num1 = (int) binaryReader.ReadByte();
                string str = "";
                for (int index3 = 0; index3 < num1; ++index3)
                {
                  string stringfromByte = this.sc.chat.getStringfromByte(binaryReader.ReadByte());
                  str += stringfromByte;
                }
                this.remPlayer[index1].r.remgamertag = str;
                int num2 = (int) binaryReader.ReadByte();
                int num3 = (int) binaryReader.ReadByte();
                bool flag = binaryReader.ReadBoolean();
                if (!this.sc.host && this.remPlayer[index1].id == this.HostOwner)
                {
                  this.globalSeed = num3;
                  if (!this.boarTriggerSent && flag)
                  {
                    this.ExitNow();
                    break;
                  }
                  if (this.sc.currentDay != num2)
                  {
                    this.sc.currentDay = num2;
                    this.sc.tempcurrentDay = num2;
                    this.leavingGame = true;
                    this.loadNextDay(false, false);
                    break;
                  }
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 80)
              {
                this.remPlayer[index1].r.grenToss = true;
                this.remPlayer[index1].r.grenPos.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenPos.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenPos.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenVeloc.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenVeloc.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenVeloc.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.grenBounce = binaryReader.ReadByte();
                this.remPlayer[index1].r.grenAge = binaryReader.ReadByte();
                this.remPlayer[index1].r.grenSeed = binaryReader.ReadUInt16();
              }
              if (this.remPlayer[index1].r.flag == (byte) 81)
              {
                this.remPlayer[index1].r.mirvToss = true;
                this.remPlayer[index1].r.mirvPos.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.mirvPos.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.mirvPos.Z = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 59)
              {
                this.remPlayer[index1].r.creature.type = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.action = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.bodypart = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.frame = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.time = binaryReader.ReadInt32();
                this.remPlayer[index1].r.creature.died = binaryReader.ReadBoolean();
                this.remPlayer[index1].r.creature.veloc.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.creature.veloc.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.creature.veloc.Z = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 60)
              {
                this.remPlayer[index1].r.creature.type = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.action = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.bodypart = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.frame = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.time = binaryReader.ReadInt32();
                this.remPlayer[index1].r.creature.died = binaryReader.ReadBoolean();
              }
              if (this.remPlayer[index1].r.flag == (byte) 69)
              {
                this.remPlayer[index1].r.creature.type = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.action = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.action = (byte) 1;
                this.remPlayer[index1].r.creature.bodypart = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.frame = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creature.time = binaryReader.ReadInt32();
                this.remPlayer[index1].r.creature.died = binaryReader.ReadBoolean();
                this.remPlayer[index1].r.creature.speed = binaryReader.ReadByte();
                this.remPlayer[index1].r.creature.rot = binaryReader.ReadSingle();
                this.remPlayer[index1].r.creature.veloc.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.creature.veloc.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.creature.veloc.Z = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 61)
              {
                this.remPlayer[index1].r.creaturemulti.action = (byte) 33;
                this.remPlayer[index1].r.creaturemulti.type = (byte) 1;
                this.remPlayer[index1].r.creaturemulti.frame = (ushort) 5;
                this.remPlayer[index1].r.creaturemulti.time = binaryReader.ReadInt32();
                this.remPlayer[index1].r.creaturemulti.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creaturemulti.id2 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creaturemulti.id3 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creaturemulti.id4 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creaturemulti.id5 = binaryReader.ReadUInt16();
                int bitfield = (int) binaryReader.ReadByte();
                this.remPlayer[index1].r.creaturemulti.died5 = this.ReadFromBitfield(ref bitfield, 1) != 0;
                this.remPlayer[index1].r.creaturemulti.died4 = this.ReadFromBitfield(ref bitfield, 1) != 0;
                this.remPlayer[index1].r.creaturemulti.died3 = this.ReadFromBitfield(ref bitfield, 1) != 0;
                this.remPlayer[index1].r.creaturemulti.died2 = this.ReadFromBitfield(ref bitfield, 1) != 0;
                this.remPlayer[index1].r.creaturemulti.died = this.ReadFromBitfield(ref bitfield, 1) != 0;
              }
              if (this.remPlayer[index1].r.flag == (byte) 62)
              {
                this.remPlayer[index1].r.creatureShock.action = (byte) 34;
                this.remPlayer[index1].r.creatureShock.type = (byte) 1;
                this.remPlayer[index1].r.creatureShock.frame = (ushort) 5;
                this.remPlayer[index1].r.creatureShock.time = binaryReader.ReadInt32();
                this.remPlayer[index1].r.creatureShock.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id2 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id3 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id4 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id5 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id6 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id7 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.creatureShock.id8 = binaryReader.ReadUInt16();
              }
              if (this.remPlayer[index1].r.flag == (byte) 63)
              {
                this.remPlayer[index1].r.shatter.action = (byte) 55;
                this.remPlayer[index1].r.shatter.type = (byte) 1;
                this.remPlayer[index1].r.shatter.frame = (ushort) 5;
                this.remPlayer[index1].r.shatter.id = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.shatter.id2 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.shatter.id3 = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.shatter.id4 = binaryReader.ReadUInt16();
              }
              if (this.remPlayer[index1].r.flag == (byte) 70)
              {
                this.remPlayer[index1].r.partTYPE = binaryReader.ReadByte();
                this.remPlayer[index1].r.partTIME = binaryReader.ReadInt32();
                this.remPlayer[index1].r.partID = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.partHIT = binaryReader.ReadByte();
                this.remPlayer[index1].r.partPOS.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partPOS.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partPOS.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partVEL.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partVEL.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partVEL.Z = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partQUAT.W = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partQUAT.X = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partQUAT.Y = binaryReader.ReadSingle();
                this.remPlayer[index1].r.partQUAT.Z = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 140)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_homing = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_animtype = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_talkindex = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 141)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
              }
              if (this.remPlayer[index1].r.flag == (byte) 142)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 143)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_talkindex = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 144)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 145)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 146)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_talkindex = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 130)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_homing = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_targetRate = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_curveIndex = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_loop = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_animtype = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_talkindex = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 131)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_destx = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_destz = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 132)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_destx = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_destz = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 133)
              {
                this.remPlayer[index1].r.cutty_SendPackage = (int) this.remPlayer[index1].r.flag;
                this.remPlayer[index1].r.cutty_index = binaryReader.ReadByte();
                this.remPlayer[index1].r.cutty_dur = binaryReader.ReadUInt16();
                this.remPlayer[index1].r.cutty_destx = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_destz = binaryReader.ReadSingle();
                this.remPlayer[index1].r.cutty_rot = binaryReader.ReadSingle();
              }
              if (this.remPlayer[index1].r.flag == (byte) 31)
              {
                this.remPlayer[index1].r.now.load = binaryReader.ReadByte();
                this.remPlayer[index1].r.now.loadDay = binaryReader.ReadByte();
              }
              if (this.remPlayer[index1].r.flag == (byte) 32)
              {
                this.remPlayer[index1].r.remBloodColor = (int) binaryReader.ReadByte();
                if (this.remPlayer[index1].r.remBloodColor == 0)
                {
                  this.sc.paintRemColor = 5;
                  this.sc.paintRemColorCanvas = 8;
                  this.remPlayer[index1].r.bloodrem.setPaintball(this.sprayTexture[0], new Vector4(0.4f, 0.4f, 0.4f, 1f), new Vector4(0.8f, 0.8f, 0.8f, 1f));
                }
                else
                {
                  this.sc.paintRemColor = 12 + this.remPlayer[index1].r.remBloodColor;
                  this.sc.paintRemColorCanvas = 12 + this.remPlayer[index1].r.remBloodColor;
                  this.remPlayer[index1].r.bloodrem.setPaintball(this.sprayTexture[this.remPlayer[index1].r.remBloodColor], new Vector4(1f, 1f, 1f, 1f), new Vector4(1f, 1f, 1f, 1f));
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 33)
              {
                if (!this.sc.cheat_nokick && !this.sc.developer)
                  this.kickme = binaryReader.ReadBoolean();
                else
                  this.sc.buttonDeny.Play(1f, 0.0f, 0.0f);
              }
              if (this.remPlayer[index1].r.flag == (byte) 35)
              {
                this.sc.achieve1.Play(this.sc.ev, 0.5f, 0.0f);
                int num4 = (int) binaryReader.ReadByte();
                string message = "";
                for (int index4 = 0; index4 < num4; ++index4)
                {
                  string stringfromByte = this.sc.chat.getStringfromByte(binaryReader.ReadByte());
                  message += stringfromByte;
                }
                BloodnBacon4PT.memo.Length = 0;
                BloodnBacon4PT.memo.Append(message);
                this.memoIcon = 7;
                this.memoTimer = 260;
                Color nameColor = this.sc.hostblue;
                if (this.remPlayer[index1].id != this.HostOwner)
                  nameColor = this.sc.colors[index1];
                this.sc.addChatMsg(this.remPlayer[index1].r.remgamertag + " : ", nameColor, message, Color.White, 0, this.remPlayer[index1].id.m_SteamID);
                if (this.sc.chatIndex >= this.sc.chatHistory.Count - 1)
                  this.sc.chatIndex = this.sc.chatHistory.Count;
                this.memocolor = nameColor;
                BloodnBacon4PT.memo2.Length = 0;
                BloodnBacon4PT.memo2.Append(this.remPlayer[index1].r.remgamertag + ": ");
                if (message == ":friendly on")
                {
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostFriendly = true;
                }
                if (message == ":friendly off")
                {
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostFriendly = false;
                }
                if (message == ":pistols on")
                {
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.allWeapons = false;
                }
                if (message == ":pistols off")
                {
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.allWeapons = true;
                }
                if (message == ":supply")
                {
                  this.sc.grenades += 5;
                  this.sc.milks += 5;
                  this.sc.hulks += 5;
                  this.sc.pills += 2;
                  this.memoIcon = 5;
                  BloodnBacon4PT.memo.Length = 0;
                  BloodnBacon4PT.memo.Append("supplies added by developer");
                  this.memoTimer = 170;
                  this.sc.achieve1.Play(this.sc.ev, 0.2f, 0.0f);
                  this.sc.savePickups();
                }
                if (message == ":cheats allowed")
                {
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostAllowCheats = true;
                  this.handleCheats();
                }
                if (message == ":cheats disabled")
                {
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostAllowCheats = false;
                  this.handleCheats();
                }
                if (message == ":bobble on")
                {
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostBobbleheads = true;
                }
                if (message == ":bobble off")
                {
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.hostBobbleheads = false;
                }
                if (message == ":push" && this.myPlayer.insideBarn(this.myPlayer.displayState.npcPosition) && !this.barnDoorLocked && this.barnDoorOpen)
                {
                  Vector2 vector2 = new Vector2(3737f, 4600f) - new Vector2(this.myPlayer.displayState.npcPosition.X, this.myPlayer.displayState.npcPosition.Z);
                  double num5 = (double) vector2.LengthSquared();
                  this.hitVel = Vector2.Normalize(vector2) * 10f;
                  this.hitVel = Vector2.Transform(new Vector2(-this.hitVel.X, this.hitVel.Y), Matrix.CreateRotationZ(-this.headRot));
                  this.sc.hurt.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.forcedout = true;
                }
                if (message == ":reskin lando")
                {
                  this.sc.gameNPC = 0;
                  this.buildLocalSkin();
                }
                if (message == ":reskin johnny")
                {
                  this.sc.gameNPC = 1;
                  this.buildLocalSkin();
                }
                if (message == ":reskin farmer")
                {
                  this.sc.gameNPC = 2;
                  this.buildLocalSkin();
                }
                if (message == ":reskin skelly")
                {
                  this.sc.gameNPC = 3;
                  this.buildLocalSkin();
                }
                if (message == ":reskin daisy")
                {
                  this.sc.gameNPC = 4;
                  this.buildLocalSkin();
                }
                if (message == ":reskin viking")
                {
                  this.sc.gameNPC = 5;
                  this.buildLocalSkin();
                }
                if (message == ":reskin man1")
                {
                  this.sc.gameNPC = 7;
                  this.buildLocalSkin();
                  this.sc.man1 = true;
                  this.sc.SaveEquipables();
                }
                if (message == ":reskin man2")
                {
                  this.sc.gameNPC = 8;
                  this.buildLocalSkin();
                  this.sc.man2 = true;
                  this.sc.SaveEquipables();
                }
                if (message == ":reskin man3")
                {
                  this.sc.gameNPC = 9;
                  this.buildLocalSkin();
                  this.sc.man3 = true;
                  this.sc.SaveEquipables();
                }
                if (message == ":reskin man4")
                {
                  this.sc.gameNPC = 10;
                  this.buildLocalSkin();
                }
                if (message == ":hat 0")
                {
                  this.sc.hatindex = 0;
                  this.sc.hats[this.sc.hatindex] = 0;
                }
                if (message == ":hat 1")
                {
                  this.sc.hatindex = 1;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 2")
                {
                  this.sc.hatindex = 2;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 3")
                {
                  this.sc.hatindex = 3;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 4")
                {
                  this.sc.hatindex = 4;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 5")
                {
                  this.sc.hatindex = 5;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 6")
                {
                  this.sc.hatindex = 6;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 7")
                {
                  this.sc.hatindex = 7;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 8")
                {
                  this.sc.hatindex = 8;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 9")
                {
                  this.sc.hatindex = 9;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 10")
                {
                  this.sc.hatindex = 10;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 11")
                {
                  this.sc.hatindex = 11;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 12")
                {
                  this.sc.hatindex = 12;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 13")
                {
                  this.sc.hatindex = 13;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 14")
                {
                  this.sc.hatindex = 14;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":hat 15")
                {
                  this.sc.hatindex = 15;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                }
                if (message == ":gift")
                {
                  this.sc.hatindex = 12;
                  if (this.sc.hats[this.sc.hatindex] != 1)
                  {
                    this.sc.hats[this.sc.hatindex] = 1;
                    this.sc.SaveEquipables();
                    this.sc.xmas2.Play(0.9f, 0.0f, 0.0f);
                  }
                }
                if (message == ":kill")
                {
                  this.myPlayer.isDown = true;
                  this.myPlayer.now.health = 0.0f;
                }
                if (message == ":kick")
                {
                  if (!this.sc.cheat_nokick && !this.sc.developer)
                    this.kickme = true;
                  else
                    this.sc.buttonDeny.Play(1f, 0.0f, 0.0f);
                }
                if (message == ":revive")
                {
                  this.alternateCam = 0;
                  this.camIndex = 1;
                  this.myPlayer.closeCam = true;
                  this.editCam = false;
                  this.myPlayer.bloodExists = false;
                  this.myPlayer.autoCamOn = false;
                  this.myPlayer.autoCamTimer = 0.0f;
                  this.myPlayer.isDown = false;
                  this.myPlayer.now.health = 198f;
                  this.myPlayer.noArms = false;
                  if (this.myPlayer.gunChoice > this.pType)
                  {
                    this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
                    this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
                  }
                  this.myPlayer.now.weapon = this.myPlayer.gunChoice;
                  this.myPlayer.fallState = 0;
                  this.localModel = this.sc.player1Model;
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 100 && this.cryptLock && this.sc.gameState == 2)
              {
                this.vaultopen.Play(this.sc.ev, 0.0f, 0.0f);
                this.cryptLock = false;
                this.lockCrypt(false);
                this.showTunnelArrow = false;
              }
              if (this.remPlayer[index1].r.flag == (byte) 101 && !this.cryptLock && this.sc.gameState == 2)
              {
                this.vaultopen.Play(this.sc.ev, 0.0f, 0.0f);
                this.cryptLock = true;
                this.lockCrypt(true);
              }
              if (this.remPlayer[index1].r.flag == (byte) 102 && this.cryptLock2 && this.sc.gameState == 2)
              {
                this.vaultopen.Play(this.sc.ev, -0.2f, 0.0f);
                this.cryptLock2 = false;
                this.lockCrypt2(false);
              }
              if (this.remPlayer[index1].r.flag == (byte) 103 && !this.cryptLock2 && this.sc.gameState == 2)
              {
                this.vaultopen.Play(this.sc.ev, -0.2f, 0.0f);
                this.cryptLock2 = true;
                this.lockCrypt2(true);
              }
              if (this.remPlayer[index1].r.flag == (byte) 105)
              {
                int num = (int) binaryReader.ReadByte();
                if (num >= 0)
                {
                  if (num < 100)
                  {
                    try
                    {
                      int index5 = num;
                      if (this.plain[index5].doorlock)
                      {
                        this.lockDoor(false, this.plain[index5]);
                        this.creak.Play(this.sc.ev, -0.2f, 0.0f);
                        this.plain[index5].doorlock = false;
                      }
                    }
                    catch
                    {
                    }
                  }
                }
                if (num >= 100)
                {
                  if (num < 200)
                  {
                    try
                    {
                      int index6 = num - 100;
                      if (this.hidden[index6].doorlock)
                      {
                        this.vaultrise.Play(this.sc.ev, 0.0f, 0.0f);
                        this.hidden[index6].doorlock = false;
                      }
                    }
                    catch
                    {
                    }
                  }
                }
                if (num >= 200)
                {
                  if (num < 250)
                  {
                    try
                    {
                      int index7 = num - 200;
                      if (this.combo[index7].doorlock)
                      {
                        this.creak.Play(this.sc.ev, 0.0f, 0.0f);
                        this.combo[index7].doorlock = false;
                        this.lockDoor(false, this.combo[index7]);
                      }
                    }
                    catch
                    {
                    }
                  }
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 106)
              {
                int index8 = (int) binaryReader.ReadByte();
                try
                {
                  if (this.skullemit[index8].repeat > 0)
                  {
                    if (this.skullemit[index8].amt != this.skullemit[index8].amtorig)
                    {
                      if (this.skullemit[index8].amt > 0)
                        goto label_243;
                    }
                    if (!this.skullemit[index8].found)
                    {
                      this.skullemit[index8].found = true;
                      --this.skullemit[index8].repeat;
                      this.skullemit[index8].amt = this.skullemit[index8].amtorig;
                    }
                  }
                }
                catch
                {
                }
              }
label_243:
              if (this.remPlayer[index1].r.flag == (byte) 107)
              {
                int index9 = (int) binaryReader.ReadByte();
                try
                {
                  this.skulldrop[index9].found = true;
                }
                catch
                {
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 110)
              {
                int i = (int) binaryReader.ReadByte();
                int ity = (int) binaryReader.ReadByte();
                Vector2 destination;
                destination.X = binaryReader.ReadSingle();
                destination.Y = binaryReader.ReadSingle();
                Vector3 enemypos;
                enemypos.X = binaryReader.ReadSingle();
                enemypos.Y = binaryReader.ReadSingle();
                enemypos.Z = binaryReader.ReadSingle();
                int myseed = (int) binaryReader.ReadByte();
                if ((int) binaryReader.ReadUInt16() > this.enemy1.lastTime)
                {
                  if (ity == 33)
                    this.enemy1.skullChasePath(3, ref this.enemy1.skull, i, enemypos, destination, myseed);
                  else
                    this.enemy1.skeletonPath(ity, ref this.enemy1.skull, i, enemypos, destination, myseed);
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 113)
                this.enemy1.killSkull(ref this.enemy1.skull, (int) binaryReader.ReadByte());
              if (this.remPlayer[index1].r.flag == (byte) 114)
              {
                int index10 = (int) binaryReader.ReadByte();
                int num6 = (int) binaryReader.ReadByte();
                int num7 = (int) binaryReader.ReadByte();
                if (num6 == 1)
                {
                  this.combo[index10].tumbler1state = num7;
                  this.combo[index10].tumbler1trans.Y = (float) ((double) num7 * 7.5500001907348633 - 67.949996948242188);
                }
                if (num6 == 2)
                {
                  this.combo[index10].tumbler2state = num7;
                  this.combo[index10].tumbler2trans.Y = (float) ((double) num7 * 7.5500001907348633 - 67.949996948242188);
                }
                if (num6 == 3)
                {
                  this.combo[index10].tumbler3state = num7;
                  this.combo[index10].tumbler3trans.Y = (float) ((double) num7 * 7.5500001907348633 - 67.949996948242188);
                }
              }
              if (this.remPlayer[index1].r.flag == (byte) 115)
              {
                ushort num8 = binaryReader.ReadUInt16();
                ushort num9 = binaryReader.ReadUInt16();
                ushort num10 = binaryReader.ReadUInt16();
                this.hostcode1 = (int) num8;
                this.hostcode2 = (int) num9;
                this.hostcode3 = (int) num10;
                if (this.sc.cog1[this.mazeid] == 1)
                  this.setCode(1);
                if (this.sc.cog2[this.mazeid] == 1)
                  this.setCode(2);
                if (this.sc.cog3[this.mazeid] == 1)
                  this.setCode(3);
                this.sc.saveTunnelCodes();
              }
              if (this.remPlayer[index1].r.flag == (byte) 116)
                this.PlayTwinDialogue((int) binaryReader.ReadByte(), true, false, (int) binaryReader.ReadByte(), (int) binaryReader.ReadByte());
            }
          }
          this.calculateReadData(index1);
        }
      }
    }

    private void SendOutgoingPackets()
    {
      if (this.remPlayer.Count <= 1 && (!this.playalone || !this.sc.developer))
      {
        this.myPlayer.now.animation = 0;
        this.myPlayer.now.gunfired = 0;
        if (this.sc.chat.message2send)
          this.commands(false);
        this.sc.chat.message2send = false;
        this.sc.chat.message = "";
      }
      else
      {
        packetSender packetWriter = new packetSender();
        if (this.sc.host && this.boarDropTrigger && !this.sendPacketThisFrame)
        {
          int val1 = this.timeFrame + 350;
          int val2 = this.rr.Next(1, 5000);
          int val3 = (int) MathHelper.Clamp((float) this.sc.df, 0.0f, 2f);
          packetWriter.clean();
          packetWriter.Write((byte) 50);
          packetWriter.Write(val1);
          packetWriter.Write(val2);
          packetWriter.Write(val3);
          this.totalPlayers = this.remPlayer.Count;
          packetWriter.Write((byte) this.totalPlayers);
          byte[] array = packetWriter.packet.ToArray();
          this.SendP2PPacket(ref array, EP2PSend.k_EP2PSendReliable);
          boarDupe.handicapTurn = this.sc.handicapTurn4[val3];
          boarDupe.handicapSpeed = this.sc.handicapSpeed4[val3];
          this.boarDropTimer.Add(val1);
          this.boarSeed.Add(val2);
          this.boarDropTrigger = false;
          this.boarTriggerSent = true;
        }
        if (this.sendInfo && !this.myPlayer.sentgameINFO)
        {
          this.myPlayer.sentgameINFO = true;
          packetWriter.clean();
          packetWriter.Write((byte) 96);
          byte length = (byte) this.sc.lobby.nickname.Length;
          packetWriter.Write(length);
          packetWriter.WriteString(this.sc.lobby.nickname);
          byte[] packetB = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB, EP2PSend.k_EP2PSendReliable);
        }
        if (this.myPlayer.infoRequest)
        {
          this.myPlayer.infoRequest = false;
          packetWriter.clean();
          packetWriter.Write((byte) 97);
          byte length = (byte) this.sc.lobby.nickname.Length;
          packetWriter.Write(length);
          packetWriter.WriteString(this.sc.lobby.nickname);
          packetWriter.Write((byte) this.sc.currentDay);
          packetWriter.Write((byte) this.globalSeed);
          packetWriter.Write(this.boarTriggerSent);
          byte[] pubData = packetWriter.mypackets();
          for (int index = 0; index < this.myPlayer.steamNameID.Count; ++index)
          {
            if (this.mysteamID != this.myPlayer.steamNameID[index])
              SteamNetworking.SendP2PPacket(this.myPlayer.steamNameID[index], pubData, (uint) pubData.Length, EP2PSend.k_EP2PSendReliable);
          }
          this.myPlayer.steamNameID.Clear();
          if (this.myPlayer.gunChoice == 16)
            this.setPaintBallGun(true);
        }
        byte[] packetB1;
        if (this.sendPacketThisFrame)
        {
          if (this.sc.host)
          {
            this.myPlayer.now.grinder = (int) ((double) this.grinderTimer / 2.3529999256134033);
            if (this.barnDoorOpen)
              this.myPlayer.now.doorOpen = (byte) 2;
            if (!this.barnDoorOpen)
              this.myPlayer.now.doorOpen = (byte) 1;
          }
          this.myPlayer.difficulty = (byte) this.sc.df;
          this.myPlayer.cuttyindexBit = (byte) 0;
          this.myPlayer.cuttyDamBit = (byte) 0;
          this.myPlayer.cuttyonFire = false;
          if (Cutty4.cuttyCount > 0)
          {
            ++Cutty4.bit;
            if ((int) Cutty4.bit > Cutty4.cuttyCount)
              Cutty4.bit = (byte) 1;
            int index = (int) Cutty4.bit - 1;
            this.myPlayer.cuttyindexBit = Cutty4.bit;
            this.myPlayer.cuttyhealth = this.cuttyBoss[index].health;
            this.myPlayer.cuttyonFire = this.cuttyBoss[index].onFire;
            if (!this.cuttyBoss[index].cuttyisDead)
            {
              ++this.cuttyBoss[index].damagebit;
              if (this.cuttyBoss[index].damagebit > (byte) 3)
                this.cuttyBoss[index].damagebit = (byte) 1;
              this.myPlayer.cuttyDamBit = this.cuttyBoss[index].damagebit;
              if (this.cuttyBoss[index].damagebit == (byte) 1)
                this.myPlayer.cuttyDamage = this.cuttyBoss[index].spineDamage;
              if (this.cuttyBoss[index].damagebit == (byte) 2)
                this.myPlayer.cuttyDamage = this.cuttyBoss[index].assDamage;
              if (this.cuttyBoss[index].damagebit == (byte) 3)
                this.myPlayer.cuttyDamage = this.cuttyBoss[index].faceDamage;
            }
          }
          this.myPlayer.bossindexBit = (byte) 0;
          this.myPlayer.bossDamBit = (byte) 0;
          if (Princess4.cuttyCount > 0)
          {
            Princess4.bit = (byte) 1;
            this.myPlayer.bossindexBit = (byte) 1;
            this.myPlayer.bosshealth = this.princess[0].health;
            if (!this.princess[0].cuttyisDead)
            {
              ++this.princess[0].damagebit;
              if (this.princess[0].damagebit > (byte) 4)
                this.princess[0].damagebit = (byte) 1;
              this.myPlayer.bossDamBit = this.princess[0].damagebit;
              if (this.princess[0].damagebit == (byte) 1)
                this.myPlayer.bossDamage = this.princess[0].spineDamage;
              if (this.princess[0].damagebit == (byte) 2)
                this.myPlayer.bossDamage = this.princess[0].assDamage;
              if (this.princess[0].damagebit == (byte) 3)
                this.myPlayer.bossDamage = this.princess[0].faceDamage;
              if (this.princess[0].damagebit == (byte) 4)
                this.myPlayer.bossDamage = this.princess[0].heartHit;
            }
          }
          packetWriter.clean();
          packetWriter.Write((byte) 10);
          packetWriter.Write(this.timeFrame);
          int bitfield1 = 0;
          this.AddToBitfield(ref bitfield1, 1, this.sc.hostFriendly ? 1 : 0);
          this.AddToBitfield(ref bitfield1, 1, this.sc.hostAllowCheats ? 1 : 0);
          this.AddToBitfield(ref bitfield1, 1, this.sc.hostBobbleheads ? 1 : 0);
          this.AddToBitfield(ref bitfield1, 1, this.sc.allWeapons ? 1 : 0);
          this.AddToBitfield(ref bitfield1, 3, this.flashlightIndex);
          packetWriter.Write((byte) bitfield1);
          packetWriter.Write((byte) this.sc.hatindex);
          packetWriter.Write((byte) this.sc.gameNPC);
          packetWriter.Write(this.myPlayer.cuttyindexBit);
          if (this.myPlayer.cuttyindexBit > (byte) 0)
            packetWriter.Write(this.myPlayer.cuttyhealth);
          packetWriter.Write(this.myPlayer.cuttyDamBit);
          if (this.myPlayer.cuttyDamBit > (byte) 0)
            packetWriter.Write(this.myPlayer.cuttyDamage);
          packetWriter.Write(this.myPlayer.bossindexBit);
          if (this.myPlayer.bossindexBit > (byte) 0)
            packetWriter.Write(this.myPlayer.bosshealth);
          packetWriter.Write(this.myPlayer.bossDamBit);
          if (this.myPlayer.bossDamBit > (byte) 0)
            packetWriter.Write(this.myPlayer.bossDamage);
          ++this.myPlayer.now.whichLevel;
          if (this.myPlayer.now.whichLevel > (byte) 1)
            this.myPlayer.now.whichLevel = (byte) 0;
          packetWriter.Write(this.myPlayer.now.whichLevel);
          if (this.myPlayer.now.whichLevel == (byte) 0)
            packetWriter.Write(this.myPlayer.now.byte_0);
          if (this.myPlayer.now.whichLevel == (byte) 1)
            packetWriter.Write(this.myPlayer.now.byte_1);
          int bitfield2 = 0;
          this.AddToBitfield(ref bitfield2, 1, this.myPlayer.now.leverOn ? 1 : 0);
          this.AddToBitfield(ref bitfield2, 1, this.myPlayer.onHulk ? 1 : 0);
          this.AddToBitfield(ref bitfield2, 1, this.myPlayer.now.flashlight ? 1 : 0);
          this.AddToBitfield(ref bitfield2, 1, this.myPlayer.now.rocketLoaded ? 1 : 0);
          packetWriter.Write((byte) bitfield2);
          packetWriter.Write((byte) (int) this.myPlayer.now.health);
          int bitfield3 = 0;
          this.AddToBitfield(ref bitfield3, 1, this.sc.myplayerCheats ? 1 : 0);
          this.AddToBitfield(ref bitfield3, 1, this.myPlayer.onMilk ? 1 : 0);
          this.AddToBitfield(ref bitfield3, 1, this.myPlayer.jumping ? 1 : 0);
          this.AddToBitfield(ref bitfield3, 1, this.myPlayer.cuttyonFire ? 1 : 0);
          this.AddToBitfield(ref bitfield3, 4, (int) this.myPlayer.difficulty);
          packetWriter.Write((byte) bitfield3);
          packetWriter.Write((byte) this.myPlayer.isLiftingIndex);
          packetWriter.Write((byte) this.myPlayer.now.animation);
          packetWriter.Write((byte) this.myPlayer.now.weapon);
          packetWriter.Write((byte) this.myPlayer.now.gunfired);
          if (this.myPlayer.now.gunfired == 4 || this.myPlayer.now.gunfired == 5 || this.myPlayer.now.gunfired == 6 || this.myPlayer.now.gunfired == 7)
          {
            packetWriter.Write(this.myPlayer.uvIndex);
            packetWriter.Write(this.myPlayer.cuttyXcoord);
            packetWriter.Write(this.myPlayer.cuttyYcoord);
          }
          if (!this.sc.host)
            packetWriter.Write((byte) ((uint) this.myPlayer.now.doorOpen + 10U));
          else
            packetWriter.Write(this.myPlayer.now.doorOpen);
          if (!this.sc.host)
            this.myPlayer.now.doorOpen = (byte) 0;
          packetWriter.Write(this.myPlayer.now.destiny.X);
          packetWriter.Write(this.myPlayer.now.destiny.Y);
          packetWriter.Write(this.myPlayer.now.destiny.Z);
          packetWriter.Write(this.myPlayer.now.accuracy);
          packetWriter.Write((byte) this.myPlayer.now.grinder);
          packetWriter.Write(this.myPlayer.simulationState.npcPosition.X);
          packetWriter.Write(this.myPlayer.simulationState.npcPosition.Y);
          packetWriter.Write(this.myPlayer.simulationState.npcPosition.Z);
          packetWriter.Write(this.myPlayer.simulationState.npcRotation);
          packetWriter.Write(this.myPlayer.simulationState.npcTilt);
          this.myPlayer.now.animation = 0;
          this.myPlayer.now.gunfired = 0;
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendUnreliableNoDelay);
        }
        if (this.tunneladd)
        {
          if (this.crypt1netsend)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 100);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.crypt1netsend = false;
          }
          if (this.crypt1bnetsend)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 101);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.crypt1bnetsend = false;
          }
          if (this.crypt2netsend)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 102);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.crypt2netsend = false;
          }
          if (this.crypt2bnetsend)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 103);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.crypt2bnetsend = false;
          }
          if (this.tunnelDoorNetnum != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 105);
            packetWriter.Write((byte) this.tunnelDoorNetnum);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.tunnelDoorNetnum = -1;
          }
          if (this.skullemitNetSendNum != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 106);
            packetWriter.Write((byte) this.skullemitNetSendNum);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.skullemitNetSendNum = -1;
          }
          if (this.skulldropNetSendNum != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 107);
            packetWriter.Write((byte) this.skulldropNetSendNum);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.skulldropNetSendNum = -1;
          }
          if (this.enemy1.skullindex != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 110);
            packetWriter.Write((byte) this.enemy1.skullindex);
            packetWriter.Write((byte) this.enemy1.iter);
            packetWriter.Write(this.enemy1.destination.X);
            packetWriter.Write(this.enemy1.destination.Y);
            packetWriter.Write(this.enemy1.enemypos.X);
            packetWriter.Write(this.enemy1.enemypos.Y);
            packetWriter.Write(this.enemy1.enemypos.Z);
            packetWriter.Write((byte) this.enemy1.sendSeed);
            packetWriter.Write(this.enemy1.sendTime);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.enemy1.skullindex = -1;
          }
          if (this.enemy1.sendDeath != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 113);
            packetWriter.Write((byte) this.enemy1.sendDeath);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.enemy1.sendDeath = -1;
          }
          if (this.sendTumbler != -1)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 114);
            packetWriter.Write((byte) this.tumblerIndex);
            packetWriter.Write((byte) this.tumblerSlot);
            packetWriter.Write((byte) this.tumblerState);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.sendTumbler = -1;
          }
          if (this.hostcodeSend != -1)
          {
            this.hostcode1 = this.sc.code1[this.mazeid, 0] * 100 + this.sc.code1[this.mazeid, 1] * 10 + this.sc.code1[this.mazeid, 2];
            this.hostcode2 = this.sc.code2[this.mazeid, 0] * 100 + this.sc.code2[this.mazeid, 1] * 10 + this.sc.code2[this.mazeid, 2];
            this.hostcode3 = this.sc.code3[this.mazeid, 0] * 100 + this.sc.code3[this.mazeid, 1] * 10 + this.sc.code3[this.mazeid, 2];
            ushort hostcode1 = (ushort) this.hostcode1;
            ushort hostcode2 = (ushort) this.hostcode2;
            ushort hostcode3 = (ushort) this.hostcode3;
            packetWriter.clean();
            packetWriter.Write((byte) 115);
            packetWriter.Write(hostcode1);
            packetWriter.Write(hostcode2);
            packetWriter.Write(hostcode3);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.hostcodeSend = -1;
          }
          if (this.twinTalk)
          {
            packetWriter.clean();
            packetWriter.Write((byte) 116);
            packetWriter.Write((byte) this.twinTalki);
            packetWriter.Write((byte) this.twinTalkaction);
            packetWriter.Write((byte) this.twinTalkval1);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            this.twinTalki = 0;
            this.twinTalkaction = 0;
            this.twinTalkval1 = 0;
            this.twinTalk = false;
          }
        }
        if (this.myPlayer.reload)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 32);
          packetWriter.Write((byte) this.sendmybloodColor);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.reload = false;
        }
        if (this.myPlayer.kicked)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 33);
          packetWriter.Write(true);
          packetB1 = packetWriter.mypackets();
          SteamNetworking.SendP2PPacket(this.sc.kickID, packetB1, (uint) packetB1.Length, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.kicked = false;
        }
        if (this.sc.chat.message2send)
        {
          if (this.commands(true))
          {
            packetWriter.clean();
            packetWriter.Write((byte) 35);
            byte length = (byte) this.sc.chat.message.Length;
            packetWriter.Write(length);
            packetWriter.WriteString(this.sc.chat.message);
            packetB1 = packetWriter.mypackets();
            int messageIndex = this.sc.chat.messageIndex;
            if (messageIndex == -1)
              this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            if (messageIndex >= 0 && messageIndex < this.remPlayer.Count && this.remPlayer[messageIndex].id != this.mysteamID)
              SteamNetworking.SendP2PPacket(this.remPlayer[messageIndex].id, packetB1, (uint) packetB1.Length, EP2PSend.k_EP2PSendReliable);
          }
          this.sc.chat.message2send = false;
          this.sc.chat.message = "";
        }
        if (this.myPlayer.farmerTalk)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 90);
          packetWriter.Write(this.myPlayer.farmerIndex);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.farmerTalk = false;
        }
        if (this.myPlayer.now.load > (byte) 0)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 31);
          packetWriter.Write(this.myPlayer.now.load);
          packetWriter.Write((byte) this.sc.currentDay);
          packetB1 = packetWriter.mypackets();
          if (this.sc.host)
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          if (!this.sc.host)
            SteamNetworking.SendP2PPacket(this.HostOwner, packetB1, (uint) packetB1.Length, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.now.load = (byte) 0;
        }
        if (this.sc.host)
        {
          for (int index = 0; index < Cutty4.cuttyCount; ++index)
          {
            if (this.cuttyBoss[index].actionScheduled && Cutty4.allplayersReady)
            {
              packetWriter.clean();
              this.cuttyBoss[index].host_SendData(ref packetWriter, this.timeFrame);
              packetB1 = packetWriter.mypackets();
              this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
            }
          }
          if (Princess4.cuttyCount > 0 && this.princess[0].actionScheduled && Princess4.allplayersReady)
          {
            packetWriter.clean();
            this.princess[0].host_SendData(ref packetWriter);
            packetB1 = packetWriter.mypackets();
            this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          }
        }
        if (this.myPlayer.grenToss)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 80);
          packetWriter.Write(this.myPlayer.grenPos.X);
          packetWriter.Write(this.myPlayer.grenPos.Y);
          packetWriter.Write(this.myPlayer.grenPos.Z);
          packetWriter.Write(this.myPlayer.grenVeloc.X);
          packetWriter.Write(this.myPlayer.grenVeloc.Y);
          packetWriter.Write(this.myPlayer.grenVeloc.Z);
          packetWriter.Write(this.myPlayer.grenBounce);
          packetWriter.Write(this.myPlayer.grenAge);
          packetWriter.Write(this.myPlayer.grenSeed);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.grenToss = false;
        }
        if (this.myPlayer.rocketLaunch)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 81);
          packetWriter.Write(this.pim1.mirvDest.X);
          packetWriter.Write(this.pim1.mirvDest.Y);
          packetWriter.Write(this.pim1.mirvDest.Z);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
          this.myPlayer.rocketLaunch = false;
        }
        if (this.myPlayer.creatureShock.action == (byte) 34)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 62);
          packetWriter.Write(this.myPlayer.creatureShock.time);
          packetWriter.Write(this.myPlayer.creatureShock.id);
          packetWriter.Write(this.myPlayer.creatureShock.id2);
          packetWriter.Write(this.myPlayer.creatureShock.id3);
          packetWriter.Write(this.myPlayer.creatureShock.id4);
          packetWriter.Write(this.myPlayer.creatureShock.id5);
          packetWriter.Write(this.myPlayer.creatureShock.id6);
          packetWriter.Write(this.myPlayer.creatureShock.id7);
          packetWriter.Write(this.myPlayer.creatureShock.id8);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
        }
        this.myPlayer.creatureShock.action = (byte) 0;
        if (this.myPlayer.shatter.action == (byte) 55)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 63);
          packetWriter.Write(this.myPlayer.shatter.id);
          packetWriter.Write(this.myPlayer.shatter.id2);
          packetWriter.Write(this.myPlayer.shatter.id3);
          packetWriter.Write(this.myPlayer.shatter.id4);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
        }
        this.myPlayer.shatter.action = (byte) 0;
        if (this.myPlayer.creaturemulti.action == (byte) 33)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 61);
          packetWriter.Write(this.myPlayer.creaturemulti.time);
          packetWriter.Write(this.myPlayer.creaturemulti.id);
          packetWriter.Write(this.myPlayer.creaturemulti.id2);
          packetWriter.Write(this.myPlayer.creaturemulti.id3);
          packetWriter.Write(this.myPlayer.creaturemulti.id4);
          packetWriter.Write(this.myPlayer.creaturemulti.id5);
          int bitfield = 0;
          this.AddToBitfield(ref bitfield, 1, this.myPlayer.creaturemulti.died ? 1 : 0);
          this.AddToBitfield(ref bitfield, 1, this.myPlayer.creaturemulti.died2 ? 1 : 0);
          this.AddToBitfield(ref bitfield, 1, this.myPlayer.creaturemulti.died3 ? 1 : 0);
          this.AddToBitfield(ref bitfield, 1, this.myPlayer.creaturemulti.died4 ? 1 : 0);
          this.AddToBitfield(ref bitfield, 1, this.myPlayer.creaturemulti.died5 ? 1 : 0);
          packetWriter.Write((byte) bitfield);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
        }
        this.myPlayer.creaturemulti.action = (byte) 0;
        if (this.myPlayer.creature.id != (ushort) 65000)
        {
          packetWriter.clean();
          if (this.myPlayer.creature.action == (byte) 5)
            packetWriter.Write((byte) 59);
          else if (this.myPlayer.creature.action == (byte) 17)
            packetWriter.Write((byte) 69);
          else
            packetWriter.Write((byte) 60);
          packetWriter.Write(this.myPlayer.creature.type);
          packetWriter.Write(this.myPlayer.creature.id);
          packetWriter.Write(this.myPlayer.creature.action);
          packetWriter.Write(this.myPlayer.creature.bodypart);
          packetWriter.Write(this.myPlayer.creature.frame);
          packetWriter.Write(this.myPlayer.creature.time);
          packetWriter.Write(this.myPlayer.creature.died);
          if (this.myPlayer.creature.action == (byte) 17)
          {
            packetWriter.Write(this.myPlayer.creature.speed);
            packetWriter.Write(this.myPlayer.creature.rot);
            packetWriter.Write(this.myPlayer.creature.veloc.X);
            packetWriter.Write(this.myPlayer.creature.veloc.Y);
            packetWriter.Write(this.myPlayer.creature.veloc.Z);
          }
          if (this.myPlayer.creature.action == (byte) 5)
          {
            packetWriter.Write(this.myPlayer.creature.veloc.X);
            packetWriter.Write(this.myPlayer.creature.veloc.Y);
            packetWriter.Write(this.myPlayer.creature.veloc.Z);
          }
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
        }
        this.myPlayer.creature.id = (ushort) 65000;
        if (this.myPlayer.partID != (ushort) 0)
        {
          packetWriter.clean();
          packetWriter.Write((byte) 70);
          packetWriter.Write((byte) this.myPlayer.partTYPE);
          packetWriter.Write(this.myPlayer.partTIME);
          packetWriter.Write(this.myPlayer.partID);
          packetWriter.Write(this.myPlayer.partHIT);
          packetWriter.Write(this.myPlayer.partPOS.X);
          packetWriter.Write(this.myPlayer.partPOS.Y);
          packetWriter.Write(this.myPlayer.partPOS.Z);
          packetWriter.Write(this.myPlayer.partVEL.X);
          packetWriter.Write(this.myPlayer.partVEL.Y);
          packetWriter.Write(this.myPlayer.partVEL.Z);
          packetWriter.Write(this.myPlayer.partQUAT.W);
          packetWriter.Write(this.myPlayer.partQUAT.X);
          packetWriter.Write(this.myPlayer.partQUAT.Y);
          packetWriter.Write(this.myPlayer.partQUAT.Z);
          packetB1 = packetWriter.mypackets();
          this.SendP2PPacket(ref packetB1, EP2PSend.k_EP2PSendReliable);
        }
        this.myPlayer.partID = (ushort) 0;
      }
    }

    private void calculateReadData(int ii)
    {
      if (this.remPlayerFlashlight[ii] != this.remPlayer[ii].r.now.flashlight)
      {
        this.sc.lightClick.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
        this.remPlayerFlashlight[ii] = this.remPlayer[ii].r.now.flashlight;
      }
      if (this.remPlayer[ii].r.onHulk && !this.remPlayer[ii].r.UsingHulk)
      {
        this.remPlayer[ii].r.texture2D_0 = this.remPlayer[ii].r.texture2D_1;
        this.remPlayer[ii].r.remoteCleanOn = true;
        this.remPlayer[ii].r.remoteClean = 0.4f;
        this.remPlayer[ii].r.hulkTrans = 100;
        this.sc.hulkRoar.Play(this.sc.ev * this.remPlayer[ii].r.vol, 0.0f, 0.0f);
      }
      if (!this.remPlayer[ii].r.onHulk && this.remPlayer[ii].r.UsingHulk)
      {
        this.remPlayer[ii].r.texture2D_0 = this.remPlayer[ii].r.texture2D_2;
        this.remPlayer[ii].r.remoteCleanOn = true;
        this.remPlayer[ii].r.remoteClean = 0.4f;
        this.remPlayer[ii].r.hulkTrans = 100;
        this.sc.hulkRoar2.Play(this.sc.ev * this.remPlayer[ii].r.vol, 0.0f, 0.0f);
      }
      this.remPlayer[ii].r.UsingHulk = this.remPlayer[ii].r.onHulk;
      if (Cutty4.cuttyCount > 0 && (double) this.sc.introCamera <= 0.0)
      {
        if (!this.sc.host && this.remPlayer[ii].r.cuttyindexBit > (byte) 0 && this.remPlayer[ii].id == this.HostOwner)
          this.cuttyBoss[(int) this.remPlayer[ii].r.cuttyindexBit - 1].onFire = this.remPlayer[ii].r.cuttyonFire;
        if (Cutty4.cuttyDoneSpeech)
        {
          if (this.remPlayer[ii].r.cuttyindexBit > (byte) 0)
          {
            int index = (int) this.remPlayer[ii].r.cuttyindexBit - 1;
            this.cuttyBoss[index].health = (ushort) MathHelper.Min((float) this.cuttyBoss[index].health, (float) this.remPlayer[ii].r.cuttyhealth);
            if (this.remPlayer[ii].r.cuttyDamBit > (byte) 0)
            {
              int cuttyDamBit = (int) this.remPlayer[ii].r.cuttyDamBit;
              if (cuttyDamBit == 1)
                this.cuttyBoss[index].spineDamage = (ushort) MathHelper.Max((float) this.cuttyBoss[index].spineDamage, (float) this.remPlayer[ii].r.cuttyDamage);
              if (cuttyDamBit == 2)
                this.cuttyBoss[index].assDamage = (ushort) MathHelper.Max((float) this.cuttyBoss[index].assDamage, (float) this.remPlayer[ii].r.cuttyDamage);
              if (cuttyDamBit == 3)
                this.cuttyBoss[index].faceDamage = (ushort) MathHelper.Max((float) this.cuttyBoss[index].faceDamage, (float) this.remPlayer[ii].r.cuttyDamage);
              this.cuttyBoss[index].runDestructionChecks(cuttyDamBit);
            }
            this.remPlayer[ii].r.cuttyDamBit = (byte) 0;
            this.remPlayer[ii].r.cuttyindexBit = (byte) 0;
          }
          if (this.remPlayer[ii].r.now.gunfired == 4)
          {
            float num1 = (float) ((double) this.remPlayer[ii].r.cuttyXcoord / (double) byte.MaxValue * 1024.0);
            float num2 = (float) ((double) this.remPlayer[ii].r.cuttyYcoord / (double) byte.MaxValue * 1024.0);
            this.cuttyBoss[(int) this.remPlayer[ii].r.uvIndex].addTargetBlood(this.sc.paintRemColor, (int) num1 - 25, (int) num1 + 25, (int) num2 - 25, (int) num2 + 25);
          }
        }
        if (!this.sc.host)
        {
          if (this.remPlayer[ii].r.cutty_SendPackage == 130)
          {
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 130;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.homing = (int) this.remPlayer[ii].r.cutty_homing;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.targetRate = this.remPlayer[ii].r.cutty_targetRate;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.curveIndex = (int) this.remPlayer[ii].r.cutty_curveIndex;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.loop = this.remPlayer[ii].r.cutty_loop;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.animType = (int) this.remPlayer[ii].r.cutty_animtype;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.talkindex = this.remPlayer[ii].r.cutty_talkindex >= (byte) 99 ? -1 : (int) this.remPlayer[ii].r.cutty_talkindex;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].cuttyAction(ref this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 131)
          {
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 131;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destx = this.remPlayer[ii].r.cutty_destx;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destz = this.remPlayer[ii].r.cutty_destz;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].cuttyAction(ref this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 132)
          {
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 132;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destx = this.remPlayer[ii].r.cutty_destx;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destz = this.remPlayer[ii].r.cutty_destz;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].cuttyAction(ref this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 133)
          {
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 133;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destx = this.remPlayer[ii].r.cutty_destx;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.destz = this.remPlayer[ii].r.cutty_destz;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].cuttyAction(ref this.cuttyBoss[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
        }
      }
      if (Princess4.cuttyCount > 0 && (double) this.sc.introCamera <= 0.0)
      {
        if (Princess4.cuttyDoneSpeech && this.remPlayer[ii].r.bossindexBit > (byte) 0)
        {
          int index = (int) this.remPlayer[ii].r.bossindexBit - 1;
          if ((int) this.princess[0].health > (int) this.remPlayer[ii].r.bosshealth)
            ++this.princess[0].wehurtBoss;
          this.princess[0].damHealth((ushort) 0);
          this.princess[0].health = (ushort) MathHelper.Min((float) this.princess[0].health, (float) this.remPlayer[ii].r.bosshealth);
          if (this.remPlayer[ii].r.bossDamBit > (byte) 0)
          {
            int bossDamBit = (int) this.remPlayer[ii].r.bossDamBit;
            if (bossDamBit == 1)
              this.princess[0].spineDamage = (ushort) MathHelper.Max((float) this.princess[0].spineDamage, (float) this.remPlayer[ii].r.bossDamage);
            if (bossDamBit == 2)
              this.princess[0].assDamage = (ushort) MathHelper.Max((float) this.princess[0].assDamage, (float) this.remPlayer[ii].r.bossDamage);
            if (bossDamBit == 3)
              this.princess[0].faceDamage = (ushort) MathHelper.Max((float) this.princess[0].faceDamage, (float) this.remPlayer[ii].r.bossDamage);
            if (bossDamBit == 4)
            {
              if ((int) this.remPlayer[ii].r.bossDamage > (int) this.princess[0].heartHit)
              {
                this.princess[0].startHeartAttack();
                this.princess[0].heartIndex = 0;
              }
              this.princess[0].heartHit = (ushort) MathHelper.Max((float) this.princess[0].heartHit, (float) this.remPlayer[ii].r.bossDamage);
            }
            this.princess[index].runDestructionChecks(bossDamBit);
          }
          this.remPlayer[ii].r.bossDamBit = (byte) 0;
          this.remPlayer[ii].r.bossindexBit = (byte) 0;
        }
        if (!this.sc.host)
        {
          if (this.remPlayer[ii].r.cutty_SendPackage == 140)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 140;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.homing = (int) this.remPlayer[ii].r.cutty_homing;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.animType = (int) this.remPlayer[ii].r.cutty_animtype;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.talkindex = this.remPlayer[ii].r.cutty_talkindex >= (byte) 99 ? -1 : (int) this.remPlayer[ii].r.cutty_talkindex;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 141)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 141;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 142)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 142;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 143)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 143;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.talkindex = this.remPlayer[ii].r.cutty_talkindex >= (byte) 99 ? -1 : (int) this.remPlayer[ii].r.cutty_talkindex;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 144)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 144;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 145)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 145;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.dur = this.remPlayer[ii].r.cutty_dur;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.rot = this.remPlayer[ii].r.cutty_rot;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
          if (this.remPlayer[ii].r.cutty_SendPackage == 146)
          {
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.flag = 146;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct.talkindex = this.remPlayer[ii].r.cutty_talkindex >= (byte) 99 ? -1 : (int) this.remPlayer[ii].r.cutty_talkindex;
            this.princess[(int) this.remPlayer[ii].r.cutty_index].princessAction(ref this.princess[(int) this.remPlayer[ii].r.cutty_index].tempConduct, false, ref this.heights);
            this.remPlayer[ii].r.cutty_SendPackage = -1;
          }
        }
      }
      this.int_9 = Math.Min(this.int_9, (int) this.remPlayer[ii].r.now.byte_0);
      this.int_10 = Math.Min(this.int_10, (int) this.remPlayer[ii].r.now.byte_1);
      if (this.sc.host)
      {
        if (this.remPlayer[ii].r.now.leverOn)
        {
          --remotePlayer4.leverRespond;
          if (remotePlayer4.leverRespond <= 0)
            this.fenceRespond();
        }
        else
          remotePlayer4.leverRespond = 0;
      }
      if (!this.sc.host)
      {
        if (this.remPlayer[ii].r.difficulty != (byte) 3)
          this.sc.df = (int) this.remPlayer[ii].r.difficulty;
        if (this.remPlayer[ii].r.now.load == (byte) 1)
        {
          this.sc.tempcurrentDay = (int) this.remPlayer[ii].r.now.loadDay;
          this.loader = true;
          this.loaderFlag1 = false;
          this.loaderFlag2 = false;
        }
        if (this.remPlayer[ii].r.now.load > (byte) 1)
        {
          this.sc.tempcurrentDay = (int) this.remPlayer[ii].r.now.loadDay;
          this.loader = true;
          this.loaderFlag1 = false;
          this.loaderFlag2 = true;
        }
        this.remPlayer[ii].r.now.load = (byte) 0;
      }
      if (this.sc.host)
      {
        if (this.remPlayer[ii].r.now.load > (byte) 0 && this.sc.gameState == 2)
        {
          this.loader = true;
          this.loaderFlag1 = true;
          this.loaderFlag2 = true;
        }
        this.remPlayer[ii].r.now.load = (byte) 0;
      }
      if (this.remPlayer[ii].r.now.grinder > 0)
      {
        this.grinderTimer = (float) this.remPlayer[ii].r.now.grinder;
        this.GrinderOn = true;
        this.myPlayer.now.grinder = 0;
      }
      if (this.remPlayer[ii].r.now.weapon == 200)
      {
        if (!this.remPlayer[ii].r.hasnoArms)
        {
          this.sc.manyell.Play(this.sc.ev * 1f, (float) this.rr.Next(-20, 20) / 100f, 0.0f);
          this.remPlayer[ii].r.remoteModel = this.remPlayer[ii].r.remoteModelnoArms;
          this.remPlayer[ii].r.hasnoArms = true;
        }
      }
      else if (this.remPlayer[ii].r.hasnoArms)
      {
        this.remPlayer[ii].r.remoteModel = this.remPlayer[ii].r.remoteModelwhole;
        this.remPlayer[ii].r.hasnoArms = false;
      }
      if (this.barnDoorState == 0)
      {
        bool flag1 = this.sc.host && this.remPlayer[ii].r.now.doorOpen >= (byte) 10;
        bool flag2 = !this.sc.host && this.remPlayer[ii].r.now.doorOpen < (byte) 10;
        if (flag1 || flag2)
        {
          if (this.remPlayer[ii].r.now.doorOpen >= (byte) 10)
            this.remPlayer[ii].r.now.doorOpen -= (byte) 10;
          if (this.remPlayer[ii].r.now.doorOpen == (byte) 2)
          {
            this.barnDoorState = 1;
            if (this.barnDoorLocked)
            {
              this.barnDoorLocked = false;
              this.sc.doorUnlock.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            }
          }
          if (this.remPlayer[ii].r.now.doorOpen == (byte) 1)
            this.barnDoorState = -1;
        }
      }
      if (this.remPlayer[ii].r.grenToss)
      {
        this.throwGrenade(ref this.grenadeThrow, this.remPlayer[ii].r.grenPos, this.remPlayer[ii].r.grenVeloc, this.remPlayer[ii].r.grenBounce, this.remPlayer[ii].r.grenSeed, false, 3, (int) this.remPlayer[ii].r.grenAge);
        this.remPlayer[ii].r.grenToss = false;
      }
      if (this.remPlayer[ii].r.mirvToss)
      {
        this.pim2.mirvDest = this.remPlayer[ii].r.mirvPos;
        this.pim2.mirvMoving = true;
        this.pim2.mirvTimer = (float) this.rr.Next(1, 5000);
        this.pim2.mirvFreq1 = (float) this.rr.Next(70, 100) / 10f;
        if (this.rr.Next(1, 500) < 250)
          this.pim2.mirvFreq1 *= -1f;
        this.pim2.mirvFreq2 = (float) this.rr.Next(110, 140) / 10f;
        if (this.rr.Next(1, 500) < 250)
          this.pim2.mirvFreq2 *= -1f;
        this.pim2.mirvAge = 0.0f;
        this.remPlayer[ii].r.secBang_rem.Play(this.sc.ev, (float) this.rr.Next(-40, -20) / 100f, 0.0f);
        Quaternion rotation = new Quaternion();
        this.pim2.mirvTrans = this.sc.flashOffset[14] * this.remPlayer[ii].r.pistolHand;
        this.pim2.mirvTrans.Decompose(out Vector3 _, out rotation, out this.pim2.mirvPos);
        this.pim2.mirvRot = Matrix.CreateFromQuaternion(rotation);
        this.remPlayer[ii].r.mirvToss = false;
      }
      if (this.remPlayer[ii].r.farmerTalk)
      {
        this.PlayDialogue((int) this.remPlayer[ii].r.farmerIndex, false);
        this.remPlayer[ii].r.farmerTalk = false;
      }
      if (this.remPlayer[ii].r.boarDropTimer != -1 && !this.sc.host)
      {
        this.tickOffset = this.remPlayer[ii].r.boarDropTimer - 350 - this.timeFrame;
        this.boarDropTimer.Add(this.remPlayer[ii].r.boarDropTimer);
        boarDupe.handicapTurn = this.sc.handicapTurn4[this.remPlayer[ii].r.boarHandicap];
        boarDupe.handicapSpeed = this.sc.handicapSpeed4[this.remPlayer[ii].r.boarHandicap];
        this.boarSeed.Add(this.remPlayer[ii].r.boarSeed);
        this.remPlayer[ii].r.boarDropTimer = -1;
        this.remPlayer[ii].r.boarSeed = 0;
        this.boarTriggerSent = true;
      }
      if (this.sc.gameState >= 1 && this.boarDropTimer.Count == 0)
      {
        if (this.remPlayer[ii].r.creaturemulti.action == (byte) 33)
        {
          this.tempConduct.type = this.remPlayer[ii].r.creaturemulti.type;
          this.tempConduct.action = (byte) 3;
          this.tempConduct.bodypart = (byte) 1;
          this.tempConduct.frame = 5;
          this.tempConduct.time = this.remPlayer[ii].r.creaturemulti.time;
          this.tempConduct.id = (int) this.remPlayer[ii].r.creaturemulti.id;
          this.tempConduct.died = this.remPlayer[ii].r.creaturemulti.died;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creaturemulti.id2;
          this.tempConduct.died = this.remPlayer[ii].r.creaturemulti.died2;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creaturemulti.id3;
          this.tempConduct.died = this.remPlayer[ii].r.creaturemulti.died3;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creaturemulti.id4;
          this.tempConduct.died = this.remPlayer[ii].r.creaturemulti.died4;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creaturemulti.id5;
          this.tempConduct.died = this.remPlayer[ii].r.creaturemulti.died5;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
        }
        if (this.remPlayer[ii].r.shatter.action == (byte) 55)
        {
          this.tempConduct.type = this.remPlayer[ii].r.shatter.type;
          this.tempConduct.action = (byte) 55;
          this.tempConduct.died = false;
          this.tempConduct.bodypart = (byte) 1;
          this.tempConduct.frame = 5;
          this.tempConduct.time = this.timeFrame;
          this.tempConduct.id = (int) this.remPlayer[ii].r.shatter.id;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.shatter.id2;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.shatter.id3;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.shatter.id4;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
        }
        if (this.remPlayer[ii].r.creatureShock.action == (byte) 34)
        {
          if (!this.sc.host)
          {
            this.myPlayer.now.leverOn = false;
            if (this.leverTimer <= 0)
            {
              --this.leverLevel;
              if (this.leverLevel < 0)
                this.leverLevel = 0;
              this.sc.fence.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
              if ((double) this.leverRamp == 0.0)
                this.leverRamp = 0.0001f;
              this.leverTimer = 350;
            }
          }
          this.tempConduct.type = this.remPlayer[ii].r.creatureShock.type;
          this.tempConduct.action = (byte) 34;
          this.tempConduct.died = false;
          this.tempConduct.bodypart = (byte) 1;
          this.tempConduct.frame = 5;
          this.tempConduct.time = this.timeFrame;
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id2;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id3;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id4;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id5;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id6;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id7;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
          this.tempConduct.id = (int) this.remPlayer[ii].r.creatureShock.id8;
          if (this.tempConduct.id != 65000)
            this.boarAction(ref this.boar, ref this.tempConduct, false);
        }
        if (this.remPlayer[ii].r.creature.id != (ushort) 65000)
        {
          this.tempConduct.type = this.remPlayer[ii].r.creature.type;
          this.tempConduct.id = (int) this.remPlayer[ii].r.creature.id;
          this.tempConduct.action = this.remPlayer[ii].r.creature.action;
          this.tempConduct.bodypart = this.remPlayer[ii].r.creature.bodypart;
          this.tempConduct.frame = (int) this.remPlayer[ii].r.creature.frame;
          this.tempConduct.time = this.remPlayer[ii].r.creature.time;
          this.tempConduct.died = this.remPlayer[ii].r.creature.died;
          this.tempConduct.speed = this.remPlayer[ii].r.creature.speed;
          this.tempConduct.rot = this.remPlayer[ii].r.creature.rot;
          this.tempConduct.veloc = this.remPlayer[ii].r.creature.veloc;
          this.tempConduct.remIndex = ii;
          this.boarAction(ref this.boar, ref this.tempConduct, false);
        }
        this.remPlayer[ii].r.creature.id = (ushort) 65000;
        this.remPlayer[ii].r.creaturemulti.action = (byte) 0;
        this.remPlayer[ii].r.creatureShock.action = (byte) 0;
        this.remPlayer[ii].r.shatter.action = (byte) 0;
        if (this.remPlayer[ii].r.partID != (ushort) 0)
        {
          if (this.remPlayer[ii].r.partTYPE == (byte) 0)
          {
            for (int i = 0; i < this.head.max; ++i)
            {
              if ((int) this.head.dupe[i].partID == (int) this.remPlayer[ii].r.partID)
              {
                if ((this.remPlayer[ii].r.partTIME > this.head.dupe[i].lastKicked ? 1 : (!this.sc.host ? 0 : (this.remPlayer[ii].r.partTIME >= this.head.dupe[i].lastKicked ? 1 : 0))) != 0)
                {
                  this.head.dupe[i].lastKicked = this.remPlayer[ii].r.partTIME;
                  this.head.dupe[i].myRot = Matrix.CreateFromQuaternion(this.remPlayer[ii].r.partQUAT);
                  this.head.dupe[i].assignRandom((int) this.remPlayer[ii].r.partID);
                  this.head.dupe[i].move = 1;
                  this.head.dupe[i].sloper = 0.0f;
                  this.head.dupe[i].mypos = this.remPlayer[ii].r.partPOS;
                  this.head.dupe[i].velocity = this.remPlayer[ii].r.partVEL;
                  this.head.dupe[i].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(this.head.dupe[i].velocity, Vector3.Up)), this.head.dupe[i].turnRate * 1.5f);
                  int hits = this.head.dupe[i].hits;
                  this.head.dupe[i].hits = (int) MathHelper.Max((float) this.remPlayer[ii].r.partHIT, (float) this.head.dupe[i].hits);
                  if (this.head.dupe[i].hits == 77)
                  {
                    this.destroyPart(ref this.head, i, hits, (int) this.remPlayer[ii].r.partTYPE, (int) this.remPlayer[ii].r.partID);
                    break;
                  }
                  if (this.multiHitPointer >= 0 && this.multiHitType[this.multiHitPointer] == (int) this.remPlayer[ii].r.partTYPE && this.multiHitID[this.multiHitPointer] == (int) this.remPlayer[ii].r.partID && this.head.dupe[i].hits < 77)
                  {
                    this.multiHitValue[this.multiHitPointer] = this.head.dupe[i].hits;
                    if (this.multiHitValue[this.multiHitPointer] > 0)
                    {
                      this.multiHitTimer[this.multiHitPointer] = 300f;
                      this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-30, -20) / 100f, 0.0f);
                      break;
                    }
                    break;
                  }
                  break;
                }
                break;
              }
            }
          }
          else if (this.remPlayer[ii].r.partTYPE == (byte) 1)
          {
            for (int i = 0; i < this.leg.max; ++i)
            {
              if ((int) this.leg.dupe[i].partID == (int) this.remPlayer[ii].r.partID)
              {
                if ((this.remPlayer[ii].r.partTIME > this.leg.dupe[i].lastKicked ? 1 : (!this.sc.host ? 0 : (this.remPlayer[ii].r.partTIME >= this.leg.dupe[i].lastKicked ? 1 : 0))) != 0)
                {
                  this.leg.dupe[i].lastKicked = this.remPlayer[ii].r.partTIME;
                  this.leg.dupe[i].myRot = Matrix.CreateFromQuaternion(this.remPlayer[ii].r.partQUAT);
                  this.leg.dupe[i].assignRandom((int) this.remPlayer[ii].r.partID);
                  this.leg.dupe[i].move = 1;
                  this.leg.dupe[i].sloper = 0.0f;
                  this.leg.dupe[i].mypos = this.remPlayer[ii].r.partPOS;
                  this.leg.dupe[i].velocity = this.remPlayer[ii].r.partVEL;
                  this.leg.dupe[i].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(this.leg.dupe[i].velocity, Vector3.Up)), this.leg.dupe[i].turnRate * 1.5f);
                  int hits = this.leg.dupe[i].hits;
                  this.leg.dupe[i].hits = (int) MathHelper.Max((float) this.remPlayer[ii].r.partHIT, (float) this.leg.dupe[i].hits);
                  if (this.leg.dupe[i].hits == 77)
                  {
                    this.destroyPart(ref this.leg, i, hits, (int) this.remPlayer[ii].r.partTYPE, (int) this.remPlayer[ii].r.partID);
                    break;
                  }
                  if (this.multiHitPointer >= 0 && this.multiHitType[this.multiHitPointer] == (int) this.remPlayer[ii].r.partTYPE && this.multiHitID[this.multiHitPointer] == (int) this.remPlayer[ii].r.partID && this.leg.dupe[i].hits < 77)
                  {
                    this.multiHitValue[this.multiHitPointer] = this.leg.dupe[i].hits;
                    if (this.multiHitValue[this.multiHitPointer] > 0)
                    {
                      this.multiHitTimer[this.multiHitPointer] = 300f;
                      this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-30, -20) / 100f, 0.0f);
                      break;
                    }
                    break;
                  }
                  break;
                }
                break;
              }
            }
          }
          else if (this.remPlayer[ii].r.partTYPE == (byte) 2)
          {
            for (int i = 0; i < this.body.max; ++i)
            {
              if ((int) this.body.dupe[i].partID == (int) this.remPlayer[ii].r.partID)
              {
                if ((this.remPlayer[ii].r.partTIME > this.body.dupe[i].lastKicked ? 1 : (!this.sc.host ? 0 : (this.remPlayer[ii].r.partTIME >= this.body.dupe[i].lastKicked ? 1 : 0))) != 0)
                {
                  this.body.dupe[i].lastKicked = this.remPlayer[ii].r.partTIME;
                  this.body.dupe[i].myRot = Matrix.CreateFromQuaternion(this.remPlayer[ii].r.partQUAT);
                  this.body.dupe[i].assignRandom((int) this.remPlayer[ii].r.partID);
                  this.body.dupe[i].move = 1;
                  this.body.dupe[i].sloper = 0.0f;
                  this.body.dupe[i].mypos = this.remPlayer[ii].r.partPOS;
                  this.body.dupe[i].velocity = this.remPlayer[ii].r.partVEL;
                  this.body.dupe[i].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(this.body.dupe[i].velocity, Vector3.Up)), this.body.dupe[i].turnRate * 1.5f);
                  int hits = this.body.dupe[i].hits;
                  this.body.dupe[i].hits = (int) MathHelper.Max((float) this.remPlayer[ii].r.partHIT, (float) this.body.dupe[i].hits);
                  if (this.body.dupe[i].hits == 77)
                  {
                    this.destroyPart(ref this.body, i, hits, (int) this.remPlayer[ii].r.partTYPE, (int) this.remPlayer[ii].r.partID);
                    break;
                  }
                  if (this.multiHitPointer >= 0 && this.multiHitType[this.multiHitPointer] == (int) this.remPlayer[ii].r.partTYPE && this.multiHitID[this.multiHitPointer] == (int) this.remPlayer[ii].r.partID && this.body.dupe[i].hits < 77)
                  {
                    this.multiHitValue[this.multiHitPointer] = this.body.dupe[i].hits;
                    if (this.multiHitValue[this.multiHitPointer] > 0)
                    {
                      this.multiHitTimer[this.multiHitPointer] = 300f;
                      this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-30, -20) / 100f, 0.0f);
                      break;
                    }
                    break;
                  }
                  break;
                }
                break;
              }
            }
          }
          else if (this.remPlayer[ii].r.partTYPE == (byte) 3)
          {
            for (int i = 0; i < this.butt.max; ++i)
            {
              if ((int) this.butt.dupe[i].partID == (int) this.remPlayer[ii].r.partID)
              {
                if ((this.remPlayer[ii].r.partTIME > this.butt.dupe[i].lastKicked ? 1 : (!this.sc.host ? 0 : (this.remPlayer[ii].r.partTIME >= this.butt.dupe[i].lastKicked ? 1 : 0))) != 0)
                {
                  this.butt.dupe[i].lastKicked = this.remPlayer[ii].r.partTIME;
                  this.butt.dupe[i].myRot = Matrix.CreateFromQuaternion(this.remPlayer[ii].r.partQUAT);
                  this.butt.dupe[i].assignRandom((int) this.remPlayer[ii].r.partID);
                  this.butt.dupe[i].move = 1;
                  this.butt.dupe[i].sloper = 0.0f;
                  this.butt.dupe[i].mypos = this.remPlayer[ii].r.partPOS;
                  this.butt.dupe[i].velocity = this.remPlayer[ii].r.partVEL;
                  this.butt.dupe[i].inertRot = Matrix.CreateFromAxisAngle(Vector3.Normalize(Vector3.Cross(this.butt.dupe[i].velocity, Vector3.Up)), this.butt.dupe[i].turnRate * 1.5f);
                  int hits = this.butt.dupe[i].hits;
                  this.butt.dupe[i].hits = (int) MathHelper.Max((float) this.remPlayer[ii].r.partHIT, (float) this.butt.dupe[i].hits);
                  if (this.butt.dupe[i].hits == 77)
                  {
                    this.destroyPart(ref this.butt, i, hits, (int) this.remPlayer[ii].r.partTYPE, (int) this.remPlayer[ii].r.partID);
                    break;
                  }
                  if (this.multiHitPointer >= 0 && this.multiHitType[this.multiHitPointer] == (int) this.remPlayer[ii].r.partTYPE && this.multiHitID[this.multiHitPointer] == (int) this.remPlayer[ii].r.partID && this.butt.dupe[i].hits < 77)
                  {
                    this.multiHitValue[this.multiHitPointer] = this.butt.dupe[i].hits;
                    if (this.multiHitValue[this.multiHitPointer] > 0)
                    {
                      this.multiHitTimer[this.multiHitPointer] = 300f;
                      this.sc.ding.Play(this.sc.ev, (float) this.rr.Next(-30, -20) / 100f, 0.0f);
                      break;
                    }
                    break;
                  }
                  break;
                }
                break;
              }
            }
          }
        }
        this.remPlayer[ii].r.partID = (ushort) 0;
      }
      else
      {
        this.remPlayer[ii].r.creature.id = (ushort) 65000;
        this.remPlayer[ii].r.creaturemulti.action = (byte) 0;
        this.remPlayer[ii].r.creatureShock.action = (byte) 0;
        this.remPlayer[ii].r.partID = (ushort) 0;
      }
    }

    private int grabindex(int val)
    {
      int num1 = 0;
      int num2 = -1;
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (!(this.remPlayer[index].id == this.mysteamID))
        {
          ++num1;
          if (num1 == val)
          {
            num2 = index;
            break;
          }
        }
      }
      return num2;
    }

    private void handleCheats()
    {
      if (this.sc.hostAllowCheats)
        return;
      if (this.sc.revengeDay <= 0)
        this.sc.cheat_InfiniteAmmo = false;
      this.sc.cheat_Invincible = false;
      this.sc.myplayerCheats = false;
      this.sc.cheat_allweapons = false;
      this.sc.weaponResetMode("reset");
      this.sc.weaponUnlock_bits(this.sc.previousWeapons);
    }

    public void fadeHoles(ref BloodnBacon4PT.hole hole)
    {
      for (int index = 0; index < hole.stainMax; ++index)
      {
        float num = 0.01f;
        --hole.drift[index];
        if ((double) hole.drift[index] <= 0.0)
        {
          hole.a[index] = hole.a[index] * hole.b[index];
          hole.b[index] -= 0.01f;
          if ((double) hole.b[index] < 0.95999997854232788)
            hole.b[index] = 0.96f;
          hole.stainTrans[index].Trans = Matrix.CreateScale(0.985f) * hole.stainTrans[index].Trans;
          if ((double) hole.a[index] < 0.05000000074505806)
            hole.stainTrans[index].Fade -= num;
        }
        if ((double) hole.stainTrans[index].Fade <= 0.0)
        {
          hole.stainTrans[index].Fade = hole.stainTrans[hole.stainMax - 1].Fade;
          hole.drift[index] = hole.drift[hole.stainMax - 1];
          hole.stainTrans[index].Trans = hole.stainTrans[hole.stainMax - 1].Trans;
          hole.stainTrans[index].Coord = hole.stainTrans[hole.stainMax - 1].Coord;
          --hole.stainMax;
          if (hole.stainMax < 0)
            hole.stainMax = 0;
          if (hole.stainIndex > hole.stainMax - 1)
            --hole.stainIndex;
          if (hole.stainIndex < 0)
            hole.stainIndex = 0;
        }
      }
    }

    private bool inbox(Vector3 p, BoundingBox box)
    {
      return (double) p.X > (double) box.Min.X && (double) p.Y > (double) box.Min.Y && (double) p.Z > (double) box.Min.Z && (double) p.X < (double) box.Max.X && (double) p.Y < (double) box.Max.Y && (double) p.Z < (double) box.Max.Z;
    }

    public bool commands(bool sentoverNet)
    {
      bool flag1 = false;
      string message = this.sc.chat.message;
      char[] separator = new char[1]{ ' ' };
      ulong ID = 5;
      string[] strArray = message.Split(separator, StringSplitOptions.RemoveEmptyEntries);
      bool flag2 = strArray[0][0] == ':';
      this.sc.chat.messageIndex = -1;
      if (flag2)
      {
        switch (strArray[0])
        {
          case ":glow":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            if (this.sc.glowtype == "EdgeDetect")
            {
              this.sc.addChatMsg("GLOW TYPE --> ", Color.Yellow, " FLAT", Color.White, 0, ID);
              this.sc.glowtype = "flatshade";
              break;
            }
            this.sc.addChatMsg("GLOW TYPE --> ", Color.Yellow, " EDGE", Color.White, 0, ID);
            this.sc.glowtype = "EdgeDetect";
            break;
          case ":names":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            if (!this.sc.shownames)
            {
              this.sc.addChatMsg("SHOW NAMES --> ", Color.Yellow, " ON", Color.White, 0, ID);
              this.sc.shownames = true;
              break;
            }
            this.sc.addChatMsg("SHOW NAMES --> ", Color.Yellow, " OFF", Color.White, 0, ID);
            this.sc.shownames = false;
            break;
          case ":gore":
            if (this.sc.star2)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              if (this.sc.gorelevel == 0)
              {
                this.sc.addChatMsg("EXTRA GORE --> ", Color.Yellow, " YES YES", Color.White, 0, ID);
                this.sc.gorelevel = 1;
                this.sc.SavePrefs();
                break;
              }
              this.sc.addChatMsg("GORE OFF --> ", Color.Yellow, " ME SCARED", Color.White, 0, ID);
              this.sc.gorelevel = 0;
              this.sc.SavePrefs();
              break;
            }
            this.sc.addChatMsg("SECRET --> ", Color.Yellow, " FEATURE NOT DISCOVERED", Color.White, 0, ID);
            this.sc.cancel.Play(this.sc.ev, 1f, 0.0f);
            break;
          case ":push":
            if (this.sc.host || this.sc.developer)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("PUSH OUTSIDE --> ", Color.Yellow, " ALL", Color.White, 0, ID);
              flag1 = true;
              this.sc.chat.message = ":push";
              break;
            }
            break;
          case ":gift":
            if (this.sc.hats[12] != 1 && !this.sc.developer)
            {
              this.sc.addChatMsg("LOCKED --> ", Color.Yellow, " :you do not have the gift", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            this.sc.addChatMsg("XMAS GIFT SENT --> ", Color.Yellow, " ALL", Color.White, 0, ID);
            flag1 = true;
            this.sc.chat.message = ":gift";
            this.sc.xmas2.Play(0.5f, 0.0f, 0.0f);
            break;
          case ":supply":
            if (this.sc.developer)
            {
              if (strArray.Length > 1)
              {
                if (strArray[1] == "1" || strArray[1] == "2" || strArray[1] == "3")
                {
                  int int32 = Convert.ToInt32(strArray[1]);
                  this.sc.chat.message = ":supply";
                  this.sc.chat.messageIndex = this.grabindex(int32);
                  if (this.sc.chat.messageIndex != -1)
                    flag1 = true;
                  this.sc.achieve1.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                break;
              }
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.grenades += 15;
              this.sc.milks += 15;
              this.sc.hulks += 10;
              this.sc.pills += 5;
              this.sc.addChatMsg("SUPPLIES --> ", Color.Yellow, " Grenades Milks Pills", Color.Red, 0, ID);
              break;
            }
            break;
          case ":cross":
            this.sc.nextLoadout();
            break;
          case ":pistols":
            if (!this.sc.host && !this.sc.developer)
            {
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            bool flag3 = false;
            bool flag4 = false;
            if (strArray.Length > 1)
            {
              flag3 = strArray[1] == "off";
              flag4 = strArray[1] == "on";
            }
            if (this.sc.allWeapons && strArray.Length == 1 || flag4)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("PISTOLS --> ", Color.Yellow, " ONLY", Color.White, 0, ID);
              this.sc.allWeapons = false;
              flag1 = true;
              this.sc.chat.message = ":pistols on";
              break;
            }
            if (!this.sc.allWeapons && strArray.Length == 1 || flag3)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("WEAPONS --> ", Color.Yellow, " FREE", Color.White, 0, ID);
              this.sc.allWeapons = true;
              flag1 = true;
              this.sc.chat.message = ":pistols off";
              break;
            }
            break;
          case ":hat":
            if (this.sc.developer)
            {
              if (strArray.Length > 1)
              {
                if (strArray.Length > 2)
                {
                  if (!(strArray[1] == "1") && !(strArray[1] == "2") && !(strArray[1] == "3"))
                  {
                    this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                    break;
                  }
                  this.sc.chat.messageIndex = this.grabindex(Convert.ToInt32(strArray[1]));
                  int num;
                  try
                  {
                    num = Convert.ToInt32(strArray[2]);
                  }
                  catch
                  {
                    num = -1;
                  }
                  if (num >= 0 && num <= this.sc.hats.Length - 1)
                  {
                    this.sc.chat.message = ":hat " + (object) num;
                    if (this.sc.chat.messageIndex != -1)
                    {
                      flag1 = true;
                      break;
                    }
                    this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                    break;
                  }
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                int index;
                try
                {
                  index = Convert.ToInt32(strArray[1]);
                }
                catch
                {
                  index = -1;
                }
                if (index >= 0 && index <= this.sc.hats.Length - 1)
                {
                  this.sc.hatindex = index;
                  this.sc.hats[this.sc.hatindex] = 1;
                  this.sc.SaveEquipables();
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.addChatMsg("WEARING HAT --> ", Color.Yellow, " " + this.sc.hatnames[index], Color.White, 0, ID);
                  break;
                }
                break;
              }
              this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :hat player type", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            break;
          case ":reskin":
            if (this.sc.developer)
            {
              if (strArray.Length > 1)
              {
                if (!(strArray[1] == "1") && !(strArray[1] == "2") && !(strArray[1] == "3"))
                {
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                this.sc.chat.messageIndex = this.grabindex(Convert.ToInt32(strArray[1]));
                if (strArray.Length > 2)
                {
                  if (!(strArray[2] == "lando") && !(strArray[2] == "johnny") && !(strArray[2] == "farmer") && !(strArray[2] == "skelly") && !(strArray[2] == "viking") && !(strArray[2] == "daisy") && !(strArray[2] == "man1") && !(strArray[2] == "man2") && !(strArray[2] == "man3") && !(strArray[2] == "man4"))
                  {
                    this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                    break;
                  }
                  this.sc.chat.message = ":reskin " + strArray[2];
                  if (this.sc.chat.messageIndex != -1)
                  {
                    flag1 = true;
                    break;
                  }
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :reskin 1 character", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            break;
          case ":kill":
            if (this.sc.developer)
            {
              if (strArray.Length > 1)
              {
                if (strArray[1] == "1" || strArray[1] == "2" || strArray[1] == "3")
                {
                  int int32 = Convert.ToInt32(strArray[1]);
                  this.sc.chat.message = ":kill";
                  this.sc.chat.messageIndex = this.grabindex(int32);
                  if (this.sc.chat.messageIndex != -1)
                  {
                    flag1 = true;
                    break;
                  }
                  break;
                }
                break;
              }
              this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :kill 1 2 3", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              this.myPlayer.now.health = 0.0f;
              break;
            }
            break;
          case ":kick":
            if (this.sc.host)
            {
              if (strArray.Length > 1)
              {
                if (!(strArray[1] == "1") && !(strArray[1] == "2") && !(strArray[1] == "3"))
                {
                  this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :kick 1 2 3 from bottom", Color.White, 0, ID);
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                int int32 = Convert.ToInt32(strArray[1]);
                this.sc.chat.message = ":kick";
                this.sc.chat.messageIndex = this.grabindex(int32);
                if (this.sc.chat.messageIndex != -1)
                {
                  flag1 = true;
                  break;
                }
                break;
              }
              this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :kick 1 2 3 from bottom", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            break;
          case ":revive":
            if (this.sc.developer)
            {
              if (strArray.Length > 1)
              {
                if (strArray[1] == "1" || strArray[1] == "2" || strArray[1] == "3")
                {
                  int int32 = Convert.ToInt32(strArray[1]);
                  this.sc.chat.message = ":revive";
                  this.sc.chat.messageIndex = this.grabindex(int32);
                  if (this.sc.chat.messageIndex != -1)
                  {
                    flag1 = true;
                    break;
                  }
                  break;
                }
                break;
              }
              this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :revive 1 2 3", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              this.editCam = false;
              this.myPlayer.bloodExists = false;
              this.myPlayer.autoCamOn = false;
              this.myPlayer.autoCamTimer = 0.0f;
              this.myPlayer.isDown = false;
              this.myPlayer.now.health = 198f;
              this.myPlayer.noArms = false;
              if (this.myPlayer.gunChoice > this.pType)
              {
                this.myPlayer.gunChoice = this.myPlayer.primaryChoice;
                this.myPlayer.lastWeapon = this.myPlayer.primaryChoice;
              }
              this.myPlayer.now.weapon = this.myPlayer.gunChoice;
              this.myPlayer.fallState = 0;
              this.localModel = this.sc.player1Model;
              break;
            }
            break;
          case ":bobble":
            if (this.sc.developer || this.sc.host)
            {
              bool flag5 = false;
              bool flag6 = false;
              if (strArray.Length > 1)
              {
                flag5 = strArray[1] == "off";
                flag6 = strArray[1] == "on";
              }
              if (this.sc.hostBobbleheads && strArray.Length == 1 || flag5)
              {
                this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                this.sc.addChatMsg("BOBBLEHEAD --> ", Color.Yellow, " OFF", Color.White, 0, ID);
                this.sc.hostBobbleheads = false;
                flag1 = true;
                this.sc.chat.message = ":bobble off";
                break;
              }
              if (!this.sc.hostBobbleheads && strArray.Length == 1 || flag6)
              {
                this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                this.sc.addChatMsg("BOBBLEHEAD --> ", Color.Yellow, " ON", Color.White, 0, ID);
                this.sc.hostBobbleheads = true;
                flag1 = true;
                this.sc.chat.message = ":bobble on";
                break;
              }
              break;
            }
            break;
          case ":cheats":
            if (!this.sc.host && !this.sc.developer)
            {
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            bool flag7 = false;
            bool flag8 = false;
            if (strArray.Length > 1)
            {
              flag7 = strArray[1] == "off";
              flag8 = strArray[1] == "on";
            }
            if (this.sc.hostAllowCheats && strArray.Length == 1 || flag7)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("CHEATS --> ", Color.Yellow, " DISABLED", Color.White, 0, ID);
              this.sc.hostAllowCheats = false;
              this.handleCheats();
              flag1 = true;
              this.sc.chat.message = ":cheats disabled";
              break;
            }
            if (!this.sc.hostAllowCheats && strArray.Length == 1 || flag8)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("CHEATS --> ", Color.Yellow, " ALLOWED", Color.White, 0, ID);
              this.sc.hostAllowCheats = true;
              this.handleCheats();
              flag1 = true;
              this.sc.chat.message = ":cheats allowed";
              break;
            }
            break;
          case ":friendly":
            if (!this.sc.host && !this.sc.developer)
            {
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            bool flag9 = false;
            bool flag10 = false;
            if (strArray.Length > 1)
            {
              flag9 = strArray[1] == "off";
              flag10 = strArray[1] == "on";
            }
            if (this.sc.hostFriendly && strArray.Length == 1 || flag9)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("FRIENDLY FIRE --> ", Color.Yellow, " TURNED OFF", Color.White, 0, ID);
              this.sc.hostFriendly = false;
              flag1 = true;
              this.sc.chat.message = ":friendly off";
              break;
            }
            if (!this.sc.hostFriendly && strArray.Length == 1 || flag10)
            {
              this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("FRIENDLY FIRE --> ", Color.Yellow, " TURNED ON !!", Color.White, 0, ID);
              this.sc.hostFriendly = true;
              flag1 = true;
              this.sc.chat.message = ":friendly on";
              break;
            }
            break;
          case ":password":
            if (strArray.Length > 1 && this.sc.host)
            {
              if (this.sc.lobby.createdLobby.Count > 0)
              {
                SteamMatchmaking.SetLobbyData(this.sc.lobby.createdLobby[0], "password", strArray[1]);
                this.sc.addChatMsg("PASSWORD --> ", Color.Yellow, " current password is " + strArray[1], Color.White, 0, ID);
                this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT IN A LOBBY", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            if (this.sc.host)
            {
              if (this.sc.lobby.createdLobby.Count > 0)
              {
                SteamMatchmaking.SetLobbyData(this.sc.lobby.createdLobby[0], "password", "");
                this.sc.addChatMsg("PASSWORD --> ", Color.Yellow, " current password is cleared", Color.White, 0, ID);
                this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT IN A LOBBY", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            break;
          case ":invite":
            if (this.sc.host)
            {
              if (this.sc.lobby.createdLobby.Count > 0)
              {
                if (this.sc.lobby.inviteFriend(this.sc.lobby.createdLobby[0]))
                {
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  break;
                }
                this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT ONLINE", Color.White, 0, ID);
                break;
              }
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT IN A LOBBY", Color.White, 0, ID);
              break;
            }
            if (this.sc.lobby.joinedLobby.Count > 0)
            {
              if (this.sc.lobby.inviteFriend(this.sc.lobby.joinedLobby[0]))
              {
                this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT ONLINE", Color.White, 0, ID);
              break;
            }
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT IN A LOBBY", Color.White, 0, ID);
            break;
          case ":skin":
            if (strArray.Length > 1)
            {
              if (!(strArray[1] == "man4") && !(strArray[1] == "man1") && !(strArray[1] == "man2") && !(strArray[1] == "man3") && !(strArray[1] == "daisy") && !(strArray[1] == "skelly") && !(strArray[1] == "farmer") && !(strArray[1] == "johnny") && !(strArray[1] == "lando") && !(strArray[1] == "viking"))
              {
                this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :skin daisy or (skelly,viking,johnny,lando,farmer)", Color.White, 0, ID);
                this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              if (!this.myPlayer.noArms)
              {
                bool flag11 = false;
                if (strArray[1] == "lando")
                {
                  this.sc.gameNPC = 0;
                  flag11 = true;
                }
                if (strArray[1] == "johnny")
                {
                  this.sc.gameNPC = 1;
                  flag11 = true;
                }
                if (strArray[1] == "farmer" && (this.sc.FarmerUnlocked || this.sc.developer))
                {
                  this.sc.gameNPC = 2;
                  flag11 = true;
                }
                if (strArray[1] == "skelly")
                {
                  this.sc.gameNPC = 3;
                  flag11 = true;
                }
                if (strArray[1] == "daisy")
                {
                  this.sc.gameNPC = 4;
                  flag11 = true;
                }
                if (strArray[1] == "viking")
                {
                  this.sc.gameNPC = 5;
                  flag11 = true;
                }
                if (strArray[1] == "man1" && (this.sc.man1 || this.sc.developer))
                {
                  this.sc.gameNPC = 7;
                  flag11 = true;
                }
                if (strArray[1] == "man2" && (this.sc.man2 || this.sc.developer))
                {
                  this.sc.gameNPC = 8;
                  flag11 = true;
                }
                if (strArray[1] == "man3" && (this.sc.man3 || this.sc.developer))
                {
                  this.sc.gameNPC = 9;
                  flag11 = true;
                }
                if (strArray[1] == "man4" && (this.sc.man4 || this.sc.developer))
                {
                  this.sc.gameNPC = 10;
                  flag11 = true;
                }
                if (flag11)
                {
                  this.buildLocalSkin();
                  this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
                  this.sc.addChatMsg("CHARACTER --> ", Color.Yellow, " " + strArray[1], Color.White, 0, ID);
                  break;
                }
                this.sc.addChatMsg("FAILED --> ", Color.Yellow, " NOT UNLOCKED", Color.White, 0, ID);
                this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                break;
              }
              this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU HAVE NO ARMS", Color.White, 0, ID);
              this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
              break;
            }
            this.sc.addChatMsg("USAGE --> ", Color.Yellow, " :skin daisy or (skelly,viking,johhny,lando,farmer)", Color.White, 0, ID);
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            break;
          case ":restart":
            if (this.sc.host)
            {
              bool flag12;
              if (strArray.Length > 1)
              {
                int num1;
                try
                {
                  num1 = Convert.ToInt32(strArray[1]);
                }
                catch
                {
                  num1 = 0;
                }
                if (num1 >= 1 && num1 <= 101)
                {
                  int num2 = num1;
                  if (num2 > (int) this.sc.maxDay() + 1)
                  {
                    flag12 = false;
                    this.sc.addChatMsg("FAILED --> ", Color.Yellow, " MAXIMUM DAY EXCEEDED", Color.White, 0, ID);
                    this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                  }
                  else
                  {
                    this.sc.currentDay = num2;
                    flag12 = true;
                  }
                }
                else
                {
                  flag12 = false;
                  this.sc.addChatMsg("FAILED --> ", Color.Yellow, " CANNOT RESTART ON THAT DAY", Color.White, 0, ID);
                  this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
                }
              }
              else
                flag12 = true;
              if (flag12)
              {
                this.loader = true;
                this.loaderFlag1 = false;
                this.loaderFlag2 = false;
                break;
              }
              break;
            }
            this.sc.addChatMsg("FAILED --> ", Color.Yellow, " YOU ARE NOT THE HOST", Color.White, 0, ID);
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            break;
          case ":info":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.echoCOMMANDS();
            flag1 = false;
            break;
          case ":":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.echoCOMMANDS();
            flag1 = false;
            break;
          case ":?":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.echoCOMMANDS();
            flag1 = false;
            break;
          case ":more":
            this.sc.accept.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.echoCOMMANDS2();
            flag1 = false;
            break;
          default:
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            flag1 = false;
            break;
        }
      }
      else
      {
        this.hulkcan.sound.Play(this.sc.ev, 0.0f, 0.0f);
        flag1 = true;
      }
      return flag1;
    }

    public void setCode(int i)
    {
      if (i == 1 && this.sc.goldKeys.kc1Pos != Vector3.Zero)
      {
        if (this.sc.host)
        {
          Random random = new Random(this.globalSeed + 155);
          this.sc.code1[this.mazeid, 0] = random.Next(1, 10);
          this.sc.code1[this.mazeid, 1] = random.Next(0, 10);
          this.sc.code1[this.mazeid, 2] = random.Next(0, 10);
        }
        else if (this.hostcode1 == 0)
        {
          Random random = new Random(this.globalSeed + 155);
          this.sc.code1[this.mazeid, 0] = random.Next(1, 10);
          this.sc.code1[this.mazeid, 1] = random.Next(0, 10);
          this.sc.code1[this.mazeid, 2] = random.Next(0, 10);
        }
        else
        {
          int num1 = this.hostcode1 / 100;
          int num2 = (this.hostcode1 - num1 * 100) / 10;
          int num3 = this.hostcode1 - num1 * 100 - num2 * 10;
          this.sc.code1[this.mazeid, 0] = num1;
          this.sc.code1[this.mazeid, 1] = num2;
          this.sc.code1[this.mazeid, 2] = num3;
        }
      }
      if (i == 2 && this.sc.goldKeys.kc2Pos != Vector3.Zero)
      {
        if (this.sc.host)
        {
          Random random = new Random(this.globalSeed + 165);
          this.sc.code2[this.mazeid, 0] = random.Next(1, 10);
          this.sc.code2[this.mazeid, 1] = random.Next(0, 10);
          this.sc.code2[this.mazeid, 2] = random.Next(0, 10);
        }
        else if (this.hostcode2 == 0)
        {
          Random random = new Random(this.globalSeed + 165);
          this.sc.code2[this.mazeid, 0] = random.Next(1, 10);
          this.sc.code2[this.mazeid, 1] = random.Next(0, 10);
          this.sc.code2[this.mazeid, 2] = random.Next(0, 10);
        }
        else
        {
          int num4 = this.hostcode2 / 100;
          int num5 = (this.hostcode2 - num4 * 100) / 10;
          int num6 = this.hostcode2 - num4 * 100 - num5 * 10;
          this.sc.code2[this.mazeid, 0] = num4;
          this.sc.code2[this.mazeid, 1] = num5;
          this.sc.code2[this.mazeid, 2] = num6;
        }
      }
      if (i != 3 || !(this.sc.goldKeys.kc3Pos != Vector3.Zero))
        return;
      if (this.sc.host)
      {
        Random random = new Random(this.globalSeed + 175);
        this.sc.code3[this.mazeid, 0] = random.Next(1, 10);
        this.sc.code3[this.mazeid, 1] = random.Next(0, 10);
        this.sc.code3[this.mazeid, 2] = random.Next(0, 10);
      }
      else if (this.hostcode3 == 0)
      {
        Random random = new Random(this.globalSeed + 175);
        this.sc.code3[this.mazeid, 0] = random.Next(1, 10);
        this.sc.code3[this.mazeid, 1] = random.Next(0, 10);
        this.sc.code3[this.mazeid, 2] = random.Next(0, 10);
      }
      else
      {
        int num7 = this.hostcode3 / 100;
        int num8 = (this.hostcode3 - num7 * 100) / 10;
        int num9 = this.hostcode3 - num7 * 100 - num8 * 10;
        this.sc.code3[this.mazeid, 0] = num7;
        this.sc.code3[this.mazeid, 1] = num8;
        this.sc.code3[this.mazeid, 2] = num9;
      }
    }

    private void checkWeaponGlow()
    {
      this.weaponIsGlowing = false;
      this.weaponGlowIndex = -1;
      float num1 = 0.85f;
      for (int index = 0; index < this.sc.wallguns.Length; index += 2)
      {
        if (this.sc.weapon_Unlock[index] == 1)
        {
          Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, this.sc.wallguns[index] * Matrix.CreateTranslation(3000f, 0.0f, 3000f));
          float num2 = Vector3.DistanceSquared(this.myPlayer.displayState.npcPosition, vector3_1);
          if ((double) num2 < 16900.0)
          {
            Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
            Vector3 vector3_2 = -vector2 * 10f + this.campos;
            Vector3 vector1 = Vector3.Normalize(vector3_1 - vector3_2);
            if ((double) Vector3.Dot(vector1, vector2) >= (double) num1)
            {
              this.weaponGlowDist = num2;
              this.weaponIsGlowing = true;
              this.weaponGlowIndex = index;
              num1 = Vector3.Dot(vector1, vector2);
            }
          }
        }
      }
    }

    private void switchBossMusic()
    {
      this.sc.corncobMusic.Stop();
      this.sc.mainTheme = this.princess[0].bossTheme;
      this.sc.corncobMusic = this.sc.mainTheme.CreateInstance();
      this.sc.corncobMusic.IsLooped = true;
      this.sc.corncobMusic.Volume = this.victoryMusic * this.sc.mv;
    }

    protected void PlayPigDialog(int indy)
    {
      if (this.loads.Contains(2))
        return;
      this.cuttyBoss[Cutty4.whichPigTalks].pigLine = indy;
      this.cuttyBoss[Cutty4.whichPigTalks].pigJawIndex = -1;
      this.loads.Add(2);
    }

    protected void PlayBossDialog(int indy)
    {
      if (this.loads.Contains(3))
        return;
      this.princess[Princess4.whichPigTalks].pigLine = indy;
      this.princess[Princess4.whichPigTalks].pigJawIndex = -1;
      this.loads.Add(3);
    }

    protected void PlayDialogue(int myIndex, bool sendData)
    {
      if (this.loads.Contains(1))
        return;
      this.farmerGonnaSpit = false;
      this.farmerGonnaBleed = false;
      this.farmerGonnaBleedMouth = false;
      if (this.rr.Next(1, 100) < 20)
        this.farmerGonnaSpit = true;
      if (this.rr.Next(1, 100) < 40)
        this.farmerGonnaBleed = true;
      if (myIndex == 146)
      {
        this.greyDay = new Color(200, (int) byte.MaxValue, 15, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
      }
      if (myIndex == 157)
      {
        this.greyDay = new Color(0, 0, 0, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
      }
      if (myIndex == 159)
      {
        this.greyDay = new Color(220, 25, 225, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
      }
      if (myIndex == 160)
      {
        this.greyDay = new Color(250, 5, 5, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
        this.overrideDay = true;
      }
      if (myIndex == 161)
      {
        this.greyDay = new Color(5, 75, 205, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
        this.overrideDay = true;
      }
      if (myIndex == 162)
      {
        this.greyDay = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        this.colorDay = this.greyDay;
        this.overrideDay = true;
      }
      if (myIndex == 142 || myIndex == 143)
      {
        this.farmerManager("convulse1");
        this.farmerGonnaBleedMouth = true;
        this.farmerGonnaSpit = false;
        this.farmerGonnaBleed = false;
      }
      if (myIndex == 118 || myIndex == 119 || myIndex == 126 || myIndex == (int) sbyte.MaxValue)
      {
        this.farmerManager("wave");
        this.farmerGonnaSpit = true;
      }
      if (myIndex == 123 || myIndex == 124 || myIndex == 125)
        this.farmerManager("pat");
      if (myIndex == 124)
      {
        this.farmerManager("kick");
        this.farmerGonnaBleed = true;
      }
      if (myIndex == 140)
      {
        Matrix pos = Matrix.CreateFromYawPitchRoll(0.0f, 1f, 0.0f) * Matrix.CreateTranslation(3120f, (float) this.rr.Next(30, 60), 4590f);
        Vector3 vel = new Vector3((float) this.rr.Next(40, 80) / 100f, 0.0f, (float) this.rr.Next(-40, 40) / 100f);
        int num = this.rr.Next(1, 4);
        if (num == 1)
          this.dropPickup(ref this.bulletbox, (float) this.rr.Next(25, 55) / 100f, 2.2f, 0.3f, pos, vel, 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 25, 120f, 210f, 2, false);
        if (num == 2)
          this.dropPickup(ref this.milk, (float) this.rr.Next(25, 55) / 100f, 1.4f, 1.35f, pos, vel, 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 25, 120f, 210f, 1, false);
        if (num == 3)
          this.dropPickup(ref this.hulkcan, (float) this.rr.Next(25, 55) / 100f, 1.4f, 1.5f, pos, vel, 1, (float) (-(double) this.rr.Next(6, 10) / 100.0), 35, 120f, 210f, 2, false);
      }
      if (myIndex >= 173 && myIndex <= 177)
      {
        if (!sendData)
          ++this.skullhit;
        if (!this.skullexposed)
        {
          this.skullexposed = true;
          this.sc.SavePrefs();
          this.memoIcon = 2;
          this.memoTimer = 190;
          BloodnBacon4PT.memo.Length = 0;
          if (this.sc.star2)
            BloodnBacon4PT.memo.Append("secret star found again");
          else
            BloodnBacon4PT.memo.Append("Secret Star Found !");
          this.sc.star2 = true;
          this.sc.grow.Play(this.sc.ev, 0.0f, 0.0f);
          this.shootmeCounter = 400;
          this.bloodburst(new Vector3(3104f, 95f, 4595f), new Vector3(1f, (float) this.rr.Next(-100, 100) / 150f, (float) this.rr.Next(-100, 100) / 150f));
          this.farmerModel = this.sc.farmerModelskull;
          this.sc.crunch.Play(this.sc.ev, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          this.farmerManager("vomit");
          this.farmerGonnaBleedMouth = true;
          this.farmerGonnaBleed = false;
          this.farmerGonnaSpit = false;
          this.mouthamt = 60;
        }
        else
        {
          this.shootmeCounter = 0;
          int num = this.rr.Next(0, 3);
          if (myIndex == 173)
          {
            this.farmerGonnaBleedMouth = false;
            this.farmerGonnaBleed = false;
            this.farmerGonnaSpit = false;
            this.shootmeCounter = 400;
          }
          else
          {
            if (num == 1)
              this.farmerManager("vomit");
            if (num == 2)
              this.farmerManager("vomit2");
            this.farmerGonnaBleedMouth = true;
            this.farmerGonnaBleed = false;
            this.farmerGonnaSpit = false;
            this.mouthamt = this.rr.Next(30, 70);
          }
        }
      }
      if ((this.shootmeTotalCount > 0 || myIndex == 141) && (this.shootmeTotalCount >= 5 || myIndex == 141))
      {
        this.totalGrenadedrop = this.rr.Next(12, 14);
        this.shootmeTotalCount = 0;
        myIndex = 141;
      }
      this.talkIndex = myIndex;
      this.farmerJawIndex = -1;
      this.loads.Add(1);
      if (!sendData || this.remPlayer.Count <= 1)
        return;
      this.myPlayer.farmerTalk = true;
      this.myPlayer.farmerIndex = (byte) this.talkIndex;
    }

    private void farmerManager(string type)
    {
      if (!(type != ""))
        return;
      switch (type)
      {
        case "wave":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(25);
          this.farmerAnim.animList.Add(26);
          this.farmerAnim.animList.Add(27);
          this.farmerAnim.animList.Add(28);
          this.farmerAnim.animClip = 1;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 75;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "vomit":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(12);
          this.farmerAnim.animList.Add(13);
          this.farmerAnim.animList.Add(14);
          this.farmerAnim.animList.Add(15);
          this.farmerAnim.animList.Add(16);
          this.farmerAnim.animList.Add(17);
          this.farmerAnim.animList.Add(22);
          this.farmerAnim.animList.Add(23);
          this.farmerAnim.animList.Add(24);
          this.farmerAnim.animList.Add(26);
          this.farmerAnim.animList.Add(27);
          this.farmerAnim.animList.Add(28);
          this.farmerAnim.animClip = 6;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 162;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "vomit2":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(12);
          this.farmerAnim.animList.Add(13);
          this.farmerAnim.animList.Add(14);
          this.farmerAnim.animList.Add(15);
          this.farmerAnim.animList.Add(16);
          this.farmerAnim.animList.Add(17);
          this.farmerAnim.animList.Add(22);
          this.farmerAnim.animList.Add(23);
          this.farmerAnim.animList.Add(24);
          this.farmerAnim.animList.Add(26);
          this.farmerAnim.animList.Add(27);
          this.farmerAnim.animList.Add(28);
          this.farmerAnim.animClip = 7;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 87;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "convulse1":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(2);
          this.farmerAnim.animList.Add(3);
          this.farmerAnim.animList.Add(4);
          this.farmerAnim.animList.Add(7);
          this.farmerAnim.animList.Add(8);
          this.farmerAnim.animList.Add(9);
          this.farmerAnim.animList.Add(12);
          this.farmerAnim.animList.Add(13);
          this.farmerAnim.animList.Add(14);
          this.farmerAnim.animList.Add(15);
          this.farmerAnim.animList.Add(16);
          this.farmerAnim.animList.Add(22);
          this.farmerAnim.animList.Add(23);
          this.farmerAnim.animList.Add(24);
          this.farmerAnim.animList.Add(26);
          this.farmerAnim.animList.Add(27);
          this.farmerAnim.animList.Add(28);
          this.farmerAnim.animClip = 5;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 210;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "kick":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(7);
          this.farmerAnim.animList.Add(8);
          this.farmerAnim.animList.Add(9);
          this.farmerAnim.animClip = 4;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 150;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "pat":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(14);
          this.farmerAnim.animList.Add(22);
          this.farmerAnim.animList.Add(23);
          this.farmerAnim.animList.Add(24);
          this.farmerAnim.animList.Add(26);
          this.farmerAnim.animList.Add(27);
          this.farmerAnim.animList.Add(28);
          this.farmerAnim.animClip = 2;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 150;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
        case "nose":
          this.farmerAnim.animList.Clear();
          this.farmerAnim.animList.Add(22);
          this.farmerAnim.animList.Add(23);
          this.farmerAnim.animList.Add(24);
          this.farmerAnim.animClip = 3;
          this.farmerAnim.animCount = 0.0f;
          this.farmerAnim.animMin = 0;
          this.farmerAnim.animMax = 95;
          this.farmerAnim.animTween = 0.0f;
          this.farmerAnim.animLoop = 0;
          break;
      }
    }

    private void animManager(string type)
    {
      if (this.myPlayer.animClip != -1)
      {
        if (this.myPlayer.animClip == 18)
        {
          if ((double) this.myPlayer.animCount == 20.0)
            this.secondaryCock.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
          if ((double) this.myPlayer.animCount == 40.0 && !this.myPlayer.isDown)
          {
            if (this.myPlayer.ammo[this.myPlayer.lastWeapon] > 0)
            {
              if (this.myPlayer.mag[this.myPlayer.lastWeapon] >= this.myPlayer.resetmag[this.myPlayer.lastWeapon])
              {
                this.myPlayer.animLoop = 0;
              }
              else
              {
                ++this.myPlayer.mag[this.myPlayer.lastWeapon];
                --this.myPlayer.ammo[this.myPlayer.lastWeapon];
              }
            }
            else
              this.myPlayer.animLoop = 0;
          }
        }
        if (this.myPlayer.animClip == 17 && (double) this.myPlayer.animCount == 15.0)
        {
          this.Gunleft = (float) this.rr.Next(-30, -15) / 100f;
          this.GunupForce = (float) this.rr.Next(50, 70) / 100f;
          this.GunvelocShell = Vector3.Transform(new Vector3(this.Gunleft, this.GunupForce, 0.0f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
          this.GunInherit = Vector3.Transform(new Vector3(-this.dirInput.X, 0.0f, this.dirInput.Y), Matrix.CreateRotationY(this.headRot)) * (float) ((double) Math.Abs(this.dirInput.X) * 1.7999999523162842 + (double) Math.Abs(this.dirInput.Y) * 2.0);
          this.Gunoffspin = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
          this.dropBulletShell(ref this.secondShell, 0.45f, 0.7f, 0.28f, this.Gunoffspin * this.sc.shellExit[8] * this.myPlayer.pistolHand, 0.8f * this.GunInherit + this.GunvelocShell, true, -0.06f, 15, 150f, 350f);
        }
        if (this.myPlayer.animClip == 13)
        {
          if ((double) this.myPlayer.animCount == 12.0)
            this.sc.melee.Play(this.sc.ev, -0.4f, 0.0f);
          if ((double) this.myPlayer.animCount == 18.0)
          {
            this.myPlayer.gunChoice = 100;
            float num1 = 1f;
            float num2 = 0.5f;
            if ((double) this.myPlayer.displayState.npcTilt < 0.0)
              num1 = (float) ((double) Math.Abs(this.headTilt) / 2.0 + 1.1000000238418579);
            if (this.myPlayer.milkEffects > 0)
              num1 += 0.6f;
            if ((double) this.myPlayer.displayState.npcTilt > 0.0)
              num2 = (float) (0.33000001311302185 - (double) Math.Abs(this.headTilt) / 4.0);
            this.GunvelocShell = Vector3.Transform(new Vector3(0.0f, 1.2f, 8f) * num1, Matrix.CreateRotationX(this.headTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            this.Gunoffspin = !this.myPlayer.closeCam ? Matrix.CreateTranslation(-22.6f, 42.898f, 1.331f) * this.myPlayer.pistolHand : Matrix.CreateTranslation(-17f, 41f, 17f) * this.myPlayer.pistolHand;
            ushort seed = (ushort) this.rr.Next(0, 25000);
            int grenAge = (int) this.myPlayer.grenAge;
            if (!remotePlayer4.isGone)
            {
              this.myPlayer.grenToss = true;
              this.myPlayer.grenAge = (byte) grenAge;
              this.myPlayer.grenPos = Vector3.Transform(Vector3.Zero, this.Gunoffspin);
              this.myPlayer.grenVeloc = this.GunvelocShell + this.myPlayer.vec;
              this.myPlayer.grenBounce = (byte) ((double) byte.MaxValue * (double) num2);
              this.myPlayer.grenSeed = seed;
            }
            this.throwGrenade(ref this.grenadeThrow, Vector3.Transform(Vector3.Zero, this.Gunoffspin), this.GunvelocShell + this.myPlayer.vec, (byte) ((double) byte.MaxValue * (double) num2), seed, true, 1, grenAge);
          }
          if (!this.myPlayer.noArms && (double) this.myPlayer.animCount >= 60.0 && (double) this.myPlayer.animCount <= 69.0)
          {
            if (this.sc.grenades <= 0)
            {
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
              type = "quickswitch";
            }
            if (this.sc.grenades > 0)
              this.myPlayer.gunChoice = this.gType;
          }
        }
        if (this.myPlayer.animClip == 14)
        {
          if ((double) this.myPlayer.animCount == 20.0)
            this.sc.drinkMilk.Play(this.sc.ev, 0.0f, 0.0f);
          if ((double) this.myPlayer.animCount >= 90.0)
          {
            if (this.myPlayer.gunChoice == this.mType)
            {
              this.myPlayer.milkEffects = 2000;
              this.myPlayer.onMilk = true;
              --this.sc.milks;
              this.sc.trophy.leaderMostMilkDrank();
              if (this.sc.milks < 0)
                this.sc.milks = 0;
            }
            if (this.myPlayer.gunChoice == this.hType)
            {
              this.sc.trophy.win(this.sc.trophy.hulk);
              this.sc.hulkRoar.Play(this.sc.ev, 0.0f, 0.0f);
              this.myPlayer.hulkEffects = 2000;
              this.myPlayer.onHulk = true;
              --this.sc.hulks;
              if (this.sc.hulks < 0)
                this.sc.hulks = 0;
              if (this.localID == 0)
                this.texture2D_1 = this.sc.texture2D_14;
              if (this.localID == 1)
                this.texture2D_1 = this.sc.whiteNPCTextureGreen2;
              if (this.localID == 2)
                this.texture2D_1 = this.sc.farmerGreen;
              if (this.localID == 3)
                this.texture2D_1 = this.sc.skelGreen;
              if (this.localID == 4)
                this.texture2D_1 = this.sc.daisyGreen;
              if (this.localID == 5)
                this.texture2D_1 = this.sc.vikingGreen;
              if (this.localID == 7)
                this.texture2D_1 = this.sc.strawGreen;
              if (this.localID == 8)
                this.texture2D_1 = this.sc.robotGreen;
              if (this.localID == 9)
                this.texture2D_1 = this.sc.golemGreen;
              if (this.localID == 10)
                this.texture2D_1 = this.sc.astroGreen;
              this.localClean = 0.4f;
              this.localCleanOn = true;
            }
            if (!this.myPlayer.noArms)
            {
              this.myPlayer.nextgunChoice = this.myPlayer.primaryChoice;
              type = "switch";
            }
          }
        }
        this.stunStrike = false;
        if (this.myPlayer.animClip == 6)
        {
          if ((double) this.myPlayer.animCount == 5.0)
          {
            if (!this.myPlayer.onHulk)
              this.sc.melee.Play(this.sc.ev, (float) this.rr.Next(-30, 0) / 100f, 0.5f);
            else
              this.sc.roar.Play(this.sc.ev, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          }
          if ((double) this.myPlayer.animCount > 7.5 && (double) this.myPlayer.animCount < 20.0)
            this.stunStrike = true;
        }
        if (this.myPlayer.animClip == 3 && this.handtype[this.myPlayer.gunChoice] == 1)
        {
          if ((double) this.myPlayer.animCount == (double) (this.myPlayer.animMax - 25))
          {
            this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon] / 2;
            this.chamberRot = 0.0f;
            this.chamberSpin = 0.0f;
          }
          if ((double) this.myPlayer.animCount == (double) (this.myPlayer.animMax - 1))
            this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon];
        }
        if (this.myPlayer.animClip == 4 && this.handtype[this.myPlayer.gunChoice] == 2)
        {
          if ((double) this.myPlayer.animCount == 1.0 || (double) this.myPlayer.animCount == 28.0 && this.myPlayer.gunChoice == 12)
          {
            if (this.myPlayer.mag[this.myPlayer.lastWeapon] > 0)
              this.myPlayer.ammo[this.myPlayer.lastWeapon] += this.myPlayer.mag[this.myPlayer.lastWeapon];
            this.myPlayer.mag[this.myPlayer.lastWeapon] = 0;
          }
          if ((double) this.myPlayer.animCount == (double) (this.myPlayer.animMax - 1))
          {
            if (this.myPlayer.ammo[this.myPlayer.lastWeapon] < this.myPlayer.resetmag[this.myPlayer.lastWeapon])
            {
              this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.ammo[this.myPlayer.lastWeapon];
              this.myPlayer.ammo[this.myPlayer.lastWeapon] = 0;
            }
            else
            {
              this.myPlayer.mag[this.myPlayer.lastWeapon] = this.myPlayer.resetmag[this.myPlayer.lastWeapon];
              this.myPlayer.ammo[this.myPlayer.lastWeapon] -= this.myPlayer.resetmag[this.myPlayer.lastWeapon];
            }
          }
        }
        if (this.myPlayer.animClip == 5 && (double) this.myPlayer.animCount == (double) (this.myPlayer.animMax / 2 + 2))
        {
          this.myPlayer.gunChoice = this.myPlayer.nextgunChoice;
          if (this.myPlayer.nextgunChoice < this.gType)
            this.myPlayer.lastWeapon = this.myPlayer.nextgunChoice;
          if (this.myPlayer.gunChoice == 16)
            this.setPaintBallGun(true);
        }
      }
      if (!(type != "") || this.myPlayer.animClip == 6)
        return;
      if (this.myPlayer.noArms)
      {
        this.myPlayer.animList.Clear();
        this.myPlayer.animList.Add(21);
        this.myPlayer.animList.Add(25);
        this.myPlayer.animClip = 15;
        this.myPlayer.animCount = 0.0f;
        this.myPlayer.animMin = 0;
        this.myPlayer.animMax = 37;
        this.myPlayer.animTween = 0.0f;
        this.myPlayer.animLoop = 2;
        this.myPlayer.now.animation = 15;
        this.sc.meaty.Play(this.sc.ev * 1f, (float) this.rr.Next(-15, 15) / 100f, 0.0f);
        if (this.rr.Next(1, 100) < 20)
          this.sc.manyell.Play(this.sc.ev * 0.3f, (float) this.rr.Next(-7, 12) / 100f, 0.0f);
        this.myPlayer.armTimer = 150;
      }
      else
      {
        if (type == "pump1" && !this.myPlayer.isDown)
        {
          this.myPlayer.now.animation = 21;
          this.sc.pump[this.rr.Next(0, 2)].Play(this.sc.ev, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          this.waterRamp1 = 0.0001f;
          --this.int_9;
          if (this.int_9 < 0)
            this.int_9 = 0;
          this.myPlayer.now.byte_0 = (byte) this.int_9;
          this.localPump = 1;
        }
        if (type == "pump2" && !this.myPlayer.isDown)
        {
          this.myPlayer.now.animation = 22;
          this.sc.pump[this.rr.Next(0, 2)].Play(this.sc.ev, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          this.waterRamp2 = 0.0001f;
          --this.int_10;
          if (this.int_10 < 0)
            this.int_10 = 0;
          this.myPlayer.now.byte_1 = (byte) this.int_10;
          this.localPump = 2;
        }
        if (type == "pumpit" && !this.myPlayer.isDown && this.myPlayer.animClip != 17)
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animClip = 17;
          this.myPlayer.animList.Add(21);
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(24);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 0;
          this.myPlayer.animMax = 25;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 17;
          this.sc.shotgunPump.Play(this.sc.ev, 0.0f, 0.0f);
        }
        else if (type == "drink" && !this.myPlayer.isDown)
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animList.Add(18);
          this.myPlayer.animClip = 14;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 0;
          this.myPlayer.animMax = 90;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 14;
          this.dpadCount = this.sc.milks;
          this.dpadTimer = 130;
        }
        else if (type == "gulp" && !this.myPlayer.isDown)
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animList.Add(18);
          this.myPlayer.animClip = 14;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 0;
          this.myPlayer.animMax = 90;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 14;
          this.dpadCount = this.sc.hulks;
          this.dpadTimer = 130;
        }
        else if (type == "throw" && !this.myPlayer.isDown)
        {
          this.myPlayer.animList.Clear();
          if (!this.myPlayer.closeCam)
          {
            this.myPlayer.animList.Add(16);
            this.myPlayer.animList.Add(25);
          }
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animClip = 13;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 0;
          this.myPlayer.animMax = 77;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 13;
          this.dpadCount = this.sc.grenades;
          this.dpadTimer = 130;
        }
        else if (type == "clean" && !this.myPlayer.isDown)
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(21);
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(24);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animClip = 12;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 1;
          this.myPlayer.animMax = 192;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 12;
        }
        else if (type == "melee" && !this.myPlayer.isDown && this.myPlayer.animClip != 14 && this.myPlayer.animClip != 5)
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(24);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          this.myPlayer.animList.Add(16);
          this.myPlayer.animClip = 6;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 1;
          this.myPlayer.animMax = 37;
          if (this.myPlayer.onHulk)
            this.myPlayer.animMax = 25;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 6;
        }
        else if (type == "switch" && (!this.myPlayer.isDown || this.myPlayer.gunChoice == this.pType))
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(24);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          if (this.myPlayer.nextgunChoice != this.pType)
            this.sc.switchweapon.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-10, 10) / 100f, 0.5f);
          else
            this.pill.sound.Play(this.sc.ev, 0.0f, 0.0f);
          this.myPlayer.animClip = 5;
          this.myPlayer.animCount = 0.0f;
          this.myPlayer.animMin = 0;
          this.myPlayer.animMax = 45;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 5;
        }
        else if (type == "quickswitch" && (!this.myPlayer.isDown || this.myPlayer.gunChoice == this.pType))
        {
          this.myPlayer.animList.Clear();
          this.myPlayer.animList.Add(22);
          this.myPlayer.animList.Add(23);
          this.myPlayer.animList.Add(24);
          this.myPlayer.animList.Add(26);
          this.myPlayer.animList.Add(27);
          this.myPlayer.animList.Add(28);
          if (this.myPlayer.nextgunChoice != this.pType)
            this.sc.switchweapon.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-10, 10) / 100f, 0.5f);
          else
            this.pill.sound.Play(this.sc.ev, 0.0f, 0.0f);
          this.myPlayer.animClip = 5;
          this.myPlayer.animCount = 15f;
          this.myPlayer.animMin = 20;
          this.myPlayer.animMax = 45;
          this.myPlayer.animTween = 0.0f;
          this.myPlayer.animLoop = 0;
          this.myPlayer.now.animation = 5;
        }
        else
        {
          if (!(type == "guncock") || this.myPlayer.animClip == 3 || this.myPlayer.animClip == 4)
            return;
          if (this.handtype[this.myPlayer.gunChoice] == 1)
          {
            this.myPlayer.animList.Clear();
            this.myPlayer.animList.Add(22);
            this.myPlayer.animList.Add(23);
            this.myPlayer.animList.Add(24);
            this.myPlayer.animList.Add(26);
            this.myPlayer.animList.Add(27);
            this.myPlayer.animList.Add(28);
            this.primaryCock.Play(this.sc.ev * 0.8f, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.myPlayer.animClip = 3;
            this.myPlayer.animCount = 0.0f;
            this.myPlayer.animMin = 0;
            this.myPlayer.animMax = 62;
            this.myPlayer.animTween = 0.0f;
            this.myPlayer.animLoop = 0;
            this.myPlayer.now.animation = 3;
          }
          else if (this.myPlayer.gunChoice == 8)
          {
            this.myPlayer.animList.Clear();
            this.myPlayer.animClip = 18;
            this.myPlayer.animList.Add(21);
            this.myPlayer.animList.Add(22);
            this.myPlayer.animList.Add(23);
            this.myPlayer.animList.Add(24);
            this.myPlayer.animList.Add(26);
            this.myPlayer.animList.Add(27);
            this.myPlayer.animList.Add(28);
            this.myPlayer.animCount = 0.0f;
            this.myPlayer.animMin = 15;
            this.myPlayer.animMax = 47;
            this.myPlayer.animTween = 0.0f;
            this.myPlayer.animLoop = 10;
            this.myPlayer.now.animation = 18;
          }
          else if (this.myPlayer.gunChoice == 12)
          {
            this.myPlayer.animList.Clear();
            this.myPlayer.animList.Add(22);
            this.myPlayer.animList.Add(23);
            this.myPlayer.animList.Add(24);
            this.myPlayer.animList.Add(26);
            this.myPlayer.animList.Add(27);
            this.myPlayer.animList.Add(28);
            this.secondaryCock.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.myPlayer.animClip = 4;
            this.myPlayer.animCount = 26f;
            this.myPlayer.animMin = 26;
            this.myPlayer.animMax = 100;
            this.myPlayer.animTween = 0.0f;
            this.myPlayer.animLoop = 0;
            this.myPlayer.now.animation = 4;
          }
          else
          {
            if (this.handtype[this.myPlayer.gunChoice] != 2)
              return;
            this.myPlayer.animList.Clear();
            this.myPlayer.animList.Add(22);
            this.myPlayer.animList.Add(23);
            this.myPlayer.animList.Add(24);
            this.myPlayer.animList.Add(26);
            this.myPlayer.animList.Add(27);
            this.myPlayer.animList.Add(28);
            this.secondaryCock.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.myPlayer.animClip = 4;
            this.myPlayer.animCount = 0.0f;
            this.myPlayer.animMin = 0;
            this.myPlayer.animMax = 100;
            this.myPlayer.animTween = 0.0f;
            this.myPlayer.animLoop = 0;
            this.myPlayer.now.animation = 4;
          }
        }
      }
    }

    private void animManager2(int ii)
    {
      if (this.remPlayer[ii].r.animClip == 18 && (double) this.remPlayer[ii].r.animCount == 20.0)
        this.remPlayer[ii].r.secondaryCock_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
      if (this.remPlayer[ii].r.animClip == 17 && (double) this.remPlayer[ii].r.animCount == 15.0)
      {
        this.f1 = (float) this.rr.Next(-30, -15) / 100f;
        this.f2 = (float) this.rr.Next(50, 70) / 100f;
        this.v1 = Vector3.Transform(new Vector3(this.f1, this.f2, 0.0f), Matrix.CreateRotationX(this.remPlayer[ii].r.displayState.npcTilt) * Matrix.CreateRotationY(this.remPlayer[ii].r.displayState.npcRotation));
        this.m1 = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * Matrix.CreateRotationY((float) this.rr.Next(-50, 50) / 100f);
        this.dropBulletShell(ref this.secondShell_rem, 0.45f, 0.7f, 0.28f, this.m1 * this.sc.shellExit[8] * this.remPlayer[ii].r.pistolHand, this.v1, false, -0.06f, 15, 150f, 350f);
      }
      if (this.remPlayer[ii].r.now.animation == 18)
      {
        this.remPlayer[ii].r.animList.Clear();
        this.remPlayer[ii].r.animClip = 18;
        this.remPlayer[ii].r.animList.Add(21);
        this.remPlayer[ii].r.animList.Add(22);
        this.remPlayer[ii].r.animList.Add(23);
        this.remPlayer[ii].r.animList.Add(24);
        this.remPlayer[ii].r.animList.Add(26);
        this.remPlayer[ii].r.animList.Add(27);
        this.remPlayer[ii].r.animList.Add(28);
        this.remPlayer[ii].r.animCount = 0.0f;
        this.remPlayer[ii].r.animMin = 15;
        this.remPlayer[ii].r.animMax = 47;
        this.remPlayer[ii].r.animTween = 0.0f;
        this.remPlayer[ii].r.animLoop = 3;
      }
      else if (this.remPlayer[ii].r.now.animation == 17)
      {
        this.remPlayer[ii].r.animList.Clear();
        this.remPlayer[ii].r.animList.Add(21);
        this.remPlayer[ii].r.animList.Add(22);
        this.remPlayer[ii].r.animList.Add(23);
        this.remPlayer[ii].r.animList.Add(24);
        this.remPlayer[ii].r.animList.Add(28);
        this.remPlayer[ii].r.animClip = 17;
        this.remPlayer[ii].r.animCount = 0.0f;
        this.remPlayer[ii].r.animMin = 0;
        this.remPlayer[ii].r.animMax = 25;
        this.remPlayer[ii].r.animTween = 0.0f;
        this.remPlayer[ii].r.animLoop = 0;
        this.sc.shotgunPump.Play(this.sc.ev * this.remPlayer[ii].r.vol, 0.0f, 0.0f);
      }
      else
      {
        if (this.remPlayer[ii].r.now.animation == 21)
        {
          this.sc.pump[this.rr.Next(0, 2)].Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          this.waterRamp1 = 0.0001f;
        }
        if (this.remPlayer[ii].r.now.animation == 22)
        {
          this.sc.pump[this.rr.Next(0, 2)].Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
          this.waterRamp2 = 0.0001f;
        }
        if (this.remPlayer[ii].r.now.animation == 15)
        {
          this.remPlayer[ii].r.animList.Clear();
          this.remPlayer[ii].r.animList.Add(21);
          this.remPlayer[ii].r.animList.Add(25);
          this.remPlayer[ii].r.animClip = 15;
          this.remPlayer[ii].r.animCount = 0.0f;
          this.remPlayer[ii].r.animMin = 0;
          this.remPlayer[ii].r.animMax = 37;
          this.remPlayer[ii].r.animTween = 0.0f;
          this.remPlayer[ii].r.animLoop = 2;
          this.sc.meaty.Play(this.sc.ev * 1f, (float) this.rr.Next(-15, 15) / 100f, 0.0f);
          if (this.rr.Next(1, 100) < 20)
            this.sc.manyell.Play(this.sc.ev * 0.3f, (float) this.rr.Next(-7, 12) / 100f, 0.0f);
          this.remPlayer[ii].r.armTimer = 150;
        }
        else if (this.remPlayer[ii].r.now.animation == 14)
        {
          this.remPlayer[ii].r.animList.Clear();
          this.remPlayer[ii].r.animList.Add(22);
          this.remPlayer[ii].r.animList.Add(23);
          this.remPlayer[ii].r.animList.Add(26);
          this.remPlayer[ii].r.animList.Add(27);
          this.remPlayer[ii].r.animList.Add(28);
          this.remPlayer[ii].r.animList.Add(18);
          this.remPlayer[ii].r.animClip = 14;
          this.remPlayer[ii].r.animCount = 0.0f;
          this.remPlayer[ii].r.animMin = 0;
          this.remPlayer[ii].r.animMax = 90;
          this.remPlayer[ii].r.animTween = 0.0f;
          this.remPlayer[ii].r.animLoop = 0;
        }
        else if (this.remPlayer[ii].r.now.animation == 13)
        {
          this.remPlayer[ii].r.animList.Clear();
          this.remPlayer[ii].r.animList.Add(22);
          this.remPlayer[ii].r.animList.Add(23);
          this.remPlayer[ii].r.animList.Add(25);
          this.remPlayer[ii].r.animList.Add(24);
          this.remPlayer[ii].r.animList.Add(26);
          this.remPlayer[ii].r.animList.Add(27);
          this.remPlayer[ii].r.animList.Add(28);
          this.remPlayer[ii].r.animList.Add(16);
          this.remPlayer[ii].r.animClip = 13;
          this.remPlayer[ii].r.animCount = 0.0f;
          this.remPlayer[ii].r.animMin = 0;
          this.remPlayer[ii].r.animMax = 77;
          this.remPlayer[ii].r.animTween = 0.0f;
          this.remPlayer[ii].r.animLoop = 0;
        }
        else
        {
          if (this.remPlayer[ii].r.now.animation == 12)
          {
            this.remPlayer[ii].r.animList.Clear();
            this.remPlayer[ii].r.animList.Add(21);
            this.remPlayer[ii].r.animList.Add(22);
            this.remPlayer[ii].r.animList.Add(23);
            this.remPlayer[ii].r.animList.Add(24);
            this.remPlayer[ii].r.animList.Add(28);
            this.remPlayer[ii].r.animClip = 12;
            this.remPlayer[ii].r.animCount = 0.0f;
            this.remPlayer[ii].r.animMin = 1;
            this.remPlayer[ii].r.animMax = 192;
            this.remPlayer[ii].r.animTween = 0.0f;
            this.remPlayer[ii].r.animLoop = 0;
            this.remPlayer[ii].r.remoteClean = (double) this.remPlayer[ii].r.remoteClean > 0.0 ? 0.48f : 1f;
            this.remPlayer[ii].r.remoteCleanOn = true;
          }
          if (this.remPlayer[ii].r.now.animation == 6)
          {
            this.remPlayer[ii].r.animList.Clear();
            this.remPlayer[ii].r.animList.Add(22);
            this.remPlayer[ii].r.animList.Add(23);
            this.remPlayer[ii].r.animList.Add(24);
            this.remPlayer[ii].r.animList.Add(26);
            this.remPlayer[ii].r.animList.Add(27);
            this.remPlayer[ii].r.animList.Add(28);
            this.remPlayer[ii].r.animList.Add(16);
            if (!this.remPlayer[ii].r.onHulk)
              this.sc.melee.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-30, 0) / 100f, 0.0f);
            else
              this.sc.roar.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-30, 20) / 100f, 0.0f);
            this.remPlayer[ii].r.animClip = 6;
            this.remPlayer[ii].r.animCount = 0.0f;
            this.remPlayer[ii].r.animMin = 8;
            this.remPlayer[ii].r.animMax = 37;
            this.remPlayer[ii].r.animTween = 0.0f;
            this.remPlayer[ii].r.animLoop = 0;
          }
          if (this.remPlayer[ii].r.now.animation == 5)
          {
            this.remPlayer[ii].r.animList.Clear();
            this.remPlayer[ii].r.animList.Add(22);
            this.remPlayer[ii].r.animList.Add(23);
            this.remPlayer[ii].r.animList.Add(24);
            this.remPlayer[ii].r.animList.Add(26);
            this.remPlayer[ii].r.animList.Add(27);
            this.remPlayer[ii].r.animList.Add(28);
            this.sc.switchweapon.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.remPlayer[ii].r.animClip = 5;
            this.remPlayer[ii].r.animCount = 0.0f;
            this.remPlayer[ii].r.animMin = 0;
            this.remPlayer[ii].r.animMax = 45;
            this.remPlayer[ii].r.animTween = 0.0f;
            this.remPlayer[ii].r.animLoop = 0;
          }
          if (this.remPlayer[ii].r.now.animation == 3)
          {
            this.remPlayer[ii].r.animList.Clear();
            this.remPlayer[ii].r.animList.Add(22);
            this.remPlayer[ii].r.animList.Add(23);
            this.remPlayer[ii].r.animList.Add(24);
            this.remPlayer[ii].r.animList.Add(26);
            this.remPlayer[ii].r.animList.Add(27);
            this.remPlayer[ii].r.animList.Add(28);
            this.remPlayer[ii].r.primaryCock_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
            this.remPlayer[ii].r.animClip = 3;
            this.remPlayer[ii].r.animCount = 0.0f;
            this.remPlayer[ii].r.animMin = 0;
            this.remPlayer[ii].r.animMax = 62;
            this.remPlayer[ii].r.animTween = 0.0f;
            this.remPlayer[ii].r.animLoop = 0;
          }
          if (this.remPlayer[ii].r.now.animation != 4)
            return;
          this.remPlayer[ii].r.animList.Clear();
          this.remPlayer[ii].r.animList.Add(22);
          this.remPlayer[ii].r.animList.Add(23);
          this.remPlayer[ii].r.animList.Add(24);
          this.remPlayer[ii].r.animList.Add(26);
          this.remPlayer[ii].r.animList.Add(27);
          this.remPlayer[ii].r.animList.Add(28);
          this.remPlayer[ii].r.secondaryCock_rem.Play(this.sc.ev * this.remPlayer[ii].r.vol, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
          this.remPlayer[ii].r.animClip = 4;
          this.remPlayer[ii].r.animCount = 0.0f;
          this.remPlayer[ii].r.animMin = 0;
          if (this.remPlayer[ii].r.secondaryChoice == 12)
          {
            this.remPlayer[ii].r.animCount = 26f;
            this.remPlayer[ii].r.animMin = 26;
          }
          this.remPlayer[ii].r.animMax = 100;
          this.remPlayer[ii].r.animTween = 0.0f;
          this.remPlayer[ii].r.animLoop = 0;
        }
      }
    }

    private void farmerBones(ref AnimationPlayer a)
    {
      this.talkSmooth = 0.0f;
      float num1 = 5f;
      --this.farmerGlitchCount;
      if (this.farmerAnim.animClip == -1 && this.rr.Next(1, 3000) < 5 && this.farmerGlitchCount < 0)
      {
        this.farmerManager("pat");
        this.farmerGlitchCount = this.rr.Next(400, 2000);
      }
      if (this.farmerAnim.animClip == -1 && this.rr.Next(1, 3000) < 5 && this.farmerGlitchCount < 0)
      {
        this.farmerManager("nose");
        this.farmerGlitchCount = this.rr.Next(400, 2000);
      }
      if (this.farmerAnim.animClip == -1 && this.rr.Next(1, 3000) < 5 && this.farmerGlitchCount < 0)
      {
        this.farmerManager("kick");
        this.farmerGlitchCount = this.rr.Next(400, 2000);
      }
      float num2 = Vector3.Distance(this.myPlayer.displayState.npcPosition, new Vector3(3113f, 2f, 4591f));
      if ((double) this.sc.myTimer % 20.0 == 0.0 && this.myPlayer.inBarn)
      {
        this.lookatFarmer = false;
        this.atFarmer = false;
        Vector3 vector1_1 = Vector3.Normalize(this.camlookpos - this.campos);
        Vector3 vector2_1 = Vector3.Normalize(new Vector3(3113f, 100f, 4591f) - this.campos);
        if ((double) num2 < 150.0 && (double) Vector3.Dot(vector1_1, vector2_1) > 0.75)
          this.atFarmer = true;
        Vector3 vector1_2 = Vector3.Normalize(this.myPlayer.gunlook - this.myPlayer.gunpos);
        Vector3 vector2_2 = Vector3.Normalize(new Vector3(3113f, 100f, 4591f) - this.myPlayer.gunpos);
        if ((double) num2 < 400.0 && (double) Vector3.Dot(vector1_2, vector2_2) > 0.85000002384185791)
          this.lookatFarmer = true;
      }
      if (this.farmerJawIndex >= 0 && this.bool_2)
      {
        double num3 = (double) Vector3.Distance(this.campos, new Vector3(3113f, 2f, 4591f));
        this.talkAverage = this.farmerJaw[this.farmerJawIndex] * 0.7f;
        this.talkAverage = MathHelper.Clamp(this.talkAverage, 0.0f, (float) (Math.Sin((double) this.sc.myTimer / 3.0) * 4.0 + 21.0));
        this.talkSmooth = this.talkAverage;
        if (this.farmerGonnaSpit && (double) this.farmerJaw[this.farmerJawIndex] > 50.0)
        {
          this.farmerMouthSpray();
          this.farmerMouthSpray();
          this.farmerMouthSpray();
          this.farmerMouthSpray();
        }
        if (this.farmerGonnaBleed && (double) this.farmerJaw[this.farmerJawIndex] > 25.0)
        {
          this.farmerWoundSpray();
          this.farmerWoundSpray();
          this.farmerWoundSpray();
          this.farmerWoundSpray();
        }
        if (this.farmerGonnaBleedMouth && (double) this.farmerJaw[this.farmerJawIndex] > 5.0)
          this.farmerMouthBlood(this.mouthamt);
        ++this.farmerJawIndex;
        if (this.talkIndex < this.comments)
        {
          bool flag = (double) this.farmerJaw[this.farmerJawIndex] == -1.0 || this.farmerJawIndex > 500;
          if (this.sc.gameState == 0 && flag && this.barnDoorLocked && !this.weAreOutdoors)
          {
            this.barnDoorLocked = false;
            this.sc.doorUnlock.Play(this.sc.ev * 1f, 0.0f, 0.0f);
            if (this.sc.host)
              this.barnDoorState = 1;
            else
              this.myPlayer.now.doorOpen = (byte) 2;
          }
          if (this.sc.gameState == 2 && (double) this.farmerJaw[this.farmerJawIndex] == -1.0 && !this.barnDoorLocked)
          {
            if (this.sc.host)
            {
              this.loader = true;
              this.loaderFlag1 = true;
              this.loaderFlag2 = true;
            }
            else
              this.myPlayer.now.load = (byte) 2;
            this.farmerLastSpeech = true;
            return;
          }
        }
        if ((double) this.farmerJaw[this.farmerJawIndex] == -1.0)
        {
          this.farmerJawIndex = -1;
          this.talkIndex = -1;
          this.talkSmooth = 0.0f;
        }
      }
      bool flag1;
      if ((flag1 = this.lookatFarmer && this.farmerJawIndex == -1) && !this.farmerLastSpeech && this.myPlayer.animClip == 12 && (double) this.myPlayer.animCount < 15.0 && this.farmerJawIndex < 0)
      {
        int myIndex = this.rr.Next(147, 149);
        if (this.sc.hatindex == 2)
        {
          this.PlayDialogue(156, true);
          this.sc.trophy.win(this.sc.trophy.offkey);
        }
        else if (this.sc.hatindex == 1)
          this.PlayDialogue(163, true);
        else if (this.sc.hatindex == 4)
          this.PlayDialogue(164, true);
        else if (this.sc.hatindex == 8)
          this.PlayDialogue(165, true);
        else if (this.sc.hatindex == 10)
          this.PlayDialogue(166, true);
        else if (this.sc.hatindex == 11)
          this.PlayDialogue(167, true);
        else if (this.sc.hatindex == 3)
          this.PlayDialogue(168, true);
        else if (this.sc.hatindex == 5)
          this.PlayDialogue(169, true);
        else if (this.sc.hatindex == 6)
          this.PlayDialogue(170, true);
        else if (this.sc.hatindex == 7)
          this.PlayDialogue(171, true);
        else if (this.sc.hatindex == 9)
          this.PlayDialogue(172, true);
        else
          this.PlayDialogue(myIndex, true);
      }
      if (flag1 && this.lightON && !this.farmerLastSpeech && this.flashlightCounter <= 0 && this.farmerJawIndex < 0)
      {
        int index = this.rr.Next(0, this.talkFlashlight.Count);
        int myIndex = this.talkFlashlight[index];
        this.talkFlashlight.RemoveAt(index);
        if (this.talkFlashlight.Count == 0)
          this.makeList(1);
        this.PlayDialogue(myIndex, true);
        this.flashlightCounter = 600;
        this.sc.trophy.win(this.sc.trophy.blindedbythelight);
      }
      if (this.myPlayer.gunChoice != this.mType && this.farmerJawIndex < 0)
        this.milkmeCounter = 0;
      if (flag1 && this.myPlayer.gunChoice == this.mType && !this.farmerLastSpeech && this.milkmeCounter <= 0 && this.farmerJawIndex < 0)
      {
        int index = this.rr.Next(0, this.talkMilkMe.Count);
        int myIndex = this.talkMilkMe[index];
        this.talkMilkMe.RemoveAt(index);
        if (this.talkMilkMe.Count == 0)
          this.makeList(3);
        this.PlayDialogue(myIndex, true);
        this.milkmeCounter = 600;
      }
      if (this.myPlayer.gunChoice != this.gType && this.farmerJawIndex < 0)
        this.grenadeCounter = 0;
      if (flag1 && this.myPlayer.gunChoice == this.gType && !this.farmerLastSpeech && this.grenadeCounter <= 0 && this.farmerJawIndex < 0)
      {
        int index = this.rr.Next(0, this.talkGrenades.Count);
        int talkGrenade = this.talkGrenades[index];
        this.talkGrenades.RemoveAt(index);
        if (this.talkGrenades.Count == 0)
          this.makeList(2);
        this.PlayDialogue(talkGrenade, true);
        this.grenadeCounter = 600;
      }
      if (this.totalGrenadedrop > 0 && (double) this.sc.myTimer % 30.0 == 0.0)
      {
        --this.totalGrenadedrop;
        if (this.totalGrenadedrop > 3)
          this.throwGrenade(ref this.grenadeThrow, new Vector3(3120f, (float) this.rr.Next(30, 60), 4590f), new Vector3((float) this.rr.Next(85, 660) / 100f, 0.0f, (float) this.rr.Next(-240, 240) / 100f), (byte) 80, (ushort) this.rr.Next(2, 500), true, 2, this.rr.Next(5, 40));
        else
          this.throwGrenade(ref this.grenadeThrow, new Vector3(3120f, (float) this.rr.Next(30, 60), 4590f), new Vector3((float) this.rr.Next(5, 160) / 100f, 0.0f, (float) this.rr.Next(-40, 40) / 100f), (byte) 80, (ushort) this.rr.Next(2, 500), true, 2, this.rr.Next(5, 40));
      }
      this.farmerlook = BloodnBacon4PT.WrapAngle(this.farmerlook + MathHelper.Clamp(BloodnBacon4PT.WrapAngle((float) (-Math.Atan2(4591.0 - (double) this.myPlayer.displayState.npcPosition.Z, 3113.0 - (double) this.myPlayer.displayState.npcPosition.X) + 3.1400001049041748) - this.farmerlook), -0.02f, 0.02f));
      this.farmerFrame1 += 0.4f;
      this.currentTimeValue = TimeSpan.FromSeconds((double) this.farmerFrame1 * 0.041700001806020737 % a.currentClipValue.Duration.TotalSeconds);
      this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 60.0) * 28;
      this.currentTimeValue += TimeSpan.FromSeconds(0.041999999433755875);
      a.UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
      a.boneTransforms[19] = Matrix.CreateRotationZ(MathHelper.ToRadians(num1 - this.talkSmooth)) * a.boneTransforms[19];
      a.boneTransforms[16] = Matrix.CreateRotationY(this.farmerlook) * a.boneTransforms[16];
      float num4 = (float) (50.0 * (1.0 - (double) MathHelper.Clamp(num2 / 300f, 0.0f, 1f)));
      a.boneTransforms[16] = Matrix.CreateRotationX(MathHelper.ToRadians(num4 - 20f)) * a.boneTransforms[16];
      if ((double) this.farmerAnim.animCount > -1.0)
      {
        this.currentTimeValue = TimeSpan.FromSeconds((double) this.farmerAnim.animCount * 0.40000000596046448 * 0.041700001806020737 % this.farmer1[this.farmerAnim.animClip].currentClipValue.Duration.TotalSeconds);
        this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 60.0) * 28;
        this.currentTimeValue += TimeSpan.FromSeconds(0.041999999433755875);
        this.farmer1[this.farmerAnim.animClip].UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
        this.farmerAnim.animTween = MathHelper.Clamp(this.farmerAnim.animTween, 0.0f, 1f);
        for (int index = 0; index < this.farmerAnim.animList.Count; ++index)
          a.boneTransforms[this.farmerAnim.animList[index]] = a.boneTransforms[this.farmerAnim.animList[index]] * (1f - this.farmerAnim.animTween) + this.farmer1[this.farmerAnim.animClip].boneTransforms[this.farmerAnim.animList[index]] * this.farmerAnim.animTween;
        ++this.farmerAnim.animCount;
        if ((double) this.farmerAnim.animCount < (double) (this.farmerAnim.animMin + 7))
          this.farmerAnim.animTween += 0.166666672f;
        if ((double) this.farmerAnim.animCount > (double) (this.farmerAnim.animMax - 7))
          this.farmerAnim.animTween -= 0.166666672f;
        if ((double) this.farmerAnim.animCount > (double) this.farmerAnim.animMax)
        {
          if (this.farmerAnim.animLoop == 0)
          {
            this.farmerAnim.animCount = -1f;
            this.farmerAnim.animTween = 0.0f;
            this.farmerAnim.animClip = -1;
          }
          else
          {
            this.farmerAnim.animCount = (float) this.farmerAnim.animMin;
            this.farmerAnim.animTween = 0.0f;
            --this.farmerAnim.animLoop;
          }
        }
      }
      a.UpdateWorldTransforms(Matrix.CreateScale(1.5f) * Matrix.CreateRotationY(1.57f) * Matrix.CreateTranslation(3109f, 19f, 4591f), a.boneTransforms);
    }

    private void playerBones(ref AnimationPlayer a, ref AnimationPlayer b, ref localPlayer m)
    {
      double num1 = (double) m.frame1 * 0.041700001806020737;
      this.currentTimeValue = TimeSpan.FromSeconds(num1 % a.currentClipValue.Duration.TotalSeconds);
      this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 60.0) * 28;
      this.currentTimeValue += TimeSpan.FromSeconds(0.041999999433755875);
      a.UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
      bool flag1 = false;
      if ((double) m.tween < 1.0)
      {
        this.currentTimeValue = TimeSpan.FromSeconds(num1 % b.currentClipValue.Duration.TotalSeconds);
        this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 60.0) * 28;
        this.currentTimeValue += TimeSpan.FromSeconds(0.041999999433755875);
        b.UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
        if (m.clip2 == 7)
        {
          flag1 = true;
          a.boneTransforms[22] = Matrix.CreateRotationX(MathHelper.ToRadians(17.8f)) * Matrix.CreateRotationY(MathHelper.ToRadians(27f)) * a.boneTransforms[22];
          a.boneTransforms[23] = Matrix.CreateRotationX(MathHelper.ToRadians(22.6f)) * Matrix.CreateRotationZ(MathHelper.ToRadians(-44.6f)) * a.boneTransforms[23];
        }
        for (int index = 0; index < b.boneTransforms.Length; ++index)
          Matrix.Lerp(ref b.boneTransforms[index], ref a.boneTransforms[index], m.tween, out a.boneTransforms[index]);
      }
      if (!m.isDown)
      {
        float num2 = 0.6622f;
        float num3 = -0.7493f;
        float headRot = m.headRot;
        a.boneTransforms[15] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.25), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.25), headRot * 0.5f, ref a.boneTransforms[15]);
        a.boneTransforms[16] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.34999999403953552), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.34999999403953552), headRot * 0.3f, ref a.boneTransforms[16]);
        a.boneTransforms[17] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.40000000596046448), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.40000000596046448), headRot * 0.2f, ref a.boneTransforms[17]);
      }
      else
      {
        float num4 = -0.001218f;
        float num5 = 1f - (float) Math.Cos((double) m.headRot * 0.800000011920929);
        float num6 = m.displayState.npcTilt - num5;
        a.boneTransforms[15] = this.multi.rotZXY((float) ((double) num4 * (double) num6 * 0.25), num6 * 0.25f, m.headRot * 0.1f, ref a.boneTransforms[15]);
        a.boneTransforms[16] = this.multi.rotZXY((float) ((double) num4 * (double) num6 * 0.34999999403953552), num6 * 0.35f, m.headRot * 0.2f, ref a.boneTransforms[16]);
        a.boneTransforms[17] = this.multi.rotZXY((float) ((double) num4 * (double) num6 * 0.40000000596046448), num6 * 0.4f, m.headRot * 0.7f, ref a.boneTransforms[17]);
      }
      if (!m.isDown)
      {
        if ((this.handtype[m.gunChoice] != 2 ? 0 : (m.gunChoice == 18 ? 1 : 0)) == 0 && this.handtype[m.gunChoice] != 1)
        {
          if (this.handtype[m.gunChoice] == 2 && !flag1 && !m.isLiftingOpponent)
          {
            a.boneTransforms[22] = Matrix.CreateRotationX(this.sc.axGun[m.lastWeapon]) * Matrix.CreateRotationY(this.sc.ayGun[m.lastWeapon]) * a.boneTransforms[22];
            a.boneTransforms[24] = Matrix.CreateRotationX(this.sc.bxGun[m.lastWeapon]) * Matrix.CreateRotationZ(this.sc.byGun[m.lastWeapon]) * a.boneTransforms[24];
          }
        }
        else if (!flag1 && !m.isLiftingOpponent)
        {
          a.boneTransforms[22] = Matrix.CreateRotationX(0.3107f) * Matrix.CreateRotationY(0.4712f) * a.boneTransforms[22];
          a.boneTransforms[23] = Matrix.CreateRotationX(0.3944f) * Matrix.CreateRotationZ(-0.7784f) * a.boneTransforms[23];
        }
        if (m.gunChoice >= this.gType && m.gunChoice < 100)
        {
          float num7 = (float) Math.Sin((double) this.sc.myTimer / 16.0) / 2f;
          float num8 = (float) Math.Cos((double) this.sc.myTimer / 28.0) / 8f;
          a.boneTransforms[22] = this.multi.rotXY(-0.3511f, (float) (1.1000000238418579 + (double) num7 / 6.0) - num8, ref a.boneTransforms[22]);
          a.boneTransforms[23] = this.multi.rotXYZ(1.827f, 0.37123f, (float) (0.60000002384185791 + (double) num7 / 2.0), ref a.boneTransforms[23]);
          a.boneTransforms[26] = this.multi.rotXYZ(0.25968f, 0.5424f, 0.13589f, ref a.boneTransforms[26]);
          a.boneTransforms[27] = this.multi.rotXYZ((float) ((double) num7 / 12.0 - 0.64528000354766846), -0.6666f, (float) (0.43733999133110046 + (double) num7 / 4.0), ref a.boneTransforms[27]);
          a.boneTransforms[28] = this.multi.rotYZ((float) (0.59229999780654907 + (double) num7 / 2.0), 0.6082f, ref a.boneTransforms[28]);
        }
      }
      if ((double) m.recoilTimer2 > 0.0 && (double) m.recoilTimer2 <= 1.0)
      {
        a.boneTransforms[28] = Matrix.CreateRotationY(MathHelper.ToRadians(m.recoilVec.Y) * m.recoilTimer2) * a.boneTransforms[28];
        a.boneTransforms[28] = Matrix.CreateRotationX(MathHelper.ToRadians(m.recoilVec.X) * m.recoilTimer2) * a.boneTransforms[28];
      }
      if (this.sc.pad_vibro && (double) m.recoilTimer > 0.0)
      {
        float num9 = (float) this.rr.Next(-this.sc.recoilA[m.lastWeapon], this.sc.recoilB[m.lastWeapon]) / 10000f;
        float num10 = (float) this.rr.Next(-this.sc.recoilA[m.lastWeapon], this.sc.recoilA[m.lastWeapon]) / 10000f;
        this.headTilt -= num9;
        this.headRot += num10;
      }
      if (m.bloodCoil > 0)
      {
        --m.bloodCoil;
        float num11 = (float) (350.0 + Math.Sin((double) this.timeFrame / 26.0) * 300.0);
        float num12 = (float) (350.0 + Math.Sin((double) this.timeFrame / 34.0) * 200.0);
        float num13 = (float) (480.0 + Math.Cos((double) this.timeFrame / 24.0) * 400.0);
        a.boneTransforms[22] = Matrix.CreateRotationX((float) this.rr.Next(-6, 6) / num11) * a.boneTransforms[22];
        a.boneTransforms[22] = Matrix.CreateRotationY((float) this.rr.Next(-6, 6) / num11) * a.boneTransforms[22];
        a.boneTransforms[23] = Matrix.CreateRotationX((float) this.rr.Next(-6, 6) / num12) * a.boneTransforms[23];
        a.boneTransforms[23] = Matrix.CreateRotationY((float) this.rr.Next(-6, 6) / num11) * a.boneTransforms[23];
        a.boneTransforms[9] = Matrix.CreateRotationX((float) this.rr.Next(-6, 6) / num13) * a.boneTransforms[9];
        a.boneTransforms[27] = this.multi.rotX((float) this.rr.Next(-6, 6) / num11, ref a.boneTransforms[27]);
        a.boneTransforms[27] = Matrix.CreateRotationY((float) this.rr.Next(-6, 6) / num12) * a.boneTransforms[27];
        a.boneTransforms[28] = Matrix.CreateRotationX((float) this.rr.Next(-6, 6) / num11) * a.boneTransforms[28];
        a.boneTransforms[28] = Matrix.CreateRotationY((float) this.rr.Next(-6, 6) / num11) * a.boneTransforms[28];
      }
      if ((double) m.animCount > -1.0)
      {
        this.currentTimeValue = TimeSpan.FromSeconds((double) m.animCount * 0.40000000596046448 * 0.041700001806020737 % this.npc1[m.animClip].currentClipValue.Duration.TotalSeconds);
        this.currentKeyframe = (int) (this.currentTimeValue.TotalSeconds * 60.0) * 28;
        this.currentTimeValue += TimeSpan.FromSeconds(0.041999999433755875);
        this.npc1[m.animClip].UpdateBoneTransforms2(this.currentKeyframe, this.currentTimeValue);
        m.animTween = MathHelper.Clamp(m.animTween, 0.0f, 1f);
        for (int index = 0; index < m.animList.Count; ++index)
          a.boneTransforms[m.animList[index]] = a.boneTransforms[m.animList[index]] * (1f - m.animTween) + this.npc1[m.animClip].boneTransforms[m.animList[index]] * m.animTween;
        if (m.animClip == 13 && this.sc.fastnades)
        {
          m.animCount += 3f;
          m.animTween = 1f;
        }
        else
        {
          ++m.animCount;
          if ((double) m.animCount < (double) (m.animMin + 7))
            m.animTween += 0.166666672f;
          if ((double) m.animCount > (double) (m.animMax - 7) && m.animLoop == 0)
            m.animTween -= 0.166666672f;
        }
        if ((double) m.animCount > (double) m.animMax)
        {
          if (m.animLoop == 0)
          {
            m.animTween = 0.0f;
            m.animClip = -1;
            m.animCount = -1f;
          }
          else
          {
            m.animCount = (float) m.animMin;
            m.animTween = 1f;
            --m.animLoop;
          }
        }
      }
      if (this.sc.hostBobbleheads && !this.myPlayer.closeCam && !this.myPlayer.onHulk)
      {
        float scale = 2.5f;
        if (this.sc.hatindex == 8 || this.localID == 8 || this.localID == 9 || this.localID == 10)
          scale = 1.4f;
        a.boneTransforms[19] = Matrix.CreateScale(scale) * a.boneTransforms[19];
      }
      if (this.myPlayer.onHulk)
      {
        float num14 = 1f;
        bool flag2 = false;
        if (this.myPlayer.hulkEffects > 1900 || this.myPlayer.hulkEffects < 110 && this.myPlayer.hulkEffects > 5)
          flag2 = true;
        if (flag2)
          num14 = (float) this.rr.Next(40, 60) / 100f;
        Vector3 scales1 = new Vector3(2.4f, 2.4f, 2.4f) * num14;
        a.boneTransforms[28] = Matrix.CreateScale(scales1) * a.boneTransforms[28];
        if (flag2)
          num14 = (float) this.rr.Next(120, 160) / 100f;
        Vector3 scales2 = new Vector3(0.66f, 0.66f, 0.66f) * num14;
        a.boneTransforms[27] = Matrix.CreateScale(scales2) * a.boneTransforms[27];
        if (flag2)
          num14 = (float) this.rr.Next(110, 125) / 100f;
        Vector3 scales3 = new Vector3(0.87f, 0.87f, 0.87f) * num14;
        a.boneTransforms[26] = Matrix.CreateScale(scales3) * a.boneTransforms[26];
        if (flag2)
          num14 = (float) this.rr.Next(65, 80) / 100f;
        Vector3 scales4 = new Vector3(1.6f, 1.6f, 1.6f) * num14;
        a.boneTransforms[25] = Matrix.CreateScale(scales4) * a.boneTransforms[25];
        if (flag2)
          num14 = (float) this.rr.Next(120, 155) / 100f;
        Vector3 scales5 = new Vector3(0.65f, 0.65f, 0.65f) * num14;
        a.boneTransforms[22] = Matrix.CreateScale(scales5) * a.boneTransforms[22];
        Vector3 scales6 = new Vector3(0.7f, 0.7f, 0.7f) * num14;
        if (flag2)
          num14 = (float) this.rr.Next(120, 150) / 100f;
        a.boneTransforms[23] = Matrix.CreateScale(scales6) * a.boneTransforms[23];
        if (flag2)
          num14 = (float) this.rr.Next(120, 150) / 100f;
        Vector3 scales7 = new Vector3(0.7f, 0.7f, 0.7f) * num14;
        a.boneTransforms[24] = Matrix.CreateScale(scales7) * a.boneTransforms[24];
        if (flag2)
          num14 = (float) this.rr.Next(80, 100) / 100f;
        scales7 = new Vector3(1.1f * num14, 1f, 1.1f * num14);
        a.boneTransforms[3] = Matrix.CreateScale(scales7) * a.boneTransforms[3];
        scales7 = new Vector3(1.3f * num14, 1f, 1.3f * num14);
        a.boneTransforms[4] = Matrix.CreateScale(scales7) * a.boneTransforms[4];
        if (flag2)
          num14 = (float) this.rr.Next(80, 100) / 100f;
        scales7 = new Vector3(1.1f * num14, 1f, 1.1f * num14);
        a.boneTransforms[9] = Matrix.CreateScale(scales7) * a.boneTransforms[9];
        scales7 = new Vector3(1.3f * num14, 1f, 1.3f * num14);
        a.boneTransforms[10] = Matrix.CreateScale(scales7) * a.boneTransforms[10];
        if (flag2)
          num14 = (float) this.rr.Next(65, 80) / 100f;
        Vector3 scales8 = new Vector3(1.65f, 1.65f, 1.65f) * num14;
        a.boneTransforms[19] = Matrix.CreateScale(scales8) * a.boneTransforms[19];
      }
      if (m.closeCam && !m.autoCamOn && (double) m.autoCamTimer <= 0.0)
        a.boneTransforms[18] = Matrix.CreateRotationX(-1.9198f) * a.boneTransforms[18];
      a.UpdateWorldTransforms(m.transform, a.boneTransforms);
      m.oldpistolHand = a.skinTransforms[27];
      m.pistolHand = a.skinTransforms[28];
      m.cambone = a.skinTransforms[17];
      m.headbone = a.skinTransforms[20];
    }

    private void remoteBones(ref AnimationPlayer a, ref AnimationPlayer b, remotePlayer4 m)
    {
      double num1 = (double) m.frame1 * 0.041700001806020737;
      TimeSpan timeSpan1 = TimeSpan.FromSeconds(num1 % a.currentClipValue.Duration.TotalSeconds);
      this.currentKeyframe = (int) (timeSpan1.TotalSeconds * 60.0) * 28;
      TimeSpan timevalue1 = timeSpan1 + TimeSpan.FromSeconds(0.041999999433755875);
      a.UpdateBoneTransforms2(this.currentKeyframe, timevalue1);
      bool flag1 = false;
      if ((double) m.tween < 1.0)
      {
        TimeSpan timeSpan2 = TimeSpan.FromSeconds(num1 % b.currentClipValue.Duration.TotalSeconds);
        this.currentKeyframe = (int) (timeSpan2.TotalSeconds * 60.0) * 28;
        TimeSpan timevalue2 = timeSpan2 + TimeSpan.FromSeconds(0.041999999433755875);
        b.UpdateBoneTransforms2(this.currentKeyframe, timevalue2);
        if (m.clip2 == 7)
        {
          flag1 = true;
          a.boneTransforms[22] = Matrix.CreateRotationX(MathHelper.ToRadians(17.8f)) * Matrix.CreateRotationY(MathHelper.ToRadians(27f)) * a.boneTransforms[22];
          a.boneTransforms[23] = Matrix.CreateRotationX(MathHelper.ToRadians(22.6f)) * Matrix.CreateRotationZ(MathHelper.ToRadians(-44.6f)) * a.boneTransforms[23];
        }
        for (int index = 0; index < b.boneTransforms.Length; ++index)
          a.boneTransforms[index] = Matrix.Lerp(b.boneTransforms[index], a.boneTransforms[index], m.tween);
      }
      if (!m.isDown)
      {
        float num2 = 0.662234f;
        float num3 = -0.74929f;
        a.boneTransforms[15] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.25), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.25), m.headRot * 0.5f, ref a.boneTransforms[15]);
        a.boneTransforms[16] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.34999999403953552), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.34999999403953552), m.headRot * 0.3f, ref a.boneTransforms[16]);
        a.boneTransforms[17] = this.multi.rotZXY((float) ((double) num3 * (double) m.displayState.npcTilt * 0.40000000596046448), (float) ((double) num2 * (double) m.displayState.npcTilt * 0.40000000596046448), m.headRot * 0.2f, ref a.boneTransforms[17]);
      }
      else
      {
        float num4 = (float) Math.Cos((double) MathHelper.ToRadians(4f));
        float num5 = -(float) Math.Sin((double) MathHelper.ToRadians(4f));
        float num6 = 1f - (float) Math.Cos((double) m.headRot * 0.800000011920929);
        float num7 = m.displayState.npcTilt - num6;
        a.boneTransforms[15] = this.multi.rotZXY((float) ((double) num5 * (double) num7 * 0.25), (float) ((double) num4 * (double) num7 * 0.25), m.headRot * 0.1f, ref a.boneTransforms[15]);
        a.boneTransforms[16] = this.multi.rotZXY((float) ((double) num5 * (double) num7 * 0.34999999403953552), (float) ((double) num4 * (double) num7 * 0.34999999403953552), m.headRot * 0.2f, ref a.boneTransforms[16]);
        a.boneTransforms[17] = this.multi.rotZXY((float) ((double) num5 * (double) num7 * 0.40000000596046448), (float) ((double) num4 * (double) num7 * 0.40000000596046448), m.headRot * 0.7f, ref a.boneTransforms[17]);
      }
      if (!m.isDown)
      {
        if ((this.handtype[m.gunChoice] != 2 ? 0 : (m.gunChoice == 18 ? 1 : 0)) == 0 && this.handtype[m.gunChoice] != 1)
        {
          if (this.handtype[m.gunChoice] == 2 && !flag1 && m.isLiftingYou < 0)
          {
            a.boneTransforms[22] = Matrix.CreateRotationX(this.sc.axGun[m.lastWeapon]) * Matrix.CreateRotationY(this.sc.ayGun[m.lastWeapon]) * a.boneTransforms[22];
            a.boneTransforms[24] = Matrix.CreateRotationX(this.sc.bxGun[m.lastWeapon]) * Matrix.CreateRotationZ(this.sc.byGun[m.lastWeapon]) * a.boneTransforms[24];
          }
        }
        else if (!flag1 && m.isLiftingYou < 0)
        {
          a.boneTransforms[22] = Matrix.CreateRotationX(MathHelper.ToRadians(17.8f)) * Matrix.CreateRotationY(MathHelper.ToRadians(27f)) * a.boneTransforms[22];
          a.boneTransforms[23] = Matrix.CreateRotationX(MathHelper.ToRadians(22.6f)) * Matrix.CreateRotationZ(MathHelper.ToRadians(-44.6f)) * a.boneTransforms[23];
        }
        if (m.gunChoice >= this.gType && m.gunChoice < 100)
        {
          float num8 = (float) Math.Sin((double) this.sc.myTimer / 16.0) / 2f;
          float num9 = (float) Math.Cos((double) this.sc.myTimer / 28.0) / 8f;
          a.boneTransforms[22] = this.multi.rotXY(-0.3511f, (float) (1.1000000238418579 + (double) num8 / 6.0) - num9, ref a.boneTransforms[22]);
          a.boneTransforms[23] = this.multi.rotXYZ(1.827f, 0.37123f, (float) (0.60000002384185791 + (double) num8 / 2.0), ref a.boneTransforms[23]);
          a.boneTransforms[26] = this.multi.rotXYZ(0.25968f, 0.5424f, 0.13589f, ref a.boneTransforms[26]);
          a.boneTransforms[27] = this.multi.rotXYZ((float) ((double) num8 / 12.0 - 0.64528000354766846), -0.6666f, (float) (0.43733999133110046 + (double) num8 / 4.0), ref a.boneTransforms[27]);
          a.boneTransforms[28] = this.multi.rotYZ((float) (0.59229999780654907 + (double) num8 / 2.0), 0.6082f, ref a.boneTransforms[28]);
        }
      }
      if ((double) m.recoilTimer > 0.0)
      {
        a.boneTransforms[28] = Matrix.CreateRotationY(MathHelper.ToRadians(m.recoilVec.Y) * m.recoilTimer) * a.boneTransforms[28];
        a.boneTransforms[28] = Matrix.CreateRotationX(MathHelper.ToRadians(m.recoilVec.X) * m.recoilTimer) * a.boneTransforms[28];
      }
      if (m.bloodCoil > 0)
      {
        --m.bloodCoil;
        this.f1 = (float) (350.0 + Math.Sin((double) this.timeFrame / 26.0) * 300.0);
        this.f2 = (float) (350.0 + Math.Sin((double) this.timeFrame / 34.0) * 200.0);
        this.f3 = (float) (480.0 + Math.Cos((double) this.timeFrame / 24.0) * 400.0);
        a.boneTransforms[22] = Matrix.CreateRotationX((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[22];
        a.boneTransforms[22] = Matrix.CreateRotationY((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[22];
        a.boneTransforms[23] = Matrix.CreateRotationX((float) this.rr.Next(-10, 10) / this.f2) * a.boneTransforms[23];
        a.boneTransforms[23] = Matrix.CreateRotationY((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[23];
        a.boneTransforms[9] = Matrix.CreateRotationX((float) this.rr.Next(-10, 10) / this.f3) * a.boneTransforms[9];
        a.boneTransforms[27] = Matrix.CreateRotationX((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[27];
        a.boneTransforms[27] = Matrix.CreateRotationY((float) this.rr.Next(-10, 10) / this.f2) * a.boneTransforms[27];
        a.boneTransforms[28] = Matrix.CreateRotationX((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[28];
        a.boneTransforms[28] = Matrix.CreateRotationY((float) this.rr.Next(-10, 10) / this.f1) * a.boneTransforms[28];
      }
      if ((double) m.animCount > -1.0)
      {
        TimeSpan timeSpan3 = TimeSpan.FromSeconds((double) m.animCount * 0.40000000596046448 * 0.041700001806020737 % this.npc2[m.animClip].currentClipValue.Duration.TotalSeconds);
        this.currentKeyframe = (int) (timeSpan3.TotalSeconds * 60.0) * 28;
        TimeSpan timevalue3 = timeSpan3 + TimeSpan.FromSeconds(0.041999999433755875);
        this.npc2[m.animClip].UpdateBoneTransforms2(this.currentKeyframe, timevalue3);
        m.animTween = MathHelper.Clamp(m.animTween, 0.0f, 1f);
        for (int index = 0; index < m.animList.Count; ++index)
          a.boneTransforms[m.animList[index]] = a.boneTransforms[m.animList[index]] * (1f - m.animTween) + this.npc2[m.animClip].boneTransforms[m.animList[index]] * m.animTween;
        ++m.animCount;
        if ((double) m.animCount < (double) (m.animMin + 7))
          m.animTween += 0.166666672f;
        if ((double) m.animCount > (double) (m.animMax - 7) && m.animLoop == 0)
          m.animTween -= 0.166666672f;
        if ((double) m.animCount > (double) m.animMax)
        {
          if (m.animLoop == 0)
          {
            m.animCount = -1f;
            m.animTween = 0.0f;
            m.animClip = -1;
          }
          else
          {
            m.animCount = (float) m.animMin;
            m.animTween = 1f;
            --m.animLoop;
          }
        }
      }
      if (this.sc.hostBobbleheads && !m.onHulk)
      {
        float scale = 2.5f;
        if (m.hatindex == 8 || m.remoteID == 8 || m.remoteID == 9 || m.remoteID == 10)
          scale = 1.4f;
        a.boneTransforms[19] = Matrix.CreateScale(scale) * a.boneTransforms[19];
      }
      if (m.onHulk || m.hulkTrans > 0)
      {
        --m.hulkTrans;
        float num10 = 1f;
        bool flag2 = false;
        if (m.hulkTrans > 0)
          flag2 = true;
        if (flag2)
          num10 = (float) this.rr.Next(40, 60) / 100f;
        Vector3 scales1 = new Vector3(2.4f, 2.4f, 2.4f) * num10;
        a.boneTransforms[28] = Matrix.CreateScale(scales1) * a.boneTransforms[28];
        if (flag2)
          num10 = (float) this.rr.Next(120, 160) / 100f;
        Vector3 scales2 = new Vector3(0.66f, 0.66f, 0.66f) * num10;
        a.boneTransforms[27] = Matrix.CreateScale(scales2) * a.boneTransforms[27];
        if (flag2)
          num10 = (float) this.rr.Next(110, 125) / 100f;
        Vector3 scales3 = new Vector3(0.87f, 0.87f, 0.87f) * num10;
        a.boneTransforms[26] = Matrix.CreateScale(scales3) * a.boneTransforms[26];
        if (flag2)
          num10 = (float) this.rr.Next(65, 80) / 100f;
        Vector3 scales4 = new Vector3(1.6f, 1.6f, 1.6f) * num10;
        a.boneTransforms[25] = Matrix.CreateScale(scales4) * a.boneTransforms[25];
        if (flag2)
          num10 = (float) this.rr.Next(120, 155) / 100f;
        Vector3 scales5 = new Vector3(0.65f, 0.65f, 0.65f) * num10;
        a.boneTransforms[22] = Matrix.CreateScale(scales5) * a.boneTransforms[22];
        Vector3 scales6 = new Vector3(0.7f, 0.7f, 0.7f) * num10;
        if (flag2)
          num10 = (float) this.rr.Next(120, 150) / 100f;
        a.boneTransforms[23] = Matrix.CreateScale(scales6) * a.boneTransforms[23];
        if (flag2)
          num10 = (float) this.rr.Next(120, 150) / 100f;
        Vector3 scales7 = new Vector3(0.7f, 0.7f, 0.7f) * num10;
        a.boneTransforms[24] = Matrix.CreateScale(scales7) * a.boneTransforms[24];
        if (flag2)
          num10 = (float) this.rr.Next(80, 100) / 100f;
        scales7 = new Vector3(1.1f * num10, 1f, 1.1f * num10);
        a.boneTransforms[3] = Matrix.CreateScale(scales7) * a.boneTransforms[3];
        scales7 = new Vector3(1.3f * num10, 1f, 1.3f * num10);
        a.boneTransforms[4] = Matrix.CreateScale(scales7) * a.boneTransforms[4];
        if (flag2)
          num10 = (float) this.rr.Next(80, 100) / 100f;
        scales7 = new Vector3(1.1f * num10, 1f, 1.1f * num10);
        a.boneTransforms[9] = Matrix.CreateScale(scales7) * a.boneTransforms[9];
        scales7 = new Vector3(1.3f * num10, 1f, 1.3f * num10);
        a.boneTransforms[10] = Matrix.CreateScale(scales7) * a.boneTransforms[10];
        if (flag2)
          num10 = (float) this.rr.Next(65, 80) / 100f;
        Vector3 scales8 = new Vector3(1.65f, 1.65f, 1.65f) * num10;
        a.boneTransforms[19] = Matrix.CreateScale(scales8) * a.boneTransforms[19];
      }
      a.UpdateWorldTransforms2(m.transform, a.boneTransforms, ref m.skinTransforms);
      m.headbone = m.skinTransforms[20];
      m.pistolHand = m.skinTransforms[28];
      m.cambone = m.skinTransforms[17];
    }

    private void initTargets(int i)
    {
      this.sc.GraphicsDevice.SetRenderTarget(this.target1);
      this.sc.GraphicsDevice.Clear(Color.Black);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.NonPremultiplied);
      this.spriteBatch.Draw(this.texture2D_1, Vector2.Zero, Color.White);
      this.spriteBatch.End();
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
      this.sc.GraphicsDevice.SetRenderTarget(this.target2);
      this.sc.GraphicsDevice.Clear(Color.Black);
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.NonPremultiplied);
      this.spriteBatch.Draw(this.texture2D_1, Vector2.Zero, Color.White);
      this.spriteBatch.End();
      this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
    }

    private void addBlood2Body(
      int index,
      ref BloodnBacon4PT.paintBody pp,
      int xMin,
      int xMax,
      int yMin,
      int yMax)
    {
      pp.index.Add(index);
      pp.x.Add((float) this.rr.Next(xMin * 100, xMax * 100) / 100f);
      pp.z.Add((float) this.rr.Next(yMin * 100, yMax * 100) / 100f);
    }

    private void addBlood2Body2(int index, int kk, int xMin, int xMax, int yMin, int yMax)
    {
      this.remPlayer[kk].r.player2Paint.index.Add(index);
      this.remPlayer[kk].r.player2Paint.x.Add((float) this.rr.Next(xMin * 100, xMax * 100) / 100f);
      this.remPlayer[kk].r.player2Paint.z.Add((float) this.rr.Next(yMin * 100, yMax * 100) / 100f);
    }

    private void method_2(ref Effect eff, ref BloodnBacon4PT.paintBody pp)
    {
      ++this.oddnumLando;
      try
      {
        if (this.oddnumLando % 2 == 1)
          this.sc.GraphicsDevice.SetRenderTarget(this.target1);
        else
          this.sc.GraphicsDevice.SetRenderTarget(this.target2);
        this.sc.GraphicsDevice.Clear(Color.Black);
        this.spriteBatch.Begin();
        this.spriteBatch.Draw(this.player1Texture, Vector2.Zero, Color.White);
        for (int index = 0; index < pp.index.Count; ++index)
        {
          Color color = (Color.White * ((float) this.rr.Next(30, 100) / 100f)) with
          {
            A = byte.MaxValue
          };
          this.spriteBatch.Draw(this.sc.wound, new Vector2(pp.x[index], pp.z[index]), new Rectangle?(this.sc.woundRect[pp.index[index]]), color, (float) this.rr.Next(-800, 800) / 100f, new Vector2(32f, 32f), (float) this.rr.Next(80, 160) / 100f, SpriteEffects.None, 0.0f);
        }
        this.spriteBatch.End();
        this.player1Texture = this.oddnumLando % 2 != 1 ? (Texture2D) this.target2 : (Texture2D) this.target1;
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        eff.Parameters["Texture"].SetValue((Texture) this.player1Texture);
      }
      catch
      {
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        try
        {
          this.spriteBatch.End();
        }
        catch
        {
        }
      }
      pp.index.Clear();
      pp.x.Clear();
      pp.z.Clear();
    }

    private void delPlayer1Blood(ref Effect eff, ref float clean)
    {
      ++this.oddnumLando;
      Color color = Color.White * clean;
      try
      {
        if (this.oddnumLando % 2 == 1)
          this.sc.GraphicsDevice.SetRenderTarget(this.target1);
        else
          this.sc.GraphicsDevice.SetRenderTarget(this.target2);
        this.sc.GraphicsDevice.Clear(Color.Black);
        this.spriteBatch.Begin();
        this.spriteBatch.Draw(this.texture2D_1, Vector2.Zero, Color.White);
        this.spriteBatch.Draw(this.player1Texture, Vector2.Zero, color);
        this.spriteBatch.End();
        this.player1Texture = this.oddnumLando % 2 != 1 ? (Texture2D) this.target2 : (Texture2D) this.target1;
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        eff.Parameters["Texture"].SetValue((Texture) this.player1Texture);
      }
      catch
      {
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        try
        {
          this.spriteBatch.End();
        }
        catch
        {
        }
      }
    }

    private void method_3(int ii)
    {
      ++this.remPlayer[ii].r.oddnumrem;
      try
      {
        if (this.remPlayer[ii].r.oddnumrem % 2 == 1)
          this.sc.GraphicsDevice.SetRenderTarget(this.remPlayer[ii].r.target3);
        else
          this.sc.GraphicsDevice.SetRenderTarget(this.remPlayer[ii].r.target4);
        this.sc.GraphicsDevice.Clear(Color.Black);
        this.spriteBatch.Begin();
        this.spriteBatch.Draw(this.remPlayer[ii].r.player2Texture, Vector2.Zero, Color.White);
        for (int index = 0; index < this.remPlayer[ii].r.player2Paint.index.Count; ++index)
        {
          Color color = (Color.White * ((float) this.rr.Next(30, 100) / 100f)) with
          {
            A = byte.MaxValue
          };
          this.spriteBatch.Draw(this.sc.wound, new Vector2(this.remPlayer[ii].r.player2Paint.x[index], this.remPlayer[ii].r.player2Paint.z[index]), new Rectangle?(this.sc.woundRect[this.remPlayer[ii].r.player2Paint.index[index]]), color, (float) this.rr.Next(-800, 800) / 100f, new Vector2(32f, 32f), (float) this.rr.Next(90, 160) / 100f, SpriteEffects.None, 0.0f);
        }
        this.spriteBatch.End();
        this.remPlayer[ii].r.player2Texture = this.remPlayer[ii].r.oddnumrem % 2 != 1 ? (Texture2D) this.remPlayer[ii].r.target4 : (Texture2D) this.remPlayer[ii].r.target3;
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        this.remPlayer[ii].r.player2Paint.index.Clear();
        this.remPlayer[ii].r.player2Paint.x.Clear();
        this.remPlayer[ii].r.player2Paint.z.Clear();
      }
      catch
      {
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        try
        {
          this.spriteBatch.End();
        }
        catch
        {
        }
      }
      this.remPlayer[ii].r.player2Paint.index.Clear();
      this.remPlayer[ii].r.player2Paint.x.Clear();
      this.remPlayer[ii].r.player2Paint.z.Clear();
    }

    private void delPlayer2Blood(ref float clean, int ii)
    {
      Color color = Color.White * clean;
      ++this.remPlayer[ii].r.oddnumrem;
      try
      {
        if (this.remPlayer[ii].r.oddnumrem % 2 == 1)
          this.sc.GraphicsDevice.SetRenderTarget(this.remPlayer[ii].r.target3);
        else
          this.sc.GraphicsDevice.SetRenderTarget(this.remPlayer[ii].r.target4);
        this.sc.GraphicsDevice.Clear(Color.Black);
        this.spriteBatch.Begin();
        this.spriteBatch.Draw(this.remPlayer[ii].r.texture2D_0, Vector2.Zero, Color.White);
        this.spriteBatch.Draw(this.remPlayer[ii].r.player2Texture, Vector2.Zero, color);
        this.spriteBatch.End();
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        if (this.remPlayer[ii].r.oddnumrem % 2 == 1)
          this.remPlayer[ii].r.player2Texture = (Texture2D) this.remPlayer[ii].r.target3;
        else
          this.remPlayer[ii].r.player2Texture = (Texture2D) this.remPlayer[ii].r.target4;
      }
      catch
      {
        this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
        try
        {
          this.spriteBatch.End();
        }
        catch
        {
        }
      }
    }

    public override void Draw(GameTime gameTime)
    {
      if (this.sc.deactivated || this.sc.rebuildTargets)
        return;
      this.calcFlash();
      this.drawDaFarm = this.sc.gameState < 2 || this.inFarm == 1 || this.inFarm == 2 && (this.cryptLockMove < 188 || this.cryptLockMove2 < 188);
      if ((double) this.sc.introCamera <= 0.0)
      {
        this.makeitGlow = false;
        this.playerdownGlow = -1;
        this.weaponGlow = this.barnTriangle && this.weaponIsGlowing;
        this.playerGlow = false;
        if (Cutty4.gonnaHealindex != -1)
          this.makeitGlow = true;
        if (this.editCam || this.pickupGlow || invDupe.glowIndex >= 0 || this.weaponGlow)
          this.makeitGlow = true;
        if (this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (this.mysteamID == this.remPlayer[index].id)
            {
              this.sc.myplayerindex = index;
            }
            else
            {
              if (this.remPlayer[index].r.fallState < 11 && this.remPlayer[index].r.isDown && !this.myPlayer.isDown && (double) this.remPlayer[index].r.playerDotplayer > 0.699999988079071)
              {
                this.playerdownGlow = index;
                this.makeitGlow = true;
              }
              if (this.leftBumperGlow)
              {
                this.playerGlow = true;
                this.makeitGlow = true;
              }
            }
          }
        }
        if (this.makeitGlow || this.leftBumperGlow && this.lastBoarAlive >= 0)
        {
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
          this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
          this.glowDistance = 0.0f;
          this.sc.GraphicsDevice.SetRenderTarget(this.glowTarget);
          this.sc.GraphicsDevice.Clear(Color.Black);
          Vector3 campos = this.campos;
          campos.Y -= 30f;
          if (Cutty4.gonnaHealindex != -1)
            this.cuttyBoss[Cutty4.gonnaHealindex].drawCutty_Glow();
          if (!this.editCam)
          {
            if (this.playerdownGlow >= 0 && !this.playerGlow)
            {
              this.glowDistance = Vector3.DistanceSquared(campos, this.remPlayer[this.playerdownGlow].r.displayState.npcPosition);
              this.remChar_Glow(ref this.remPlayer[this.playerdownGlow].r.remoteModel, new Vector3(0.0f, 1.1f, 0.2f), this.playerdownGlow);
            }
            if (this.playerGlow && this.remPlayer.Count > 1)
            {
              for (int index = 0; index < this.remPlayer.Count; ++index)
              {
                if (!(this.remPlayer[index].id == this.mysteamID))
                {
                  this.glowDistance = Vector3.DistanceSquared(campos, this.remPlayer[index].r.displayState.npcPosition);
                  this.remChar_Glow(ref this.remPlayer[index].r.remoteModel, new Vector3(0.0f, 1.1f, 0.2f), index);
                }
              }
            }
          }
          else
          {
            this.glowDistance = Vector3.DistanceSquared(campos, this.myPlayer.displayState.npcPosition);
            this.localChar_Glow(ref this.localModel, new Vector3(0.0f, 0.4f, 1f));
          }
          if (invDupe.glowIndex >= 0)
          {
            this.glowDistance = 250000f;
            this.tempInstance[0].Trans = this.grenadeThrow.dupe[invDupe.glowIndex].transform;
            this.DrawPickupGlow(ref this.grenadeThrow, ref this.tempInstance, "glow", 1.1f, new Vector3(1f, 0.1f, 0.0f));
          }
          else
          {
            if (this.pickupGlow)
            {
              float num = (float) Math.Sqrt((double) this.pickupDist);
              this.glowDistance = !this.myPlayer.closeCam ? num * 500f : num * 50f;
              float amount = (float) (1.0 - (double) num / 400.0);
              if (this.pickupType == 0)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.0f, 0.1f, 0.2f), Vector3.Zero, new Vector3(0.0f, 0.2f, 1f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.milk.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.milk, ref this.tempInstance, "glow", 1.2f, colorx);
              }
              if (this.pickupType == 1)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.3f, 0.0f, 0.0f), Vector3.Zero, new Vector3(1f, 0.6f, 0.0f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.grenade.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.grenade, ref this.tempInstance, "glow", 1.2f, colorx);
              }
              if (this.pickupType == 2)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.0f, 0.2f, 0.2f), Vector3.Zero, new Vector3(0.0f, 0.2f, 1f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.bulletbox.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.bulletbox, ref this.tempInstance, "glow", 1.2f, colorx);
              }
              if (this.pickupType == 3)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.0f, 0.2f, 0.0f), Vector3.Zero, new Vector3(0.0f, 1f, 0.0f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.hulkcan.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.hulkcan, ref this.tempInstance, "glow", 1.2f, colorx);
              }
              if (this.pickupType == 4)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.2f, 0.2f, 0.0f), Vector3.Zero, new Vector3(1f, 1f, 0.0f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.pill.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.pill, ref this.tempInstance, "glow", 1.2f, colorx);
              }
              if (this.pickupType == 5)
              {
                Vector3 colorx = Vector3.Hermite(new Vector3(0.3f, 0.2f, 0.0f), Vector3.Zero, new Vector3(1f, 0.2f, 0.0f), Vector3.Zero, amount);
                this.tempInstance[0].Trans = this.rocket.dupe[this.pickupIndex].transform;
                this.DrawPickupGlow(ref this.rocket, ref this.tempInstance, "glow", 1.2f, colorx);
              }
            }
            if (this.weaponGlow)
            {
              float num = (float) Math.Sqrt((double) this.weaponGlowDist);
              this.glowDistance = !this.myPlayer.closeCam ? num * 500f : num * 40f;
              float amount = (float) (1.0 - (double) num / 200.0);
              Vector3 myColor = Vector3.Hermite(new Vector3(0.05f, 0.1f, 0.3f), Vector3.Zero, new Vector3(0.7f, 0.7f, 1f), Vector3.Zero, amount);
              this.DrawWeaponGlow(this.weaponGlowIndex, (float) (0.60000002384185791 * (double) amount + 0.60000002384185791), myColor);
            }
          }
          if (this.boar.dupe.Count > 0 && this.lastBoarAlive >= 0 && this.leftBumperGlow && this.playerdownGlow < 0 && !this.editCam)
          {
            int lastBoarAlive = this.lastBoarAlive;
            Vector3 vector2 = Vector3.Normalize(this.camlookpos - this.campos);
            if ((double) Vector3.Dot(Vector3.Normalize(this.boar.dupe[lastBoarAlive].mypos - this.campos), vector2) > 0.72000002861022949)
            {
              this.makeitGlow = true;
              campos.Y += 30f;
              campos.Y -= this.boar.dupe[lastBoarAlive].scale * 240f;
              float num = Vector3.DistanceSquared(campos, this.boar.dupe[lastBoarAlive].mypos);
              this.glowDistance = (double) this.glowDistance <= 0.0 ? num : (float) (((double) this.glowDistance + (double) num) / 2.0);
              this.tempySkinArray[0].blood = 1f;
              this.tempySkinArray[0].tint = 2f;
              this.tempySkinArray[0].frame1 = (float) this.boar.dupe[lastBoarAlive].frame1;
              this.tempySkinArray[0].frame2 = (float) this.boar.dupe[lastBoarAlive].frame2;
              this.tempySkinArray[0].tween = this.boar.dupe[lastBoarAlive].tween;
              this.tempySkinArray[0].Transformation = Matrix.CreateScale(this.boar.dupe[lastBoarAlive].scale) * Matrix.CreateRotationY(this.boar.dupe[lastBoarAlive].myRot) * Matrix.CreateTranslation(this.boar.dupe[lastBoarAlive].mypos);
              if (this.boar.dupe[lastBoarAlive].boarGroup == 1)
              {
                if (this.boar.dupe[lastBoarAlive].isHead != 1)
                  this.DrawBoarPreGlow(ref this.boar, ref this.tempySkinArray, ref this.boar.model1);
                else
                  this.DrawBoarPreGlow(ref this.boar, ref this.tempySkinArray, ref this.boar.model2);
              }
              else if (this.boar.dupe[lastBoarAlive].isHead != 1)
                this.DrawBoarPreGlow(ref this.boar, ref this.tempySkinArray, ref this.boar.model3);
              else
                this.DrawBoarPreGlow(ref this.boar, ref this.tempySkinArray, ref this.boar.model4);
            }
          }
          this.sc.GraphicsDevice.SetRenderTarget((RenderTarget2D) null);
          this.sc.GraphicsDevice.Clear(Color.Black);
          if (this.sc.drawViewport)
            this.sc.GraphicsDevice.Viewport = this.sc.myviewport;
        }
        if ((double) this.sc.introCamera <= 0.0)
        {
          this.sc.GraphicsDevice.Clear(Color.Black);
          if (this.sc.drawViewport)
            this.sc.GraphicsDevice.Viewport = this.sc.myviewport;
        }
      }
      this.skyColor = this.sc.currentDay % 3 != 0 ? this.greyDay : this.colorDay;
      if (this.sc.dayTime == "pm")
        this.skyColor = this.overrideDay ? this.greyDay * MathHelper.Lerp(0.02f, 1f, this.sc.darkness) : new Color(10, 10, 11, (int) byte.MaxValue) * MathHelper.Lerp(0.1f, 6f, this.sc.darkness);
      if (this.tunneladd && this.inFarm == 2 && ((this.cryptLockMove < 188 ? 0 : (this.cryptLockMove2 >= 188 ? 1 : 0)) != 0 || this.myPlayer.isDown))
        this.skyColor = Color.Black;
      if (Princess4.cuttyCount > 0 && this.princess[0].explodeTimer < 0)
      {
        float explodeTimer = (float) this.princess[0].explodeTimer;
        if ((double) explodeTimer <= -400.0 && (double) explodeTimer >= -1900.0)
        {
          float amount = MathHelper.Clamp(Math.Abs(explodeTimer + 400f) / 400f, 0.0f, 1f);
          this.sc.redContrast = (int) MathHelper.Lerp(128f, 40f, amount);
          Color color = new Color(120, 20, 10, (int) byte.MaxValue);
          if ((double) explodeTimer < -850.0 && this.rr.Next(1, 900) < 15)
            color = new Color((int) byte.MaxValue, 100, 70, (int) byte.MaxValue) * ((float) this.rr.Next(70, 95) / 100f);
          this.skyColor = !(this.sc.dayTime != "pm") ? Color.Lerp(new Color(10, 10, 11, (int) byte.MaxValue) * MathHelper.Lerp(0.1f, 6f, this.sc.darkness), color, amount) : Color.Lerp(new Color(175, 175, 180, (int) byte.MaxValue), color, amount);
        }
        if ((double) explodeTimer <= -1900.0 && (double) explodeTimer >= -2500.0)
        {
          float amount = MathHelper.Clamp(Math.Abs(explodeTimer + 1900f) / 400f, 0.0f, 1f);
          Color color = new Color(80, 20, 10, (int) byte.MaxValue);
          if ((double) explodeTimer < -850.0 && this.rr.Next(1, 900) < 15)
            color = new Color((int) byte.MaxValue, 100, 70, (int) byte.MaxValue) * ((float) this.rr.Next(70, 95) / 100f);
          this.skyColor = !(this.sc.dayTime != "pm") ? Color.Lerp(new Color(120, 20, 10, (int) byte.MaxValue), color, amount) : Color.Lerp(new Color(120, 20, 10, (int) byte.MaxValue), color, amount);
        }
        if ((double) explodeTimer <= -2500.0)
        {
          float amount = MathHelper.Clamp(Math.Abs(explodeTimer + 2500f) / 900f, 0.0f, 1f);
          this.sc.redContrast = (int) MathHelper.Lerp(40f, 128f, amount);
          Color color = new Color(80, 20, 10, (int) byte.MaxValue);
          this.skyColor = !(this.sc.dayTime != "pm") ? Color.Lerp(color, new Color(10, 10, 11, (int) byte.MaxValue) * MathHelper.Lerp(0.1f, 6f, this.sc.darkness), amount) : Color.Lerp(color, new Color(175, 175, 180, (int) byte.MaxValue), amount);
        }
      }
      this.spriteBatch.Begin();
      if ((double) this.sc.introCamera > 0.0)
        this.spriteBatch.Draw(this.sc.whiteTexture, new Rectangle(0, 0, this.sc.devicex, this.sc.devicey), this.skyColor);
      else
        this.spriteBatch.Draw(this.sc.whiteTexture, new Rectangle(0, 0, this.sc.myviewport.Width, this.sc.myviewport.Height), this.skyColor);
      this.spriteBatch.End();
      this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
      this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
      this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      if (this.drawDaFarm && this.barnTriangle)
      {
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
        this.DrawBarnInterior(this.barnBuilding, this.buildingMatrix);
        if (this.remotelight)
        {
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
          this.DrawDeferred(this.barnBuilding, this.buildingMatrix, true);
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
        }
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.None;
        if (this.lampON)
        {
          this.lampGlow.AddParticle(new Vector3(3182f, 51f, 4450f), Vector3.Zero);
          this.lampGlow.AddParticle(new Vector3(3405f, 50f, 4789f), Vector3.Zero);
          this.lampGlow.Draw(0);
        }
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
        this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      }
      if (!this.tunnelDebug && this.drawDaFarm)
        this.DrawBuildingSimple(this.farmBuilding, this.buildingMatrix);
      if (this.tunneladd)
      {
        this.DrawCryptDoor();
        if (this.sc.gameState == 2 || this.tunnelDebug)
          this.DrawTunnel(this.buildingMatrix);
      }
      if (this.remotelight)
      {
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
        this.DrawDeferred2(this.farmBuilding, this.buildingMatrix);
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
      }
      if (this.drawDaFarm)
      {
        this.DrawButtons(ref this.grinderButton, Matrix.Identity);
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
        this.drawGrassClip(this.grass, this.buildingMatrix);
        this.drawGrassClip(this.trees, this.buildingMatrix);
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
        this.drawGrass(this.trees, this.buildingMatrix);
        if (this.cloudsLoaded)
        {
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.drawClouds(this.clouds, Matrix.CreateRotationY(this.sc.myTimer / 16000f) * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f)));
          this.drawClouds(this.clouds0, Matrix.CreateRotationY((float) (-(double) this.sc.myTimer / 14000.0)) * Matrix.CreateTranslation(new Vector3(3000f, 0.0f, 3000f)));
          this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
        }
        if (this.sc.dayTime == "pm" && this.moonExists && !this.specialMoon)
        {
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.drawMoon(this.moonScale * Matrix.CreateTranslation(new Vector3(0.0f, 0.0f, -12000f)) * this.moonMatrix * Matrix.CreateTranslation(this.campos), this.sc.moonTexture);
          this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
        }
        if (this.specialMoon)
        {
          this.moonMatrix = Matrix.CreateRotationX(0.6f) * Matrix.CreateRotationY(3.14f);
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.drawMoon(this.moonScale * Matrix.CreateTranslation(new Vector3(0.0f, 0.0f, -12000f)) * this.moonMatrix * Matrix.CreateTranslation(this.campos), this.angrymoon);
          this.sc.GraphicsDevice.BlendState = BlendState.NonPremultiplied;
        }
      }
      if (this.pim1.mirvSeeStreaks)
        this.drawMirvStreaks(this.mirvs1, ref this.pim1);
      if (this.pim2.mirvSeeStreaks)
        this.drawMirvStreaks(this.mirvs2, ref this.pim2);
      this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
      bool showSphere = false;
      bool flag1 = true;
      if ((double) this.sc.introCamera <= 0.0)
      {
        for (int index = 0; index < Cutty4.cuttyCount; ++index)
        {
          if (this.cuttyBoss[index].health > (ushort) 0 && flag1)
          {
            flag1 = false;
            this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
          }
          if (this.cuttyBoss[index].health <= (ushort) 0 && !flag1)
          {
            flag1 = true;
            this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
          }
          this.cuttyBoss[index].Draw(this.campos, this.view, this.proj, showSphere, ref this.ttWorld, this.matrix_0, this.techniBoar);
        }
      }
      if (flag1)
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      if (this.drawDaFarm && this.barnTriangle)
      {
        this.drawFarmer();
        this.DrawWallGuns();
      }
      if (this.tunneladd && this.twinFound && ((double) this.twinPosition.Y > 0.0 || this.inFarm == 2) && !this.atTwinFar)
        this.drawTwin();
      if (Princess4.cuttyCount > 0)
        this.princess[0].Draw(this.campos, this.view, this.proj, false, ref this.ttWorld, this.matrix_0, this.techniBoar, false);
      if (this.localID != 5 && this.localID != 7)
      {
        this.DrawMyChar();
      }
      else
      {
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
        this.DrawMyChar();
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      }
      if (this.sc.hatindex >= 1 && this.sc.hatindex <= this.sc.hats.Length - 1 && !this.myPlayer.closeCam)
      {
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
        this.DrawHat();
        this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      }
      if (this.inFarm == 1 || !this.tunneladd)
        this.sc.goldKeys.draw(this.myPlayer.displayState.npcPosition, this.view, this.proj, this.alternateCam);
      if (this.tunneladd && (this.tunnelDebug || this.inFarm == 2))
      {
        this.sc.goldKeys.drawTunnelKeys(this.myPlayer.displayState.npcPosition, this.view, this.proj, this.campos, this.alternateCam);
        if (this.twinFound && !this.atTwinFar)
        {
          Vector3 lite = Vector3.One;
          if (this.sc.redskull1 == 2)
          {
            lite = new Vector3((float) Math.Sin(5.2399997711181641), -0.7f, -(float) Math.Cos(5.2399997711181641));
            this.sc.goldKeys.drawSkullDisplay(1, this.view, this.proj, this.campos, lite);
          }
          if (this.sc.redskull2 == 2)
          {
            lite = new Vector3((float) Math.Sin(5.75), -0.7f, -(float) Math.Cos(5.75));
            this.sc.goldKeys.drawSkullDisplay(2, this.view, this.proj, this.campos, lite);
          }
          if (this.sc.redskull3 == 2)
          {
            lite = new Vector3((float) Math.Sin(5.9899997711181641), -0.7f, -(float) Math.Cos(6.0));
            this.sc.goldKeys.drawSkullDisplay(3, this.view, this.proj, this.campos, lite);
          }
          if (this.sc.tusk1 == 2)
          {
            lite = new Vector3(1.3f, -0.43f, 0.339f);
            this.sc.goldKeys.drawTuskDisplay(1, this.view, this.proj, this.campos, lite);
          }
          if (this.sc.tusk2 == 2)
          {
            lite = new Vector3(0.664f, -0.2f, 0.145f);
            this.sc.goldKeys.drawTuskDisplay(2, this.view, this.proj, this.campos, lite);
          }
          if (this.sc.tusk3 == 2)
          {
            lite = new Vector3(0.664f, 0.25f, 0.145f);
            this.sc.goldKeys.drawTuskDisplay(3, this.view, this.proj, this.campos, lite);
          }
        }
      }
      if (!this.myPlayer.isLiftingOpponent)
      {
        if (this.handtype[this.myPlayer.gunChoice] == 1)
          this.DrawGun(this.myPlayer.gunChoice, this.sc.gunOffset * this.myPlayer.pistolHand, this.myPlayer.mag[this.myPlayer.lastWeapon], this.myPlayer.recoilTimer2, this.myPlayer.animClip, this.myPlayer.animCount, (float) this.myPlayer.animMax, true, 0);
        else if (this.handtype[this.myPlayer.gunChoice] == 2)
        {
          this.DrawAK(this.myPlayer.gunChoice, this.sc.gunOffset * this.myPlayer.pistolHand);
          if (this.myPlayer.gunChoice == 14 && this.myPlayer.mag[14] > 0)
          {
            this.myPlayer.now.rocketLoaded = true;
            this.DrawMirvBomb(Matrix.CreateTranslation(new Vector3(-6f, 0.0f, 0.0f)) * this.sc.flashOffset[14] * this.myPlayer.pistolHand);
          }
          else
            this.myPlayer.now.rocketLoaded = false;
        }
        else if (this.myPlayer.gunChoice == this.gType)
        {
          float pulse = (float) ((double) this.myPlayer.grenCook % 60.0 / 59.0);
          if (this.myPlayer.grenCook > (byte) 0)
          {
            if ((int) this.myPlayer.grenCook % 60 == 0)
            {
              this.vibroTimer = 15;
              this.vibroTimerAmt = 100f;
              this.sc.tick.Play(this.sc.ev, 1f, 0.0f);
            }
            this.tempInstance[0].Trans = Matrix.CreateScale((float) (1.0 + (1.0 - (double) pulse) * 0.075000002980232239)) * Matrix.CreateFromYawPitchRoll(-0.232f, 0.0f, -9.71f) * Matrix.CreateTranslation(-22.6f, 42.898f, 1.331f) * this.myPlayer.pistolHand;
            this.DrawPickupPulse(ref this.grenade, ref this.tempInstance, pulse);
          }
          else
          {
            this.tempInstance[0].Trans = Matrix.CreateScale(1f) * Matrix.CreateFromYawPitchRoll(-0.232f, 0.0f, -9.71f) * Matrix.CreateTranslation(-22.6f, 42.898f, 1.331f) * this.myPlayer.pistolHand;
            this.DrawPickupinHand(ref this.grenade, ref this.tempInstance, "pickup");
          }
        }
        else if (this.myPlayer.gunChoice == this.mType)
        {
          this.tempInstance[0].Trans = Matrix.CreateScale(0.7f) * Matrix.CreateFromYawPitchRoll(0.1396f, -1.57f, -3.14f) * Matrix.CreateTranslation(-23.278f, 41.373f, 1.868f) * this.myPlayer.pistolHand;
          this.DrawPickupinHand(ref this.milk, ref this.tempInstance, "pickup");
        }
        else if (this.myPlayer.gunChoice == this.hType)
        {
          this.tempInstance[0].Trans = Matrix.CreateScale(0.7f) * Matrix.CreateFromYawPitchRoll(0.1396f, -1.57f, -3.14f) * Matrix.CreateTranslation(-23.278f, 41.373f, 1.868f) * this.myPlayer.pistolHand;
          this.DrawPickupinHand(ref this.hulkcan, ref this.tempInstance, "pickup");
        }
        else if (this.myPlayer.gunChoice == this.pType)
        {
          float xPosition = -22.84f;
          float yPosition = 42.64f;
          float zPosition = 1.9f;
          this.tempInstance[0].Trans = Matrix.CreateScale(0.9f) * Matrix.CreateFromYawPitchRoll(-0.232f, 0.0f, -1.8f) * Matrix.CreateTranslation(xPosition, yPosition, zPosition) * this.myPlayer.pistolHand;
          this.DrawPickupinHand(ref this.pill, ref this.tempInstance, "pickup");
        }
      }
      this.DrawInstance(ref this.primShell, "fastShader", 1.1f);
      this.DrawInstance(ref this.secondShell, "fastShader", 1.1f);
      this.DrawInstance(ref this.primShell_rem, "fastShader", 1.1f);
      this.DrawInstance(ref this.secondShell_rem, "fastShader", 1.1f);
      if (this.myPlayer.gunChoice == 0)
        this.DrawRevolverShells(this.revolver);
      if (this.pim1.mirvMoving)
        this.DrawMirvBomb(Matrix.CreateTranslation(new Vector3(-6f, 0.0f, 0.0f)) * this.pim1.mirvTrans);
      if (this.pim2.mirvMoving)
        this.DrawMirvBomb(Matrix.CreateTranslation(new Vector3(-6f, 0.0f, 0.0f)) * this.pim2.mirvTrans);
      if (this.drawDaFarm)
      {
        this.DrawInstance(ref this.carnage, "boarHead", 1f);
        this.DrawInstance(ref this.charro, "boarHead", 1.3f);
        this.DrawInstance(ref this.pigbone, "boarHead", 1f);
      }
      if (this.drawDaFarm && this.barnTriangle)
      {
        if ((double) this.myPlayer.flashTimer > 0.0 && this.myPlayer.gunChoice != 16)
        {
          Vector3 vector1 = Vector3.Normalize(this.myPlayer.gunlook - this.myPlayer.gunpos);
          Vector3 vector2_1 = Vector3.Normalize(new Vector3(3430f, this.myPlayer.gunpos.Y, 4720f) - this.myPlayer.gunpos);
          Vector3 vector2_2 = Vector3.Normalize(new Vector3(3430f, this.myPlayer.gunpos.Y, 4544f) - this.myPlayer.gunpos);
          if ((double) Vector3.Dot(vector1, vector2_1) > 0.40000000596046448)
          {
            this.light1 = Vector3.Normalize(new Vector3(3430f, this.myPlayer.gunpos.Y, 4720f) - this.myPlayer.displayState.npcPosition);
            this.light1.Y = (float) (Math.Sin((double) this.sc.myTimer / 8.0) * 0.20000000298023224 + 0.0);
            this.light1.Z = -this.light1.Z;
            this.light1 *= (float) this.rr.Next(80, 130) / 100f;
          }
          if ((double) Vector3.Dot(vector1, vector2_2) > 0.40000000596046448)
          {
            this.light2 = Vector3.Normalize(new Vector3(3430f, this.myPlayer.gunpos.Y, 4544f) - this.myPlayer.displayState.npcPosition);
            this.light2.Y = (float) (Math.Sin((double) this.sc.myTimer / 12.0) * 0.20000000298023224 + 0.0);
            this.light2.Z = -this.light2.Z;
            this.light2 *= (float) this.rr.Next(80, 130) / 100f;
          }
        }
        else
        {
          this.light1 = Vector3.Normalize(new Vector3(0.4f, -0.7f, 0.5f));
          this.light2 = Vector3.Normalize(new Vector3(0.4f, -0.9f, -0.4f));
        }
        this.DrawChain(this.chain, "chain", this.light1);
        this.DrawChain(this.chain2, "chain", this.light2);
      }
      if (this.drawDaFarm)
      {
        this.DrawInstance(ref this.head, "boarHead", 1f);
        this.DrawInstance(ref this.leg, "boarHead", 1f);
        this.DrawInstance(ref this.body, "boarHead", 1f);
        this.DrawInstance(ref this.butt, "boarHead", 1f);
        this.DrawInstance2(ref this.head, "boarHead", 1f);
        this.DrawInstance2(ref this.leg, "boarHead", 1f);
        this.DrawInstance2(ref this.body, "boarHead", 1f);
        this.DrawInstance2(ref this.butt, "boarHead", 1f);
        this.DrawPickup(ref this.milk, "pickup");
        this.DrawPickup(ref this.hulkcan, "pickup");
        this.DrawPickup(ref this.bulletbox, "pickup");
        this.DrawPickup(ref this.pill, "pickup");
        this.DrawPickup(ref this.rocket, "pickup");
        this.DrawGore(ref this.pigchunk, "gore");
        if (this.batsLoaded)
        {
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
          if (this.bat.index1 > 0)
            this.DrawButterfly(ref this.bat, this.bat.index1);
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
        }
        if (this.boar.index1 > 0)
          this.DrawBoar1(ref this.boar, this.boar.index1);
        if (this.boar.index2 > 0)
          this.DrawHeadlessBoar1(ref this.boar, this.boar.index2);
        if (this.boar.index3 > 0)
          this.DrawBoar2(ref this.boar, this.boar.index3);
        if (this.boar.index4 > 0)
          this.DrawHeadlessBoar2(ref this.boar, this.boar.index4);
        if (this.boar.indexC > 0)
          this.DrawBoarChar(ref this.boar, this.boar.indexC);
        if (this.boar.indexZ > 0)
          this.DrawBoarZombie(ref this.boar, this.boar.indexZ);
        if (this.boar.indexS > 0)
        {
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.None;
          this.DrawBoarSkel(ref this.boar, this.boar.indexS);
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
        }
      }
      this.DrawPickup(ref this.grenade, "pickup");
      this.DrawPickup(ref this.grenadeThrow, "pickup");
      this.DrawPickup(ref this.debris, "pickup");
      if (this.myPlayer.tunnelHeal)
      {
        if (this.myPlayer.isDown)
        {
          this.editCam = false;
          this.myPlayer.bloodExists = false;
          this.myPlayer.autoCamOn = false;
          this.myPlayer.autoCamTimer = 0.0f;
          this.myPlayer.isDown = false;
          this.myPlayer.now.health = 110f;
          this.myPlayer.noArms = false;
          this.myPlayer.now.weapon = this.myPlayer.gunChoice;
          this.myPlayer.fallState = 0;
          this.localModel = this.sc.player1Model;
        }
        this.myPlayer.now.health += 0.3f;
        if ((double) this.myPlayer.now.health > 198.0)
        {
          this.myPlayer.now.health = 198f;
          this.myPlayer.tunnelHeal = false;
        }
      }
      if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (!(this.remPlayer[index].id == this.mysteamID))
          {
            if (this.remPlayer[index].r.remoteID != 5 && this.remPlayer[index].r.remoteID != 7)
            {
              this.DrawRemChar(index);
            }
            else
            {
              this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
              this.DrawRemChar(index);
              this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
            }
            if (this.remPlayer[index].r.hatindex >= 1 && this.remPlayer[index].r.hatindex <= this.sc.hats.Length - 1)
            {
              this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
              this.DrawRemHat(index);
              this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
            }
            if (this.remPlayer[index].r.isLiftingYou < 0 && this.remPlayer[index].r.remoteID != 6)
            {
              if (this.handtype[this.remPlayer[index].r.gunChoice] == 1)
                this.DrawGun(this.remPlayer[index].r.gunChoice, this.sc.gunOffset * this.remPlayer[index].r.pistolHand, 2, this.remPlayer[index].r.recoilTimer, this.remPlayer[index].r.animClip, this.remPlayer[index].r.animCount, (float) this.remPlayer[index].r.animMax, false, index);
              else if (this.handtype[this.remPlayer[index].r.gunChoice] == 2)
              {
                this.DrawAK(this.remPlayer[index].r.gunChoice, this.sc.gunOffset * this.remPlayer[index].r.pistolHand);
                if (this.remPlayer[index].r.gunChoice == 14 && this.remPlayer[index].r.now.rocketLoaded)
                  this.DrawMirvBomb(Matrix.CreateTranslation(new Vector3(-6f, 0.0f, 0.0f)) * this.sc.flashOffset[14] * this.remPlayer[index].r.pistolHand);
              }
              else if (this.remPlayer[index].r.gunChoice == this.gType)
              {
                this.tempInstance[0].Trans = Matrix.CreateScale(1f) * Matrix.CreateFromYawPitchRoll(-0.232f, 0.0f, -9.71f) * Matrix.CreateTranslation(-22.6f, 42.898f, 1.331f) * this.remPlayer[index].r.pistolHand;
                this.DrawPickupinHand(ref this.grenade, ref this.tempInstance, "pickup");
              }
              else if (this.remPlayer[index].r.gunChoice == this.mType)
              {
                this.tempInstance[0].Trans = Matrix.CreateScale(0.7f) * Matrix.CreateFromYawPitchRoll(0.1396f, -1.57f, -3.14f) * Matrix.CreateTranslation(-23.278f, 41.373f, 1.868f) * this.remPlayer[index].r.pistolHand;
                this.DrawPickupinHand(ref this.milk, ref this.tempInstance, "pickup");
              }
              else if (this.remPlayer[index].r.gunChoice == this.hType)
              {
                this.tempInstance[0].Trans = Matrix.CreateScale(0.7f) * Matrix.CreateFromYawPitchRoll(0.1396f, -1.57f, -3.14f) * Matrix.CreateTranslation(-23.278f, 41.373f, 1.868f) * this.remPlayer[index].r.pistolHand;
                this.DrawPickupinHand(ref this.hulkcan, ref this.tempInstance, "pickup");
              }
              else if (this.remPlayer[index].r.gunChoice == this.pType)
              {
                this.tempInstance[0].Trans = Matrix.CreateScale(0.9f) * Matrix.CreateFromYawPitchRoll(-0.232f, 0.0f, -1.8f) * Matrix.CreateTranslation(-22.6f, 42.5f, 1.8f) * this.remPlayer[index].r.pistolHand;
                this.DrawPickupinHand(ref this.pill, ref this.tempInstance, "pickup");
              }
            }
          }
        }
      }
      if (this.tunneladd && (this.sc.gameState == 2 && this.inFarm == 2 || this.tunnelDebug))
      {
        this.orange.draw(this.view, this.proj);
        this.enemy1.techniWorld = this.techniWorld;
        this.enemy1.tunnelDebug = this.tunnelDebug;
        this.enemy1.ttWorld = this.ttWorld;
        this.enemy1.view = this.view;
        this.enemy1.proj = this.proj;
        this.enemy1.matrix_0 = this.matrix_0;
        this.enemy1.Draw(this.tunnelCheats);
        if (this.web.index1 > 0)
        {
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.DrawWeb1(ref this.web, this.web.index1);
        }
      }
      this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
      this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
      this.sc.GraphicsDevice.BlendState = BlendState.AlphaBlend;
      this.DrawWallhits(ref this.farm, Matrix.Identity);
      this.DrawWallhits(ref this.door, Matrix.CreateTranslation(0.0f, 0.0f, this.barnDoorslide.Z));
      if (this.tunneladd)
      {
        this.DrawWallhits(ref this.cryptdoor, this.cryptMatrix);
        this.DrawWallhits(ref this.cryptdoor2, this.cryptMatrix2);
        if (this.tunneladd && this.inFarm == 2)
        {
          for (int index = 0; index < this.combo.Count; ++index)
            this.DrawWallhits(ref this.combo[index].doorholes, this.combo[index].doorMatrix);
          for (int index = 0; index < this.plain.Count; ++index)
            this.DrawWallhits(ref this.plain[index].doorholes, this.plain[index].doorMatrix);
          for (int index = 0; index < this.hidden.Count; ++index)
            this.DrawWallhits(ref this.hidden[index].doorholes, this.hidden[index].doorMatrix);
        }
      }
      if (Princess4.cuttyCount == 0)
      {
        this.DrawGrenadeExplosion(ref this.grenExplosion, Matrix.Identity);
        this.sc.GraphicsDevice.BlendState = BlendState.Additive;
        this.DrawMirvExplosion(ref this.mirvExplosion, Matrix.Identity);
      }
      if (Princess4.cuttyCount > 0)
      {
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.Default;
        this.princess[0].drawCanvas();
        if (this.princess[0].cuttyRoll)
        {
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.princess[0].drawTunnel();
          this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
          this.princess[0].drawDots();
        }
        this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
        this.sc.GraphicsDevice.BlendState = BlendState.AlphaBlend;
        if (this.princess[0].death1)
          this.princess[0].DrawPuke(0.8f);
        else
          this.princess[0].DrawPuke(0.3f);
        this.princess[0].DrawBoulders(this.campos);
      }
      if (this.particlesLoaded)
      {
        this.debrisFire.Draw(5);
        if (Princess4.cuttyCount > 0)
        {
          this.debrisblood.Draw(2);
          this.sc.GraphicsDevice.BlendState = BlendState.Additive;
          this.princess[0].drawBurst();
          this.DrawMirvExplosion(ref this.mirvExplosion, Matrix.Identity);
          this.sc.GraphicsDevice.BlendState = BlendState.AlphaBlend;
          this.DrawGrenadeExplosion(ref this.grenExplosion, Matrix.Identity);
        }
        this.rocketsmoke.Draw(4);
        this.headblood.Draw(1);
        if (this.tunneladd && this.inFarm == 2)
          this.blood.Draw(6);
        else
          this.blood.Draw(3);
        if (this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID))
              this.remPlayer[index].r.bloodrem.Draw(3);
          }
        }
        this.bloodg.Draw(3);
        this.bits.Draw(0);
        this.humanblood.Draw(0);
        this.sparks.Draw(0);
        this.sparks2.Draw(0);
        this.electric.Draw(0);
        if (this.leverTimer > 0)
        {
          this.DrawZolt(this.zolt, "glow");
          this.myPlayer.now.leverOn = false;
        }
        bool flag2 = this.pim1.mirvMoving && (double) this.pim1.mirvAge < 400.0;
        bool flag3 = this.pim2.mirvMoving && (double) this.pim2.mirvAge < 400.0;
        if (flag2 || flag3)
        {
          this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive);
          if (flag2)
          {
            Vector3 vector3 = this.sc.GraphicsDevice.Viewport.Project(this.pim1.mirvPos, this.proj, this.view, Matrix.Identity);
            Vector2 vector2_3 = new Vector2(vector3.X, vector3.Y);
            Vector2 vector2_4 = new Vector2(640f, 360f) - vector2_3;
            foreach (BloodnBacon4PT.Flare flare in this.flares)
            {
              Vector2 position = vector2_3 + vector2_4 * flare.Position;
              Vector4 vector4 = flare.Color.ToVector4();
              vector4.W *= 1.8f - MathHelper.Clamp((float) (((double) this.pim1.mirvAge - 160.0) / 120.0), 0.0f, 1.8f);
              Vector2 origin = new Vector2((float) flare.Texture.Width, (float) flare.Texture.Height) / 2f;
              this.spriteBatch.Draw(flare.Texture, position, new Rectangle?(), new Color(vector4), 0.0f, origin, flare.Scale, SpriteEffects.None, 0.0f);
            }
          }
          if (flag3)
          {
            Vector3 vector3 = this.sc.GraphicsDevice.Viewport.Project(this.pim2.mirvPos, this.proj, this.view, Matrix.Identity);
            Vector2 vector2_5 = new Vector2(vector3.X, vector3.Y);
            Vector2 vector2_6 = new Vector2(640f, 360f) - vector2_5;
            foreach (BloodnBacon4PT.Flare flare in this.flares)
            {
              Vector2 position = vector2_5 + vector2_6 * flare.Position;
              Vector4 vector4 = flare.Color.ToVector4();
              vector4.W *= 1.8f - MathHelper.Clamp((float) (((double) this.pim1.mirvAge - 160.0) / 120.0), 0.0f, 1.8f);
              Vector2 origin = new Vector2((float) flare.Texture.Width, (float) flare.Texture.Height) / 2f;
              this.spriteBatch.Draw(flare.Texture, position, new Rectangle?(), new Color(vector4), 0.0f, origin, flare.Scale, SpriteEffects.None, 0.0f);
            }
          }
          this.spriteBatch.End();
          this.sc.GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
        }
      }
      this.gunsmoke.Draw(0);
      this.farmerspit.Draw(0);
      this.sc.GraphicsDevice.BlendState = BlendState.AlphaBlend;
      if ((double) this.waterRamp1 <= 0.0 && (double) this.waterRamp2 <= 0.0)
      {
        this.localPump = 0;
      }
      else
      {
        if ((double) this.waterRamp1 > 0.0)
          this.drawWater1();
        if ((double) this.waterRamp2 > 0.0)
          this.drawWater2();
      }
      if (this.writingToday)
        this.drawWriting(this.writingModel1, this.buildingMatrix, this.barnWrite);
      this.DrawScreenSplat(ref this.hudsplats);
      this.sc.GraphicsDevice.BlendState = BlendState.Additive;
      this.sc.GraphicsDevice.RasterizerState = RasterizerState.CullNone;
      if (this.tunneladd && this.showTunnelArrow && this.mazeid == 0)
        this.drawLaser(this.tracer2, Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateTranslation(1252f, 3f, 4545f), true);
      if (Cutty4.cuttyCount > 0)
      {
        for (int index = 0; index < Cutty4.cuttyCount; ++index)
          this.cuttyBoss[index].DrawEyes(this.campos);
        for (int index = 0; index < Cutty4.cuttyCount; ++index)
          this.cuttyBoss[index].DrawFireBall();
      }
      if (this.pim1.mirvMoving && (double) this.pim1.mirvAge > 20.0)
        this.DrawSideFlash(this.sc.gunMuzzle, (float) this.rr.Next(220, 410) / 100f * MathHelper.Clamp((float) (((double) this.pim1.mirvAge - 20.0) / 120.0), 0.01f, 1f), Matrix.CreateRotationY(3.14f) * this.pim1.mirvTrans, this.rr.Next(1, 5), 0.0f);
      if (this.pim2.mirvMoving && (double) this.pim2.mirvAge > 20.0)
        this.DrawSideFlash(this.sc.gunMuzzle, (float) this.rr.Next(220, 410) / 100f * MathHelper.Clamp((float) (((double) this.pim2.mirvAge - 20.0) / 120.0), 0.01f, 1f), Matrix.CreateRotationY(3.14f) * this.pim2.mirvTrans, this.rr.Next(1, 5), 0.0f);
      if (this.myPlayer.gunChoice != 16)
      {
        if ((double) this.myPlayer.flashTimer >= 0.699999988079071 && this.myPlayer.flashfromSide)
        {
          this.myPlayer.gunsideScale += 0.12f;
          this.DrawSideFlash(this.sc.gunMuzzle, this.myPlayer.gunsideScale, this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, this.myPlayer.flashChoice, this.myPlayer.flashTimer);
        }
        if ((double) this.myPlayer.blastTimer >= 1.0 && !this.myPlayer.flashfromSide)
        {
          this.myPlayer.gunfrontScale += 0.02f;
          this.DrawFrontBlast(this.sc.gunBlast, this.myPlayer.gunfrontScale, Matrix.CreateRotationX(this.myPlayer.blastRot) * this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, this.myPlayer.blastTimer, this.myPlayer.flashSide);
        }
      }
      if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.gunChoice != 16)
          {
            if ((double) this.remPlayer[index].r.flashTimer > 0.699999988079071 && (double) this.remPlayer[index].r.flashTimer < 1.0 && this.remPlayer[index].r.flashfromSide)
              this.DrawSideFlash(this.sc.gunMuzzle, this.remPlayer[index].r.gunsideScale, this.sc.flashOffset[this.remPlayer[index].r.lastWeapon] * this.remPlayer[index].r.pistolHand, this.remPlayer[index].r.flashChoice, this.remPlayer[index].r.flashTimer);
            if ((double) this.remPlayer[index].r.blastTimer >= 1.0 && !this.remPlayer[index].r.flashfromSide)
            {
              this.remPlayer[index].r.gunfrontScale += 0.02f;
              this.DrawFrontBlast(this.sc.gunBlast, this.remPlayer[index].r.gunfrontScale, Matrix.CreateRotationX(this.remPlayer[index].r.blastRot) * this.sc.flashOffset[this.remPlayer[index].r.lastWeapon] * this.remPlayer[index].r.pistolHand, this.remPlayer[index].r.blastTimer, this.remPlayer[index].r.flashSide);
            }
          }
        }
      }
      if (this.techniWorld == 1 && this.myPlayer.gunChoice < this.gType)
      {
        if (this.myPlayer.isDown)
          this.drawLaser(this.blueLaser, Matrix.CreateScale(5f, 5f, 220f) * Matrix.CreateRotationY(1.57f) * this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, false);
        else if (this.myPlayer.animClip == -1)
          this.drawLaser(this.blueLaser, Matrix.CreateScale(5f, 5f, 220f) * Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation) * Matrix.CreateTranslation(this.gunpos1World), false);
        else
          this.drawLaser(this.blueLaser, Matrix.CreateScale(5f, 5f, 220f) * Matrix.CreateRotationY(1.57f) * this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand, false);
      }
      if (this.makeitGlow)
      {
        if (Cutty4.gonnaHealindex != -1)
          this.applyBossGlow(Cutty4.gonnaHealindex);
        else
          this.ApplyGlow();
      }
      if ((double) this.sc.introCamera <= 0.0)
        this.DrawOptions(gameTime);
      if ((double) this.sc.introCamera > 0.0)
      {
        this.sc.protectScreen = false;
        this.spriteBatch.Begin();
        this.sc.blackdayFader -= 2f;
        this.spriteBatch.Draw(this.sc.blackTexture, new Rectangle(0, 0, this.sc.GraphicsDevice.Viewport.Width, this.sc.GraphicsDevice.Viewport.Height), new Color(1f, 1f, 1f, MathHelper.Hermite(0.0f, 0.0f, 1f, 0.0f, MathHelper.Clamp(this.sc.blackdayFader / 150f, 0.0f, 1f))));
        this.sc.introCamera -= this.introSpeed;
        if ((double) this.sc.introCamera <= 0.0)
        {
          this.sc.protectScreen = false;
          if (this.sc.grinderToday > 0)
          {
            bool flag4 = false;
            if ((this.sc.grinderYesterday & 1) != 0)
              this.sc.grinder_Unlock[1] = 1;
            if ((this.sc.grinderYesterday & 2) != 0)
              this.sc.grinder_Unlock[2] = 1;
            if ((this.sc.grinderYesterday & 4) != 0)
              this.sc.grinder_Unlock[3] = 1;
            if ((this.sc.grinderYesterday & 8) != 0)
              this.sc.grinder_Unlock[4] = 1;
            if ((this.sc.grinderYesterday & 16) != 0)
              this.sc.grinder_Unlock[5] = 1;
            if ((this.sc.grinderToday & 1) != 0 && this.sc.grinder_Unlock[1] == 0)
            {
              this.sc.grinder_Unlock[1] = 1;
              flag4 = true;
              if (this.sc.grenades <= 0)
                ++this.sc.grenades;
            }
            if ((this.sc.grinderToday & 2) != 0 && this.sc.grinder_Unlock[2] == 0)
            {
              this.sc.grinder_Unlock[2] = 1;
              flag4 = true;
              if (this.sc.milks <= 0)
                ++this.sc.milks;
            }
            if ((this.sc.grinderToday & 4) != 0 && this.sc.grinder_Unlock[3] == 0)
            {
              this.sc.grinder_Unlock[3] = 1;
              flag4 = true;
              if (this.sc.hulks <= 0)
                ++this.sc.hulks;
            }
            if ((this.sc.grinderToday & 8) != 0 && this.sc.grinder_Unlock[4] == 0)
            {
              this.sc.grinder_Unlock[4] = 1;
              flag4 = true;
              if (this.sc.pills <= 0)
                ++this.sc.pills;
            }
            if ((this.sc.grinderToday & 16) != 0 && this.sc.grinder_Unlock[5] == 0)
            {
              this.sc.grinder_Unlock[5] = 1;
              flag4 = true;
              if (this.sc.rockets <= 0)
                ++this.sc.rockets;
            }
            if (flag4)
            {
              this.memoTimer = 360;
              BloodnBacon4PT.memo.Length = 0;
              this.memoIcon = 2;
              BloodnBacon4PT.memo.Append("new Pickup at the Grinder !!");
              this.sc.fanfare.Play(this.sc.ev, 0.0f, 0.0f);
            }
            this.oldbloodLevel = -1f;
          }
        }
        float amount = MathHelper.Clamp((float) (((double) this.sc.introCamera - 300.0) / 60.0), 0.0f, 1f);
        double num = (double) MathHelper.Clamp((float) (((double) this.sc.introCamera - 200.0) / 40.0), 0.0f, 1f);
        BloodnBacon4PT.my_stringbuilder.Length = 0;
        BloodnBacon4PT.my_stringbuilder.Append("DAY ");
        BloodnBacon4PT.my_stringbuilder.Concat(this.sc.currentDay);
        Vector2 position = new Vector2((float) this.sc.GraphicsDevice.Viewport.Width, (float) this.sc.GraphicsDevice.Viewport.Height) / 2f;
        float scale = (float) this.sc.screenSize.Width / (float) this.sc.origSize.Width;
        Vector2 origin1 = this.ammoLargestFont.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f;
        this.spriteBatch.DrawString(this.ammoLargestFont, BloodnBacon4PT.my_stringbuilder, position + new Vector2(1f, -4f), Color.Black * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, scale, SpriteEffects.None, 0.0f);
        this.spriteBatch.DrawString(this.ammoLargestFont, BloodnBacon4PT.my_stringbuilder, position + new Vector2(4f, 1f), Color.Black * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, scale, SpriteEffects.None, 0.0f);
        this.spriteBatch.DrawString(this.ammoLargestFont, BloodnBacon4PT.my_stringbuilder, position, Color.White * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, scale, SpriteEffects.None, 0.0f);
        if (this.sc.tunnelDay.Contains(this.sc.currentDay) && this.sc.showTunnels)
        {
          this.spriteBatch.DrawString(this.ammoLargestFont, "explore the tunnels", new Vector2(0.0f, origin1.Y + 35f) + position + new Vector2(1f, -4f), Color.Black * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, 0.2f * scale, SpriteEffects.None, 0.0f);
          this.spriteBatch.DrawString(this.ammoLargestFont, "explore the tunnels", new Vector2(0.0f, origin1.Y + 35f) + position + new Vector2(4f, 1f), Color.Black * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, 0.2f * scale, SpriteEffects.None, 0.0f);
          this.spriteBatch.DrawString(this.ammoLargestFont, "explore the tunnels", new Vector2(0.0f, origin1.Y + 35f) + position, Color.White * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin1, 0.2f * scale, SpriteEffects.None, 0.0f);
          Vector2 origin2 = origin1 + new Vector2(-490f, -166f);
          Rectangle rectangle = new Rectangle(2, 1326, 94, 48);
          if (this.mazeid == 1 && this.sc.tusk1 == 0)
            rectangle = new Rectangle(108, 1326, 94, 48);
          if (this.mazeid == 2 && this.sc.tusk2 == 0)
            rectangle = new Rectangle(108, 1326, 94, 48);
          if (this.mazeid == 4 && this.sc.tusk3 == 0)
            rectangle = new Rectangle(108, 1326, 94, 48);
          this.spriteBatch.Draw(this.sc.overlay, new Vector2(position.X, position.Y), new Rectangle?(rectangle), Color.White * MathHelper.Lerp(0.0f, 1f, amount), 0.0f, origin2, scale, SpriteEffects.None, 0.0f);
        }
        this.spriteBatch.End();
        if ((int) this.sc.introCamera > 430 && (int) this.sc.introCamera < 435 && !this.sc.musicDemo)
        {
          this.sc.musicDemo = true;
          this.sc.startMusic.Play(this.sc.mv, 0.0f, 0.0f);
        }
        if (this.sc.currentDay == 6 && !this.sc.fenceDemo && (int) this.sc.introCamera > 270 && (int) this.sc.introCamera < 275)
        {
          this.sc.fenceDemo = true;
          this.sc.fence.Play(this.sc.ev, (float) this.rr.Next(-10, 10) / 100f, 0.0f);
          this.leverTimer = 160;
        }
        if (this.sc.dayTime == "pm")
        {
          this.sc.darkness = 1f;
          if ((double) this.sc.introCamera <= 0.0)
            this.sc.darkness = this.sc.realDarkness;
        }
        else
        {
          this.sc.darkness = 1f;
          this.sc.realDarkness = 1f;
        }
        if (Cutty4.cuttyCount > 0)
        {
          for (int index = 0; index < Cutty4.cuttyCount; ++index)
          {
            if ((double) this.cuttyBoss[index].shockTimer <= 0.0)
              this.cuttyBoss[index].olderDarkness = this.sc.darkness;
          }
        }
        this.sc.olderdarkness = this.sc.darkness;
      }
      base.Draw(gameTime);
    }

    private void calcFlash()
    {
      this.ttWorld = this.crosshair;
      this.depthWorld = 2900f;
      this.flicker1 = 1f;
      this.techniWorld = 2;
      this.techniBoar = 2;
      this.gunpos1World = Vector3.Zero;
      this.matrix_0 = Matrix.Identity;
      Matrix identity = Matrix.Identity;
      Vector3 cameraTarget1 = Vector3.Zero;
      this.remotelight = false;
      if (this.leverTimer <= 0)
      {
        if (this.remPlayer.Count > 1)
        {
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID))
            {
              if (this.remPlayer[index].r.gunChoice != 16 && this.remPlayer[index].r.now.gunfired > 0 || this.remPlayer[index].r.now.flashlight)
              {
                this.remotelight = true;
                this.remPlayer[index].r.remotelight = true;
                this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(50f), 1.1f, 15f, this.maxdistance);
                Matrix matrix = this.remPlayer[index].r.gunChoice >= this.gType ? Matrix.CreateRotationY(-0.5f) * this.sc.flashlightOffset * this.remPlayer[index].r.pistolHand : this.sc.flashlightOffset * this.remPlayer[index].r.pistolHand;
                this.remPlayer[index].r.lightPos2 = Vector3.Transform(new Vector3(-50f, 0.0f, 0.0f), matrix);
                Vector3 cameraTarget2 = Vector3.Transform(new Vector3(15f, 0.0f, 0.0f), matrix);
                this.remPlayer[index].r.ttWorld2 = this.sc.spotTexture;
                if (this.remPlayer[index].r.now.gunfired > 0)
                {
                  this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians((float) this.rr.Next(600, 1100) / 10f), 1.1f, 15f, this.maxdistance);
                  this.remPlayer[index].r.ttWorld2 = this.burster;
                }
                if (this.tunneladd && this.inFarm == 2)
                  this.remPlayer[index].r.ttWorld2 = this.flashlightPack[this.remPlayer[index].r.spotlight];
                this.remPlayer[index].r.matrix_0 = Matrix.CreateLookAt(this.remPlayer[index].r.lightPos2, cameraTarget2, this.remPlayer[index].r.pistolHand.Up) * this.myProjWorld;
                this.remPlayer[index].r.flicker2 = 1.5f;
                if (this.sc.dayTime != "pm" || this.myPlayer.inBarn)
                  this.remPlayer[index].r.flicker2 = 1f;
                if (this.tunneladd && this.inFarm == 2)
                  this.remPlayer[index].r.flicker2 = 1.5f;
              }
              else
                this.remPlayer[index].r.remotelight = false;
            }
          }
        }
        if ((double) this.myPlayer.flashTimer > 0.0 && this.myPlayer.gunChoice != 16)
        {
          if (this.myPlayer.gunChoice >= this.gType || this.myPlayer.gunChoice == 16)
            return;
          Matrix matrix = this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand;
          this.techniWorld = 0;
          this.techniBoar = 0;
          this.depthWorld = 900f;
          this.flicker1 = (float) this.rr.Next(90, 130) / 100f;
          if (this.sc.dayTime != "pm")
            this.flicker1 = (float) this.rr.Next(60, 100) / 100f;
          this.ttWorld = this.burster;
          this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians((float) this.rr.Next(600, 1100) / 10f), 1.1f, 15f, this.maxdistance);
          this.gunpos1World = Vector3.Transform(Vector3.Zero, matrix);
          this.matrix_0 = Matrix.CreateLookAt(this.gunpos1World, Vector3.Transform(new Vector3(15f, -6f, -2f), matrix), this.myPlayer.pistolHand.Up) * this.myProjWorld;
        }
        else
        {
          if (!this.myPlayer.closeCam && !this.lightON && this.myPlayer.gunChoice < this.gType)
          {
            this.ttWorld = this.crosshair;
            this.techniWorld = 1;
            this.techniBoar = 1;
            this.depthWorld = 3000f;
            this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(50f), 1.1f, 15f, this.maxdistance);
            Matrix matrix = this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand;
            this.gunpos1World = Vector3.Transform(new Vector3(0.0f, 0.0f, 0.0f), matrix);
            Vector3 cameraTarget3 = this.gunpos1World + Vector3.Transform(new Vector3(0.0f, 0.0f, 2500f), Matrix.CreateRotationX(this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(this.myPlayer.displayState.npcRotation));
            if (this.myPlayer.animClip != -1)
              cameraTarget3 = Vector3.Transform(new Vector3(15f, 0.0f, 0.0f), matrix);
            this.matrix_0 = Matrix.CreateLookAt(this.gunpos1World, cameraTarget3, Vector3.Up) * this.myProjWorld;
            if (this.myPlayer.isDown)
              this.matrix_0 = Matrix.CreateLookAt(this.gunpos1World, Vector3.Transform(new Vector3(1500f, 0.0f, 0.0f), matrix), this.myPlayer.pistolHand.Up) * this.myProjWorld;
          }
          if (!this.lightON)
            return;
          this.techniWorld = 0;
          this.techniBoar = 0;
          this.flicker1 = 1.3f;
          if (this.sc.dayTime != "pm" || this.myPlayer.inBarn)
            this.flicker1 = 0.8f;
          this.ttWorld = this.spotTexture;
          this.depthWorld = 1000f;
          this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(50f), 1.1f, 15f, this.maxdistance);
          Matrix matrix1 = this.myPlayer.gunChoice >= this.gType ? Matrix.CreateRotationY(-0.5f) * this.sc.flashlightOffset * this.myPlayer.pistolHand : this.sc.flashlightOffset * this.myPlayer.pistolHand;
          this.gunpos1World = Vector3.Transform(new Vector3(-50f, 0.0f, 0.0f), matrix1);
          this.matrix_0 = Matrix.CreateLookAt(this.gunpos1World, Vector3.Transform(new Vector3(15f, 0.0f, 0.0f), matrix1), this.myPlayer.pistolHand.Up) * this.myProjWorld;
        }
      }
      else
      {
        this.techniWorld = 0;
        this.techniBoar = 0;
        this.depthWorld = 1200f;
        this.flicker1 = (float) this.rr.Next(80, 280) / 100f;
        this.ttWorld = this.electrify;
        this.myProjWorld = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians((float) this.rr.Next(500, 700) / 10f), 1.1f, 15f, this.maxdistance);
        this.gunpos1World = new Vector3(3000f, 800f, 3000f);
        cameraTarget1 = new Vector3((float) (3000 + this.rr.Next(-100, 100)), -300f, (float) (3000 + this.rr.Next(-100, 100)));
        this.matrix_0 = Matrix.CreateLookAt(this.gunpos1World, cameraTarget1, this.myPlayer.pistolHand.Up) * this.myProjWorld;
        this.sc.darkness = this.sc.olderdarkness;
        if (this.rr.Next(1, 100) >= 80)
          return;
        Vector3 vector3 = this.fencePoint[this.rr.Next(0, this.fencePoint.Length)];
        this.fenceSparks(new Vector3(vector3.X + 3000f, vector3.Y, vector3.Z + 3000f), Vector3.Up);
        if (this.rr.Next(1, 200) >= 30 || this.leverTimer <= 10)
          return;
        this.sc.darkness = (float) this.rr.Next(100, 230) / 100f;
      }
    }

    private void DrawGarbage()
    {
      float num1 = this.sc.hud_enemy.Y + 120f;
      BloodnBacon4PT.my_stringbuilder.Length = 0;
      this.spriteBatch.Begin();
      float num2 = num1 + 20f;
      this.spriteBatch.End();
    }

    private void DrawOptions(GameTime gt)
    {
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.NonPremultiplied, SamplerState.LinearWrap, (DepthStencilState) null, (RasterizerState) null, (Effect) null, this.hudMatrix);
      if (this.sc.chatHistory.Count > 0 && (double) this.sc.chatFade > 0.0)
      {
        int num1 = 680;
        int num2 = 0;
        int num3 = Math.Max(0, this.sc.chatHistory.Count - 1 - this.sc.chatIndex);
        int num4 = Math.Max(num3 - 13, 0);
        float num5 = 1f;
        for (int index = num3; index >= num4; --index)
        {
          num2 += 20;
          if (num2 >= 60)
            num5 -= 0.055f;
          num5 *= MathHelper.Clamp(this.sc.chatFade, 0.0f, 1f);
          this.spriteBatch.DrawString(this.sc.lilyFont, this.sc.chatHistory[index].name, new Vector2(25f, (float) (num1 - 50 - num2)), this.sc.chatHistory[index].nameColor * num5, 0.0f, Vector2.Zero, 0.8f, SpriteEffects.None, 0.0f);
          if (this.sc.chatHistory[index].gap == 0)
            this.spriteBatch.DrawString(this.sc.lilyFont, this.sc.chatHistory[index].message, new Vector2((float) ((double) this.sc.lilyFont.MeasureString(this.sc.chatHistory[index].name).X * 0.800000011920929 + 25.0), (float) (num1 - 50 - num2)), this.sc.chatHistory[index].messColor * num5, 0.0f, Vector2.Zero, 0.8f, SpriteEffects.None, 0.0f);
          else
            this.spriteBatch.DrawString(this.sc.lilyFont, this.sc.chatHistory[index].message, new Vector2((float) (this.sc.chatHistory[index].gap + 25), (float) (num1 - 50 - num2)), this.sc.chatHistory[index].messColor * num5, 0.0f, Vector2.Zero, 0.8f, SpriteEffects.None, 0.0f);
        }
      }
      this.sc.chatFade -= 0.025f;
      bool flag1 = true;
      if (this.tunneladd && this.inFarm == 2 && (double) this.myPlayer.displayState.npcPosition.Y < -40.0 && this.haveCryptMap && this.minimapLevel != 2)
      {
        this.spriteBatch.Draw(this.minimapReveal, new Rectangle((int) this.x0, (int) this.y0, this.ww0, this.hh0), new Rectangle?(this.rr5), Color.White);
        float rotation = (float) (-(double) this.myPlayer.displayState.npcRotation + 1.5700000524520874);
        Color color1 = this.hostblue;
        Color hostblue = this.hostblue;
        Rectangle rectPlayer = this.rect_player;
        Rectangle rectangle1 = this.rect_playerHost;
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (this.remPlayer[index].id == this.mysteamID)
          {
            if (!this.sc.host)
            {
              rectangle1 = this.rect_player;
              color1 = this.colorList[index];
            }
          }
          else if (this.remPlayer[index].r.insideMinimap)
          {
            Color color2 = this.colorList[index];
            Rectangle rectangle2 = this.rect_player;
            if (this.remPlayer[index].r.isHost)
            {
              color2 = this.hostblue;
              rectangle2 = this.rect_playerHost;
            }
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) this.remPlayer[index].r.m2_xx, (int) this.remPlayer[index].r.m2_yy, 30, 30), new Rectangle?(rectangle2), color2, this.remPlayer[index].r.m2_rot, new Vector2(17f, 17f), SpriteEffects.None, 0.0f);
          }
        }
        this.spriteBatch.Draw(this.overlay, new Rectangle((int) ((double) this.x0 + (double) this.ww0 / 2.0), (int) ((double) this.y0 + (double) (this.hh0 / 2)), 35, 35), new Rectangle?(rectangle1), color1, rotation, new Vector2(17f, 17f), SpriteEffects.None, 0.0f);
      }
      if (this.memoTimer > 0)
      {
        float num = MathHelper.Clamp((float) this.memoTimer / 30f, 0.0f, 1f);
        Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 15.0) * 26f, (float) Math.Cos((double) this.sc.myTimer / 15.0) * 23f);
        position += new Vector2(135f, 390f);
        if (this.memoIcon > 0)
        {
          if (this.memoHigh)
            position.Y -= 130f;
          if (this.memoIcon == 1)
          {
            position.X += 10f;
            this.spriteBatch.Draw(this.overlay, position + new Vector2(-50f, -22f), new Rectangle?(this.rect_choice[this.memoIcon]), Color.White * num);
          }
          else if (this.memoIcon == 6)
          {
            position.X += 10f;
            this.spriteBatch.Draw(this.overlay, position + new Vector2(-50f, 10f), new Rectangle?(this.rect_choice[this.memoIcon]), Color.White * num);
          }
          else if (this.memoIcon == 77)
          {
            position.X += 40f;
            this.spriteBatch.Draw(this.overlay, position + new Vector2(-55f, 0.0f), new Rectangle?(this.gen_Rect), Color.White * num);
          }
          else
            this.spriteBatch.Draw(this.overlay, position + new Vector2(-45f, 5f), new Rectangle?(this.rect_choice[this.memoIcon]), Color.White * num);
        }
        if (BloodnBacon4PT.memo2.Length > 0 && this.memoIcon == 7)
        {
          float x = this.ammoMedium2.MeasureString(BloodnBacon4PT.memo2.ToString() + " ").X;
          this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.memo, new Vector2(x, 0.0f) + position + new Vector2(-4f, 4f), Color.Black * num);
          this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.memo, new Vector2(x, 0.0f) + position, Color.White * num);
          this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.memo2, position, this.memocolor * num);
        }
        else
        {
          BloodnBacon4PT.memo2.Length = 0;
          this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.memo, new Vector2(-4f, 4f) + position, Color.Black * num);
          this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.memo, position, Color.White * num);
        }
        --this.memoTimer;
        if (this.memoTimer <= 0)
        {
          this.memoIcon = 0;
          BloodnBacon4PT.memo2.Length = 0;
          if (this.sc.deathcamHint)
          {
            this.memoTimer = 190;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 1;
            this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
            if (this.sc.usingMouse)
              BloodnBacon4PT.memo.Append("press MMB to freeroam");
            else
              BloodnBacon4PT.memo.Append("click RightStick to freeroam");
            this.sc.deathcamHint = false;
          }
          if (this.sc.walletHintShow)
          {
            this.memoTimer = 290;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 1;
            this.sc.newtip.Play(this.sc.ev, 0.0f, 0.0f);
            BloodnBacon4PT.memo.Append(" open Wallet to Restart");
            this.sc.walletHintShow = false;
            this.sc.walletHint = true;
            this.sc.deathcamHint = true;
          }
        }
      }
      else
        this.memoHigh = false;
      float y1 = 970f;
      if (this.remPlayer.Count > 1)
      {
        bool flag2 = false;
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (this.mysteamID == this.remPlayer[index].id)
            this.sc.myplayerindex = index;
          else if (this.remPlayer[index].r.fallState < 11 && this.remPlayer[index].r.isDown && !this.myPlayer.isDown && !this.myPlayer.isLiftingOpponent && (double) this.remPlayer[index].r.player2player < 4900.0 && (double) this.remPlayer[index].r.playerDotplayer > 0.699999988079071)
          {
            Vector2 position1 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.closehelpBuild) / 2f;
            if (this.sc.usingMouse)
            {
              Vector2 position2 = new Vector2(position1.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position1.Y);
              this.spriteBatch.Draw(this.overlay, new Rectangle((int) position2.X - 8, (int) position2.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
              this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position2, Color.White);
            }
            else
              this.spriteBatch.Draw(this.overlay, position1 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.closehelpBuild, position1, Color.White);
            flag2 = true;
            flag1 = false;
            break;
          }
        }
        for (int index1 = 0; index1 < this.remPlayer.Count; ++index1)
        {
          if (this.mysteamID == this.remPlayer[index1].id)
            this.sc.myplayerindex = index1;
          else if (flag2 || this.remPlayer[index1].r.fallState >= 11 || !this.remPlayer[index1].r.isDown || this.myPlayer.isDown || this.myPlayer.isLiftingOpponent || (double) this.remPlayer[index1].r.player2player < 4900.0 && (double) this.remPlayer[index1].r.playerDotplayer > 0.699999988079071)
          {
            if (this.myPlayer.isLiftingIndex - 1 >= 0 && this.myPlayer.isLiftingIndex - 1 < this.remPlayer.Count)
            {
              int index2 = this.myPlayer.isLiftingIndex - 1;
              if (this.remPlayer[index2].r.isDown && !this.myPlayer.isDown && this.myPlayer.isLiftingOpponent)
              {
                float num = this.remPlayer[index2].r.frame1 / 87f;
                if ((double) num > 1.0)
                  num = 1f;
                if (this.remPlayer[index2].r.fallState < 4)
                  num = 0.0f;
                this.spriteBatch.Draw(this.overlay, new Vector2(450f, 440f), new Rectangle?(this.rect_rescue), Color.White);
                this.spriteBatch.Draw(this.overlay, new Vector2(498f, 467f), new Rectangle?(new Rectangle(this.rect_rescuebar.X, this.rect_rescuebar.Y, (int) ((double) this.rect_rescuebar.Width * (double) num), this.rect_rescuebar.Height)), new Color(160, 44, 44, 160));
                this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.liftingFriendBuild, new Vector2(510f, 425f), Color.White);
                flag1 = false;
              }
            }
            if (!remotePlayer4.pillTaken && !this.remPlayer[index1].r.isDown && this.myPlayer.isDown && this.remPlayer[index1].r.isLiftingYou == this.sc.myplayerindex)
            {
              float num = this.myPlayer.frame1 / 87f;
              if ((double) num > 1.0)
                num = 1f;
              if (this.myPlayer.fallState < 4)
                num = 0.0f;
              this.spriteBatch.Draw(this.overlay, new Vector2(450f, 440f), new Rectangle?(this.rect_beinglifted), Color.White);
              this.spriteBatch.Draw(this.overlay, new Vector2(498f, 467f), new Rectangle?(new Rectangle(this.rect_rescuebar.X, this.rect_rescuebar.Y, (int) ((double) this.rect_rescuebar.Width * (double) num), this.rect_rescuebar.Height)), new Color(88, 140, 50, 160));
              this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.helpingUpBuild, new Vector2(510f, 425f), Color.White);
              flag1 = false;
            }
          }
          else
          {
            Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.needsHelpBuild) / 2f;
            this.spriteBatch.Draw(this.overlay, position + new Vector2(-30f, 5f), new Rectangle?(this.rect_Exclaim), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.needsHelpBuild, position, Color.White);
            flag1 = false;
            break;
          }
        }
      }
      if (this.tunneladd)
      {
        if (this.atTwin && flag1)
        {
          Vector2 position3 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(" click to talk") / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position4 = new Vector2(position3.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position3.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position4.X - 8, (int) position4.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position4, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position3 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          string text = " click to talk";
          if (this.twinstorychoice == 3 && this.twintuskIndex > 2 || this.twinstorychoice == 2 && this.twinskullIndex > 0)
            text = " finish the story";
          if (this.twinJawIndex != -1)
          {
            text = " twin is talking";
            if (this.twinstorychoice == 3 && this.twintuskIndex > 2)
              text = " the tusk story";
            if (this.twinstorychoice == 2 && this.twinskullIndex > 0)
              text = " the skull story";
            if ((int) this.sc.myTimer / 20 % 4 == 0)
              text += " ";
            if ((int) this.sc.myTimer / 20 % 4 == 1)
              text += " .";
            if ((int) this.sc.myTimer / 20 % 4 == 2)
              text += " . .";
            if ((int) this.sc.myTimer / 20 % 4 == 3)
              text += " . . .";
          }
          if (this.sc.redskull1 != 1 && this.sc.redskull2 != 1 && this.sc.redskull3 != 1)
          {
            if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1 || this.sc.tusk3 == 1)
              text = " give him the relic";
          }
          else
            text = " give him the skull";
          this.spriteBatch.DrawString(this.ammoMedium, text, position3 + new Vector2(-3f, -1f), Color.Black);
          this.spriteBatch.DrawString(this.ammoMedium, text, position3 + new Vector2(-1f, -3f), Color.Black);
          this.spriteBatch.DrawString(this.ammoMedium, text, position3, Color.White);
          flag1 = false;
        }
        if (this.atDisplayCase && flag1)
        {
          string text = " empty display";
          int num = this.sc.redskull2 + this.sc.redskull3 + this.sc.redskull1;
          if (num >= 2 && num < 4)
            text = " nice skull";
          if (num >= 4 && num < 6)
            text = " one more to hear the tale";
          if (num == 6)
            text = this.twinstorychoice != 2 ? " hear the skull story" : " twin is still talking";
          Vector2 position5 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(text) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position6 = new Vector2(position5.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position5.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position6.X - 8, (int) position6.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position6, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position5 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, text, position5, Color.White);
          flag1 = false;
        }
        if (this.atDisplayCase2 && flag1)
        {
          string text = " empty display";
          int num = this.sc.tusk1 + this.sc.tusk2 + this.sc.tusk3;
          if (num >= 2 && num < 4)
            text = " nice tusk";
          if (num >= 4 && num < 6)
            text = " one more to make it complete";
          if (num == 6)
            text = this.twinstorychoice != 3 ? " hear the tusk story" : " twin is still talking";
          Vector2 position7 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(text) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position8 = new Vector2(position7.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position7.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position8.X - 8, (int) position8.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position8, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position7 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, text, position7, Color.White);
          flag1 = false;
        }
        if (this.sc.gameState != 1 && this.atCrypt && flag1 && this.cryptLock)
        {
          string text = " shoot to unlock";
          if (this.inFarm == 2)
            text = " find another exit";
          if (this.inFarm == 1 && !this.haveEntranceKey && this.mazeid > 0)
            text = " find key, from crypt day " + this.sc.tunnelDay[this.mazeid - 1].ToString();
          if (this.inFarm == 1 && this.haveEntranceKey)
            this.memoTimer = 0;
          Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(this.sc.cryptHits.ToString() + " prayers bind thee") / 2f;
          this.spriteBatch.Draw(this.overlay, position + new Vector2(-50f, 5f), new Rectangle?(this.rect_sskull), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, text, position + Vector2.One * 3f, Color.Black);
          this.spriteBatch.DrawString(this.ammoMedium, text, position, Color.White);
          flag1 = false;
        }
        if (this.sc.gameState != 1 && this.atCrypt2 && flag1 && this.cryptLock2)
        {
          string text = " this is a tunnel exit";
          if (this.inFarm == 2)
            text = !this.haveCryptKey ? " you need the exit key" : " climb stairs, shoot to open";
          Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(this.sc.cryptHits.ToString() + " prayers bind thee") / 2f;
          this.spriteBatch.Draw(this.overlay, position + new Vector2(-50f, 5f), new Rectangle?(this.rect_sskull), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, text, position + Vector2.One * 3f, Color.Black);
          this.spriteBatch.DrawString(this.ammoMedium, text, position, Color.White);
          flag1 = false;
        }
        if (this.atFlashlight1 && flag1)
        {
          Vector2 position9 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position10 = new Vector2(position9.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position9.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position10.X - 7, (int) position10.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position10, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position9 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, "Take Standard Flashlight", position9, Color.White);
          flag1 = false;
        }
        if (this.atFlashlight2 && flag1)
        {
          Vector2 position11 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position12 = new Vector2(position11.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position11.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position12.X - 7, (int) position12.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position12, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position11 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, "Take Sunbeam 2000", position11, Color.White);
          flag1 = false;
        }
        if (this.atFlashlight3 && flag1)
        {
          Vector2 position13 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position14 = new Vector2(position13.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position13.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position14.X - 7, (int) position14.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position14, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position13 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, "Take HunterLantern", position13, Color.White);
          flag1 = false;
        }
        if (this.atAmmobox && flag1)
        {
          Vector2 position15 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position16 = new Vector2(position15.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position15.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position16.X - 7, (int) position16.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position16, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position15 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, "Take Armor-Piercing Ammo", position15, Color.White);
          flag1 = false;
        }
        if (this.atGoggles && flag1)
        {
          Vector2 position17 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position18 = new Vector2(position17.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position17.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position18.X - 7, (int) position18.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position18, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position17 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          if (!this.wearingGoggles)
            this.spriteBatch.DrawString(this.ammoMedium, "Equip Geiger 250c", position17, Color.White);
          else
            this.spriteBatch.DrawString(this.ammoMedium, "Unequip Geiger 250c", position17, Color.White);
          flag1 = false;
        }
        if (this.atMap && flag1)
        {
          Vector2 position19 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.haveCryptMap)
          {
            if (this.sc.usingMouse)
            {
              Vector2 position20 = new Vector2(position19.X - this.ammoMedium.MeasureString(this.sc.tab_key.ToString() + "  ").X, position19.Y);
              this.spriteBatch.Draw(this.overlay, new Rectangle((int) position20.X - 7, (int) position20.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.tab_key.ToString() + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
              this.spriteBatch.DrawString(this.ammoMedium, this.sc.tab_key.ToString(), position20, Color.White);
            }
            else
            {
              position19.X += 15f;
              Vector2 position21 = new Vector2(position19.X - this.ammoMedium.MeasureString("LBumper ").X, position19.Y);
              this.spriteBatch.Draw(this.overlay, new Rectangle((int) position21.X - 7, (int) position21.Y + 2, (int) this.ammoMedium.MeasureString("LBumper ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
              this.spriteBatch.DrawString(this.ammoMedium, "LBumper ", position21, Color.White);
            }
            if (this.haveCryptMapCount % 2 == 0)
              this.spriteBatch.DrawString(this.ammoMedium, "Zoom MiniMap", position19, Color.White);
            if (this.haveCryptMapCount % 2 == 1)
              this.spriteBatch.DrawString(this.ammoMedium, "Hold to Close", position19, Color.White);
          }
          else
          {
            if (this.sc.usingMouse)
            {
              Vector2 position22 = new Vector2(position19.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position19.Y);
              this.spriteBatch.Draw(this.overlay, new Rectangle((int) position22.X - 7, (int) position22.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
              this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position22, Color.White);
            }
            else
              this.spriteBatch.Draw(this.overlay, position19 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, "Take MiniMap", position19, Color.White);
          }
          flag1 = false;
        }
        if (this.atCogs && flag1)
        {
          string str1 = "";
          string str2 = "";
          string str3 = "";
          if (this.sc.cog1[this.mazeid] == 1)
            str1 = "Serial#" + this.sc.code1[this.mazeid, 0].ToString() + this.sc.code1[this.mazeid, 1].ToString() + this.sc.code1[this.mazeid, 2].ToString() + ".  ";
          if (this.sc.cog2[this.mazeid] == 1)
            str2 = "Serial#" + this.sc.code2[this.mazeid, 0].ToString() + this.sc.code2[this.mazeid, 1].ToString() + this.sc.code2[this.mazeid, 2].ToString() + ".  ";
          if (this.sc.cog3[this.mazeid] == 1)
            str3 = "Serial#" + this.sc.code3[this.mazeid, 0].ToString() + this.sc.code3[this.mazeid, 1].ToString() + this.sc.code3[this.mazeid, 2].ToString();
          string str4 = str3 + "\nUse Code For Combination Door";
          Vector2 position23 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f + new Vector2(-120f, -20f);
          Vector2 position24 = new Vector2(position23.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position23.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position24.X - 7, (int) position24.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position24, Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, str1 + str2 + str4, position23, Color.White);
          flag1 = false;
        }
        if (this.atExitkey && flag1)
        {
          Vector2 position25 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position26 = new Vector2(position25.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position25.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position26.X - 7, (int) position26.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position26, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position25 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, " Grab Exit Key", position25, Color.White);
          flag1 = false;
        }
        if ((this.atRedSkull1 || this.atRedSkull2 || this.atRedSkull3) && flag1)
        {
          Vector2 position27 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position28 = new Vector2(position27.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position27.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position28.X - 7, (int) position28.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position28, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position27 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          string text = " deliver skull to someone";
          if (this.sc.redskull1 == 1 || this.sc.redskull2 == 1 || this.sc.redskull3 == 1)
            text = " hands full, come back later";
          this.spriteBatch.DrawString(this.ammoMedium, text, position27, Color.White);
          flag1 = false;
        }
        if ((this.atTusk1 || this.atTusk2 || this.atTusk3) && flag1)
        {
          Vector2 position29 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position30 = new Vector2(position29.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position29.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position30.X - 7, (int) position30.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position30, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position29 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          string text = " deliver bone to someone";
          if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1 || this.sc.tusk3 == 1)
            text = " hands full, return later...";
          this.spriteBatch.DrawString(this.ammoMedium, text, position29, Color.White);
          flag1 = false;
        }
        if (this.atanyPhoto)
        {
          for (int index = 0; index < this.photo.Count; ++index)
          {
            if (this.photo[index].atPhoto1 > 0 && flag1)
            {
              if (this.photo[index].atPhoto1 == 2)
              {
                Vector2 position = new Vector2(120f, 330f);
                string info = this.photo[index].info;
                this.spriteBatch.Draw(this.overlay, position + new Vector2(-60f, 1f), new Rectangle?(this.almanac_Rect), Color.White);
                this.spriteBatch.DrawString(this.ammoMedium, info, new Vector2(-4f, 4f) + position, Color.Black);
                this.spriteBatch.DrawString(this.ammoMedium, info, position, Color.White);
              }
              if (this.photo[index].atPhoto1 == 1)
              {
                Vector2 position31 = new Vector2(120f, 410f);
                if (this.sc.usingMouse)
                {
                  Vector2 position32 = new Vector2(position31.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position31.Y);
                  this.spriteBatch.Draw(this.overlay, new Rectangle((int) position32.X - 7, (int) position32.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
                  this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position32, Color.White);
                }
                else
                  this.spriteBatch.Draw(this.overlay, position31 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
                string text = " interact";
                if (BloodnBacon4PT.interact.atPhotoTimer > 0)
                  text = " talking";
                if (BloodnBacon4PT.interact.atPhotoTimer / 1 % 4 == 0)
                  text += " ";
                if (BloodnBacon4PT.interact.atPhotoTimer / 1 % 4 == 3)
                  text += " .";
                if (BloodnBacon4PT.interact.atPhotoTimer / 1 % 4 == 2)
                  text += " . .";
                if (BloodnBacon4PT.interact.atPhotoTimer / 1 % 4 == 1)
                  text += " . . .";
                this.spriteBatch.DrawString(this.ammoMedium, text, position31, Color.White);
              }
            }
          }
        }
      }
      if (this.atGrinder && flag1)
      {
        Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
        this.spriteBatch.Draw(this.overlay, position + new Vector2(-30f, 5f), new Rectangle?(this.rect_Exclaim), Color.White);
        if ((double) this.sc.bloodLevel < 41.0)
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.needbloodBuild, position, Color.White);
        else
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atgrinderBuild, position, Color.White);
        flag1 = false;
      }
      if (this.atLobby && flag1)
      {
        Vector2 position33 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
        if (this.sc.usingMouse)
        {
          Vector2 position34 = new Vector2(position33.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position33.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position34.X - 8, (int) position34.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position34, Color.White);
        }
        else
          this.spriteBatch.Draw(this.overlay, position33 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
        this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atLobbyBuild, position33, Color.White);
        flag1 = false;
      }
      if (this.atKissing && flag1)
      {
        Vector2 position35 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
        if (this.sc.usingMouse)
        {
          Vector2 position36 = new Vector2(position35.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position35.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position36.X - 7, (int) position36.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position36, Color.White);
        }
        else
          this.spriteBatch.Draw(this.overlay, position35 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
        this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atKissingBuild, position35, Color.White);
        flag1 = false;
      }
      if ((this.atPump1 || this.atPump2) && flag1)
      {
        Vector2 position37 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
        if (this.atPump1 && (double) this.waterRamp1 > 0.0 || this.atPump2 && (double) this.waterRamp2 > 0.0)
        {
          this.spriteBatch.Draw(this.overlay, position37 + new Vector2(-40f, 5f), new Rectangle?(this.rect_Wbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atPumpBusyBuild, position37, Color.White);
        }
        else if (this.atPump1 && this.int_9 <= 0 || this.atPump2 && this.int_10 <= 0)
        {
          this.spriteBatch.Draw(this.overlay, position37 + new Vector2(-40f, 5f), new Rectangle?(this.rect_Exclaim), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atPump2Build, position37, Color.White);
        }
        else
        {
          if (this.sc.usingMouse)
          {
            Vector2 position38 = new Vector2(position37.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position37.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position38.X - 8, (int) position38.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position38, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position37 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atPump1Build, position37, Color.White);
        }
        flag1 = false;
      }
      if (this.atLever && flag1)
      {
        Vector2 position39 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
        if (this.leverLevel > 0)
        {
          if (this.leverTimer <= 0)
          {
            if (this.sc.usingMouse)
            {
              Vector2 position40 = new Vector2(position39.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position39.Y);
              this.spriteBatch.Draw(this.overlay, new Rectangle((int) position40.X - 8, (int) position40.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
              this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position40, Color.White);
            }
            else
              this.spriteBatch.Draw(this.overlay, position39 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atLever1Build, position39, Color.White);
          }
          else
          {
            this.spriteBatch.Draw(this.overlay, position39 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Bulb), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atLever3Build, position39, Color.White);
          }
        }
        else
        {
          this.spriteBatch.Draw(this.overlay, position39 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Exclaim), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atLever2Build, position39, Color.White);
        }
        flag1 = false;
      }
      if (this.atBarnDoor && flag1)
      {
        if (!this.barnDoorLocked)
        {
          Vector2 position41 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorBuild) / 2f;
          if (this.sc.usingMouse)
          {
            Vector2 position42 = new Vector2(position41.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position41.Y);
            this.spriteBatch.Draw(this.overlay, new Rectangle((int) position42.X - 8, (int) position42.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
            this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position42, Color.White);
          }
          else
            this.spriteBatch.Draw(this.overlay, position41 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atDoorBuild, position41, Color.White);
          flag1 = false;
        }
        else
        {
          Vector2 position = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atDoorLockedBuild) / 2f;
          this.spriteBatch.Draw(this.overlay, position + new Vector2(-30f, 5f), new Rectangle?(this.rect_Lock), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atDoorLockedBuild, position, Color.White);
          flag1 = false;
        }
      }
      if (this.atFarmer && flag1)
      {
        Vector2 position43 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.atFarmerBuild) / 2f;
        if (this.sc.usingMouse)
        {
          Vector2 position44 = new Vector2(position43.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position43.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position44.X - 8, (int) position44.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position44, Color.White);
        }
        else
          this.spriteBatch.Draw(this.overlay, position43 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
        this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.atFarmerBuild, position43, Color.White);
        flag1 = false;
        if (!this.myPlayer.inBarn)
        {
          this.atFarmer = false;
          this.lookatFarmer = false;
        }
      }
      if (this.pickupGlow && (double) this.pickupDist < 40000.0 && flag1)
      {
        Vector2 position45 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString("xxxxxxx") / 2f;
        bool flag3 = true;
        if (this.pickupType == 0 && this.sc.milks < 10)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupMilkBuild, position45, Color.White);
        }
        else if (this.pickupType == 1 && this.sc.grenades < 10)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupGrenBuild, position45, Color.White);
        }
        else if (this.pickupType == 2)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupAmmoBuild, position45, Color.White);
        }
        else if (this.pickupType == 3 && this.sc.hulks < 5)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupHulkBuild, position45, Color.White);
        }
        else if (this.pickupType == 4 && this.sc.pills < 2)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupPillBuild, position45, Color.White);
        }
        else if (this.pickupType == 5 && this.sc.rockets < 5)
        {
          flag3 = false;
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupRocketBuild, position45, Color.White);
        }
        flag1 = false;
        if (flag3)
        {
          this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickupFullBuild, position45, Color.White);
          this.spriteBatch.Draw(this.overlay, position45 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Exclaim), Color.White);
        }
        else if (this.sc.usingMouse)
        {
          Vector2 position46 = new Vector2(position45.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position45.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position46.X - 8, (int) position46.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position46, Color.White);
        }
        else
          this.spriteBatch.Draw(this.overlay, position45 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
      }
      if (this.weaponIsGlowing && flag1 && (double) this.weaponGlowDist < 12100.0)
      {
        Vector2 position47 = new Vector2((float) Math.Sin((double) this.sc.myTimer / 20.0) * 18f, (float) Math.Cos((double) this.sc.myTimer / 20.0) * 12f) + new Vector2(1280f, y1) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.pickWeaponBuild) / 2f;
        if (this.sc.usingMouse)
        {
          Vector2 position48 = new Vector2(position47.X - this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, position47.Y);
          this.spriteBatch.Draw(this.overlay, new Rectangle((int) position48.X - 8, (int) position48.Y + 2, (int) this.ammoMedium.MeasureString(this.sc.myXkey + "  ").X, (int) this.ammoMedium.MeasureString(this.sc.x_key.ToString()).Y), new Rectangle?(this.rect_Blue), Color.White);
          this.spriteBatch.DrawString(this.ammoMedium, this.sc.myXkey, position48, Color.White);
        }
        else
          this.spriteBatch.Draw(this.overlay, position47 + new Vector2(-30f, 5f), new Rectangle?(this.rect_Xbutton), Color.White);
        this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.pickWeaponBuild, position47, Color.White);
      }
      if (this.fovTimer > 0)
      {
        BloodnBacon4PT.my_stringbuilder.Length = 0;
        BloodnBacon4PT.my_stringbuilder.Concat((int) this.sc.mylens + 2);
        this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.my_stringbuilder, new Vector2(-2f, 2f) + new Vector2(200f, 720f) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.Black, 0.0f, Vector2.Zero, 1f, SpriteEffects.None, 0.0f);
        this.spriteBatch.DrawString(this.ammoMedium2, BloodnBacon4PT.my_stringbuilder, new Vector2(200f, 720f) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.White, 0.0f, Vector2.Zero, 1f, SpriteEffects.None, 0.0f);
        --this.fovTimer;
      }
      if (this.boarDropTimer.Count > 0)
      {
        this.sc.gameMusicPlaying = true;
        bool flag4 = false;
        if (Cutty4.cuttyCount > 0 || this.sc.gameState > 0 || Princess4.cuttyCount > 0)
          flag4 = true;
        int int_val = (this.boarDropTimer[0] - this.timeFrame) / 60 % 60 + 1;
        if (int_val <= 5)
        {
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat(int_val);
          if (!flag4)
          {
            this.spriteBatch.DrawString(this.ammoLargestFont, BloodnBacon4PT.my_stringbuilder, new Vector2(-4f, 4f) + new Vector2(1280f, 720f) / 2f - this.ammoLargestFont.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.Black);
            this.spriteBatch.DrawString(this.ammoLargestFont, BloodnBacon4PT.my_stringbuilder, new Vector2(1280f, 720f) / 2f - this.ammoLargestFont.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.White);
            if ((this.boarDropTimer[0] - this.timeFrame) % 60 == 0)
              this.sc.tick.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          }
          else
          {
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.my_stringbuilder, new Vector2(-1f, 1f) + new Vector2(200f, 720f) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.Black, 0.0f, Vector2.Zero, 1f, SpriteEffects.None, 0.0f);
            this.spriteBatch.DrawString(this.ammoMedium, BloodnBacon4PT.my_stringbuilder, new Vector2(200f, 720f) / 2f - this.ammoMedium.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f, Color.White, 0.0f, Vector2.Zero, 1f, SpriteEffects.None, 0.0f);
            if ((this.boarDropTimer[0] - this.timeFrame) % 60 == 0)
              this.sc.tick.Play(this.sc.ev * 1f, 0.0f, 0.0f);
          }
        }
      }
      if (this.inFarm == 1)
      {
        if ((int) this.boar.alive != (int) this.boar.alive2)
        {
          this.enemyDied = true;
          BloodnBacon4PT.pigsalive.Length = 0;
          if (this.sc.currentDay == 101)
            BloodnBacon4PT.pigsalive.Append("FRIENDS ");
          else
            BloodnBacon4PT.pigsalive.Append("ENEMIES ");
          BloodnBacon4PT.pigsalive.Concat((int) this.boar.alive);
          this.boar.alive2 = this.boar.alive;
        }
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.pigsalive, this.sc.hud_enemy + new Vector2(-4f, 4f), new Color(0, 0, 0, (int) byte.MaxValue));
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.pigsalive, this.sc.hud_enemy, this.sc.color_enemy);
      }
      if (this.tunneladd && this.inFarm == 2)
      {
        float x1 = this.sc.hud_enemy.X;
        float y2 = this.sc.hud_enemy.Y + 10f;
        if (this.haveCryptKey)
        {
          this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(this.key_Rect), Color.White);
          x1 += (float) (this.key_Rect.Width + 10);
        }
        if (this.sc.redskull1 == 1 || this.sc.redskull2 == 1 || this.sc.redskull3 == 1)
        {
          if (this.sc.redskull1 == 1)
            this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(this.grnskull_Rect), Color.White);
          if (this.sc.redskull2 == 1)
            this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(this.redskull_Rect), Color.White);
          if (this.sc.redskull3 == 1)
            this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(this.bluskull_Rect), Color.White);
          x1 += (float) (this.key_Rect.Width + 10);
        }
        if (this.sc.tusk1 == 1 || this.sc.tusk2 == 1 || this.sc.tusk3 == 1)
        {
          this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(this.tusk_Rect), Color.White);
          x1 += (float) (this.key_Rect.Width + 10);
        }
        if (this.haveCogs && (this.sc.cog1[this.mazeid] == 1 || this.sc.cog2[this.mazeid] == 1 || this.sc.cog3[this.mazeid] == 1))
        {
          Rectangle rectangle = this.cog_Rect;
          if (this.cogFlash > 0)
          {
            --this.cogFlash;
            if (this.cogFlash % 15 >= 0 && this.cogFlash % 15 <= 4)
              rectangle = this.cog_Rect2;
          }
          if (this.cogShake > 0)
          {
            --this.cogShake;
            x1 += (float) this.rr.Next(-13, 13);
            y2 += (float) this.rr.Next(-13, 13);
          }
          this.spriteBatch.Draw(this.overlay, new Vector2(x1, y2), new Rectangle?(rectangle), Color.White);
          x1 += (float) (this.cog_Rect.Width + 9);
          float y3 = y2 - 3f;
          if (this.sc.cog1[this.mazeid] == 1)
            this.spriteBatch.DrawString(this.ammoSmallestFont, this.sc.code1[this.mazeid, 0].ToString() + this.sc.code1[this.mazeid, 1].ToString() + this.sc.code1[this.mazeid, 2].ToString(), new Vector2(x1, y3), Color.White);
          if (this.sc.cog2[this.mazeid] == 1)
          {
            y3 += 18f;
            this.spriteBatch.DrawString(this.ammoSmallestFont, this.sc.code2[this.mazeid, 0].ToString() + this.sc.code2[this.mazeid, 1].ToString() + this.sc.code2[this.mazeid, 2].ToString(), new Vector2(x1, y3), Color.CornflowerBlue);
          }
          if (this.sc.cog3[this.mazeid] == 1)
          {
            float y4 = y3 + 18f;
            this.spriteBatch.DrawString(this.ammoSmallestFont, this.sc.code3[this.mazeid, 0].ToString() + this.sc.code3[this.mazeid, 1].ToString() + this.sc.code3[this.mazeid, 2].ToString(), new Vector2(x1, y4), new Color(20, 240, 20));
          }
        }
        bool flag5 = this.twinstorychoice == 3 && this.twintuskIndex > 2 && this.twintuskIndex <= this.tuskStory.Count - 1;
        bool flag6 = this.twinstorychoice == 2 && this.twinskullIndex > 0 && this.twinskullIndex <= this.skullStory.Count - 1;
        bool flag7 = this.twinstorychoice == 1 && this.twinaltIndex > 0 && this.twinaltIndex <= this.twinAlt.Count - 1;
        bool flag8 = this.twinstorychoice == 0 && this.twinstoryIndex > 0 && this.twinstoryIndex <= this.twinStory.Count - 1;
        if (flag5)
        {
          int num = this.tuskStory.Count - this.twintuskIndex;
          float y5 = this.sc.hud_enemy.Y + 15f;
          x1 += 60f;
          this.spriteBatch.DrawString(this.ammoSmallestFont, " The Tusk Story : " + num.ToString(), new Vector2(x1, y5), new Color(20, 240, 20));
        }
        if (flag6)
        {
          int num = this.skullStory.Count - this.twinskullIndex;
          float y6 = this.sc.hud_enemy.Y + 15f;
          x1 += 60f;
          this.spriteBatch.DrawString(this.ammoSmallestFont, " Story of Mr. Green : " + num.ToString(), new Vector2(x1, y6), Color.CornflowerBlue);
        }
        if (flag7)
        {
          int num = this.twinAlt.Count - this.twinaltIndex;
          float y7 = this.sc.hud_enemy.Y + 15f;
          x1 += 60f;
          this.spriteBatch.DrawString(this.ammoSmallestFont, " The Brothers Story : " + num.ToString(), new Vector2(x1, y7), Color.Red);
        }
        if (flag8)
        {
          int num = this.twinStory.Count - this.twinstoryIndex;
          float y8 = this.sc.hud_enemy.Y + 15f;
          float x2 = x1 + 60f;
          this.spriteBatch.DrawString(this.ammoSmallestFont, " The unRamblings : " + num.ToString(), new Vector2(x2, y8), new Color(200, 175, 35, (int) byte.MaxValue));
        }
        int alive = this.enemy1.skull.alive;
        this.spriteBatch.DrawString(this.ammoLargeFont, "enemies : " + alive.ToString(), this.sc.hud_clock + new Vector2(57f, 4f), new Color(10, 0, 0, (int) byte.MaxValue));
        this.spriteBatch.DrawString(this.ammoLargeFont, "enemies : " + alive.ToString(), this.sc.hud_clock + new Vector2(53f, 0.0f), this.sc.color_enemy);
      }
      this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.whatday, new Vector2(this.sc.hud_day.X - this.ammoLargeFont.MeasureString(BloodnBacon4PT.whatday).X, this.sc.hud_day.Y) + new Vector2(-4f, 4f), new Color(0, 0, 0, (int) byte.MaxValue));
      this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.whatday, new Vector2(this.sc.hud_day.X - this.ammoLargeFont.MeasureString(BloodnBacon4PT.whatday).X, this.sc.hud_day.Y), this.sc.color_day);
      this.spriteBatch.Draw(this.overlay, new Vector2((float) ((double) this.sc.hud_day.X - (double) this.ammoLargeFont.MeasureString(BloodnBacon4PT.whatday).X - (double) this.diffRect[this.sc.df].Width - 15.0), this.sc.hud_day.Y + 15f), new Rectangle?(this.diffRect[this.sc.df]), Color.White);
      if (this.inFarm == 1)
      {
        if ((double) this.sc.myTimer % 60.0 == 0.0)
        {
          this.drawBossMeter = false;
          if (this.weAreOutdoors)
          {
            if (Cutty4.cuttyCount > 0 && Cutty4.cuttyDoneSpeech)
            {
              for (int index = 0; index < Cutty4.cuttyCount; ++index)
              {
                if (!this.cuttyBoss[index].cuttyisDead)
                  this.drawBossMeter = true;
              }
            }
            if (Princess4.cuttyCount > 0 && Princess4.cuttyDoneSpeech && !this.princess[0].cuttyisDead)
              this.drawBossMeter = true;
          }
        }
        if (!this.drawBossMeter)
        {
          this.clockPos = this.sc.hud_clock;
          this.realSec = this.echoTime / 60 % 60;
          if (this.realSec != this.clockSec)
          {
            BloodnBacon4PT.survive2.Length = 0;
            if (this.echoTime / 60 % 60 < 10)
              BloodnBacon4PT.survive2.Append(":0");
            else
              BloodnBacon4PT.survive2.Append(":");
            BloodnBacon4PT.survive2.Concat(this.realSec);
            this.clockSec = this.realSec;
            this.realMin = this.echoTime / 3600 % 60;
            if (this.realMin != this.clockMin)
            {
              BloodnBacon4PT.survive3.Length = 0;
              if (this.echoTime / 216000 > 0)
                BloodnBacon4PT.survive3.Append(":");
              else
                BloodnBacon4PT.survive3.Append(" ");
              if (this.echoTime / 3600 % 60 < 10)
                BloodnBacon4PT.survive3.Append("0");
              BloodnBacon4PT.survive3.Concat(this.realMin);
              this.clockMin = this.realMin;
              this.realHr = this.echoTime / 216000;
              if (this.realHr != this.ClockHr)
              {
                BloodnBacon4PT.survive4.Length = 0;
                if (this.echoTime / 216000 < 10)
                  BloodnBacon4PT.survive4.Append("0");
                BloodnBacon4PT.survive4.Concat(this.realHr);
                this.ClockHr = this.realHr;
              }
            }
          }
          if (this.echoTime / 216000 > 0)
          {
            this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive4, this.clockPos + new Vector2(-4f, 4f), new Color(0, 0, 0, 140));
            this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive4, this.clockPos, this.sc.color_clock);
          }
          this.clockPos.X += 53f;
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive3, this.clockPos + new Vector2(-4f, 4f), new Color(0, 0, 0, 140));
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive3, this.clockPos, this.sc.color_clock);
          this.clockPos.X += 69f;
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive2, this.clockPos + new Vector2(-4f, 4f), new Color(0, 0, 0, 140));
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive2, this.clockPos, this.sc.color_clock);
          if (this.sc.gameState == 1)
          {
            ++this.realFrac;
            if (this.realFrac > this.myFrac.Length - 1)
              this.realFrac = 0;
          }
          if (this.sc.gameState == 0)
            this.realFrac = 0;
          BloodnBacon4PT.survive1.Length = 0;
          BloodnBacon4PT.survive1.Append(":");
          BloodnBacon4PT.survive1.Append(this.myFrac[this.realFrac]);
          this.clockPos.X += 69f;
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive1, this.clockPos + new Vector2(-4f, 4f), new Color(0, 0, 0, 140));
          this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.survive1, this.clockPos, this.sc.color_clock);
        }
        else
        {
          float x3 = this.sc.hud_clock.X - 60f;
          float y9 = this.sc.hud_clock.Y + 30f;
          if (Princess4.cuttyCount == 1 && !this.princess[0].death1)
          {
            float x4 = (float) ((double) this.sc.hud_clock.X - (double) this.ammoMedium2.MeasureString(Princess4.nameBuild).X / 2.0 + 170.0);
            Color color = new Color(0, 112, 152, (int) byte.MaxValue);
            this.spriteBatch.DrawString(this.ammoMedium2, Princess4.nameBuild, new Vector2(x4 - 1f, y9 - 32f), Color.Black);
            this.spriteBatch.DrawString(this.ammoMedium2, Princess4.nameBuild, new Vector2(x4 + 1f, y9 - 27f), Color.Black);
            this.spriteBatch.DrawString(this.ammoMedium2, Princess4.nameBuild, new Vector2(x4, y9 - 30f), Color.White);
            if (this.princess[0].heartExposed)
            {
              if (this.princess[0].heartIndex != -1)
              {
                if ((double) this.sc.myTimer % 10.0 == 0.0)
                  ++this.princess[0].heartIndex;
                if (this.princess[0].heartIndex > 9)
                  this.princess[0].heartIndex = -1;
              }
              float num = (float) (5 - (int) this.princess[0].heartHit) / 5f;
              this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 85f, y9 + 9f), new Rectangle?(new Rectangle(this.cuttyHearts.X, this.cuttyHearts.Y, (int) ((double) this.cuttyHearts.Width * (double) num), this.cuttyHearts.Height)), Color.White);
              this.spriteBatch.Draw(this.overlay, new Vector2(x3, y9), new Rectangle?(this.cuttyMeter2), Color.White);
              if (this.princess[0].heartIndex != -1)
                this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 76f + (float) (60 * (5 - (int) this.princess[0].heartHit)), y9 - 1f), new Rectangle?(this.cuttyBreaks[this.princess[0].heartIndex]), Color.White);
            }
            else
            {
              this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 63f, y9 + 26f), new Rectangle?(new Rectangle(this.cuttyHealthBar.X, this.cuttyHealthBar.Y, (int) ((double) this.cuttyHealthBar.Width * ((double) this.princess[0].health / (double) this.princess[0].startHealth)), this.cuttyHealthBar.Height)), color);
              this.spriteBatch.Draw(this.overlay, new Vector2(x3, y9), new Rectangle?(this.cuttyMeter), Color.White);
            }
            y9 += 70f;
          }
          if (Cutty4.cuttyCount == 1 && !this.cuttyBoss[0].death1)
          {
            float x5 = (float) ((double) this.sc.hud_clock.X - (double) this.ammoMedium2.MeasureString(Cutty4.nameBuild).X / 2.0 + 170.0);
            Color color = new Color(0, 142, 162, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 0)
              color = Color.Lerp(new Color(0, 142, 162, (int) byte.MaxValue), new Color(165, 155, 20, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x5, y9 - 27f), Color.Black);
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x5, y9 - 30f), Color.White);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 63f, y9 + 26f), new Rectangle?(new Rectangle(this.cuttyHealthBar.X, this.cuttyHealthBar.Y, (int) ((double) this.cuttyHealthBar.Width * ((double) this.cuttyBoss[0].health / (double) this.cuttyBoss[0].startHealth)), this.cuttyHealthBar.Height)), color);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3, y9), new Rectangle?(this.cuttyMeter), Color.White);
          }
          if (Cutty4.cuttyCount == 2 && (!this.cuttyBoss[0].death1 || !this.cuttyBoss[1].death1))
          {
            float x6 = (float) ((double) this.sc.hud_clock.X - (double) this.ammoMedium2.MeasureString(Cutty4.nameBuild).X / 2.0 + 170.0);
            Color color3 = new Color(0, 142, 162, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 0)
              color3 = Color.Lerp(new Color(0, 142, 162, (int) byte.MaxValue), new Color(168, 150, 20, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            Color color4 = new Color(162, 0, 0, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 1)
              color4 = Color.Lerp(new Color(162, 0, 0, (int) byte.MaxValue), new Color(169, 160, 0, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x6, y9 - 27f), Color.Black);
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x6, y9 - 30f), Color.White);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 63f, y9 + 20f), new Rectangle?(new Rectangle(this.cuttyHealthBarSlim.X, this.cuttyHealthBarSlim.Y, (int) ((double) this.cuttyHealthBarSlim.Width * ((double) this.cuttyBoss[0].health / (double) this.cuttyBoss[0].startHealth)), this.cuttyHealthBarSlim.Height)), color3);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 59f, y9 + 40f), new Rectangle?(new Rectangle(this.cuttyHealthBarSlim.X, this.cuttyHealthBarSlim.Y, (int) ((double) this.cuttyHealthBarSlim.Width * ((double) this.cuttyBoss[1].health / (double) this.cuttyBoss[1].startHealth)), this.cuttyHealthBarSlim.Height)), color4);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3, y9), new Rectangle?(this.cuttyDoubleMeter), Color.White);
          }
          if (Cutty4.cuttyCount == 3 && (!this.cuttyBoss[0].death1 || !this.cuttyBoss[1].death1 || !this.cuttyBoss[2].death1))
          {
            float x7 = (float) ((double) this.sc.hud_clock.X - (double) this.ammoMedium2.MeasureString(Cutty4.nameBuild).X / 2.0 + 170.0);
            Color color5 = new Color(0, 142, 162, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 0)
              color5 = Color.Lerp(new Color(0, 142, 162, (int) byte.MaxValue), new Color(178, 160, 20, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            Color color6 = new Color(162, 0, 0, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 1)
              color6 = Color.Lerp(new Color(162, 0, 0, (int) byte.MaxValue), new Color(172, 160, 0, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            Color color7 = new Color(12, 152, 10, (int) byte.MaxValue);
            if (Cutty4.gonnaHealindex == 2)
              color7 = Color.Lerp(new Color(12, 152, 10, (int) byte.MaxValue), new Color(165, 152, 10, (int) byte.MaxValue), Math.Abs((float) Math.Sin((double) this.sc.myTimer / 8.0)));
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x7, y9 - 27f), Color.Black);
            this.spriteBatch.DrawString(this.ammoMedium2, Cutty4.nameBuild, new Vector2(x7, y9 - 30f), Color.White);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 60f, y9 + 19f), new Rectangle?(new Rectangle(this.cuttyHealthBarSlim.X, this.cuttyHealthBarSlim.Y, (int) ((double) this.cuttyHealthBarSlim.Width * ((double) this.cuttyBoss[0].health / (double) this.cuttyBoss[0].startHealth)), this.cuttyHealthBarSlim.Height)), color5);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 62f, y9 + 37f), new Rectangle?(new Rectangle(this.cuttyHealthBarSlim.X, this.cuttyHealthBarSlim.Y, (int) ((double) this.cuttyHealthBarSlim.Width * ((double) this.cuttyBoss[1].health / (double) this.cuttyBoss[1].startHealth)), this.cuttyHealthBarSlim.Height)), color6);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3 + 56f, y9 + 55f), new Rectangle?(new Rectangle(this.cuttyHealthBarSlim.X, this.cuttyHealthBarSlim.Y, (int) ((double) this.cuttyHealthBarSlim.Width * ((double) this.cuttyBoss[2].health / (double) this.cuttyBoss[2].startHealth)), this.cuttyHealthBarSlim.Height)), color7);
            this.spriteBatch.Draw(this.overlay, new Vector2(x3, y9), new Rectangle?(this.cuttyTripleMeter), Color.White);
          }
        }
      }
      if (this.editCam)
      {
        float num6 = (float) (Math.Abs(Math.Sin((double) this.timeFrame / 30.0)) / 2.0 + 0.5);
        BloodnBacon4PT.packets.Length = 0;
        BloodnBacon4PT.packets.Append("Camera Edit");
        this.spriteBatch.Draw(this.overlay, new Vector2(459f, 205f), new Rectangle?(new Rectangle(7, 487, 362, 230)), Color.White * num6);
        float x8 = (float) (640.0 - (double) this.ammoLargeFont.MeasureString(BloodnBacon4PT.packets).X / 2.0);
        float num7 = 0.7f;
        Color color8 = new Color(0, 0, 0, (int) byte.MaxValue) * num6;
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x8, 230f) - new Vector2(-0.7f, 0.0f), color8);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x8, 230f) - new Vector2(num7, 0.0f), color8);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x8, 230f) - new Vector2(0.0f, num7), color8);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x8, 230f) - new Vector2(0.0f, -0.7f), color8);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x8, 230f), Color.White);
        float num8 = 0.7f;
        Color color9 = new Color(0, 0, 0, (int) byte.MaxValue) * num6;
        BloodnBacon4PT.packets.Length = 0;
        BloodnBacon4PT.packets.Append(this.string_0[this.int_2]);
        float x9 = (float) (640.0 - (double) this.ammoLargeFont.MeasureString(BloodnBacon4PT.packets).X / 2.0);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x9, 350f) - new Vector2(-0.7f, 0.0f), color9);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x9, 350f) - new Vector2(num8, 0.0f), color9);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x9, 350f) - new Vector2(0.0f, num8), color9);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x9, 350f) - new Vector2(0.0f, -0.7f), color9);
        this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.packets, new Vector2(x9, 350f), Color.White);
        if ((double) num6 <= 0.51999998092651367)
          this.sc.humm.Play(this.sc.ev * 0.3f, (float) this.rr.Next(-40, -15) / 100f, 0.0f);
      }
      if (this.myPlayer.closeCam && (this.boarDropTimer.Count == 0 || Cutty.cuttyCount > 0 || Princess.cuttyCount > 0) && (double) this.sc.introCamera <= 0.0 && (this.inFarm == 2 || !this.myPlayer.stats_show))
        this.spriteBatch.Draw(this.sc.crosshair1[this.sc.crossIndex].texture, new Vector2(640f, 360f), new Rectangle?(new Rectangle(0, 0, this.sc.crosshair1[this.sc.crossIndex].texture.Width, this.sc.crosshair1[this.sc.crossIndex].texture.Height)), Color.White, 0.0f, new Vector2((float) this.sc.crosshair1[this.sc.crossIndex].texture.Width, (float) this.sc.crosshair1[this.sc.crossIndex].texture.Height) / 2f, 1f, SpriteEffects.None, 0.0f);
      if ((this.IsActive || this.sc.showVideoSetup) && (double) this.sc.chatFade <= 0.0)
      {
        if ((double) this.altitudeTimer > 0.0)
        {
          --this.altitudeTimer;
          if (this.altitude > 0)
          {
            this.altitudeHud = new Vector2(this.sc.hud_enemy.X, 190f);
            if ((double) this.altitudeAnimate < 1.0)
            {
              this.altitudeAnimate += 0.02f;
              this.altitudeHud = Vector2.Hermite(new Vector2(this.sc.hud_enemy.X, 320f), Vector2.Zero, new Vector2(this.sc.hud_enemy.X, 190f), Vector2.Zero, this.altitudeAnimate);
            }
            BloodnBacon4PT.my_stringbuilder.Length = 0;
            BloodnBacon4PT.my_stringbuilder.Concat(this.altitude);
            BloodnBacon4PT.my_stringbuilder.Append(" ft");
            float num = MathHelper.Clamp((float) (((double) this.altitudeTimer - 60.0) / 60.0), 0.0f, 1f);
            this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.my_stringbuilder, this.altitudeHud + new Vector2(-3f, -3f), Color.Black * num);
            this.spriteBatch.DrawString(this.ammoLargeFont, BloodnBacon4PT.my_stringbuilder, this.altitudeHud, Color.White * num);
          }
        }
        if (this.multiHitPointer >= 0 && this.multiHitTimer.Count > 0)
        {
          this.maxdistTimer = 1600f;
          if ((double) this.multiHitTimer[this.multiHitPointer] >= 0.0 && this.multiHitValue[this.multiHitPointer] > 0)
          {
            this.hitHud = new Vector2(120f, 320f);
            if ((double) this.multiHitAnimate < 1.0 && this.multiHitValue[this.multiHitPointer] < 4)
            {
              this.multiHitAnimate += 0.02f;
              this.hitHud = Vector2.Hermite(new Vector2(640f, 290f), Vector2.Zero, new Vector2(120f, 320f), Vector2.Zero, this.multiHitAnimate);
            }
            BloodnBacon4PT.my_stringbuilder.Length = 0;
            BloodnBacon4PT.my_stringbuilder.Concat(this.multiHitValue[this.multiHitPointer]);
            float num = MathHelper.Clamp((float) (((double) this.multiHitTimer[this.multiHitPointer] - 60.0) / 60.0), 0.0f, 1f);
            if (this.multiHitValue[this.multiHitPointer] >= 7)
              this.spriteBatch.Draw(this.overlay, this.hitHud, new Rectangle?(this.rect_Timer), Color.White * num, this.multiHitTimer[this.multiHitPointer] / 30f, new Vector2(73.5f, 73.5f), 0.9f, SpriteEffects.None, 0.0f);
            this.spriteBatch.DrawString(this.ammoLargerFont, BloodnBacon4PT.my_stringbuilder, this.hitHud - this.ammoLargerFont.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f - new Vector2(3f, 7f), Color.Black * num);
            this.spriteBatch.DrawString(this.ammoLargerFont, BloodnBacon4PT.my_stringbuilder, this.hitHud - this.ammoLargerFont.MeasureString(BloodnBacon4PT.my_stringbuilder) / 2f - new Vector2(0.0f, 4f), Color.White * num);
          }
        }
        if (this.myPlayer.stats_show && !this.editCam)
        {
          --this.myPlayer.stats_timer;
          if (this.myPlayer.stats_timer <= 0)
            this.myPlayer.stats_show = false;
          SpriteFont ammoFont = this.ammoFont;
          float x10 = 486f;
          float y10 = 110f;
          string text = this.myPlayer.now.myscore.ToString() + " kills";
          Vector2 vector2 = new Vector2(158f, 0.0f);
          Vector2 position49 = vector2 + new Vector2(x10, 120f) - new Vector2(this.ammoFont.MeasureString(text).X / 2f, 0.0f);
          this.spriteBatch.DrawString(this.ammoFont, text, position49 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(this.ammoFont, text, position49, Color.White);
          float x11 = 300f;
          float num = -9f;
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_shotsfired);
          vector2 = new Vector2(x11, 54f);
          Vector2 position50 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position50 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position50 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position50, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_shotshit);
          vector2 = new Vector2(x11, 89f);
          Vector2 position51 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position51 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position51 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position51, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          int int_val = 0;
          if (this.myPlayer.stats_shotsfired > (ushort) 0)
            int_val = (int) Math.Round(100.0 * ((double) this.myPlayer.stats_shotshit / (double) this.myPlayer.stats_shotsfired), 0);
          BloodnBacon4PT.my_stringbuilder.Concat(int_val);
          BloodnBacon4PT.my_stringbuilder.Append("%");
          vector2 = new Vector2(x11, 132f + num);
          Vector2 position52 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position52 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position52 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position52, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_oneshots);
          vector2 = new Vector2(x11, 186f + num);
          Vector2 position53 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position53 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position53 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position53, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_headshots);
          vector2 = new Vector2(x11, 238f + num);
          Vector2 position54 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position54 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position54 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position54, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_asshits);
          vector2 = new Vector2(x11, 274f + num);
          Vector2 position55 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position55 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position55 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position55, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_grenadier);
          vector2 = new Vector2(x11, 308f + num);
          Vector2 position56 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position56 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position56 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position56, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_meleehits);
          vector2 = new Vector2(x11, 340f + num);
          Vector2 position57 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position57 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position57 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position57, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_spinebounces);
          vector2 = new Vector2(x11, 397f + num);
          Vector2 position58 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position58 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position58 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position58, Color.White);
          BloodnBacon4PT.my_stringbuilder.Length = 0;
          BloodnBacon4PT.my_stringbuilder.Concat((int) this.myPlayer.stats_knockdown);
          vector2 = new Vector2(x11, 426f + num);
          Vector2 position59 = vector2 + new Vector2(x10, y10) - new Vector2(ammoFont.MeasureString(BloodnBacon4PT.my_stringbuilder).X, 0.0f);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position59 + new Vector2(2f, 2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position59 + new Vector2(-2f, -2f), Color.Black);
          this.spriteBatch.DrawString(ammoFont, BloodnBacon4PT.my_stringbuilder, position59, Color.White);
          this.spriteBatch.Draw(this.sc.overlayStats, new Vector2(x10, y10), Color.White);
        }
        int num9 = (int) this.myPlayer.now.health % 100;
        if ((double) this.myPlayer.now.health == 100.0)
          num9 = (int) this.myPlayer.now.tempHealth % 100;
        Color color10 = this.healthBar[num9 / 13];
        if ((double) this.myPlayer.now.health > 100.0)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 87f, this.sc.hud_player1.Y + 36f), new Rectangle?(new Rectangle(this.rect_health.X, this.rect_health.Y, (int) ((double) this.rect_health.Width * (double) num9 / 100.0), this.rect_health.Height)), color10);
        else
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 87f, this.sc.hud_player1.Y + 36f), new Rectangle?(new Rectangle(this.rect_death.X, this.rect_death.Y, (int) ((double) this.rect_death.Width * (double) num9 / 100.0), this.rect_death.Height)), this.healthBar[0]);
        if (this.myPlayer.milkEffects > 0 && this.myPlayer.hulkEffects > 0)
        {
          if (this.myPlayer.milkEffects >= this.myPlayer.hulkEffects)
          {
            color10 = new Color(1f, (float) (Math.Sin((double) this.sc.myTimer / 4.0) / 4.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 8.0 + 0.20000000298023224), (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.milkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
            color10 = new Color((float) (Math.Sin((double) this.sc.myTimer / 5.0) / 5.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 5.0 + 0.5), 1f, (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.hulkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
          }
          else
          {
            color10 = new Color((float) (Math.Sin((double) this.sc.myTimer / 5.0) / 5.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 5.0 + 0.5), 1f, (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.hulkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
            color10 = new Color(1f, (float) (Math.Sin((double) this.sc.myTimer / 4.0) / 4.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 8.0 + 0.20000000298023224), (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.milkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
          }
        }
        else
        {
          if (this.myPlayer.milkEffects > 0)
          {
            color10 = new Color(1f, (float) (Math.Sin((double) this.sc.myTimer / 4.0) / 4.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 8.0 + 0.20000000298023224), (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.milkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
          }
          if (this.myPlayer.hulkEffects > 0)
          {
            color10 = new Color((float) (Math.Sin((double) this.sc.myTimer / 5.0) / 5.0 + 0.5), (float) (Math.Sin((double) this.sc.myTimer / 6.0) / 5.0 + 0.5), 1f, (float) byte.MaxValue);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X + 86f, this.sc.hud_player1.Y + 46f), new Rectangle?(new Rectangle(this.rect_Fader.X, this.rect_Fader.Y, (int) ((double) this.rect_Fader.Width * (double) MathHelper.Clamp((float) this.myPlayer.hulkEffects / 2000f, 0.0f, 1f)), this.rect_Fader.Height)), color10);
          }
        }
        Rectangle rectangle3 = this.rect_johnnycorpse;
        if ((double) this.myPlayer.now.health != 0.0)
        {
          rectangle3 = this.rect_alivebody;
          if (this.sc.myplayerCheats)
            rectangle3 = this.rect_aliveCheat;
        }
        this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player1.X, this.sc.hud_player1.Y), new Rectangle?(rectangle3), this.sc.color_player1);
        if (this.remPlayer.Count > 1 || this.sc.showVideoSetup)
        {
          int num10 = 0;
          int num11 = this.remPlayer.Count - 2;
          if (this.remPlayer.Count < 2 && this.sc.showVideoSetup)
          {
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player2.X, this.sc.hud_player2.Y), new Rectangle?(new Rectangle(this.rect_health.X, this.rect_health.Y, (int) ((double) this.rect_health.Width * 0.89999997615814209), this.rect_health.Height)), this.healthBar[6], 0.0f, new Vector2(-87f, -36f), 0.7f, SpriteEffects.None, 0.0f);
            this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player2.X, this.sc.hud_player2.Y), new Rectangle?(this.rect_lando), this.sc.color_player2, 0.0f, Vector2.Zero, 0.7f, SpriteEffects.None, 0.0f);
          }
          if (this.sc.shownames)
            this.vv1 = Vector2.Normalize(new Vector2(this.camlookpos.X, this.camlookpos.Z) - new Vector2(this.campos.X, this.campos.Z));
          for (int index = 0; index < this.remPlayer.Count; ++index)
          {
            if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.remoteID != 6)
            {
              float y11 = this.sc.hud_player2.Y - (float) (60 * (num11 - num10));
              ++num10;
              if (this.sc.shownames)
              {
                this.vv2 = Vector2.Normalize(new Vector2(this.remPlayer[index].r.displayState.npcPosition.X, this.remPlayer[index].r.displayState.npcPosition.Z) - new Vector2(this.campos.X, this.campos.Z));
                if ((double) Vector2.Dot(this.vv1, this.vv2) > 0.60000002384185791)
                {
                  float y12 = 52f;
                  if (this.sc.hostBobbleheads || this.remPlayer[index].r.bobble || this.remPlayer[index].r.hatindex >= 1)
                    y12 = 60f;
                  Vector3 vector3 = this.sc.viewportX.Project(Vector3.Zero, this.proj, this.view, Matrix.CreateTranslation(this.remPlayer[index].r.displayState.npcPosition + new Vector3(0.0f, y12, 0.0f)));
                  this.sc.textPosition.X = vector3.X;
                  this.sc.textPosition.Y = vector3.Y;
                  Vector2 vector2 = this.ammoSmallFont.MeasureString(this.remPlayer[index].r.remgamertag);
                  this.spriteBatch.DrawString(this.ammoSmallFont, this.remPlayer[index].r.remgamertag, this.sc.textPosition, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue), 0.0f, new Vector2(vector2.X * 0.2f, vector2.Y), 0.9f, SpriteEffects.None, 0.0f);
                }
              }
              Color color11 = this.colorList[index];
              if (this.remPlayer[index].r.isHost)
                color11 = this.hostblue;
              this.spriteBatch.DrawString(this.ammoSmallFont, this.remPlayer[index].r.remgamertag, new Vector2(this.sc.hud_player2.X + 70f, y11 - 5f), color11);
              int num12 = (int) this.remPlayer[index].r.now.health % 100;
              if ((double) this.remPlayer[index].r.now.health == 100.0)
                num12 = (int) this.remPlayer[index].r.now.liftHealth % 100;
              Color color12 = this.healthBar[num12 / 13];
              if ((double) this.remPlayer[index].r.now.health > 100.0)
                this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player2.X + 0.0f, y11 + 0.0f), new Rectangle?(new Rectangle(this.rect_health.X, this.rect_health.Y, (int) ((double) this.rect_health.Width * (double) num12 / 100.0), this.rect_health.Height)), color12, 0.0f, new Vector2(-87f, -36f), 0.7f, SpriteEffects.None, 0.0f);
              else
                this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player2.X + 0.0f, y11 + 0.0f), new Rectangle?(new Rectangle(this.rect_death.X, this.rect_death.Y, (int) ((double) this.rect_death.Width * (double) num12 / 100.0), this.rect_death.Height)), this.healthBar[0], 0.0f, new Vector2(-87f, -36f), 0.7f, SpriteEffects.None, 0.0f);
              Rectangle rectangle4 = this.rect_johnnycorpse;
              if ((double) this.remPlayer[index].r.now.health != 0.0)
              {
                rectangle4 = this.remPlayer[index].r.rect_alivebodyRemote;
                if (this.remPlayer[index].r.cheats)
                  rectangle4 = this.remPlayer[index].r.rect_alivebodyCheat;
              }
              this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_player2.X, y11), new Rectangle?(rectangle4), this.sc.color_player2, 0.0f, Vector2.Zero, 0.7f, SpriteEffects.None, 0.0f);
            }
          }
        }
      }
      Color color13;
      Color color14;
      if (this.handtype[this.myPlayer.gunChoice] == 1)
      {
        color13 = this.grn1;
        color14 = this.grn2;
      }
      else
      {
        color13 = new Color(90, 90, 100, 150);
        color14 = new Color(70, 70, 70, 150);
      }
      if (this.sc.showVideoSetup)
      {
        color13 = this.sc.color_weapons;
        color14 = this.sc.color_weapons;
      }
      if (((double) this.sc.myTimer % 10.0 == 0.0 || this.myPlayer.gunFired) && this.myPlayer.oldColtAmmo != this.myPlayer.mag[this.myPlayer.primaryChoice])
      {
        BloodnBacon4PT.coltammoBuild.Length = 0;
        BloodnBacon4PT.coltammoBuild.Concat(this.myPlayer.mag[this.myPlayer.primaryChoice]);
        this.myPlayer.oldColtAmmo = this.myPlayer.mag[this.myPlayer.primaryChoice];
      }
      Vector2 vector2_1 = new Vector2(this.sc.hud_weapons.X, this.sc.hud_weapons.Y);
      if ((double) this.weaponGrabTimer < 1.0 && this.myPlayer.nextgunChoice == this.myPlayer.primaryChoice)
      {
        this.weaponGrabTimer += 0.15f;
        vector2_1 = Vector2.Lerp(new Vector2(560f, this.sc.hud_weapons.Y), new Vector2(this.sc.hud_weapons.X, this.sc.hud_weapons.Y), this.weaponGrabTimer);
      }
      Vector2 vector2_2 = new Vector2(vector2_1.X + 28f, vector2_1.Y + 24f);
      this.spriteBatch.DrawString(this.ammoFont, BloodnBacon4PT.coltammoBuild, vector2_2 - this.ammoFont.MeasureString(BloodnBacon4PT.coltammoBuild) / 2f, color14);
      this.spriteBatch.Draw(this.overlay, new Vector2(vector2_1.X, vector2_1.Y), new Rectangle?(this.weaponBox[this.myPlayer.primaryChoice]), color13);
      if (this.myPlayer.primaryChoice != this.myPlayer.secondaryChoice)
      {
        bool flag9 = this.myPlayer.ammo[this.myPlayer.secondaryChoice] == 0 && this.myPlayer.mag[this.myPlayer.secondaryChoice] == 0;
        if (this.handtype[this.myPlayer.gunChoice] == 2)
        {
          if (flag9)
          {
            this.explosiveCount = 0;
            color13 = new Color(240, 65, 55, (int) byte.MaxValue);
            color14 = new Color((int) byte.MaxValue, 105, 105, (int) byte.MaxValue);
          }
          else
          {
            color13 = this.grn1;
            color14 = this.grn2;
            if (this.explosiveCount > 0)
            {
              if (this.explosiveCount >= this.myPlayer.mag[this.myPlayer.secondaryChoice])
                color13 = new Color((int) byte.MaxValue, 155, 1, 190);
              color14 = new Color((int) byte.MaxValue, 114, 1, (int) byte.MaxValue);
            }
          }
        }
        else if (flag9)
        {
          color13 = new Color(110, 50, 50, 150);
          color14 = new Color(100, 50, 50, 150);
        }
        else
        {
          color13 = new Color(90, 90, 100, 150);
          color14 = new Color(70, 70, 70, 150);
          if (this.explosiveCount > 0)
          {
            if (this.explosiveCount >= this.myPlayer.mag[this.myPlayer.secondaryChoice])
              color13 = new Color(200, 120, 10, 150);
            color14 = new Color(200, 90, 12, 215);
          }
        }
        if (this.sc.showVideoSetup)
        {
          color13 = this.sc.color_weapons;
          color14 = this.sc.color_weapons;
        }
        if ((double) this.sc.myTimer % 10.0 == 0.0 || this.myPlayer.gunFired)
        {
          if (this.myPlayer.oldAkAmmo != this.myPlayer.ammo[this.myPlayer.secondaryChoice])
          {
            BloodnBacon4PT.akammoBuild.Length = 0;
            BloodnBacon4PT.akammoBuild.Concat(this.myPlayer.ammo[this.myPlayer.secondaryChoice]);
            this.myPlayer.oldAkAmmo = this.myPlayer.ammo[this.myPlayer.secondaryChoice];
          }
          if (this.myPlayer.oldAkMag != this.myPlayer.mag[this.myPlayer.secondaryChoice])
          {
            BloodnBacon4PT.akmagBuild.Length = 0;
            BloodnBacon4PT.akmagBuild.Concat(this.myPlayer.mag[this.myPlayer.secondaryChoice]);
            this.myPlayer.oldAkMag = this.myPlayer.mag[this.myPlayer.secondaryChoice];
          }
        }
        vector2_1 = new Vector2(this.sc.hud_weapons.X, this.sc.hud_weapons.Y);
        if ((double) this.weaponGrabTimer < 1.0 && this.myPlayer.nextgunChoice == this.myPlayer.secondaryChoice)
        {
          this.weaponGrabTimer += 0.15f;
          vector2_1 = Vector2.Lerp(new Vector2(560f, this.sc.hud_weapons.Y), new Vector2(this.sc.hud_weapons.X, this.sc.hud_weapons.Y), this.weaponGrabTimer);
        }
        Vector2 vector2_3 = new Vector2(0.0f, 13f);
        vector2_2 = new Vector2(vector2_1.X + 25f, vector2_1.Y - 50f);
        this.spriteBatch.DrawString(this.ammoFont, BloodnBacon4PT.akmagBuild, vector2_3 + vector2_2 - this.ammoFont.MeasureString(BloodnBacon4PT.akmagBuild) / 2f, color14);
        vector2_2 = new Vector2(vector2_1.X + 50f, vector2_1.Y - 31f);
        this.spriteBatch.DrawString(this.ammoSmallFont, BloodnBacon4PT.akammoBuild, vector2_3 + vector2_2 - this.ammoSmallFont.MeasureString(BloodnBacon4PT.akammoBuild) / 2f, color13);
        this.spriteBatch.Draw(this.overlay, vector2_3 + new Vector2(vector2_1.X, vector2_1.Y - 90f), new Rectangle?(this.weaponBox[this.myPlayer.secondaryChoice]), color13);
      }
      if (this.dpadTimer > 0)
      {
        --this.dpadTimer;
        BloodnBacon4PT.dpad.Length = 0;
        BloodnBacon4PT.dpad.Concat(this.dpadCount);
        this.spriteBatch.DrawString(this.ammoFont, BloodnBacon4PT.dpad, new Vector2(this.sc.hud_weapons.X + 51f, this.sc.hud_weapons.Y + 110f) - this.ammoFont.MeasureString(BloodnBacon4PT.dpad) / 2f, this.sc.color_dpad);
      }
      this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 1f, (float) ((double) this.sc.hud_weapons.Y + 48.0 + 10.0)), new Rectangle?(new Rectangle(1113, 411, 124, 32)), this.sc.color_dpad);
      if (!this.myPlayer.isDown)
      {
        if (this.myPlayer.gunChoice == this.gType)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 1f, (float) ((double) this.sc.hud_weapons.Y + 49.0 + 10.0)), new Rectangle?(this.rect_grenade3), new Color(156, (int) byte.MaxValue, 55, (int) byte.MaxValue));
        else if (this.sc.grenades > 0)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 2f, (float) ((double) this.sc.hud_weapons.Y + 51.0 + 10.0)), new Rectangle?(this.rect_grenade4), this.sc.color_dpad * 0.7f);
        if (this.myPlayer.gunChoice == this.mType)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 26f, (float) ((double) this.sc.hud_weapons.Y + 49.0 + 10.0)), new Rectangle?(this.rect_milk3), new Color(156, (int) byte.MaxValue, 55, (int) byte.MaxValue));
        else if (this.sc.milks > 0)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 27f, (float) ((double) this.sc.hud_weapons.Y + 51.0 + 10.0)), new Rectangle?(this.rect_milk4), this.sc.color_dpad * 0.7f);
        if (this.myPlayer.gunChoice == this.hType)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 51f, (float) ((double) this.sc.hud_weapons.Y + 49.0 + 10.0)), new Rectangle?(this.rect_hulk3), new Color(156, (int) byte.MaxValue, 55, (int) byte.MaxValue));
        else if (this.sc.hulks > 0)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 52f, (float) ((double) this.sc.hud_weapons.Y + 51.0 + 10.0)), new Rectangle?(this.rect_hulk4), this.sc.color_dpad * 0.7f);
        if (this.myPlayer.gunChoice == this.pType)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 76f, (float) ((double) this.sc.hud_weapons.Y + 49.0 + 10.0)), new Rectangle?(this.rect_pill3), new Color(156, (int) byte.MaxValue, 55, (int) byte.MaxValue));
        else if (this.sc.pills > 0)
          this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 77f, (float) ((double) this.sc.hud_weapons.Y + 51.0 + 10.0)), new Rectangle?(this.rect_pill4), this.sc.color_dpad * 0.7f);
      }
      else if (this.myPlayer.gunChoice == this.pType)
        this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 76f, (float) ((double) this.sc.hud_weapons.Y + 49.0 + 10.0)), new Rectangle?(this.rect_pill3), new Color(156, (int) byte.MaxValue, 55, (int) byte.MaxValue));
      else if (this.sc.pills > 0)
        this.spriteBatch.Draw(this.overlay, new Vector2(this.sc.hud_weapons.X + 77f, (float) ((double) this.sc.hud_weapons.Y + 51.0 + 10.0)), new Rectangle?(this.rect_pill4), this.sc.color_dpad * 0.7f);
      this.spriteBatch.End();
    }

    private void drawPreGlow(ref Model model, Matrix world, Vector3 color)
    {
      Effect effect = model.Meshes[0].MeshParts[0].Effect;
      model.Meshes[0].MeshParts[0].Effect = this.preglowEffect;
      this.preglowEffect.Parameters["World"].SetValue(world);
      this.preglowEffect.Parameters["View"].SetValue(this.view);
      this.preglowEffect.Parameters["Projection"].SetValue(this.proj);
      this.preglowEffect.Parameters[nameof (color)].SetValue(color);
      this.preglowEffect.CurrentTechnique = this.preglowEffect.Techniques["Straight"];
      model.Meshes[0].Draw();
      model.Meshes[0].MeshParts[0].Effect = effect;
    }

    private void ApplyGlow()
    {
      this.glowDistance = MathHelper.Clamp(this.glowDistance / 6400f, 0.0f, 1f);
      this.glowDistance = MathHelper.Lerp(0.015f, 3f / 1000f, this.glowDistance);
      this.glowEffect.Parameters["fade"].SetValue(this.glowDistance);
      this.glowEffect.Parameters["NormalDepthTexture"].SetValue((Texture) this.glowTarget);
      this.glowEffect.CurrentTechnique = this.glowEffect.Techniques[this.sc.glowtype];
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, (SamplerState) null, (DepthStencilState) null, (RasterizerState) null, this.glowEffect);
      if ((double) this.sc.introCamera > 0.0)
        this.spriteBatch.Draw((Texture2D) this.glowTarget, new Rectangle(this.sc.myviewport.X, this.sc.myviewport.Y, this.sc.myviewport.Width, this.sc.myviewport.Height), Color.White);
      else
        this.spriteBatch.Draw((Texture2D) this.glowTarget, new Rectangle(0, 0, this.sc.GraphicsDevice.Viewport.Width, this.sc.GraphicsDevice.Viewport.Height), Color.White);
      this.spriteBatch.End();
    }

    private void applyBossGlow(int index)
    {
      this.cuttyBoss[index].glowEffect.Parameters["NormalDepthTexture"].SetValue((Texture) this.glowTarget);
      this.cuttyBoss[index].glowEffect.CurrentTechnique = this.cuttyBoss[index].glowEffect.Techniques[this.sc.glowtype];
      this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, (SamplerState) null, (DepthStencilState) null, (RasterizerState) null, this.cuttyBoss[index].glowEffect);
      if ((double) this.sc.introCamera > 0.0)
        this.spriteBatch.Draw((Texture2D) this.glowTarget, new Rectangle(this.sc.myviewport.X, this.sc.myviewport.Y, this.sc.myviewport.Width, this.sc.myviewport.Height), Color.White);
      else
        this.spriteBatch.Draw((Texture2D) this.glowTarget, new Rectangle(0, 0, this.sc.GraphicsDevice.Viewport.Width, this.sc.GraphicsDevice.Viewport.Height), Color.White);
      this.spriteBatch.End();
    }

    private void remChar_Glow(ref Model model, Vector3 color, int remindex)
    {
      model.Meshes[0].MeshParts[0].Effect = this.solidSkin;
      this.solidSkin.Parameters["View"].SetValue(this.view);
      this.solidSkin.Parameters["Projection"].SetValue(this.proj);
      this.solidSkin.Parameters[nameof (color)].SetValue(color);
      this.solidSkin.Parameters["Bones"].SetValue(this.remPlayer[remindex].r.skinTransforms);
      this.solidSkin.CurrentTechnique = this.solidSkin.Techniques["SkinnedEffect"];
      model.Meshes[0].Draw();
    }

    private void localChar_Glow(ref Model model, Vector3 color)
    {
      model.Meshes[0].MeshParts[0].Effect = this.solidSkin;
      this.solidSkin.Parameters["View"].SetValue(this.view);
      this.solidSkin.Parameters["Projection"].SetValue(this.proj);
      this.solidSkin.Parameters[nameof (color)].SetValue(color);
      this.solidSkin.Parameters["Bones"].SetValue(this.npc1[this.myPlayer.clip1].skinTransforms);
      this.solidSkin.CurrentTechnique = this.solidSkin.Techniques["SkinnedEffect"];
      model.Meshes[0].Draw();
    }

    private void drawFarmer()
    {
      this.farmerModel.Meshes[0].MeshParts[0].Effect = this.farmerSkin;
      this.farmerSkin.Parameters["View"].SetValue(this.view);
      this.farmerSkin.Parameters["Projection"].SetValue(this.proj);
      this.farmerSkin.Parameters["Bones"].SetValue(this.farmer1[0].skinTransforms);
      this.farmerSkin.Parameters["flash"].SetValue(Vector3.Zero);
      if (this.techniBoar == 0)
      {
        this.farmerSkin.Parameters["light2"].SetValue(Vector3.Transform(new Vector3(0.0f, -0.3f, 1f), Matrix.CreateRotationY(-this.myPlayer.displayState.npcRotation)));
        this.farmerSkin.Parameters["flash"].SetValue(new Vector3(0.68f, 0.7f, 0.5f) * this.flicker1);
      }
      else if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.now.gunfired > 0)
          {
            this.farmerSkin.Parameters["light2"].SetValue(Vector3.Transform(new Vector3(0.0f, -0.3f, 1f), Matrix.CreateRotationY(-this.remPlayer[index].r.displayState.npcRotation)));
            this.farmerSkin.Parameters["flash"].SetValue(new Vector3(0.68f, 0.7f, 0.5f) * this.remPlayer[index].r.flicker2);
            break;
          }
        }
      }
      this.farmerSkin.CurrentTechnique = this.farmerSkin.Techniques["SkinnedEffect"];
      this.farmerModel.Meshes[0].Draw();
    }

    private void drawTwin()
    {
      this.twinModel.Meshes[0].MeshParts[0].Effect = this.twinSkin;
      this.twinSkin.Parameters["World"].SetValue(Matrix.CreateTranslation(0.0f, 0.0f, 0.0f));
      this.twinSkin.Parameters["View"].SetValue(this.view);
      this.twinSkin.Parameters["Projection"].SetValue(this.proj);
      this.twinSkin.Parameters["Bones"].SetValue(this.twin1[this.twinbase].skinTransforms);
      this.twinSkin.Parameters["flash"].SetValue(Vector3.Zero);
      this.twinSkin.Parameters["depth"].SetValue(250);
      this.twinSkin.Parameters["campos"].SetValue(this.campos);
      this.twinSkin.Parameters["Texture"].SetValue((Texture) this.twinTexture);
      if (this.techniBoar == 0)
      {
        this.twinSkin.Parameters["light2"].SetValue(Vector3.Transform(new Vector3(0.0f, -0.3f, 1f), Matrix.CreateRotationY(-this.myPlayer.displayState.npcRotation)));
        this.twinSkin.Parameters["flash"].SetValue(new Vector3(0.68f, 0.7f, 0.5f) * this.flicker1);
        this.twinSkin.Parameters["depth"].SetValue(this.flashlightDepth);
      }
      this.twinSkin.CurrentTechnique = this.twinSkin.Techniques["SkinnedEffect"];
      this.twinModel.Meshes[0].Draw();
    }

    private void DrawMyChar()
    {
      this.localModel.Meshes[0].MeshParts[0].Effect = this.quickSkin1;
      this.quickSkin1.Parameters["View"].SetValue(this.view);
      this.quickSkin1.Parameters["Projection"].SetValue(this.proj);
      this.quickSkin1.Parameters["Bones"].SetValue(this.npc1[this.myPlayer.clip1].skinTransforms);
      this.quickSkin1.Parameters["flash"].SetValue(Vector3.Zero);
      this.quickSkin1.Parameters["DiffuseLight"].SetValue(1.1f);
      this.quickSkin1.Parameters["AmbientLight"].SetValue(0.4f);
      if (this.tunneladd && this.inFarm == 2 && (double) this.myPlayer.displayState.npcPosition.Y < -60.0)
      {
        this.quickSkin1.Parameters["DiffuseLight"].SetValue(0.45f);
        this.quickSkin1.Parameters["AmbientLight"].SetValue(0.22f);
      }
      else if (this.sc.dayTime == "pm" && !this.myPlayer.inBarn)
      {
        this.quickSkin1.Parameters["DiffuseLight"].SetValue((float) (0.699999988079071 * (double) this.sc.darkness + 0.30000001192092896));
        this.quickSkin1.Parameters["AmbientLight"].SetValue((float) (0.30000001192092896 * (double) this.sc.darkness + 0.20000000298023224));
      }
      if ((double) this.myPlayer.flashTimer > 0.34999999403953552 && this.myPlayer.gunChoice != 16)
      {
        this.v2 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(-this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(-this.myPlayer.displayState.npcRotation));
        this.quickSkin1.Parameters["light2"].SetValue(-this.v2);
        this.quickSkin1.Parameters["flash"].SetValue(new Vector3(2f, 1.3f, 0.8f) / 1.5f);
      }
      else if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (this.mysteamID == this.remPlayer[index].id)
            this.sc.myplayerindex = index;
          else if ((double) this.remPlayer[index].r.flashTimer > 0.34999999403953552 && (double) this.remPlayer[index].r.player2player < 490000.0)
          {
            this.f1 = (float) Math.Atan2((double) this.myPlayer.displayState.npcPosition.Z - (double) this.remPlayer[index].r.gunpos.Z, (double) this.myPlayer.displayState.npcPosition.X - (double) this.remPlayer[index].r.gunpos.X);
            this.v2 = Vector3.Transform(new Vector3(1f, -0.3f, 0.0f), Matrix.CreateRotationY(this.f1));
            this.quickSkin1.Parameters["light2"].SetValue(-this.v2);
            this.quickSkin1.Parameters["flash"].SetValue(new Vector3(2f, 1.5f, 0.7f) / 1.5f);
            break;
          }
        }
      }
      float num = 0.0f;
      if ((double) this.myPlayer.now.health <= 0.0 && this.myPlayer.fallState == 12)
      {
        this.quickSkin1.CurrentTechnique = this.quickSkin1.Techniques["DeadEffect"];
        this.quickSkin1.Parameters["mixer"].SetValue((float) ((double) this.myPlayer.frame1 / 120.0 * ((double) this.myPlayer.frame1 / 120.0)));
      }
      else
      {
        this.quickSkin1.Parameters["mixer"].SetValue(num);
        this.quickSkin1.CurrentTechnique = this.quickSkin1.Techniques["SkinnedEffect"];
      }
      this.localModel.Meshes[0].Draw();
    }

    public void DrawHat()
    {
      if (this.localID < 0 || this.localID > 10)
        return;
      int index = this.sc.hatindex - 1;
      Matrix matrix = this.sc.hatMatrix[this.localID, index] * this.myPlayer.headbone;
      this.sc.hatPack.Meshes[index].MeshParts[0].Effect = this.sc.hatEffect;
      this.sc.hatEffect.Parameters["World"].SetValue(matrix);
      this.sc.hatEffect.Parameters["View"].SetValue(this.view);
      this.sc.hatEffect.Parameters["Projection"].SetValue(this.proj);
      this.sc.hatEffect.Parameters["flash"].SetValue(Vector3.Zero);
      this.sc.hatEffect.Parameters["DiffuseLight"].SetValue(0.8f);
      this.sc.hatEffect.Parameters["AmbientLight"].SetValue(0.32f);
      if (this.sc.dayTime == "pm" && !this.myPlayer.inBarn)
      {
        this.sc.hatEffect.Parameters["DiffuseLight"].SetValue((float) (0.699999988079071 * (double) this.sc.darkness + 0.30000001192092896));
        this.sc.hatEffect.Parameters["AmbientLight"].SetValue((float) (0.30000001192092896 * (double) this.sc.darkness + 0.20000000298023224));
      }
      if ((double) this.myPlayer.flashTimer > 0.34999999403953552 && this.myPlayer.gunChoice != 16)
      {
        this.v2 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(-this.myPlayer.displayState.npcTilt) * Matrix.CreateRotationY(-this.myPlayer.displayState.npcRotation));
        this.sc.hatEffect.Parameters["light2"].SetValue(-this.v2);
        this.sc.hatEffect.Parameters["flash"].SetValue(new Vector3(2f, 1.3f, 0.8f) / 1.5f);
      }
      this.sc.hatEffect.Parameters["Texture"].SetValue((Texture) this.sc.hatTextures[index]);
      this.sc.hatEffect.CurrentTechnique = this.sc.hatEffect.Techniques["myhat"];
      this.sc.hatPack.Meshes[index].Draw();
    }

    private void DrawRemChar(int i)
    {
      this.remPlayer[i].r.remoteModel.Meshes[0].MeshParts[0].Effect = this.quickSkin2;
      try
      {
        this.quickSkin2.Parameters["Texture"].SetValue((Texture) this.remPlayer[i].r.player2Texture);
      }
      catch
      {
      }
      this.quickSkin2.Parameters["View"].SetValue(this.view);
      this.quickSkin2.Parameters["Projection"].SetValue(this.proj);
      this.quickSkin2.Parameters["Bones"].SetValue(this.remPlayer[i].r.skinTransforms);
      float num1 = 1f;
      float num2 = 0.35f;
      float num3 = 1f;
      float num4 = 0.35f;
      float amount1 = 0.0f;
      float y = this.remPlayer[i].r.displayState.npcPosition.Y;
      if (this.tunneladd && (double) y <= -10.0)
      {
        num3 = 0.0f;
        num4 = 0.15f;
        amount1 = MathHelper.Clamp((float) (((double) y + 10.0) / -70.0), 0.0f, 1f);
      }
      if (this.sc.dayTime == "pm" && !this.myPlayer.insideBarn(this.remPlayer[i].r.lastPOS))
      {
        num1 = (float) (0.699999988079071 * (double) this.sc.darkness + 0.30000001192092896);
        num2 = (float) (0.30000001192092896 * (double) this.sc.darkness + 0.20000000298023224);
      }
      float num5 = MathHelper.Lerp(num1, num3, amount1);
      float num6 = MathHelper.Lerp(num2, num4, amount1);
      this.quickSkin2.Parameters["DiffuseLight"].SetValue(num5);
      this.quickSkin2.Parameters["AmbientLight"].SetValue(num6);
      this.sc.hatEffect.Parameters["DiffuseLight"].SetValue(num5);
      this.sc.hatEffect.Parameters["AmbientLight"].SetValue(num6);
      float amount2 = 1f;
      Vector3 vector3_1 = Vector3.Zero;
      Vector3 vector3_2 = Vector3.Zero;
      Vector3 zero1 = Vector3.Zero;
      Vector3 vector3_3 = Vector3.Zero;
      Vector3 vector3_4 = Vector3.Zero;
      Vector3 zero2 = Vector3.Zero;
      if ((double) this.remPlayer[i].r.player2player < 250000.0)
      {
        float num7 = 0.0f;
        if ((double) this.myPlayer.flashTimer > 0.34999999403953552 || this.myPlayer.now.flashlight)
        {
          num7 = 1f - MathHelper.Clamp((float) ((Math.Sqrt((double) this.remPlayer[i].r.player2player) - (double) this.flashlightDepth * 0.60000002384185791) / 100.0), 0.0f, 1f);
          if ((double) num7 > 0.0)
          {
            vector3_1 = -Vector3.Transform(new Vector3(1f, -0.1f, 0.0f), Matrix.CreateRotationY((float) Math.Atan2((double) this.remPlayer[i].r.displayState.npcPosition.Z - (double) this.myPlayer.gunpos.Z, (double) this.remPlayer[i].r.displayState.npcPosition.X - (double) this.myPlayer.gunpos.X)));
            vector3_3 = new Vector3(1.1f, 0.95f, 0.95f) * (num7 * 0.9f);
          }
        }
        if ((double) num7 != 1.0 && (double) this.remPlayer[i].r.flashTimer > 0.34999999403953552 || this.remPlayer[i].r.now.flashlight)
        {
          vector3_2 = -Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(-this.remPlayer[i].r.displayState.npcTilt) * Matrix.CreateRotationY(-this.remPlayer[i].r.displayState.npcRotation));
          vector3_4 = new Vector3(1.1f, 0.95f, 0.95f) / 1.4f;
        }
        amount2 = 1f - num7;
      }
      else if ((double) this.remPlayer[i].r.flashTimer > 0.34999999403953552 || this.remPlayer[i].r.now.flashlight)
      {
        vector3_2 = -Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateRotationX(-this.remPlayer[i].r.displayState.npcTilt) * Matrix.CreateRotationY(-this.remPlayer[i].r.displayState.npcRotation));
        vector3_4 = new Vector3(1.1f, 0.95f, 0.95f) / 1.4f;
        amount2 = 1f;
      }
      Vector3 vector3_5 = Vector3.Lerp(vector3_1, vector3_2, amount2);
      Vector3 vector3_6 = Vector3.Lerp(vector3_3, vector3_4, amount2);
      this.quickSkin2.Parameters["light2"].SetValue(vector3_5);
      this.quickSkin2.Parameters["flash"].SetValue(vector3_6);
      this.sc.hatEffect.Parameters["light2"].SetValue(vector3_5);
      this.sc.hatEffect.Parameters["flash"].SetValue(vector3_6);
      float num8 = 0.0f;
      if (this.remPlayer[i].r.remoteID == 6)
        num8 = this.sc.myTimer / 300f;
      if ((double) this.remPlayer[i].r.now.health == 0.0 && this.remPlayer[i].r.fallState == 12)
      {
        this.quickSkin2.CurrentTechnique = this.quickSkin2.Techniques["DeadEffect"];
        this.quickSkin2.Parameters["Dead"].SetValue((Texture) this.remPlayer[i].r.texture2D_3);
        this.quickSkin2.Parameters["mixer"].SetValue((float) ((double) this.remPlayer[i].r.frame1 / 120.0 * ((double) this.remPlayer[i].r.frame1 / 120.0)));
      }
      else
      {
        this.quickSkin2.Parameters["mixer"].SetValue(num8);
        this.quickSkin2.CurrentTechnique = this.quickSkin2.Techniques["SkinnedEffect"];
      }
      this.remPlayer[i].r.remoteModel.Meshes[0].Draw();
    }

    public void DrawRemHat(int i)
    {
      if (this.remPlayer[i].r.remoteID < 0 || this.remPlayer[i].r.remoteID > 10)
        return;
      int index1 = this.remPlayer[i].r.hatindex - 1;
      int index2 = index1;
      if ((double) this.remPlayer[i].r.player2player > 640000.0)
      {
        index2 += 20;
        if ((double) this.remPlayer[i].r.player2player > 2890000.0)
          return;
      }
      Matrix matrix = this.sc.hatMatrix[this.remPlayer[i].r.remoteID, index1] * this.remPlayer[i].r.headbone;
      this.sc.hatPack.Meshes[index2].MeshParts[0].Effect = this.sc.hatEffect;
      this.sc.hatEffect.Parameters["World"].SetValue(matrix);
      this.sc.hatEffect.Parameters["View"].SetValue(this.view);
      this.sc.hatEffect.Parameters["Projection"].SetValue(this.proj);
      this.sc.hatEffect.Parameters["Texture"].SetValue((Texture) this.sc.hatTextures[index1]);
      this.sc.hatEffect.CurrentTechnique = this.sc.hatEffect.Techniques["myhat"];
      this.sc.hatPack.Meshes[index2].Draw();
    }

    private void DrawModel(Model model, Matrix world)
    {
      Vector3 vector3_1 = new Vector3(1.52f, 1.52f, 1.52f);
      Vector3 vector3_2 = new Vector3(0.85f, 0.85f, 0.85f);
      foreach (BasicEffect effect in model.Meshes[0].Effects)
      {
        effect.World = world;
        effect.View = this.view;
        effect.Projection = this.proj;
        effect.LightingEnabled = true;
        effect.DirectionalLight0.Enabled = true;
        effect.DirectionalLight0.Direction = new Vector3(0.2f, -0.5f, 0.1f);
        effect.AmbientLightColor = vector3_2;
        effect.DirectionalLight0.DiffuseColor = vector3_1;
        effect.PreferPerPixelLighting = false;
      }
      model.Meshes[0].Draw();
    }

    private void drawWriting(Model model, Matrix world, Texture2D tt)
    {
      if (this.techniWorld == 0 && (double) this.myPlayer.flashTimer <= 0.0)
        this.writingLocalFade = 1f;
      if ((double) this.writingLocalFade < 0.0 && this.techniWorld != 0 && (double) this.writingRemoteFade < 0.0)
        return;
      model.Meshes[0].MeshParts[0].Effect = this.writeEffect;
      this.writeEffect.Parameters["rgbTexture"].SetValue((Texture) tt);
      this.writeEffect.Parameters["proj"].SetValue(this.proj);
      this.writeEffect.Parameters[nameof (world)].SetValue(world);
      this.writeEffect.Parameters["depth"].SetValue(900);
      if (this.techniWorld == 0 && (double) this.myPlayer.flashTimer > 0.0)
        this.writeEffect.Parameters["darkness"].SetValue(1);
      else
        this.writeEffect.Parameters["darkness"].SetValue(this.writingLocalFade);
      if (this.techniWorld == 0)
      {
        this.writeEffect.Parameters["pulse"].SetValue(this.flicker1);
        this.writeEffect.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
        this.writeEffect.Parameters["lightPos1"].SetValue(this.gunpos1World);
        this.writeEffect.Parameters["projectorView"].SetValue(world * this.matrix_0);
      }
      else
        this.writingLocalFade -= 0.01f;
      if ((double) this.writingLocalFade < 0.0)
        this.writingLocalFade = 0.0f;
      this.writeEffect.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
      this.writingRemoteFade -= 0.01f;
      if ((double) this.writingRemoteFade < 0.0)
        this.writingRemoteFade = 0.0f;
      this.writeEffect.Parameters["darkness2"].SetValue(this.writingRemoteFade);
      this.writeEffect.CurrentTechnique = this.writeEffect.Techniques[0];
      model.Meshes[0].Draw();
    }

    private void DrawDeferred(Model model, Matrix world, bool isBarn)
    {
      if (this.remPlayer.Count <= 1)
        return;
      int num = 0;
      string name = "light1";
      Matrix identity1 = Matrix.Identity;
      Matrix identity2 = Matrix.Identity;
      Matrix identity3 = Matrix.Identity;
      model.Meshes[0].MeshParts[0].Effect = this.buildingLight;
      if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.remotelight)
          {
            ++num;
            if (num == 1)
            {
              this.buildingLight.Parameters["gDiffuse"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse1"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos1"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView1"].SetValue(world * this.remPlayer[index].r.matrix_0);
              Matrix matrix = world * this.barnDoorMatrix * this.remPlayer[index].r.matrix_0;
              name = "light1";
            }
            if (num == 2)
            {
              this.buildingLight.Parameters["gDiffuse2"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse2"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos2"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView2"].SetValue(world * this.remPlayer[index].r.matrix_0);
              Matrix matrix = world * this.barnDoorMatrix * this.remPlayer[index].r.matrix_0;
              name = "light2";
            }
            if (num == 3)
            {
              this.buildingLight.Parameters["gDiffuse3"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse3"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos3"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView3"].SetValue(world * this.remPlayer[index].r.matrix_0);
              Matrix matrix = world * this.barnDoorMatrix * this.remPlayer[index].r.matrix_0;
              name = "light3";
            }
          }
        }
      }
      this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.barnRGB);
      this.buildingLight.Parameters["shadTexture"].SetValue((Texture) this.barnShadow);
      this.buildingLight.Parameters[nameof (world)].SetValue(world);
      this.buildingLight.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
      this.buildingLight.CurrentTechnique = this.buildingLight.Techniques[name];
      model.Meshes[0].Draw();
    }

    private void DrawDeferred2(Model model, Matrix world)
    {
      if (this.remPlayer.Count <= 1)
        return;
      int num = 0;
      string name = "light1";
      Matrix matrix1 = Matrix.Identity;
      Matrix matrix2 = Matrix.Identity;
      Matrix matrix3 = Matrix.Identity;
      if (this.remPlayer.Count > 1)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (!(this.remPlayer[index].id == this.mysteamID) && this.remPlayer[index].r.remotelight)
          {
            ++num;
            if (num == 1)
            {
              this.buildingLight.Parameters["gDiffuse"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse1"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos1"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView1"].SetValue(world * this.remPlayer[index].r.matrix_0);
              matrix1 = this.remPlayer[index].r.matrix_0;
              name = "light1";
            }
            if (num == 2)
            {
              this.buildingLight.Parameters["gDiffuse2"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse2"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos2"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView2"].SetValue(world * this.remPlayer[index].r.matrix_0);
              matrix2 = this.remPlayer[index].r.matrix_0;
              name = "light2";
            }
            if (num == 3)
            {
              this.buildingLight.Parameters["gDiffuse3"].SetValue((Texture) this.remPlayer[index].r.ttWorld2);
              this.buildingLight.Parameters["pulse3"].SetValue(this.remPlayer[index].r.flicker2);
              this.buildingLight.Parameters["lightPos3"].SetValue(this.remPlayer[index].r.lightPos2);
              this.buildingLight.Parameters["projectorView3"].SetValue(world * this.remPlayer[index].r.matrix_0);
              matrix3 = this.remPlayer[index].r.matrix_0;
              name = "light3";
            }
          }
        }
      }
      if (this.drawDaFarm)
      {
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_2);
        this.buildingLight.Parameters["shadTexture"].SetValue((Texture) this.buildingShadow);
        model.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["depth"].SetValue(1000);
        this.buildingLight.Parameters[nameof (world)].SetValue(world);
        this.buildingLight.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
        this.buildingLight.CurrentTechnique = this.buildingLight.Techniques[name];
        model.Meshes[0].Draw();
        if (this.inFarm == 1)
        {
          model.Meshes[1].MeshParts[0].Effect = this.buildingLight;
          this.barnDoorMatrix = Matrix.CreateTranslation(688.413f, 86.649f, 1619.653f + this.barnDoorslide.Z);
          this.buildingLight.Parameters[nameof (world)].SetValue(world * this.barnDoorMatrix);
          this.buildingLight.Parameters["projectorView1"].SetValue(world * this.barnDoorMatrix * matrix1);
          this.buildingLight.Parameters["projectorView2"].SetValue(world * this.barnDoorMatrix * matrix2);
          this.buildingLight.Parameters["projectorView3"].SetValue(world * this.barnDoorMatrix * matrix3);
          this.buildingLight.Parameters["WorldViewProj"].SetValue(world * this.barnDoorMatrix * this.view * this.proj);
          model.Meshes[1].Draw();
        }
      }
      if (!this.tunneladd)
        return;
      if (this.sc.gameState == 2)
      {
        this.tunnel1.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_0);
        this.buildingLight.Parameters["shadTexture"].SetValue((Texture) this.tunnelShadow);
        this.buildingLight.Parameters["depth"].SetValue(400);
        this.buildingLight.Parameters[nameof (world)].SetValue(world);
        this.buildingLight.Parameters["projectorView1"].SetValue(world * matrix1);
        this.buildingLight.Parameters["projectorView2"].SetValue(world * matrix2);
        this.buildingLight.Parameters["projectorView3"].SetValue(world * matrix3);
        this.buildingLight.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
        this.buildingLight.CurrentTechnique = this.buildingLight.Techniques[name];
        this.tunnel1.Meshes[0].Draw();
        this.tunnel1.Meshes[1].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.tunnelRGBstairs);
        this.tunnel1.Meshes[1].Draw();
        this.tunnelDoorH.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_0);
        for (int index = 0; index < this.hidden.Count; ++index)
        {
          this.buildingLight.Parameters[nameof (world)].SetValue(this.hidden[index].doorMatrix);
          this.buildingLight.Parameters["projectorView1"].SetValue(this.hidden[index].doorMatrix * matrix1);
          this.buildingLight.Parameters["projectorView2"].SetValue(this.hidden[index].doorMatrix * matrix2);
          this.buildingLight.Parameters["projectorView3"].SetValue(this.hidden[index].doorMatrix * matrix3);
          this.buildingLight.Parameters["WorldViewProj"].SetValue(this.hidden[index].doorMatrix * this.view * this.proj);
          this.tunnelDoorH.Meshes[0].Draw();
        }
        this.tunnelDoorP.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.tunnelRGBdoor);
        for (int index = 0; index < this.plain.Count; ++index)
        {
          this.buildingLight.Parameters[nameof (world)].SetValue(this.plain[index].doorMatrix);
          this.buildingLight.Parameters["projectorView1"].SetValue(this.plain[index].doorMatrix * matrix1);
          this.buildingLight.Parameters["projectorView2"].SetValue(this.plain[index].doorMatrix * matrix2);
          this.buildingLight.Parameters["projectorView3"].SetValue(this.plain[index].doorMatrix * matrix3);
          this.buildingLight.Parameters["WorldViewProj"].SetValue(this.plain[index].doorMatrix * this.view * this.proj);
          this.tunnelDoorP.Meshes[0].Draw();
        }
        this.tunnelDoor.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        for (int index = 0; index < this.combo.Count; ++index)
        {
          this.buildingLight.Parameters[nameof (world)].SetValue(this.combo[index].doorMatrix);
          this.buildingLight.Parameters["projectorView1"].SetValue(this.combo[index].doorMatrix * matrix1);
          this.buildingLight.Parameters["projectorView2"].SetValue(this.combo[index].doorMatrix * matrix2);
          this.buildingLight.Parameters["projectorView3"].SetValue(this.combo[index].doorMatrix * matrix3);
          this.buildingLight.Parameters["WorldViewProj"].SetValue(this.combo[index].doorMatrix * this.view * this.proj);
          this.tunnelDoor.Meshes[0].Draw();
        }
        for (int index = 0; index < this.photo.Count; ++index)
        {
          if (this.photo[index].foundPhoto1)
          {
            this.photo[index].photo1.Meshes[0].MeshParts[0].Effect = this.buildingLight;
            this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.photo[index].photo1Texture);
            this.buildingLight.Parameters[nameof (world)].SetValue(this.photo[index].photo1Matrix);
            this.buildingLight.Parameters["projectorView1"].SetValue(this.photo[index].photo1Matrix * matrix1);
            this.buildingLight.Parameters["projectorView2"].SetValue(this.photo[index].photo1Matrix * matrix2);
            this.buildingLight.Parameters["projectorView3"].SetValue(this.photo[index].photo1Matrix * matrix3);
            this.buildingLight.Parameters["WorldViewProj"].SetValue(this.photo[index].photo1Matrix * this.view * this.proj);
            this.photo[index].photo1.Meshes[0].Draw();
          }
        }
      }
      if (this.cryptLock)
      {
        this.cryptdoorModel.Meshes[0].MeshParts[0].Effect = this.buildingLight;
        this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.cryptRGB);
        this.buildingLight.Parameters["shadTexture"].SetValue((Texture) this.cryptShadow);
        this.buildingLight.Parameters[nameof (world)].SetValue(this.cryptMatrix);
        this.buildingLight.Parameters["projectorView1"].SetValue(this.cryptMatrix * matrix1);
        this.buildingLight.Parameters["projectorView2"].SetValue(this.cryptMatrix * matrix2);
        this.buildingLight.Parameters["projectorView3"].SetValue(this.cryptMatrix * matrix3);
        this.buildingLight.Parameters["WorldViewProj"].SetValue(this.cryptMatrix * this.view * this.proj);
        this.cryptdoorModel.Meshes[0].Draw();
      }
      if (!this.cryptLock2)
        return;
      this.cryptdoorModel3.Meshes[0].MeshParts[0].Effect = this.buildingLight;
      this.buildingLight.Parameters["rgbTexture"].SetValue((Texture) this.cryptRGB);
      this.buildingLight.Parameters["shadTexture"].SetValue((Texture) this.cryptShadow);
      this.buildingLight.Parameters[nameof (world)].SetValue(this.cryptMatrix2);
      this.buildingLight.Parameters["projectorView1"].SetValue(this.cryptMatrix2 * matrix1);
      this.buildingLight.Parameters["projectorView2"].SetValue(this.cryptMatrix2 * matrix2);
      this.buildingLight.Parameters["projectorView3"].SetValue(this.cryptMatrix2 * matrix3);
      this.buildingLight.Parameters["WorldViewProj"].SetValue(this.cryptMatrix2 * this.view * this.proj);
      this.cryptdoorModel3.Meshes[0].Draw();
    }

    private void DrawBuildingSimple(Model model, Matrix world)
    {
      model.Meshes[0].MeshParts[0].Effect = this.buildingEffect;
      int techniWorld = this.techniWorld;
      if (this.sc.dayTime == "pm")
      {
        this.buildingEffect.Parameters["darkness"].SetValue(MathHelper.Lerp(0.0f, 3.75f, this.sc.darkness));
        if ((double) this.barnDoorslide.Z > 0.0)
          this.buildingEffect.Parameters["door"].SetValue(this.barnDoorslide.Z);
        else
          techniWorld += 6;
        this.buildingEffect.Parameters["proj"].SetValue(this.proj);
      }
      this.buildingEffect.Parameters["depth"].SetValue(this.depthWorld);
      this.buildingEffect.Parameters["pulse"].SetValue(this.flicker1);
      this.buildingEffect.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.buildingEffect.Parameters["lightPos1"].SetValue(this.gunpos1World);
      this.buildingEffect.Parameters[nameof (world)].SetValue(world);
      this.buildingEffect.Parameters["projectorView"].SetValue(world * this.matrix_0);
      this.buildingEffect.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
      this.buildingEffect.CurrentTechnique = this.buildingEffect.Techniques[techniWorld];
      model.Meshes[0].Draw();
      if (this.viewPump1)
      {
        float radians = (float) Math.Sin(-(double) this.waterRamp1 * 16.0) * 0.38f;
        model.Meshes[3].MeshParts[0].Effect = this.buildingEffect;
        Matrix matrix1 = Matrix.CreateRotationX(radians) * Matrix.CreateTranslation(1589f, 45f, 1604.54f) * world;
        this.buildingEffect.Parameters[nameof (world)].SetValue(matrix1);
        this.buildingEffect.Parameters["projectorView"].SetValue(matrix1 * this.matrix_0);
        this.buildingEffect.Parameters["WorldViewProj"].SetValue(matrix1 * this.view * this.proj);
        model.Meshes[3].Draw();
        model.Meshes[4].MeshParts[0].Effect = this.buildingEffect;
        Matrix matrix2 = Matrix.CreateTranslation(1589f, (float) (42.650001525878906 + (double) radians * 6.1841998100280762), 1598.218f) * world;
        this.buildingEffect.Parameters[nameof (world)].SetValue(matrix2);
        this.buildingEffect.Parameters["projectorView"].SetValue(matrix2 * this.matrix_0);
        this.buildingEffect.Parameters["WorldViewProj"].SetValue(matrix2 * this.view * this.proj);
        model.Meshes[4].Draw();
      }
      if (this.viewPump2)
      {
        float radians = (float) Math.Sin(-(double) this.waterRamp2 * 16.0) * 0.38f;
        model.Meshes[3].MeshParts[0].Effect = this.buildingEffect;
        Matrix matrix3 = Matrix.CreateRotationX(radians) * Matrix.CreateRotationY(3.14f) * Matrix.CreateTranslation(-2127.43f, 45f, 131.297f) * world;
        this.buildingEffect.Parameters[nameof (world)].SetValue(matrix3);
        this.buildingEffect.Parameters["projectorView"].SetValue(matrix3 * this.matrix_0);
        this.buildingEffect.Parameters["WorldViewProj"].SetValue(matrix3 * this.view * this.proj);
        model.Meshes[3].Draw();
        model.Meshes[4].MeshParts[0].Effect = this.buildingEffect;
        Matrix matrix4 = Matrix.CreateTranslation(-2127.276f, (float) (42.650001525878906 + (double) radians * 6.1841998100280762), 137.734f) * world;
        this.buildingEffect.Parameters[nameof (world)].SetValue(matrix4);
        this.buildingEffect.Parameters["projectorView"].SetValue(matrix4 * this.matrix_0);
        this.buildingEffect.Parameters["WorldViewProj"].SetValue(matrix4 * this.view * this.proj);
        model.Meshes[4].Draw();
      }
      --this.leverTimer;
      if ((double) this.leverRamp > 0.0)
      {
        this.leverRamp += 3f / 110f;
        if ((double) this.leverRamp >= 3.1415901184082031)
          this.leverRamp = 0.0f;
      }
      model.Meshes[5].MeshParts[0].Effect = this.buildingEffect;
      Matrix matrix = Matrix.CreateRotationX((float) (Math.Sin((double) this.leverRamp) * 1.465999960899353 - 0.73299998044967651)) * Matrix.CreateTranslation(1620.88f, 49.818f, -164.094f) * world;
      this.buildingEffect.Parameters[nameof (world)].SetValue(matrix);
      this.buildingEffect.Parameters["projectorView"].SetValue(matrix * this.matrix_0);
      this.buildingEffect.Parameters["WorldViewProj"].SetValue(matrix * this.view * this.proj);
      model.Meshes[5].Draw();
      model.Meshes[2].MeshParts[0].Effect = this.buildingEffect;
      this.spinnerTransform = Matrix.CreateRotationX(this.spinner) * Matrix.CreateTranslation(-1124.355f, 76f, -1667.575f);
      this.buildingEffect.Parameters[nameof (world)].SetValue(this.spinnerTransform * world);
      this.buildingEffect.Parameters["projectorView"].SetValue(this.spinnerTransform * world * this.matrix_0);
      this.buildingEffect.Parameters["WorldViewProj"].SetValue(this.spinnerTransform * world * this.view * this.proj);
      model.Meshes[2].Draw();
      model.Meshes[1].MeshParts[0].Effect = this.buildingEffect;
      this.barnDoorMatrix = Matrix.CreateTranslation(688.413f, 86.649f, 1619.653f + this.barnDoorslide.Z);
      this.buildingEffect.Parameters[nameof (world)].SetValue(world * this.barnDoorMatrix);
      this.buildingEffect.Parameters["projectorView"].SetValue(world * this.barnDoorMatrix * this.matrix_0);
      this.buildingEffect.Parameters["WorldViewProj"].SetValue(world * this.barnDoorMatrix * this.view * this.proj);
      if (this.sc.dayTime == "pm")
        this.buildingEffect.CurrentTechnique = this.buildingEffect.Techniques[this.techniWorld + 3];
      model.Meshes[1].Draw();
    }

    private void DrawCryptDoor()
    {
      this.cryptdoorModel.Meshes[0].MeshParts[0].Effect = this.cryptEffect;
      this.cryptEffect.Parameters["darkness"].SetValue(0.5f);
      this.cryptEffect.Parameters["proj"].SetValue(this.proj);
      this.cryptEffect.Parameters["depth"].SetValue(this.depthWorld);
      this.cryptEffect.Parameters["pulse"].SetValue(this.flicker1);
      this.cryptEffect.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.cryptEffect.Parameters["lightPos1"].SetValue(this.gunpos1World);
      if (!this.cryptLock)
      {
        --this.cryptLockMove;
        if (this.cryptLockMove < 0)
          this.cryptLockMove = 0;
      }
      if (this.cryptLock)
      {
        this.cryptLockMove += 2;
        if (this.cryptLockMove > 188)
          this.cryptLockMove = 188;
      }
      if ((double) this.sc.introCamera > 0.0)
        this.cryptLockMove = 188;
      this.cryptTrans.X = (float) (1533 - this.cryptLockMove);
      this.cryptMatrix = Matrix.CreateTranslation(this.cryptTrans);
      this.cryptEffect.Parameters["world"].SetValue(this.cryptMatrix);
      this.cryptEffect.Parameters["projectorView"].SetValue(this.cryptMatrix * this.matrix_0);
      this.cryptEffect.Parameters["WorldViewProj"].SetValue(this.cryptMatrix * this.view * this.proj);
      this.cryptEffect.CurrentTechnique = this.cryptEffect.Techniques[this.techniWorld];
      this.cryptdoorModel.Meshes[0].Draw();
      this.cryptdoorModel3.Meshes[0].MeshParts[0].Effect = this.cryptEffect;
      if (!this.cryptLock2)
      {
        --this.cryptLockMove2;
        if (this.cryptLockMove2 < 0)
          this.cryptLockMove2 = 0;
      }
      if (this.cryptLock2)
      {
        this.cryptLockMove2 += 2;
        if (this.cryptLockMove2 > 188)
          this.cryptLockMove2 = 188;
      }
      if ((double) this.sc.introCamera > 0.0)
        this.cryptLockMove2 = 188;
      this.cryptTrans2.Z = (float) (4470 + this.cryptLockMove2);
      this.cryptMatrix2 = Matrix.CreateTranslation(this.cryptTrans2);
      this.cryptEffect.Parameters["world"].SetValue(this.cryptMatrix2);
      this.cryptEffect.Parameters["projectorView"].SetValue(this.cryptMatrix2 * this.matrix_0);
      this.cryptEffect.Parameters["WorldViewProj"].SetValue(this.cryptMatrix2 * this.view * this.proj);
      this.cryptdoorModel3.Meshes[0].Draw();
    }

    private void DrawTunnel(Matrix world)
    {
      int techniWorld = this.techniWorld;
      if (this.wearingGoggles)
        techniWorld += 3;
      this.tunnel1.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
      this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_0);
      this.tunnelEffect.Parameters["shadTexture"].SetValue((Texture) this.tunnelShadow);
      this.tunnelEffect.Parameters["depth"].SetValue(this.flashlightDepth);
      this.tunnelEffect.Parameters["pulse"].SetValue(1.5f);
      this.tunnelEffect.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.tunnelEffect.Parameters["lightPos1"].SetValue(this.gunpos1World);
      this.tunnelEffect.Parameters[nameof (world)].SetValue(world);
      this.tunnelEffect.Parameters["projectorView"].SetValue(world * this.matrix_0);
      this.tunnelEffect.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
      this.tunnelEffect.CurrentTechnique = this.tunnelEffect.Techniques[techniWorld];
      this.tunnel1.Meshes[0].Draw();
      this.tunnel1.Meshes[1].MeshParts[0].Effect = this.tunnelEffect;
      this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.tunnelRGBstairs);
      this.tunnel1.Meshes[1].Draw();
      this.tunnelDoorH.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
      this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.texture2D_0);
      for (int index = 0; index < this.hidden.Count; ++index)
      {
        if (!this.hidden[index].doorlock)
        {
          ++this.hidden[index].frame;
          if ((double) this.hidden[index].frame > (double) (this.x1anim.Count - 1))
          {
            this.hidden[index].frame = (float) (this.x1anim.Count - 1);
            if (!this.hidden[index].doorlockComplete)
            {
              this.lockDoor(false, this.hidden[index]);
              this.hidden[index].doorlockComplete = true;
            }
          }
        }
        if (this.hidden[index].doorlock)
        {
          this.hidden[index].frame -= 2f;
          if ((double) this.hidden[index].frame < 0.0)
            this.hidden[index].frame = 0.0f;
        }
        this.hidden[index].doorMatrix = this.x1anim[(int) this.hidden[index].frame] * this.hidden[index].rotMatrix * Matrix.CreateTranslation(this.hidden[index].doortrans);
        this.tunnelEffect.Parameters[nameof (world)].SetValue(this.hidden[index].doorMatrix);
        this.tunnelEffect.Parameters["projectorView"].SetValue(this.hidden[index].doorMatrix * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(this.hidden[index].doorMatrix * this.view * this.proj);
        this.tunnelDoorH.Meshes[0].Draw();
      }
      this.tunnelDoorP.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
      this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.tunnelRGBdoor);
      for (int index = 0; index < this.plain.Count; ++index)
      {
        if (!this.plain[index].doorlock)
        {
          this.plain[index].doorrot -= 0.018f;
          if ((double) this.plain[index].doorrot < -1.7250000238418579)
            this.plain[index].doorrot = -1.725f;
        }
        if (this.plain[index].doorlock)
        {
          this.plain[index].doorrot += 0.1f;
          if ((double) this.plain[index].doorrot > 0.0)
            this.plain[index].doorrot = 0.0f;
        }
        this.plain[index].doorMatrix = Matrix.CreateRotationY(this.plain[index].doorrot) * this.plain[index].rotMatrix * Matrix.CreateTranslation(this.plain[index].doortrans);
        this.tunnelEffect.Parameters[nameof (world)].SetValue(this.plain[index].doorMatrix);
        this.tunnelEffect.Parameters["projectorView"].SetValue(this.plain[index].doorMatrix * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(this.plain[index].doorMatrix * this.view * this.proj);
        this.tunnelDoorP.Meshes[0].Draw();
      }
      this.tunnelDoor.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
      this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.tunnelRGBdoor);
      for (int index = 0; index < this.combo.Count; ++index)
      {
        if (!this.combo[index].doorlock)
        {
          this.combo[index].doorrot -= 0.018f;
          if ((double) this.combo[index].doorrot < -1.7250000238418579)
            this.combo[index].doorrot = -1.725f;
        }
        if (this.combo[index].doorlock)
        {
          this.combo[index].doorrot += 0.1f;
          if ((double) this.combo[index].doorrot > 0.0)
            this.combo[index].doorrot = 0.0f;
        }
        this.combo[index].doorMatrix = Matrix.CreateRotationY(this.combo[index].doorrot) * this.combo[index].rotMatrix * Matrix.CreateTranslation(this.combo[index].doortrans);
        this.tunnelEffect.Parameters[nameof (world)].SetValue(this.combo[index].doorMatrix);
        this.tunnelEffect.Parameters["projectorView"].SetValue(this.combo[index].doorMatrix * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(this.combo[index].doorMatrix * this.view * this.proj);
        this.tunnelDoor.Meshes[0].Draw();
      }
      this.tumbler.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
      for (int index = 0; index < this.combo.Count; ++index)
      {
        Matrix matrix1 = Matrix.CreateTranslation(this.combo[index].tumbler1trans) * this.combo[index].doorMatrix;
        this.tunnelEffect.Parameters[nameof (world)].SetValue(matrix1);
        this.tunnelEffect.Parameters["projectorView"].SetValue(matrix1 * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(matrix1 * this.view * this.proj);
        this.tumbler.Meshes[0].Draw();
        Matrix matrix2 = Matrix.CreateTranslation(this.combo[index].tumbler2trans) * this.combo[index].doorMatrix;
        this.tunnelEffect.Parameters[nameof (world)].SetValue(matrix2);
        this.tunnelEffect.Parameters["projectorView"].SetValue(matrix2 * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(matrix2 * this.view * this.proj);
        this.tumbler.Meshes[0].Draw();
        Matrix matrix3 = Matrix.CreateTranslation(this.combo[index].tumbler3trans) * this.combo[index].doorMatrix;
        this.tunnelEffect.Parameters[nameof (world)].SetValue(matrix3);
        this.tunnelEffect.Parameters["projectorView"].SetValue(matrix3 * this.matrix_0);
        this.tunnelEffect.Parameters["WorldViewProj"].SetValue(matrix3 * this.view * this.proj);
        this.tumbler.Meshes[0].Draw();
      }
      for (int index = 0; index < this.photo.Count; ++index)
      {
        if (this.photo[index].foundPhoto1)
        {
          this.photo[index].photo1.Meshes[0].MeshParts[0].Effect = this.tunnelEffect;
          this.tunnelEffect.Parameters["rgbTexture"].SetValue((Texture) this.photo[index].photo1Texture);
          if (this.photo[index].indexer == 6)
            this.tunnelEffect.Parameters["shadTexture"].SetValue((Texture) this.tunnelshadowZero);
          this.tunnelEffect.Parameters[nameof (world)].SetValue(this.photo[index].photo1Matrix);
          this.tunnelEffect.Parameters["projectorView"].SetValue(this.photo[index].photo1Matrix * this.matrix_0);
          this.tunnelEffect.Parameters["WorldViewProj"].SetValue(this.photo[index].photo1Matrix * this.view * this.proj);
          this.photo[index].photo1.Meshes[0].Draw();
        }
      }
    }

    private void DrawBarnInterior(Model model, Matrix world)
    {
      model.Meshes[0].MeshParts[0].Effect = this.barnEffect;
      this.barnEffect.Parameters["depth"].SetValue(this.depthWorld);
      this.barnEffect.Parameters["pulse"].SetValue(this.flicker1);
      this.barnEffect.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.barnEffect.Parameters["lightPos1"].SetValue(this.gunpos1World);
      this.barnEffect.Parameters[nameof (world)].SetValue(world);
      this.barnEffect.Parameters["projectorView"].SetValue(world * this.matrix_0);
      this.barnEffect.Parameters["WorldViewProj"].SetValue(world * this.view * this.proj);
      this.barnEffect.CurrentTechnique = this.barnEffect.Techniques[this.techniWorld];
      model.Meshes[0].Draw();
    }

    private void DrawButterfly(ref BloodnBacon4PT.simpleNPC n, int cc)
    {
      ModelMeshPart meshPart = n.model1.Meshes[0].MeshParts[0];
      n.buffer1.SetData<BloodnBacon4PT.simplestream>(n.display1, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[0];
      n.eff.Parameters["Texture"].SetValue((Texture) this.bat.model1Texture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer1, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawBoarPreGlow(
      ref BloodnBacon4PT.npc n,
      ref BloodnBacon4PT.skinstream[] ss,
      ref Model model)
    {
      ModelMeshPart meshPart = model.Meshes[0].MeshParts[0];
      n.buffer1.SetData<BloodnBacon4PT.skinstream>(ss, 0, 1, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[3];
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer1, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, 1);
    }

    private void DrawBoar1(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.model1.Meshes[0].MeshParts[0];
      n.buffer1.SetData<BloodnBacon4PT.skinstream>(n.display1, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.0f, 1.1f, this.sc.darkness));
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.boar1Texture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer1, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawHeadlessBoar1(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.model2.Meshes[0].MeshParts[0];
      n.buffer2.SetData<BloodnBacon4PT.skinstream>(n.display2, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.0f, 1.1f, this.sc.darkness));
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.boar1Texture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer2, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawBoar2(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.model3.Meshes[0].MeshParts[0];
      n.buffer3.SetData<BloodnBacon4PT.skinstream>(n.display3, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.0f, 1.1f, this.sc.darkness));
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.boar2Texture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer3, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawHeadlessBoar2(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.model4.Meshes[0].MeshParts[0];
      n.buffer4.SetData<BloodnBacon4PT.skinstream>(n.display4, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.0f, 1.1f, this.sc.darkness));
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.boar2Texture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer4, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawBoarSkel(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.skelmodel.Meshes[0].MeshParts[0];
      n.bufferS.SetData<BloodnBacon4PT.skinstream>(n.displayS, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques["Glow"];
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.boneTexture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.bufferS, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawBoarChar(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.charModel.Meshes[0].MeshParts[0];
      n.bufferC.SetData<BloodnBacon4PT.skinstream>(n.displayC, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.1f, 1f, this.sc.darkness));
      else
        n.eff.Parameters["darkness"].SetValue(1.1f);
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.charTexture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.bufferC, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawBoarZombie(ref BloodnBacon4PT.npc n, int cc)
    {
      ModelMeshPart meshPart = n.zombieModel.Meshes[0].MeshParts[0];
      n.bufferZ.SetData<BloodnBacon4PT.skinstream>(n.displayZ, 0, cc, SetDataOptions.Discard);
      n.eff.CurrentTechnique = n.eff.Techniques[this.techniBoar];
      if (this.sc.dayTime == "pm")
        n.eff.Parameters["darkness"].SetValue(MathHelper.Lerp(0.1f, 1f, this.sc.darkness));
      else
        n.eff.Parameters["darkness"].SetValue(1.1f);
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      this.boar.eff.Parameters["Texture"].SetValue((Texture) this.boar.charTexture);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.bufferZ, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawWeb1(ref BloodnBacon4PT.npcWeb n, int cc)
    {
      ModelMeshPart meshPart = n.model1.Meshes[0].MeshParts[0];
      n.buffer1.SetData<BloodnBacon4PT.skinstream>(n.display1, 0, cc, SetDataOptions.Discard);
      int index = this.techniWorld;
      if (index == 2)
        index = 1;
      n.eff.CurrentTechnique = n.eff.Techniques[index];
      n.eff.Parameters["darkness"].SetValue(0.4f);
      n.eff.Parameters["gDiffuse"].SetValue((Texture) this.ttWorld);
      n.eff.Parameters["Texture"].SetValue((Texture) this.web.boar1Texture);
      n.eff.Parameters["depth"].SetValue(this.flashlightDepth);
      n.eff.Parameters["View"].SetValue(this.view);
      n.eff.Parameters["Projection"].SetValue(this.proj);
      n.eff.Parameters["projectorView"].SetValue(this.matrix_0);
      n.eff.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) n.buffer1, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, cc);
    }

    private void DrawInstance(ref BloodnBacon4PT.shell shell, string tech, float light)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model1.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      float num = light;
      if (this.sc.dayTime == "pm")
        num = light * MathHelper.Lerp(0.2f, 0.8f, this.sc.darkness);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["fade"].SetValue(num);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawInstance2(ref BloodnBacon4PT.shell shell, string tech, float light)
    {
      int tempindex2 = shell.tempindex2;
      if (tempindex2 < 1)
        return;
      ModelMeshPart meshPart = shell.model2.Meshes[0].MeshParts[0];
      shell.buffer2.SetData<BloodnBacon4PT.instancedObject>(shell.displayList2, 0, tempindex2, SetDataOptions.Discard);
      float num = light;
      if (this.sc.dayTime == "pm")
        num = light * MathHelper.Lerp(0.2f, 0.8f, this.sc.darkness);
      Effect effect = meshPart.Effect;
      if (this.sc.boar2Variant == 2)
      {
        tech = "bones";
        num = !(this.sc.dayTime == "pm") ? 0.85f : MathHelper.Lerp(0.1f, 0.65f, this.sc.darkness);
      }
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["fade"].SetValue(num);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer2, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex2);
    }

    private void DrawZolt(BloodnBacon4PT.shell shell, string tech)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model1.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["colorx"].SetValue(new Vector3(0.9f, 0.9f, 1.2f));
      effect.Parameters["fade"].SetValue(1);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawChain(BloodnBacon4PT.shell shell, string tech, Vector3 light)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model1.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["amb"].SetValue(new Vector3(0.4f, 0.4f, 0.4f));
      effect.Parameters["diff"].SetValue(new Vector3(0.5f, 0.5f, 0.5f));
      effect.Parameters["LightDirection"].SetValue(light);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawRevolverShells(BloodnBacon4PT.liveShell shell)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[0];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawPickup(ref BloodnBacon4PT.pickup shell, string tech)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawGore(ref BloodnBacon4PT.goreDrop shell, string tech)
    {
      int tempindex = shell.tempindex;
      if (tempindex < 1)
        return;
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(shell.displayList, 0, tempindex, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, tempindex);
    }

    private void DrawPickupinHand(
      ref BloodnBacon4PT.pickup shell,
      ref BloodnBacon4PT.instancedObject[] ss,
      string tech)
    {
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(ss, 0, 1, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, 1);
    }

    private void DrawPickupPulse(
      ref BloodnBacon4PT.pickup shell,
      ref BloodnBacon4PT.instancedObject[] ss,
      float pulse)
    {
      Vector3 vector3 = Vector3.Lerp(new Vector3(4f, 0.1f, 0.2f), new Vector3(1f, 1f, 1f), pulse);
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(ss, 0, 1, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques["pickuppulse"];
      effect.Parameters["colorx"].SetValue(vector3);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, 1);
    }

    private void DrawPickupGlow(
      ref BloodnBacon4PT.pickup shell,
      ref BloodnBacon4PT.instancedObject[] ss,
      string tech,
      float fade,
      Vector3 colorx)
    {
      ModelMeshPart meshPart = shell.model.Meshes[0].MeshParts[0];
      shell.buffer.SetData<BloodnBacon4PT.instancedObject>(ss, 0, 1, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques[tech];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters[nameof (fade)].SetValue(fade);
      effect.Parameters[nameof (colorx)].SetValue(colorx);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) shell.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, 1);
    }

    private void DrawWallhits(ref BloodnBacon4PT.hole hole, Matrix world)
    {
      int stainMax = hole.stainMax;
      if (stainMax < 1)
        return;
      ModelMeshPart meshPart = this.sc.decalb.Meshes[0].MeshParts[0];
      hole.stainBuffer.SetData<BloodnBacon4PT.hitStream>(hole.stainTrans, 0, stainMax, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.Parameters["World1"].SetValue(world);
      effect.CurrentTechnique = effect.Techniques["HardwareInstancing"];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) hole.stainBuffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, stainMax);
    }

    private void DrawScreenSplat(ref BloodnBacon4PT.hole hole)
    {
      int stainMax = hole.stainMax;
      if (stainMax < 1)
        return;
      ModelMeshPart meshPart = this.sc.biteDecal.Meshes[0].MeshParts[0];
      hole.stainBuffer.SetData<BloodnBacon4PT.hitStream>(hole.stainTrans, 0, stainMax, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques["HardwareInstancing"];
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) hole.stainBuffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, stainMax);
    }

    private void DrawGrenadeExplosion(ref BloodnBacon4PT.hole hole, Matrix world)
    {
      int stainMax = hole.stainMax;
      if (stainMax < 1)
        return;
      ModelMeshPart meshPart = this.explosionDecal.Meshes[0].MeshParts[0];
      hole.stainBuffer.SetData<BloodnBacon4PT.hitStream>(hole.stainTrans, 0, stainMax, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques["premultiply"];
      effect.Parameters["World1"].SetValue(world);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) hole.stainBuffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, stainMax);
    }

    private void DrawMirvExplosion(ref BloodnBacon4PT.hole hole, Matrix world)
    {
      int stainMax = hole.stainMax;
      if (stainMax < 1)
        return;
      ModelMeshPart meshPart = this.explosionDecal.Meshes[0].MeshParts[0];
      hole.stainBuffer.SetData<BloodnBacon4PT.hitStream>(hole.stainTrans, 0, stainMax, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques["mirv"];
      effect.Parameters["World1"].SetValue(world);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) hole.stainBuffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, stainMax);
    }

    private void DrawButtons(ref BloodnBacon4PT.hole hole, Matrix world)
    {
      int stainMax = hole.stainMax;
      ModelMeshPart meshPart = this.buttonModel.Meshes[0].MeshParts[0];
      hole.stainBuffer.SetData<BloodnBacon4PT.hitStream>(hole.stainTrans, 0, stainMax, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.Parameters["World1"].SetValue(world);
      effect.CurrentTechnique = effect.Techniques["HardwareInstancing"];
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) hole.stainBuffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, stainMax);
    }

    private void drawMountain(Model model, Matrix m)
    {
    }

    public void drawWater1()
    {
      if ((double) this.myPlayer.now.health > 100.0 && this.localPump == 1)
      {
        this.myPlayer.now.health += 0.1f;
        if ((double) this.myPlayer.now.health > 199.0)
          this.myPlayer.now.health = 199f;
      }
      this.waterRamp1 += 1f / 140f;
      if ((double) this.waterRamp1 > 1.0)
      {
        if (this.localPump == 1)
          this.sc.drinkMilk.Play(this.sc.ev, 0.2f, 0.0f);
        this.waterRamp1 = 0.0f;
      }
      float num1 = MathHelper.Clamp(MathHelper.Lerp(0.1f, 1.2f, this.waterRamp1 * 3f), 0.0f, 1f) + (float) Math.Sin((double) this.sc.myTimer / 12.0) / 5f;
      float num2 = MathHelper.Lerp(0.0f, 1f, this.waterRamp1);
      this.sc.water.Meshes[0].MeshParts[0].Effect = this.waterEffect;
      this.waterEffect.Parameters["u"].SetValue(num2);
      this.waterEffect.Parameters["fade"].SetValue(1);
      this.waterEffect.Parameters["world"].SetValue(Matrix.CreateScale(num1, 1f, num1) * Matrix.CreateTranslation(4588.981f, 19.163f, 4585.51074f));
      this.waterEffect.Parameters["Projection"].SetValue(this.proj);
      this.waterEffect.Parameters["View"].SetValue(this.view);
      this.waterEffect.CurrentTechnique = this.waterEffect.Techniques[0];
      this.sc.water.Meshes[0].Draw();
    }

    public void drawWater2()
    {
      if ((double) this.myPlayer.now.health > 100.0 && this.localPump == 2)
      {
        this.myPlayer.now.health += 0.1f;
        if ((double) this.myPlayer.now.health > 199.0)
          this.myPlayer.now.health = 199f;
      }
      this.waterRamp2 += 1f / 140f;
      if ((double) this.waterRamp2 > 1.0)
      {
        if (this.localPump == 2)
          this.sc.drinkMilk.Play(this.sc.ev, 0.2f, 0.0f);
        this.waterRamp2 = 0.0f;
      }
      float num1 = MathHelper.Clamp(MathHelper.Lerp(0.1f, 1.2f, this.waterRamp2 * 3f), 0.0f, 1f) + (float) Math.Sin((double) this.sc.myTimer / 12.0) / 5f;
      float num2 = MathHelper.Lerp(0.0f, 1f, this.waterRamp2);
      this.sc.water.Meshes[0].MeshParts[0].Effect = this.waterEffect;
      this.waterEffect.Parameters["u"].SetValue(num2);
      this.waterEffect.Parameters["fade"].SetValue(1);
      this.waterEffect.Parameters["world"].SetValue(Matrix.CreateScale(num1, 1f, num1) * Matrix.CreateTranslation(872.768066f, 18.79f, 3150.378f));
      this.waterEffect.Parameters["Projection"].SetValue(this.proj);
      this.waterEffect.Parameters["View"].SetValue(this.view);
      this.waterEffect.CurrentTechnique = this.waterEffect.Techniques[0];
      this.sc.water.Meshes[0].Draw();
    }

    private void drawGrass(Model model, Matrix world)
    {
      model.Meshes[0].MeshParts[0].Effect = this.grassEffect;
      int index = 0;
      if (this.sc.dayTime == "pm")
      {
        this.grassEffect.Parameters["darkness"].SetValue(MathHelper.Lerp(0.4f, 3.5f, this.sc.darkness));
        index = 2;
      }
      this.grassEffect.Parameters[nameof (world)].SetValue(world);
      this.grassEffect.Parameters["Projection"].SetValue(this.proj);
      this.grassEffect.Parameters["View"].SetValue(this.view);
      this.grassEffect.CurrentTechnique = this.grassEffect.Techniques[index];
      this.grassEffect.CurrentTechnique.Passes[0].Apply();
      model.Meshes[0].Draw();
    }

    private void drawGrassClip(Model model, Matrix world)
    {
      model.Meshes[0].MeshParts[0].Effect = this.grassEffect;
      int index = 1;
      if (this.sc.dayTime == "pm")
      {
        this.grassEffect.Parameters["darkness"].SetValue(MathHelper.Lerp(0.4f, 3.5f, this.sc.darkness));
        index = 3;
      }
      this.grassEffect.Parameters[nameof (world)].SetValue(world);
      this.grassEffect.Parameters["Projection"].SetValue(this.proj);
      this.grassEffect.Parameters["View"].SetValue(this.view);
      this.grassEffect.CurrentTechnique = this.grassEffect.Techniques[index];
      this.grassEffect.CurrentTechnique.Passes[0].Apply();
      model.Meshes[0].Draw();
    }

    private void drawClouds(Model model, Matrix world)
    {
      model.Meshes[0].MeshParts[0].Effect = this.cloudEffect;
      this.cloudEffect.Parameters["darkness"].SetValue(this.cloudDarkness);
      this.cloudEffect.Parameters[nameof (world)].SetValue(world);
      this.cloudEffect.Parameters["Projection"].SetValue(this.proj);
      this.cloudEffect.Parameters["View"].SetValue(this.view);
      this.cloudEffect.Parameters["Texture"].SetValue((Texture) this.cloudTexture);
      this.cloudEffect.CurrentTechnique = this.cloudEffect.Techniques[0];
      model.Meshes[0].Draw();
    }

    private void drawMoon(Matrix world, Texture2D moontexture)
    {
      this.sc.hatPack.Meshes[39].MeshParts[0].Effect = this.moonEffect;
      this.moonEffect.Parameters[nameof (world)].SetValue(world);
      this.moonEffect.Parameters["darkness"].SetValue(1);
      this.moonEffect.Parameters["Projection"].SetValue(this.proj);
      this.moonEffect.Parameters["View"].SetValue(this.view);
      this.moonEffect.CurrentTechnique = this.moonEffect.Techniques[0];
      this.moonEffect.Parameters["Texture"].SetValue((Texture) moontexture);
      this.sc.hatPack.Meshes[39].Draw();
    }

    private void DrawMirvBomb(Matrix world)
    {
      this.mirvModel.Meshes[0].MeshParts[0].Effect = this.mirvEffect;
      this.mirvEffect.Parameters[nameof (world)].SetValue(world);
      this.mirvEffect.Parameters["Projection"].SetValue(this.proj);
      this.mirvEffect.Parameters["View"].SetValue(this.view);
      this.mirvEffect.CurrentTechnique = this.mirvEffect.Techniques[0];
      this.mirvModel.Meshes[0].Draw();
    }

    private void drawMirvStreaks(BloodnBacon4PT.streak streak, ref BloodnBacon4PT.atari p)
    {
      ModelMeshPart meshPart = streak.model.Meshes[0].MeshParts[0];
      streak.buffer.SetData<BloodnBacon4PT.instancedObject>(streak.stream, 0, 25, SetDataOptions.Discard);
      Effect effect = meshPart.Effect;
      effect.CurrentTechnique = effect.Techniques["streaks"];
      effect.Parameters["fader"].SetValue(p.mirvFader);
      effect.Parameters["View"].SetValue(this.view);
      effect.Parameters["Projection"].SetValue(this.proj);
      effect.CurrentTechnique.Passes[0].Apply();
      this._vertexBufferBindings[0] = new VertexBufferBinding(meshPart.VertexBuffer, meshPart.VertexOffset, 0);
      this._vertexBufferBindings[1] = new VertexBufferBinding((VertexBuffer) streak.buffer, 0, 1);
      this.sc.GraphicsDevice.SetVertexBuffers(this._vertexBufferBindings);
      this.sc.GraphicsDevice.Indices = meshPart.IndexBuffer;
      this.sc.GraphicsDevice.DrawInstancedPrimitives(PrimitiveType.TriangleList, 0, 0, meshPart.NumVertices, meshPart.StartIndex, meshPart.PrimitiveCount, 25);
    }

    private void initMirv(Vector3 dest, ref BloodnBacon4PT.streak mirvs)
    {
      int num = 1;
      for (int index = 0; index < 25; ++index)
      {
        Vector3 vector3 = new Vector3((float) this.rr.Next(-1000, 1000), 0.0f, (float) this.rr.Next(-1000, 1000)) + dest;
        vector3.X = MathHelper.Clamp(vector3.X, 200f, 5800f);
        vector3.Z = MathHelper.Clamp(vector3.Z, 200f, 5800f);
        this.GetHeightFast(ref this.farmheights, vector3, ref vector3.Y);
        Matrix matrix = Matrix.CreateRotationZ((float) this.rr.Next(-1800, 1800) / 100f) * this.RotateToFace(vector3, new Vector3(dest.X, 5400f, dest.Z));
        mirvs.trans[index] = matrix * Matrix.CreateTranslation(vector3);
        mirvs.stream[index].Trans = mirvs.trans[index];
        mirvs.stream[index].tint = 1f;
        mirvs.fall[index] = false;
        mirvs.bomb[index] = false;
        mirvs.trigger[index] = num;
        num += this.rr.Next(20, 40);
        mirvs.fallSpeed[index] = (float) this.rr.Next(700, 1200) / 100000f;
      }
    }

    private void updateMirv(ref BloodnBacon4PT.atari p, ref BloodnBacon4PT.streak mirvs)
    {
      if (!p.mirvSeeStreaks)
      {
        ++p.mirvAge;
        ++p.mirvTimer;
        p.mirvVeloc += 0.02f;
        p.mirvVeloc *= 1.05f;
        if ((double) p.mirvVeloc > 20.0)
          p.mirvVeloc = 20f;
        if (p.mirvGoUp)
        {
          float y = Vector3.Transform(new Vector3(1.57f, 0.0f, 0.0f), p.mirvRot).Y;
          if ((double) p.mirvUp + (double) y < 1.5700000524520874 && !p.mirvLevel)
          {
            p.mirvUp += 0.02f;
            p.mirvUpLock = p.mirvUp;
          }
          else if ((double) p.mirvUp + (double) y > 1.6000000238418579 && !p.mirvLevel)
          {
            p.mirvUp -= 0.02f;
            p.mirvUpLock = p.mirvUp;
          }
          else
          {
            p.mirvUp = p.mirvUpLock + (float) Math.Sin((double) p.mirvTimer / (double) p.mirvFreq1) / 10f;
            p.mirvLevel = true;
          }
        }
        else
          p.mirvUp = (float) Math.Sin((double) p.mirvTimer / (double) p.mirvFreq1) / 10f;
        p.mirvTwist = (float) Math.Sin((double) p.mirvTimer / (double) p.mirvFreq2) / 4f;
        p.mirvBank += 0.3f;
        Matrix matrix = Matrix.CreateRotationX(p.mirvBank) * Matrix.CreateRotationY(p.mirvTwist) * Matrix.CreateRotationZ(p.mirvUp);
        p.mirvPos += Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), matrix * p.mirvRot) * p.mirvVeloc;
        p.mirvTrans = matrix * p.mirvRot * Matrix.CreateTranslation(p.mirvPos);
        float num = Vector3.DistanceSquared(p.mirvDest, p.mirvPos);
        if ((double) p.mirvAge > 170.0 || (double) num < 360000.0)
          p.mirvGoUp = true;
        if (((double) p.mirvPos.X > 6500.0 || (double) p.mirvPos.Z > 6500.0 || (double) p.mirvPos.X < 0.0 || (double) p.mirvPos.Z < 0.0 ? 1 : ((double) p.mirvPos.Y > 6000.0 ? 1 : 0)) != 0)
        {
          p.mirvMoving = false;
          p.mirvSeeStreaks = true;
          this.sc.mirvDrop.Play(this.sc.ev, (float) this.rr.Next(-5, 5) / 100f, (float) this.rr.Next(-5, 5) / 100f);
          p.mirvStreakTimer = 1000;
          this.initMirv(p.mirvDest, ref mirvs);
          p.mirvVeloc = 0.1f;
          p.mirvAge = 0.0f;
          p.mirvUp = 0.0f;
          p.mirvGoUp = false;
          p.mirvOld = Vector3.Zero;
          p.mirvLevel = false;
          p.mirvUpLock = 0.0f;
          p.mirvFader = 1f;
        }
        if ((double) p.mirvAge > 0.0)
        {
          int mycolor = (int) ((double) MathHelper.Clamp(p.mirvAge / 100f, 0.01f, 1f) * 254.0);
          int mysize = (int) ((double) MathHelper.Clamp(p.mirvAge / 100f, 0.5f, 1f) * 254.0);
          Vector3 velocity = new Vector3((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f);
          this.rocketsmoke.AddParticle2(p.mirvOld * 0.2f + p.mirvPos * 0.8f, velocity, mysize, mycolor);
          velocity = new Vector3((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f);
          this.rocketsmoke.AddParticle2(p.mirvOld * 0.5f + p.mirvPos * 0.5f, velocity, mysize, mycolor);
          velocity = new Vector3((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f);
          this.rocketsmoke.AddParticle2(p.mirvOld * 0.8f + p.mirvPos * 0.2f, velocity, mysize, mycolor);
          velocity = new Vector3((float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f, (float) this.rr.Next(-20, 20) / 10f);
          this.rocketsmoke.AddParticle2(p.mirvPos, velocity, mysize, mycolor);
          if ((double) p.mirvAge < 230.0)
          {
            for (int index = 0; (double) index < (double) MathHelper.Clamp((float) (10.0 - (double) p.mirvAge / 23.0), 0.0f, 10f); ++index)
              this.sparks.AddParticle(p.mirvPos + new Vector3((float) this.rr.Next(-30, 30) / 20f, (float) this.rr.Next(-30, 30) / 20f, (float) this.rr.Next(-30, 30) / 20f), Vector3.Transform(new Vector3((float) this.rr.Next(-110, -15), (float) this.rr.Next(-90, 90) / 10f, (float) this.rr.Next(-90, 90) / 10f), matrix * p.mirvRot));
          }
        }
        p.mirvOld = p.mirvPos;
      }
      else
      {
        if (p.mirvStreakTimer < 900 && p.mirvStreakTimer > 100)
        {
          if (this.sc.dayTime == "pm")
            this.sc.darkness = this.rr.Next(1, 100) >= 20 ? this.sc.olderdarkness : (float) this.rr.Next(140, 220) / 100f;
          this.sc.contrastBU = this.rr.Next(1, 100) >= 30 ? 128 : this.rr.Next(180, (int) byte.MaxValue);
        }
        else
        {
          this.sc.contrastBU = 128;
          this.sc.darkness = this.sc.olderdarkness;
        }
        --p.mirvStreakTimer;
        if (p.mirvStreakTimer <= 0)
        {
          p.mirvMoving = false;
          p.mirvDest = Vector3.Zero;
          p.mirvSeeStreaks = false;
          this.sc.contrastBU = 128;
          this.sc.darkness = this.sc.olderdarkness;
        }
        if (p.mirvStreakTimer < 400)
          p.mirvFader -= 2f / 625f;
        if ((double) p.mirvFader <= 0.0)
          p.mirvFader = 0.0f;
        for (int index = 0; index < 25; ++index)
        {
          if (p.mirvStreakTimer < 1000 - mirvs.trigger[index])
            mirvs.fall[index] = true;
          if (mirvs.fall[index])
          {
            mirvs.stream[index].tint -= mirvs.fallSpeed[index];
            if ((double) mirvs.stream[index].tint <= -0.079999998211860657)
            {
              mirvs.stream[index].tint = -0.08f;
              if (!mirvs.bomb[index])
              {
                Vector3 pos = Vector3.Transform(Vector3.Zero, mirvs.trans[index]);
                this.addExplosion2(ref this.mirvExplosion, pos, pos.Y + 60f, true, false, 1f);
                mirvs.bomb[index] = true;
              }
            }
          }
        }
      }
    }

    public Matrix RotateToFace(Vector3 O, Vector3 P)
    {
      Vector3 vector3_1 = Vector3.Cross(O, P);
      Vector3 vector2 = O - P;
      Vector3 result1 = Vector3.Cross(vector3_1, vector2);
      Vector3.Normalize(ref result1, out result1);
      Vector3 result2 = Vector3.Cross(result1, vector3_1);
      Vector3.Normalize(ref result2, out result2);
      Vector3 vector3_2 = Vector3.Cross(result2, result1);
      return new Matrix(result1.X, result1.Y, result1.Z, 0.0f, vector3_2.X, vector3_2.Y, vector3_2.Z, 0.0f, result2.X, result2.Y, result2.Z, 0.0f, 0.0f, 0.0f, 0.0f, 1f);
    }

    private void DrawAK(int i, Matrix world)
    {
      Matrix matrix = Matrix.Transpose(Matrix.Invert(world * this.sc.gunPack.Meshes[i].ParentBone.Transform));
      this.sc.gunPack.Meshes[i].MeshParts[0].Effect = this.reflectEffect;
      this.reflectEffect.Parameters["World"].SetValue(world);
      this.reflectEffect.Parameters["CameraPosition"].SetValue(this.campos);
      this.reflectEffect.Parameters["Projection"].SetValue(this.proj);
      this.reflectEffect.Parameters["View"].SetValue(this.view);
      this.reflectEffect.Parameters["ReflectionView"].SetValue(matrix);
      this.reflectEffect.Parameters["Texture"].SetValue((Texture) this.sc.gunTextures[i]);
      this.reflectEffect.CurrentTechnique = this.reflectEffect.Techniques[0];
      this.sc.gunPack.Meshes[i].Draw();
    }

    private void DrawGun(
      int i,
      Matrix world,
      int ammo,
      float recoilTimer,
      int animClip,
      float animCount,
      float animMax,
      bool islocal,
      int remindex)
    {
      int paintballColor = this.paintballColor;
      int num1 = !islocal ? this.remPlayer[remindex].r.remBloodColor : this.paintballColor;
      int index1 = 0;
      Matrix matrix = Matrix.Transpose(Matrix.Invert(world * this.sc.gunPack.Meshes[i].ParentBone.Transform));
      this.sc.gunPack.Meshes[i].MeshParts[0].Effect = this.reflectEffect;
      this.sc.gunPack.Meshes[i + 1].MeshParts[0].Effect = this.reflectEffect;
      this.reflectEffect.Parameters["World"].SetValue(world);
      this.reflectEffect.Parameters["CameraPosition"].SetValue(this.campos);
      this.reflectEffect.Parameters["Projection"].SetValue(this.proj);
      this.reflectEffect.Parameters["View"].SetValue(this.view);
      if (i == 16)
      {
        index1 = 2;
        if (num1 > 0)
          this.reflectEffect.Parameters["index"].SetValue(num1 - 1);
      }
      else
        this.reflectEffect.Parameters["ReflectionView"].SetValue(matrix);
      this.reflectEffect.Parameters["Texture"].SetValue((Texture) this.sc.gunTextures[i]);
      this.reflectEffect.CurrentTechnique = this.reflectEffect.Techniques[index1];
      this.sc.gunPack.Meshes[i].Draw();
      switch (i)
      {
        case 0:
          if (i == 0)
          {
            if (islocal)
            {
              if ((double) recoilTimer > 0.0)
                this.chamberRot += 0.0883135945f;
              if ((double) this.chamberSpin > 0.0099999997764825821)
              {
                this.chamberSpin *= 0.97f;
                this.chamberRot += this.chamberSpin;
              }
              world = Matrix.CreateRotationX(this.chamberRot) * Matrix.CreateTranslation(0.263f, 1.986f, 0.0f) * world;
              for (int index2 = 0; index2 < this.myPlayer.mag[i]; ++index2)
                this.revolver.displayList[index2].Trans = this.revolver.trans[index2] * world;
              this.revolver.tempindex = this.myPlayer.mag[i];
            }
            else
              world = Matrix.CreateTranslation(0.263f, 1.986f, 0.0f) * world;
          }
          this.reflectEffect.Parameters["World"].SetValue(world);
          this.sc.gunPack.Meshes[i + 1].Draw();
          break;
        case 16:
          break;
        default:
          if (animClip != 3)
          {
            world = ammo <= 0 ? Matrix.CreateTranslation(-1.52f, 0.0f, 0.0f) * world : Matrix.CreateTranslation((float) Math.Sin((double) MathHelper.ToRadians(180f * recoilTimer)) * -1.92f * recoilTimer, 0.0f, 0.0f) * world;
            goto case 0;
          }
          else
          {
            float num2 = (float) ((double) animMax / 2.0 - 2.0);
            if (ammo > 0 && (double) animCount >= (double) num2 - 10.0 || ammo == 0 && (double) animCount >= (double) num2)
            {
              float num3 = (float) (((double) MathHelper.Clamp(animCount, num2 - 10f, num2 + 10f) - ((double) num2 - 10.0)) / 20.0);
              world = Matrix.CreateTranslation((float) Math.Sin((double) MathHelper.ToRadians(180f * num3)) * -2.8f * num3, 0.0f, 0.0f) * world;
              goto case 0;
            }
            else
            {
              world = ammo != 0 ? Matrix.CreateTranslation(0.0f, 0.0f, 0.0f) * world : Matrix.CreateTranslation(-1.52f, 0.0f, 0.0f) * world;
              goto case 0;
            }
          }
      }
    }

    private void DrawWallGuns()
    {
      int index1 = 0;
      Matrix identity = Matrix.Identity;
      for (int index2 = 0; index2 < this.sc.wallguns.Length; index2 += 2)
      {
        if (this.sc.weapon_Unlock[index2] == 1)
        {
          Matrix matrix1 = this.sc.wallguns[index2] * Matrix.CreateTranslation(3000f, 0.0f, 3000f);
          Matrix matrix2 = Matrix.Transpose(Matrix.Invert(matrix1 * this.sc.gunPack.Meshes[index2].ParentBone.Transform));
          this.sc.gunPack.Meshes[index2].MeshParts[0].Effect = this.reflectEffect;
          this.sc.gunPack.Meshes[index2 + 1].MeshParts[0].Effect = this.reflectEffect;
          this.reflectEffect.Parameters["World"].SetValue(matrix1);
          this.reflectEffect.Parameters["CameraPosition"].SetValue(this.campos);
          this.reflectEffect.Parameters["Projection"].SetValue(this.proj);
          this.reflectEffect.Parameters["View"].SetValue(this.view);
          this.reflectEffect.Parameters["ReflectionView"].SetValue(matrix2);
          this.reflectEffect.Parameters["Texture"].SetValue((Texture) this.sc.gunTextures[index2]);
          this.reflectEffect.CurrentTechnique = this.reflectEffect.Techniques[index1];
          this.sc.gunPack.Meshes[index2].Draw();
          if (index2 < 6)
          {
            if (index2 == 2 || index2 == 4)
              matrix1 = Matrix.CreateTranslation(0.0f, 0.0f, 0.0f) * matrix1;
            if (index2 == 0)
              matrix1 = Matrix.CreateTranslation(0.263f, 1.986f, 0.0f) * matrix1;
            this.reflectEffect.Parameters["World"].SetValue(matrix1);
            this.sc.gunPack.Meshes[index2 + 1].Draw();
          }
        }
      }
    }

    private void DrawWeaponGlow(int i, float fade, Vector3 myColor)
    {
      Matrix matrix = this.sc.wallguns[i] * Matrix.CreateTranslation(3000f, 0.0f, 3000f);
      this.sc.gunPack.Meshes[i].MeshParts[0].Effect = this.reflectEffect;
      this.sc.gunPack.Meshes[i + 1].MeshParts[0].Effect = this.reflectEffect;
      this.reflectEffect.Parameters[nameof (fade)].SetValue(fade);
      this.reflectEffect.Parameters["colorx"].SetValue(myColor);
      this.reflectEffect.Parameters["World"].SetValue(matrix);
      this.reflectEffect.Parameters["CameraPosition"].SetValue(this.campos);
      this.reflectEffect.Parameters["Projection"].SetValue(this.proj);
      this.reflectEffect.Parameters["View"].SetValue(this.view);
      this.reflectEffect.CurrentTechnique = this.reflectEffect.Techniques[1];
      this.sc.gunPack.Meshes[i].Draw();
      if (i >= 6)
        return;
      if (i == 2 || i == 4)
        matrix = Matrix.CreateTranslation(0.0f, 0.0f, 0.0f) * matrix;
      if (i == 0)
        matrix = Matrix.CreateTranslation(0.263f, 1.986f, 0.0f) * matrix;
      this.reflectEffect.Parameters["World"].SetValue(matrix);
      this.sc.gunPack.Meshes[i + 1].Draw();
    }

    private void DrawSideFlash(Model model, float scale, Matrix world, int ch, float timer)
    {
      model.Meshes[0].MeshParts[0].Effect = this.muzzleEffect;
      this.muzzleEffect.Parameters["uvA"].SetValue(this.muzzleRect[ch]);
      this.muzzleEffect.Parameters["fader"].SetValue(1);
      this.muzzleEffect.Parameters[nameof (world)].SetValue(Matrix.CreateScale(scale) * world);
      this.muzzleEffect.Parameters["Projection"].SetValue(this.proj);
      this.muzzleEffect.Parameters["View"].SetValue(this.view);
      this.muzzleEffect.CurrentTechnique = this.muzzleEffect.Techniques[0];
      model.Meshes[0].Draw();
    }

    private void DrawFrontBlast(Model model, float scale, Matrix world, float timer, int st)
    {
      model.Meshes[0].MeshParts[0].Effect = this.blastEffect;
      this.blastEffect.Parameters["uvA"].SetValue(this.blastRect[st - this.rr.Next(1, 7)]);
      this.blastEffect.Parameters[nameof (world)].SetValue(Matrix.CreateScale(scale) * world);
      this.blastEffect.Parameters["Projection"].SetValue(this.proj);
      this.blastEffect.Parameters["View"].SetValue(this.view);
      this.blastEffect.CurrentTechnique = this.blastEffect.Techniques[0];
      model.Meshes[0].Draw();
    }

    private void drawLaser(Model model, Matrix world, bool tunnelarrow)
    {
      model.Meshes[0].MeshParts[0].Effect = this.laserEffect;
      this.laserEffect.Parameters[nameof (world)].SetValue(world);
      this.laserEffect.Parameters["Projection"].SetValue(this.proj);
      this.laserEffect.Parameters["View"].SetValue(this.view);
      if (!tunnelarrow)
      {
        this.laserEffect.CurrentTechnique = this.laserEffect.Techniques[0];
      }
      else
      {
        this.traceWave += 5f;
        this.laserEffect.Parameters["ff1"].SetValue((float) (((double) this.traceWave + 333.0) % 1000.0) / 1000f);
        this.laserEffect.Parameters["ff2"].SetValue((float) (((double) this.traceWave + 666.0) % 1000.0) / 1000f);
        this.laserEffect.Parameters["ff3"].SetValue((float) (((double) this.traceWave + 0.0) % 1000.0) / 1000f);
        this.laserEffect.CurrentTechnique = this.laserEffect.Techniques[1];
      }
      model.Meshes[0].Draw();
    }

    private void UpdatePicking(Matrix projection, Matrix view, ref Cursor c, bool checkDoor)
    {
      this.cursorRay = c.CalculateCursorRay(projection, view);
      c.RayIntersectsModel(this.cursorRay, this.buildingMatrix, this.barnDoorMatrix, checkDoor);
    }

    private void bloodburst(Vector3 point, Vector3 vr)
    {
      this.rr.Next(22, 30);
      for (int index = 0; index < 300; ++index)
      {
        int maxValue1 = this.rr.Next(50, 125);
        int maxValue2 = this.rr.Next(850, 1550);
        Vector3 vector3 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 150f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f);
        this.sparks.AddParticle(point + vector3 * 10f, (vr * 0.6f + new Vector3(0.0f + vector3.X, 0.0f + vector3.Y, 0.0f + vector3.Z)) * (float) this.rr.Next(50, maxValue2) / 10f);
      }
      for (int index = 0; index < 800; ++index)
      {
        int maxValue3 = this.rr.Next(20, 70);
        int maxValue4 = this.rr.Next(650, 1250);
        Vector3 vector3 = new Vector3((float) this.rr.Next(-maxValue3, maxValue3) / 100f, (float) this.rr.Next(-maxValue3, maxValue3) / 100f, (float) this.rr.Next(-maxValue3, maxValue3) / 100f);
        this.blood.AddParticle3(point + vector3 * 15f, (vr * 0.4f + new Vector3(0.0f + vector3.X, 0.0f + vector3.Y, 0.0f + vector3.Z)) * (float) this.rr.Next(5, maxValue4) / 10f, this.rr.Next(0, 11));
      }
    }

    private void shotEasterEgg(Vector3 point)
    {
      float num1 = 6f;
      Vector3 vector3 = new Vector3(1f, 2f, 3f);
      if (this.sc.dayTime == "am" && !this.farmerLastSpeech)
      {
        vector3 = new Vector3(4558.8f, 58f, 2968f);
        if ((double) Math.Abs(point.X - vector3.X) < (double) num1 && (double) Math.Abs(point.Y - vector3.Y) < (double) num1 && (double) Math.Abs(point.Z - vector3.Z) < (double) num1)
        {
          if (this.sc.gameState != 1)
          {
            if (!this.myPlayer.inBarn)
            {
              if (this.rr.Next(1, 100) < 10)
              {
                BloodnBacon4PT.memo.Length = 0;
                BloodnBacon4PT.memo.Append("shoot from inside the barn");
                this.memoTimer = 170;
                this.memoIcon = 2;
              }
              else
              {
                BloodnBacon4PT.memo.Length = 0;
                int num2 = this.rr.Next(0, 3);
                if (num2 == 0)
                  BloodnBacon4PT.memo.Append("this is a trickshot");
                if (num2 == 1)
                  BloodnBacon4PT.memo.Append("try a different location");
                if (num2 == 2)
                  BloodnBacon4PT.memo.Append("getting warmer");
                this.memoTimer = 170;
                this.memoIcon = 2;
              }
              this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
            }
            else
            {
              this.sc.harp2.Play(this.sc.ev, 0.6f, 0.0f);
              this.PlayDialogue(157, true);
              if (!this.sc.redsuns.Contains(2))
              {
                this.sc.redsuns.Add(2);
                if (this.sc.redsuns.Count >= 6)
                  this.sc.trophy.win(this.sc.trophy.redsun);
              }
            }
          }
          else
          {
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("wait until end of day");
            this.memoTimer = 170;
            this.memoIcon = 2;
            this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
          }
        }
        vector3 = new Vector3(4522.8f, 29.5f, 1705.5f);
        if ((double) Math.Abs(point.X - vector3.X) < (double) num1 && (double) Math.Abs(point.Y - vector3.Y) < (double) num1 && (double) Math.Abs(point.Z - vector3.Z) < (double) num1)
        {
          if (this.sc.gameState != 1 && this.farmerJawIndex < 0)
          {
            this.sc.harp2.Play(this.sc.ev, 0.6f, 0.0f);
            this.PlayDialogue(159, true);
            if (!this.sc.redsuns.Contains(3))
            {
              this.sc.redsuns.Add(3);
              if (this.sc.redsuns.Count >= 6)
                this.sc.trophy.win(this.sc.trophy.redsun);
            }
          }
          else
            this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
        }
      }
      if (this.sc.dayTime == "pm" && !this.farmerLastSpeech && (this.moonExists || this.sc.gameState == 2))
      {
        vector3 = new Vector3(1152f, 457.8f, 2399.3f);
        if ((double) Math.Abs(point.X - vector3.X) < (double) num1 && (double) Math.Abs(point.Y - vector3.Y) < (double) num1 && (double) Math.Abs(point.Z - vector3.Z) < (double) num1)
        {
          if (this.sc.gameState != 1 && this.farmerJawIndex < 0)
          {
            this.sc.harp2.Play(this.sc.ev, 0.6f, 0.0f);
            this.PlayDialogue(162, true);
            if (!this.sc.redsuns.Contains(4))
            {
              this.sc.redsuns.Add(4);
              if (this.sc.redsuns.Count >= 6)
                this.sc.trophy.win(this.sc.trophy.redsun);
            }
          }
          else
            this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
        }
        vector3 = new Vector3(4558f, 8.7f, 2972.5f);
        if ((double) Math.Abs(point.X - vector3.X) < (double) num1 && (double) Math.Abs(point.Y - vector3.Y) < (double) num1 && (double) Math.Abs(point.Z - vector3.Z) < (double) num1)
        {
          if (this.sc.gameState != 1 && this.farmerJawIndex < 0)
          {
            this.sc.harp2.Play(this.sc.ev, 0.6f, 0.0f);
            this.PlayDialogue(160, true);
            if (!this.sc.redsuns.Contains(5))
            {
              this.sc.redsuns.Add(5);
              if (this.sc.redsuns.Count >= 6)
                this.sc.trophy.win(this.sc.trophy.redsun);
            }
          }
          else
            this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
        }
        vector3 = new Vector3(2326.4f, 44.22f, 5168.3f);
        if ((double) Math.Abs(point.X - vector3.X) < (double) num1 && (double) Math.Abs(point.Y - vector3.Y) < (double) num1 && (double) Math.Abs(point.Z - vector3.Z) < (double) num1)
        {
          if (this.sc.gameState != 1 && this.farmerJawIndex < 0)
          {
            this.PlayDialogue(161, true);
            this.sc.harp2.Play(this.sc.ev, 0.6f, 0.0f);
            if (!this.sc.redsuns.Contains(6))
            {
              this.sc.redsuns.Add(6);
              if (this.sc.redsuns.Count >= 6)
                this.sc.trophy.win(this.sc.trophy.redsun);
            }
          }
          else
            this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
        }
      }
      if (!this.myPlayer.inBarn || !this.barnTriangle || this.farmerLastSpeech)
        return;
      if ((double) point.X >= 3104.0 && (double) point.X <= 3105.0 && (double) point.Y >= 37.0 && (double) point.Y <= 49.0 && (double) point.Z >= 4568.0 && (double) point.Z <= 4581.0 && this.farmerJawIndex < 0)
        this.PlayDialogue(this.rr.Next(144, 146), true);
      if ((double) point.X >= 3104.0 && (double) point.X <= 3105.0 && (double) point.Y >= 48.0 && (double) point.Y <= 59.0 && (double) point.Z >= 4583.0 && (double) point.Z <= 4597.0 && this.farmerJawIndex < 0)
        this.PlayDialogue(this.rr.Next(142, 144), true);
      if ((double) point.X >= 3104.0 && (double) point.X <= 3105.0 && (double) point.Y >= 84.0 && (double) point.Y <= 107.0 && (double) point.Z >= 4587.0 && (double) point.Z <= 4607.0)
      {
        if (this.skullexposed && this.shootmeCounter <= 0)
          this.PlayDialogue(this.rr.Next(173, 178), true);
        if (this.skullhit <= this.skullTotal)
        {
          ++this.skullhit;
          if (this.sc.developer)
            this.skullhit += 2;
        }
        if (this.skullhit > this.skullTotal && !this.skullexposed)
          this.PlayDialogue(177, true);
        if (!this.skullexposed && this.shootmeCounter <= 0 && this.farmerJawIndex < 0)
        {
          this.sc.trophy.win(this.sc.trophy.bitethehand);
          int index = this.rr.Next(0, this.talkShootMe.Count);
          int myIndex = this.talkShootMe[index];
          this.talkShootMe.RemoveAt(index);
          if (this.talkShootMe.Count == 0)
            this.makeList(4);
          this.PlayDialogue(myIndex, true);
          this.shootmeCounter = 400;
          ++this.shootmeTotalCount;
        }
      }
      if ((double) point.X >= 3675.0 && (double) point.X <= 3676.0 && (double) point.Y >= 310.79998779296875 && (double) point.Y <= 331.89999389648438 && (double) point.Z >= 4608.0 && (double) point.Z <= 4624.0)
      {
        if (this.farmerJawIndex < 0 && this.sc.dayTime != "pm")
        {
          this.sc.harp2.Play(this.sc.ev, 0.5f, 0.0f);
          this.PlayDialogue(146, true);
          this.greyDay = new Color(200, (int) byte.MaxValue, 15, (int) byte.MaxValue);
          this.colorDay = new Color(200, (int) byte.MaxValue, 15, (int) byte.MaxValue);
          if (!this.sc.redsuns.Contains(1))
          {
            this.sc.redsuns.Add(1);
            if (this.sc.redsuns.Count >= 6)
              this.sc.trophy.win(this.sc.trophy.redsun);
          }
        }
        else
        {
          this.sc.buzz.Play(this.sc.ev, 0.2f, 0.0f);
          if (this.sc.dayTime == "pm")
          {
            BloodnBacon4PT.memo.Length = 0;
            BloodnBacon4PT.memo.Append("wait until daytime");
            this.memoTimer = 150;
            this.memoIcon = 2;
          }
        }
      }
      if (!this.sc.easter_skull1 && (double) point.X <= 3144.0 && (double) point.X >= 3129.0 && (double) point.Y <= 147.0 && (double) point.Y >= 133.0 && (double) point.Z >= 4443.0 && (double) point.Z <= 4444.0)
      {
        this.sc.easter_skull1 = true;
        this.zombie.Play(this.sc.ev, (float) this.rr.Next(-50, 50) / 100f, 0.0f);
        if (!this.sc.easter_skull1 || !this.sc.easter_skull2 || !this.sc.easter_skull3 || this.sc.easter_skulltalk)
          return;
        this.sc.easter_skulltalk = true;
        this.PlayDialogue(140, true);
      }
      else if (!this.sc.easter_skull2 && (double) point.X <= 3105.0 && (double) point.X >= 3104.0 && (double) point.Y <= 268.0 && (double) point.Y >= 249.0 && (double) point.Z >= 4660.0 && (double) point.Z <= 4680.0)
      {
        this.sc.easter_skull2 = true;
        this.zombie.Play(this.sc.ev, (float) this.rr.Next(-50, 50) / 100f, 0.0f);
        if (!this.sc.easter_skull1 || !this.sc.easter_skull2 || !this.sc.easter_skull3 || this.sc.easter_skulltalk)
          return;
        this.sc.easter_skulltalk = true;
        this.PlayDialogue(140, true);
      }
      else
      {
        if (this.sc.easter_skull3 || (double) point.X > 3368.0 || (double) point.X < 3354.0 || (double) point.Y > 154.0 || (double) point.Y < 140.0 || (double) point.Z < 4806.0 || (double) point.Z > 4807.0)
          return;
        this.sc.easter_skull3 = true;
        this.zombie.Play(this.sc.ev, (float) this.rr.Next(-50, 50) / 100f, 0.0f);
        if (!this.sc.easter_skull1 || !this.sc.easter_skull2 || !this.sc.easter_skull3 || this.sc.easter_skulltalk)
          return;
        this.sc.easter_skulltalk = true;
        this.PlayDialogue(140, true);
      }
    }

    private int shotTumbler(Vector3 point, int special)
    {
      if (special == 1)
      {
        Vector3 vector3 = new Vector3(4f, 4f, 1f);
        float num1 = -69f;
        float num2 = 35.7f;
        float num3 = 4.5f;
        float num4 = Math.Abs(vector3.X);
        float num5 = Math.Abs(vector3.Y);
        float num6 = Math.Abs(vector3.Z);
        if ((double) point.X >= (double) num1 - (double) num4 && (double) point.X <= (double) num1 + (double) num4 && (double) point.Y >= (double) num2 - (double) num5 && (double) point.Y <= (double) num2 + (double) num5 && (double) point.Z >= (double) num3 - (double) num6 && (double) point.Z <= (double) num3 + (double) num6)
          return 1;
        float num7 = -57.7f;
        float num8 = 35.7f;
        float num9 = 4.5f;
        if ((double) point.X >= (double) num7 - (double) num4 && (double) point.X <= (double) num7 + (double) num4 && (double) point.Y >= (double) num8 - (double) num5 && (double) point.Y <= (double) num8 + (double) num5 && (double) point.Z >= (double) num9 - (double) num6 && (double) point.Z <= (double) num9 + (double) num6)
          return 2;
        float num10 = -46.2f;
        float num11 = 35.7f;
        float num12 = 4.5f;
        if ((double) point.X >= (double) num10 - (double) num4 && (double) point.X <= (double) num10 + (double) num4 && (double) point.Y >= (double) num11 - (double) num5 && (double) point.Y <= (double) num11 + (double) num5 && (double) point.Z >= (double) num12 - (double) num6 && (double) point.Z <= (double) num12 + (double) num6)
          return 3;
        if (this.mazeid == 0)
        {
          vector3 = new Vector3(40f, 40f, 1f);
          float num13 = -42f;
          float num14 = 50f;
          float num15 = 4.5f;
          float num16 = Math.Abs(vector3.X);
          float num17 = Math.Abs(vector3.Y);
          float num18 = Math.Abs(vector3.Z);
          if ((double) point.X >= (double) num13 - (double) num16 && (double) point.X <= (double) num13 + (double) num16 && (double) point.Y >= (double) num14 - (double) num17 && (double) point.Y <= (double) num14 + (double) num17 && (double) point.Z >= (double) num15 - (double) num18 && (double) point.Z <= (double) num15 + (double) num18)
            return 33;
        }
      }
      if (special == 2)
      {
        Vector3 vector3 = new Vector3(10f, 5f, 0.8f);
        float num19 = Math.Abs(vector3.X);
        float num20 = Math.Abs(vector3.Y);
        float num21 = Math.Abs(vector3.Z);
        float num22 = -74f;
        float num23 = 35f;
        float num24 = 4.5f;
        if ((double) point.X >= (double) num22 - (double) num19 && (double) point.X <= (double) num22 + (double) num19 && (double) point.Y >= (double) num23 - (double) num20 && (double) point.Y <= (double) num23 + (double) num20 && (double) point.Z >= (double) num24 - (double) num21 && (double) point.Z <= (double) num24 + (double) num21)
          return 4;
        if (this.mazeid >= 0)
        {
          vector3 = new Vector3(40f, 40f, 0.8f);
          float num25 = Math.Abs(vector3.X);
          float num26 = Math.Abs(vector3.Y);
          float num27 = Math.Abs(vector3.Z);
          float num28 = -42.47f;
          float num29 = 50.94f;
          float num30 = 0.0f;
          if ((double) point.X >= (double) num28 - (double) num25 && (double) point.X <= (double) num28 + (double) num25 && (double) point.Y >= (double) num29 - (double) num26 && (double) point.Y <= (double) num29 + (double) num26 && (double) point.Z >= (double) num30 - (double) num27 && (double) point.Z <= (double) num30 + (double) num27)
            return 44;
        }
        if (this.mazeid == 0)
        {
          vector3 = new Vector3(40f, 40f, 0.8f);
          float num31 = Math.Abs(vector3.X);
          float num32 = Math.Abs(vector3.Y);
          float num33 = Math.Abs(vector3.Z);
          float num34 = -42.5f;
          float num35 = 51f;
          float num36 = 4.5f;
          if ((double) point.X >= (double) num34 - (double) num31 && (double) point.X <= (double) num34 + (double) num31 && (double) point.Y >= (double) num35 - (double) num32 && (double) point.Y <= (double) num35 + (double) num32 && (double) point.Z >= (double) num36 - (double) num33 && (double) point.Z <= (double) num36 + (double) num33)
            return 55;
        }
      }
      if (special == 3)
      {
        Vector3 vector3 = new Vector3(8f, 8f, 0.8f);
        float num37 = Math.Abs(vector3.X);
        float num38 = Math.Abs(vector3.Y);
        float num39 = Math.Abs(vector3.Z);
        float num40 = -62f;
        float num41 = 55f;
        float num42 = 0.0f;
        if ((double) point.X >= (double) num40 - (double) num37 && (double) point.X <= (double) num40 + (double) num37 && (double) point.Y >= (double) num41 - (double) num38 && (double) point.Y <= (double) num41 + (double) num38 && (double) point.Z >= (double) num42 - (double) num39 && (double) point.Z <= (double) num42 + (double) num39)
          return 5;
      }
      return 0;
    }

    private void tumblerCheck(int ans)
    {
      for (int index = 0; index < this.plain.Count; ++index)
      {
        if (this.plain[index].doorFlag && this.myPlayer.gunFired)
        {
          if (!this.plain[index].doorlock)
            return;
          this.lockDoor(false, this.plain[index]);
          this.creak.Play(this.sc.ev, -0.2f, 0.0f);
          this.plain[index].doorlock = false;
          this.tunnelDoorNetnum = index;
          return;
        }
      }
      if (this.wearingGoggles)
      {
        for (int index = 0; index < this.hidden.Count; ++index)
        {
          if (this.hidden[index].doorFlag && this.myPlayer.gunFired)
          {
            if (!this.hidden[index].doorlock)
              return;
            this.vaultrise.Play(this.sc.ev, 0.0f, 0.0f);
            this.hidden[index].doorlock = false;
            this.tunnelDoorNetnum = index + 100;
            return;
          }
        }
      }
      for (int index = 0; index < this.combo.Count; ++index)
      {
        if (this.combo[index].doorFlag && this.myPlayer.gunFired)
        {
          if (ans == 1)
          {
            ++this.combo[index].tumbler1state;
            this.combo[index].tumbler1trans.Y = (float) (7.5500001907348633 * (double) this.combo[index].tumbler1state - 67.949996948242188);
            if (this.combo[index].tumbler1state > 9)
            {
              this.combo[index].tumbler1state = 0;
              this.combo[index].tumbler1trans.Y = -67.95f;
            }
            this.sendTumbler = 1;
            this.tumblerIndex = index;
            this.tumblerSlot = 1;
            this.tumblerState = this.combo[index].tumbler1state;
          }
          if (ans == 2)
          {
            ++this.combo[index].tumbler2state;
            this.combo[index].tumbler2trans.Y = (float) (7.5500001907348633 * (double) this.combo[index].tumbler2state - 67.949996948242188);
            if (this.combo[index].tumbler2state > 9)
            {
              this.combo[index].tumbler2state = 0;
              this.combo[index].tumbler2trans.Y = -67.95f;
            }
            this.sendTumbler = 1;
            this.tumblerIndex = index;
            this.tumblerSlot = 2;
            this.tumblerState = this.combo[index].tumbler2state;
          }
          if (ans == 3)
          {
            ++this.combo[index].tumbler3state;
            this.combo[index].tumbler3trans.Y = (float) (7.5500001907348633 * (double) this.combo[index].tumbler3state - 67.949996948242188);
            if (this.combo[index].tumbler3state > 9)
            {
              this.combo[index].tumbler3state = 0;
              this.combo[index].tumbler3trans.Y = -67.95f;
            }
            this.sendTumbler = 1;
            this.tumblerIndex = index;
            this.tumblerSlot = 3;
            this.tumblerState = this.combo[index].tumbler3state;
          }
          int x = 66;
          int y = 66;
          int z = 66;
          if (index == 0 && this.sc.cog1[this.mazeid] == 1)
          {
            x = this.sc.code1[this.mazeid, 0];
            y = this.sc.code1[this.mazeid, 1];
            z = this.sc.code1[this.mazeid, 2];
          }
          if (index == 1 && this.sc.cog2[this.mazeid] == 1)
          {
            x = this.sc.code2[this.mazeid, 0];
            y = this.sc.code2[this.mazeid, 1];
            z = this.sc.code2[this.mazeid, 2];
          }
          if (index == 2 && this.sc.cog3[this.mazeid] == 1)
          {
            x = this.sc.code3[this.mazeid, 0];
            y = this.sc.code3[this.mazeid, 1];
            z = this.sc.code3[this.mazeid, 2];
          }
          if (this.checkDoor(ref this.combo[index].doorlock, this.combo[index].tumbler1state, this.combo[index].tumbler2state, this.combo[index].tumbler3state, new Vector3((float) x, (float) y, (float) z)))
          {
            this.creak.Play(this.sc.ev, 0.0f, 0.0f);
            this.combo[index].doorlock = false;
            this.lockDoor(false, this.combo[index]);
            this.tunnelDoorNetnum = index + 200;
          }
          this.sc.ding.Play(this.sc.ev, -0.2f, 0.0f);
          break;
        }
      }
    }

    private void bulletHit(
      ref BloodnBacon4PT.hole hole,
      Cursor cursor,
      int gunchoice,
      int seed,
      bool onlySparks,
      int myColor)
    {
      Vector3 anchor = cursor.pickedTriangle[0];
      Vector3 vector3_1 = cursor.pickedTriangle[1];
      Vector3 end = cursor.pickedTriangle[2];
      Vector3 vector3_2 = -Vector3.Normalize(Vector3.Cross(anchor - vector3_1, anchor - end));
      Vector3 vector3_3 = cursor.closestIntersection * cursor.rayDir + cursor.rayPos;
      if (myColor == 0)
      {
        int maxValue1 = this.rr.Next(2, 55);
        int num = this.rr.Next(105, 175);
        if (gunchoice == 4)
        {
          maxValue1 = this.rr.Next(15, 25);
          num = this.rr.Next(40, 80);
        }
        if (onlySparks)
          num = 5;
        int maxValue2 = this.rr.Next(950, 1650);
        for (int index = 0; index < num; ++index)
        {
          Vector3 vector3_4 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 100f);
          if (gunchoice != 4 && gunchoice != 18)
            this.sparks.AddParticle(vector3_3 + vector3_4 * 5f, new Vector3(vector3_2.X + vector3_4.X, vector3_2.Y + vector3_4.Y, vector3_2.Z + vector3_4.Z) * (float) this.rr.Next(90, maxValue2) / 10f);
          else
            this.sparks2.AddParticle(vector3_3 + vector3_4 * 3f, new Vector3(vector3_2.X + vector3_4.X, vector3_2.Y + vector3_4.Y, vector3_2.Z + vector3_4.Z) * (float) this.rr.Next(90, maxValue2) / 10f);
        }
      }
      if (onlySparks)
        return;
      float radius = (float) this.rr.Next(30, 35) / 10f;
      if (gunchoice == 0)
        radius = (float) this.rr.Next(70, 75) / 10f;
      if (gunchoice == 4)
        radius = (float) this.rr.Next(40, 60) / 10f;
      if (gunchoice == 6)
        radius = (float) this.rr.Next(40, 45) / 10f;
      if (gunchoice == 8)
        radius = (float) this.rr.Next(190, 220) / 10f;
      if (gunchoice == 10)
        radius = (float) this.rr.Next(30, 35) / 10f;
      if (gunchoice == 12)
        radius = (float) this.rr.Next(22, 27) / 10f;
      if (gunchoice == 18)
        radius = (float) this.rr.Next(50, 55) / 10f;
      if (gunchoice == 20)
        radius = (float) this.rr.Next(35, 35) / 10f;
      this.triNormal = vector3_2;
      Vector3 vector3_5 = Vector3.Zero;
      if (cursor.isDoor)
        vector3_5 = this.barnDoorslide;
      bool isClipped = false;
      int special = 0;
      if (this.tunneladd)
      {
        for (int index = 0; index < this.combo.Count; ++index)
        {
          if (this.combo[index].doorFlag)
          {
            vector3_3 = Vector3.Transform(vector3_3, Matrix.Invert(this.combo[index].doorMatrix));
            vector3_2 = Vector3.Transform(vector3_2, Matrix.Invert(Matrix.CreateRotationY(this.combo[index].doorrot) * this.combo[index].rotMatrix));
            special = 1;
          }
        }
        for (int index = 0; index < this.plain.Count; ++index)
        {
          if (this.plain[index].doorFlag)
          {
            vector3_3 = Vector3.Transform(vector3_3, Matrix.Invert(this.plain[index].doorMatrix));
            vector3_2 = Vector3.Transform(vector3_2, Matrix.Invert(Matrix.CreateRotationY(this.plain[index].doorrot) * this.plain[index].rotMatrix));
            special = 2;
          }
        }
        for (int index = 0; index < this.hidden.Count; ++index)
        {
          if (this.hidden[index].doorFlag)
          {
            vector3_3 = Vector3.Transform(vector3_3, Matrix.Invert(this.hidden[index].doorMatrix));
            vector3_2 = Vector3.Transform(vector3_2, Matrix.Invert(Matrix.CreateRotationY(this.hidden[index].doorrot) * this.hidden[index].rotMatrix));
            special = 3;
          }
        }
        if (cursor.isCrypt)
          vector3_3 = Vector3.Transform(vector3_3, Matrix.Invert(this.cryptMatrix));
        if (cursor.isCrypt2)
          vector3_3 = Vector3.Transform(vector3_3, Matrix.Invert(this.cryptMatrix2));
      }
      Vector3 a = Vector3.Zero;
      Vector3 b = Vector3.Zero;
      Vector3 c = Vector3.Zero;
      Vector3 dir1 = Vector3.Zero;
      float distance = 0.0f;
      if (special <= 0)
      {
        Vector3 dir2;
        float line1 = this.DistanceToLine(vector3_3, anchor, vector3_1, out dir2);
        if ((double) line1 < (double) radius)
        {
          a = anchor;
          b = vector3_1;
          c = end;
          dir1 = dir2;
          distance = line1;
          isClipped = true;
        }
        else
        {
          float line2 = this.DistanceToLine(vector3_3, anchor, end, out dir2);
          if ((double) line2 < (double) radius)
          {
            a = anchor;
            b = end;
            c = vector3_1;
            dir1 = dir2;
            distance = line2;
            isClipped = true;
          }
          else
          {
            float line3 = this.DistanceToLine(vector3_3, vector3_1, end, out dir2);
            if ((double) line3 < (double) radius)
            {
              a = vector3_1;
              b = end;
              c = anchor;
              dir1 = dir2;
              distance = line3;
              isClipped = true;
            }
          }
        }
      }
      if (isClipped)
      {
        Vector3 found = Vector3.Zero;
        if (cursor.isTunnel)
          cursor.findAdjacentGen(ref cursor.tunnelvertices3, this.buildingMatrix, a, b, c, out found);
        else
          cursor.findAdjacent(cursor.isDoor, this.buildingMatrix, this.barnDoorMatrix, a, b, c, out found);
        if (found != Vector3.Zero)
        {
          Vector3 vector2 = Vector3.Normalize(Vector3.Cross(a - b, a - found));
          this.adjNormal = vector2;
          if ((double) Math.Abs(Vector3.Dot(vector3_2, vector2)) > 0.89999997615814209)
            isClipped = false;
        }
      }
      int start = 0;
      int stop = 6;
      if (gunchoice == 0)
      {
        start = 6;
        stop = 9;
      }
      if (gunchoice == 2)
      {
        start = 0;
        stop = 6;
      }
      if (gunchoice == 4)
      {
        start = 37;
        stop = 40;
      }
      if (gunchoice == 12)
      {
        start = 47;
        stop = 53;
      }
      if (gunchoice == 8)
      {
        start = 19;
        stop = 25;
      }
      if (gunchoice == 10)
      {
        start = 25;
        stop = 31;
      }
      if (gunchoice == 6)
      {
        start = 53;
        stop = 59;
      }
      if (gunchoice == 18)
      {
        start = 44;
        stop = 47;
      }
      if (gunchoice == 20)
      {
        start = 59;
        stop = 65;
      }
      if (myColor != 0)
      {
        radius = (float) this.rr.Next(110, 210) / 10f;
        if (myColor == 1)
        {
          start = 40;
          stop = 41;
        }
        if (myColor == 2)
        {
          start = 41;
          stop = 42;
        }
        if (myColor == 3)
        {
          start = 42;
          stop = 43;
        }
        if (myColor == 4)
        {
          start = 43;
          stop = 44;
        }
      }
      int ans = 0;
      if (this.tunneladd && this.inFarm == 2 && special > 0)
      {
        ans = this.shotTumbler(vector3_3, special);
        if (object.Equals((object) cursor, (object) this.cursor))
        {
          if (this.mazeid == 0 && ans > 0 && ans <= 3)
            this.cogFlash = 120;
          if (ans == 33)
          {
            this.memoTimer = 290;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 2;
            BloodnBacon4PT.memo.Append("Shoot The Numbers");
            this.cogFlash = 120;
            this.cogShake = 120;
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            ans = 0;
          }
          if (ans == 44)
          {
            this.memoTimer = 290;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 2;
            BloodnBacon4PT.memo.Append("No Entry, Go Around !");
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            ans = 0;
          }
          if (ans == 55)
          {
            this.memoTimer = 290;
            BloodnBacon4PT.memo.Length = 0;
            this.memoIcon = 2;
            BloodnBacon4PT.memo.Append("Shoot The Red Handle");
            this.sc.cancel.Play(this.sc.ev, 0.0f, 0.0f);
            ans = 0;
          }
        }
        else if (ans > 3)
          ans = 0;
        if (ans > 0 && object.Equals((object) cursor, (object) this.cursor))
        {
          this.tumblerCheck(ans);
          if (ans == 5)
            ans = 0;
        }
      }
      if (ans != 0)
        return;
      if (hole.Equals((object) this.cryptdoor) && object.Equals((object) cursor, (object) this.cursor) && this.sc.gameState == 2 && this.inFarm == 1 && this.cryptLock && this.haveEntranceKey)
      {
        this.vaultopen.Play(this.sc.ev, 0.0f, 0.0f);
        this.cryptLock = false;
        this.lockCrypt(false);
        this.showTunnelArrow = false;
        this.crypt1netsend = true;
      }
      if (hole.Equals((object) this.cryptdoor2) && object.Equals((object) cursor, (object) this.cursor) && this.sc.gameState == 2 && this.haveCryptKey && this.inFarm == 2 && this.cryptLock2 && (double) this.myPlayer.displayState.npcPosition.Y <= -190.0 && (double) this.myPlayer.displayState.npcPosition.Y > -290.0)
      {
        this.vaultopen.Play(this.sc.ev, -0.3f, 0.0f);
        this.cryptLock2 = false;
        this.lockCrypt2(false);
        this.crypt2netsend = true;
      }
      bool flag = true;
      if (this.tunneladd && this.inFarm == 2 && (!this.shootEye1 || !this.shootEye2))
      {
        float num1 = 2f;
        int num2 = 0;
        Vector3 vector3_6 = new Vector3(3095.596f, -196.7932f, 3908.644f);
        if (!this.shootEye1 && (double) vector3_3.X >= (double) vector3_6.X - (double) num1 && (double) vector3_3.X <= (double) vector3_6.X + (double) num1 && (double) vector3_3.Y >= (double) vector3_6.Y - (double) num1 && (double) vector3_3.Y <= (double) vector3_6.Y + (double) num1 && (double) vector3_3.Z >= (double) vector3_6.Z - (double) num1 && (double) vector3_3.Z <= (double) vector3_6.Z + (double) num1)
        {
          this.shootEye1 = true;
          ++num2;
          flag = false;
        }
        vector3_6 = new Vector3(3207.01f, -196.7932f, 3887.238f);
        if (!this.shootEye2 && (double) vector3_3.X >= (double) vector3_6.X - (double) num1 && (double) vector3_3.X <= (double) vector3_6.X + (double) num1 && (double) vector3_3.Y >= (double) vector3_6.Y - (double) num1 && (double) vector3_3.Y <= (double) vector3_6.Y + (double) num1 && (double) vector3_3.Z >= (double) vector3_6.Z - (double) num1 && (double) vector3_3.Z <= (double) vector3_6.Z + (double) num1)
        {
          this.shootEye2 = true;
          ++num2;
          flag = false;
        }
        if (num2 > 0)
        {
          if (this.shootEye1 && this.shootEye2)
          {
            this.sc.SavePrefs();
            this.memoIcon = 2;
            this.memoTimer = 190;
            BloodnBacon4PT.memo.Length = 0;
            if (this.sc.star3)
              BloodnBacon4PT.memo.Append("secret star found again");
            else
              BloodnBacon4PT.memo.Append("Secret Star Found !");
            this.grow.Play(this.sc.ev, 0.0f, 0.0f);
            this.sc.star3 = true;
          }
          else
            this.cackle3.Play(this.sc.ev * 0.5f, 0.0f, 0.0f);
        }
      }
      if (!flag)
        return;
      if (this.myPlayer.gunFired)
        this.shotEasterEgg(vector3_3);
      this.pasteDecal(ref hole, vector3_3 - vector3_5, vector3_2, dir1, distance, isClipped, radius, start, stop, 80, 98, seed);
    }

    private void bloodDecal(
      ref BloodnBacon4PT.hole hole,
      Cursor cursorx,
      int seed,
      bool grenadeHit,
      int start,
      int stop,
      int mytest)
    {
      float radius = (float) this.rr.Next(220, 460) / 10f;
      Vector3 anchor = cursorx.pickedTriangle[0];
      Vector3 vector3_1 = cursorx.pickedTriangle[1];
      Vector3 end = cursorx.pickedTriangle[2];
      Vector3 vector3_2 = -Vector3.Normalize(Vector3.Cross(anchor - vector3_1, anchor - end));
      Vector3 point = cursorx.closestIntersection * cursorx.rayDir + cursorx.rayPos;
      Vector3 vector3_3 = Vector3.Zero;
      if (this.cursor.isDoor)
        vector3_3 = this.barnDoorslide;
      Vector3 a = Vector3.Zero;
      Vector3 b = Vector3.Zero;
      bool isClipped = false;
      Vector3 c = Vector3.Zero;
      Vector3 dir1 = Vector3.Zero;
      float distance = 0.0f;
      Vector3 dir2;
      float line1 = this.DistanceToLine(point, anchor, vector3_1, out dir2);
      if ((double) line1 < (double) radius)
      {
        a = anchor;
        b = vector3_1;
        c = end;
        dir1 = dir2;
        distance = line1;
        isClipped = true;
      }
      else
      {
        float line2 = this.DistanceToLine(point, anchor, end, out dir2);
        if ((double) line2 < (double) radius)
        {
          a = anchor;
          b = end;
          c = vector3_1;
          dir1 = dir2;
          distance = line2;
          isClipped = true;
        }
        else
        {
          float line3 = this.DistanceToLine(point, vector3_1, end, out dir2);
          if ((double) line3 < (double) radius)
          {
            a = vector3_1;
            b = end;
            c = anchor;
            dir1 = dir2;
            distance = line3;
            isClipped = true;
          }
        }
      }
      if (isClipped)
      {
        Vector3 found = Vector3.Zero;
        cursorx.findAdjacent(false, this.buildingMatrix, this.barnDoorMatrix, a, b, c, out found);
        if (found != Vector3.Zero)
        {
          Vector3 vector2 = Vector3.Normalize(Vector3.Cross(a - b, a - found));
          this.adjNormal = vector2;
          if ((double) Math.Abs(Vector3.Dot(vector3_2, vector2)) > 0.89999997615814209)
            isClipped = false;
        }
      }
      if (start == 9 && stop == 15 && mytest != 0)
      {
        if (mytest == 1)
        {
          start = 40;
          stop = 41;
        }
        if (mytest == 2)
        {
          start = 41;
          stop = 42;
        }
        if (mytest == 3)
        {
          start = 42;
          stop = 43;
        }
        if (mytest == 4)
        {
          start = 43;
          stop = 44;
        }
      }
      if (grenadeHit)
        this.pasteDecal(ref hole, point - vector3_3, vector3_2, dir1, distance, isClipped, (float) this.rr.Next(50, 80), 17, 19, 55, 75, seed);
      else
        this.pasteDecal(ref hole, point - vector3_3, vector3_2, dir1, distance, isClipped, radius, start, stop, 70, 100, seed);
    }

    private void bloodDecal2(ref BloodnBacon4PT.hole hole, Cursor cursorx, int seed)
    {
      float radius = (float) this.rr.Next(220, 460) / 10f;
      Vector3 anchor = cursorx.pickedTriangle[0];
      Vector3 vector3_1 = cursorx.pickedTriangle[1];
      Vector3 end = cursorx.pickedTriangle[2];
      Vector3 vector3_2 = -Vector3.Normalize(Vector3.Cross(anchor - vector3_1, anchor - end));
      Vector3 point = cursorx.closestIntersection * cursorx.rayDir + cursorx.rayPos;
      Vector3 vector3_3 = Vector3.Zero;
      if (this.cursor.isDoor)
        vector3_3 = this.barnDoorslide;
      Vector3 a = Vector3.Zero;
      Vector3 b = Vector3.Zero;
      bool isClipped = false;
      Vector3 c = Vector3.Zero;
      Vector3 dir1 = Vector3.Zero;
      float distance = 0.0f;
      Vector3 dir2;
      float line1 = this.DistanceToLine(point, anchor, vector3_1, out dir2);
      if ((double) line1 < (double) radius)
      {
        a = anchor;
        b = vector3_1;
        c = end;
        dir1 = dir2;
        distance = line1;
        isClipped = true;
      }
      else
      {
        float line2 = this.DistanceToLine(point, anchor, end, out dir2);
        if ((double) line2 < (double) radius)
        {
          a = anchor;
          b = end;
          c = vector3_1;
          dir1 = dir2;
          distance = line2;
          isClipped = true;
        }
        else
        {
          float line3 = this.DistanceToLine(point, vector3_1, end, out dir2);
          if ((double) line3 < (double) radius)
          {
            a = vector3_1;
            b = end;
            c = anchor;
            dir1 = dir2;
            distance = line3;
            isClipped = true;
          }
        }
      }
      if (isClipped)
      {
        Vector3 found = Vector3.Zero;
        cursorx.findAdjacent(false, this.buildingMatrix, this.barnDoorMatrix, a, b, c, out found);
        if (found != Vector3.Zero)
        {
          Vector3 vector2 = Vector3.Normalize(Vector3.Cross(a - b, a - found));
          this.adjNormal = vector2;
          if ((double) Math.Abs(Vector3.Dot(vector3_2, vector2)) > 0.89999997615814209)
            isClipped = false;
        }
      }
      this.pasteDecal(ref hole, point - vector3_3, vector3_2, dir1, distance, isClipped, radius, 9, 15, 70, 100, seed);
    }

    private void pasteDecal(
      ref BloodnBacon4PT.hole hole,
      Vector3 pos,
      Vector3 normal,
      Vector3 dir,
      float distance,
      bool isClipped,
      float radius,
      int start,
      int stop,
      int fadeA,
      int fadeB,
      int seed)
    {
      Vector3 vector2 = new Vector3((float) this.rr.Next(-1800, 1800) / 100f, (float) this.rr.Next(-990, 990) / 100f, (float) this.rr.Next(-1800, 1800) / 100f);
      if (isClipped)
        vector2 = dir;
      Vector3 result1 = normal;
      Vector3.Normalize(ref result1, out result1);
      Vector3 result2 = Vector3.Cross(result1, vector2);
      Vector3.Normalize(ref result2, out result2);
      Vector3 vector3 = Vector3.Cross(result2, result1);
      Matrix matrix = new Matrix(result1.X, result1.Y, result1.Z, 0.0f, vector3.X, vector3.Y, vector3.Z, 0.0f, result2.X, result2.Y, result2.Z, 0.0f, 0.0f, 0.0f, 0.0f, 1f);
      pos += normal * 0.5f;
      Vector3 scales = new Vector3(radius * 2f, radius * 2f, radius * 2f);
      if (isClipped)
      {
        scales.Y *= (float) (((double) distance + (double) radius) / ((double) radius * 2.0));
        pos += Vector3.Transform(new Vector3(0.0f, (float) (((double) radius - (double) distance) / 2.0), 0.0f), matrix);
      }
      this.hitstreamTemp.Trans = Matrix.CreateScale(scales) * matrix * Matrix.CreateTranslation(pos);
      this.hitstreamTemp.Fade = (float) this.rr.Next(fadeA, fadeB) / 100f;
      int index1 = this.rr.Next(start, stop);
      Vector4 vector4 = hole.stainR[index1];
      this.hitstreamTemp.Coord = new Vector4(this.bulletMapWidth / vector4.Z, vector4.X / this.bulletMapWidth, this.bulletMapHite / vector4.W, vector4.Y / this.bulletMapHite);
      if (isClipped)
        this.hitstreamTemp.Coord.X /= (float) (((double) distance + (double) radius) / ((double) radius * 2.0));
      hole.stainTrans[hole.stainIndex] = this.hitstreamTemp;
      for (int index2 = 0; index2 < this.combo.Count; ++index2)
      {
        if (hole.Equals((object) this.combo[index2].doorholes))
        {
          hole.a[hole.stainIndex] = scales.X;
          hole.b[hole.stainIndex] = 1f;
          hole.drift[hole.stainIndex] = (float) this.rr.Next(75, 100);
        }
      }
      if (hole.Equals((object) this.cryptdoor))
      {
        hole.a[hole.stainIndex] = scales.X;
        hole.b[hole.stainIndex] = 1f;
        hole.drift[hole.stainIndex] = (float) this.rr.Next(75, 100);
      }
      if (hole.Equals((object) this.cryptdoor2))
      {
        hole.a[hole.stainIndex] = scales.X;
        hole.b[hole.stainIndex] = 1f;
        hole.drift[hole.stainIndex] = (float) this.rr.Next(75, 100);
      }
      ++hole.stainIndex;
      if (hole.stainIndex > hole.stainCapacity - 1)
        hole.stainIndex = 0;
      ++hole.stainMax;
      if (hole.stainMax <= hole.stainCapacity - 1)
        return;
      hole.stainMax = hole.stainCapacity;
    }

    private float DistanceToLine(Vector3 point, Vector3 anchor, Vector3 end, out Vector3 dir)
    {
      Vector3 vector2 = Vector3.Normalize(end - anchor);
      float num = Vector3.Dot(point - anchor, vector2);
      dir = Vector3.Normalize(point - (anchor + vector2 * num));
      return (point - (anchor + vector2 * num)).Length();
    }

    private void farmerMouthSpray()
    {
      Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 47.748f, 3.55f) * this.farmer1[0].skinTransforms[19]);
      Vector3 vector3_2 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateTranslation(0.0f, 47.748f, 3.55f) * this.farmer1[0].skinTransforms[19]) - vector3_1;
      Vector3 vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 20f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 20f);
      Vector3 vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
      float num = (float) Math.Sin((double) this.sc.myTimer) * 4.2f;
      this.farmerspit.AddParticle(vector3_1 + vector3_3, (vector3_4 + vector3_2) * (18f + num));
      vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 20f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 20f);
      vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
      this.farmerspit.AddParticle(vector3_1 + vector3_3, (vector3_4 + vector3_2) * (19f + num));
    }

    private void farmerWoundSpray()
    {
      Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(8.1f, 13.37f, 1.7f) * this.farmer1[0].skinTransforms[4]);
      Vector3 vector3_2 = Vector3.Transform(new Vector3(0.3f, -1f, 0.0f), Matrix.CreateTranslation(8.1f, 13.37f, 1.7f) * this.farmer1[0].skinTransforms[4]) - vector3_1;
      Vector3 vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 110f, (float) this.rr.Next(-20, 20) / 80f);
      Vector3 vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
      float num = (float) Math.Sin((double) this.sc.myTimer) * 3.2f;
      this.humanblood.AddParticle(vector3_1 + vector3_3, (vector3_4 + vector3_2) * (7f + num));
      vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 20f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 20f);
      vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
      this.humanblood.AddParticle(vector3_1 + vector3_3, (vector3_4 + vector3_2) * (9f + num));
    }

    private void farmerMouthBlood(int amt)
    {
      Vector3 vector3_1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(0.0f, 47.748f, 3.55f) * this.farmer1[0].skinTransforms[19]);
      Vector3 vector3_2 = Vector3.Transform(new Vector3(0.0f, 0.0f, 1f), Matrix.CreateTranslation(0.0f, 47.748f, 3.55f) * this.farmer1[0].skinTransforms[19]) - vector3_1;
      Vector3 vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 20f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 20f);
      Vector3 vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
      for (int index = 0; index < amt; ++index)
      {
        vector3_3 = new Vector3((float) this.rr.Next(-20, 20) / 20f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 20f);
        vector3_4 = new Vector3((float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f, (float) this.rr.Next(-20, 20) / 80f);
        this.humanblood.AddParticle(vector3_1 + vector3_3, (vector3_4 + vector3_2) * (float) (28 + this.rr.Next(5, 20)));
      }
    }

    private void woundSpray()
    {
      for (int index = 0; index < 4; ++index)
      {
        Vector3 position1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[25]);
        Vector3 vector3_1 = Vector3.Transform(new Vector3(-1f, 0.0f, 0.0f), Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[25]) - position1;
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num1 = (float) Math.Sin((double) this.sc.myTimer / 3.119999885559082) * 4.2f;
        this.humanblood.AddParticle(position1, vector3_1 * (16f + num1));
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num2 = (float) Math.Sin((double) this.sc.myTimer / 3.119999885559082) * 4.2f;
        this.humanblood.AddParticle(position1 + vector3_2, vector3_1 * (17f + num2));
        Vector3 position2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[21]);
        Vector3 vector3_3 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[21]) - position2;
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num3 = (float) Math.Sin((double) this.sc.myTimer / 6.0) * 5f;
        this.humanblood.AddParticle(position2, vector3_3 * (16f + num3));
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num4 = (float) Math.Sin((double) this.sc.myTimer / 6.0) * 5f;
        this.humanblood.AddParticle(position2 + vector3_2, vector3_3 * (18f + num4));
      }
    }

    private void woundSpray2(int ii)
    {
      for (int index = 0; index < 8; ++index)
      {
        Vector3 position1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.remPlayer[ii].r.skinTransforms[25]);
        Vector3 vector3_1 = Vector3.Transform(new Vector3(-1f, 0.0f, 0.0f), Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.remPlayer[ii].r.skinTransforms[25]) - position1;
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num1 = (float) Math.Sin((double) this.sc.myTimer / 3.119999885559082) * 4.2f;
        this.humanblood.AddParticle(position1, vector3_1 * (16f + num1));
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num2 = (float) Math.Sin((double) this.sc.myTimer / 3.119999885559082) * 4.2f;
        this.humanblood.AddParticle(position1 + vector3_2, vector3_1 * (17f + num2));
        Vector3 position2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.remPlayer[ii].r.skinTransforms[21]);
        Vector3 vector3_3 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.remPlayer[ii].r.skinTransforms[21]) - position2;
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num3 = (float) Math.Sin((double) this.sc.myTimer / 6.0) * 5f;
        this.humanblood.AddParticle(position2, vector3_3 * (16f + num3));
        vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
        float num4 = (float) Math.Sin((double) this.sc.myTimer / 6.0) * 5f;
        this.humanblood.AddParticle(position2 + vector3_2, vector3_3 * (18f + num4));
      }
    }

    private void woundSpraySpark()
    {
      Vector3 position1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[25]);
      Vector3 vector3_1 = Vector3.Transform(new Vector3(-1f, 0.0f, 0.0f), Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[25]) - position1;
      Vector3 vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num1 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 4.2f;
      this.electric.AddParticle(position1, vector3_1 * ((float) this.rr.Next(5, 35) + num1));
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num2 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 4.2f;
      this.sparks2.AddParticle(position1 + vector3_2, vector3_1 * ((float) this.rr.Next(5, 35) + num2));
      Vector3 position2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[21]);
      Vector3 vector3_3 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.npc1[this.myPlayer.clip1].skinTransforms[21]) - position2;
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num3 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 5f;
      this.electric.AddParticle(position2, vector3_3 * ((float) this.rr.Next(5, 35) + num3));
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num4 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 5f;
      this.sparks2.AddParticle(position2 + vector3_2, vector3_3 * ((float) this.rr.Next(5, 35) + num4));
    }

    private void woundSpraySpark2(int ii)
    {
      Vector3 position1 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.remPlayer[ii].r.skinTransforms[25]);
      Vector3 vector3_1 = Vector3.Transform(new Vector3(-1f, 0.0f, 0.0f), Matrix.CreateTranslation(-8f, 43.2f, 0.0f) * this.remPlayer[ii].r.skinTransforms[25]) - position1;
      Vector3 vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num1 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 4.2f;
      this.electric.AddParticle(position1, vector3_1 * ((float) this.rr.Next(5, 35) + num1));
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num2 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 4.2f;
      this.sparks2.AddParticle(position1 + vector3_2, vector3_1 * ((float) this.rr.Next(5, 35) + num2));
      Vector3 position2 = Vector3.Transform(Vector3.Zero, Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.remPlayer[ii].r.skinTransforms[21]);
      Vector3 vector3_3 = Vector3.Transform(new Vector3(1f, 0.0f, 0.0f), Matrix.CreateTranslation(7.9f, 43.3f, 0.0f) * this.remPlayer[ii].r.skinTransforms[21]) - position2;
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num3 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 5f;
      this.electric.AddParticle(position2, vector3_3 * ((float) this.rr.Next(5, 35) + num3));
      vector3_2 = new Vector3((float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f, (float) this.rr.Next(-20, 20) / 100f);
      float num4 = (float) Math.Sin((double) this.sc.myTimer / 2.0) * 5f;
      this.sparks2.AddParticle(position2 + vector3_2, vector3_3 * ((float) this.rr.Next(5, 35) + num4));
    }

    private void humanSpray(Vector3 hit, Vector3 target)
    {
      Vector3 vector3 = Vector3.Normalize(hit - target);
      float num1 = (float) this.rr.Next(200, 420);
      int num2 = (int) ((float) this.rr.Next(300, 550) * 0.2f);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-50, 50) / 140f, (float) this.rr.Next(-5, 11) / 120f, (float) this.rr.Next(-50, 50) / 140f);
        this.humanblood.AddParticle(new Vector3((float) this.rr.Next(-70, 70) / 100f, (float) this.rr.Next(-60, 60) / 100f, (float) this.rr.Next(-60, 60) / 100f) + hit, vector3 * (float) this.rr.Next(20, 20 + num2) / 10f);
      }
    }

    private void bloodSpray(Vector3 center, Vector3 direction, float scale)
    {
      Vector3 vector3 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(200, 420) / 3f;
      int num2 = (int) (float) ((double) this.rr.Next(300, 550) * (double) scale * 0.800000011920929) * this.rr.Next(2, 5);
      int mycolor = 6;
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-50, 50) / 140f, (float) this.rr.Next(-5, 11) / 120f, (float) this.rr.Next(-50, 50) / 140f);
        this.blood.AddParticle3(new Vector3((float) this.rr.Next(-70, 70) / 100f, (float) this.rr.Next(-60, 60) / 100f, (float) this.rr.Next(-60, 60) / 100f) + center, vector3 * (float) this.rr.Next(20, 20 + num2) / 10f, mycolor);
      }
    }

    private void bloodSpray2(Vector3 center, Vector3 direction, float scale)
    {
      Vector3 vector3 = Vector3.Normalize(center - direction);
      float num1 = 400f;
      int num2 = (int) ((float) this.rr.Next(350, 500) * scale);
      int mycolor = this.rr.Next(4, 6);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-50, 50) / 140f, (float) this.rr.Next(-6, 11) / 120f, (float) this.rr.Next(-50, 50) / 140f);
        this.blood.AddParticle3(new Vector3((float) this.rr.Next(-70, 70) / 100f, (float) this.rr.Next(-60, 60) / 100f, (float) this.rr.Next(-60, 60) / 100f) + center, vector3 * (float) this.rr.Next(20, 20 + num2) / 10f, mycolor);
      }
    }

    private void bloodSpraySkull(Vector3 center, Vector3 direction, float scale)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(150, 250);
      int num2 = (int) (float) ((double) this.rr.Next(2000, 7000) * (double) scale * 0.20000000298023224);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-250, 250) / 400f, (float) this.rr.Next(-50, 250) / 400f, (float) this.rr.Next(-250, 250) / 400f);
        this.blood.AddParticle3(new Vector3((float) this.rr.Next(-70, 70) / 190f, (float) this.rr.Next(-60, 60) / 190f, (float) this.rr.Next(-60, 60) / 190f) + center, (vector3_2 + vector3_1) * (float) this.rr.Next(50, 50 + num2) / 10f, 6);
      }
    }

    private void bloodSprayTwin(Vector3 center, Vector3 direction, float scale)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(25, 45);
      int num2 = (int) (float) ((double) this.rr.Next(2000, 7000) * (double) scale * 0.10000000149011612);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-250, 250) / 400f, (float) this.rr.Next(-50, 250) / 400f, (float) this.rr.Next(-250, 250) / 400f);
        this.humanblood.AddParticle(new Vector3((float) this.rr.Next(-70, 70) / 390f, (float) this.rr.Next(-60, 60) / 390f, (float) this.rr.Next(-60, 60) / 390f) + center, (vector3_2 + vector3_1) * (float) this.rr.Next(50, 50 + num2) / 10f);
      }
    }

    private void bitSpray2(Vector3 center, Vector3 direction, float scale)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(75, 125);
      int num2 = (int) (float) ((double) this.rr.Next(1200, 14550) * (double) scale * 0.20000000298023224);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-250, 250) / 400f, (float) this.rr.Next(-50, 250) / 400f, (float) this.rr.Next(-250, 250) / 400f);
        this.bits.AddParticle(new Vector3((float) this.rr.Next(-70, 70) / 190f, (float) this.rr.Next(-60, 60) / 190f, (float) this.rr.Next(-60, 60) / 190f) + center, (vector3_2 + vector3_1) * (float) this.rr.Next(50, 50 + num2) / 10f);
      }
    }

    private void bitSpray(Vector3 center, Vector3 direction, float scale, float div)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(75, 125) / div;
      int num2 = (int) ((float) this.rr.Next(1200, 14550) * scale);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-250, 250) / 400f, (float) this.rr.Next(-50, 250) / 400f, (float) this.rr.Next(-250, 250) / 400f);
        this.bits.AddParticle(new Vector3((float) this.rr.Next(-70, 70) / 50f, (float) this.rr.Next(-60, 60) / 50f, (float) this.rr.Next(-60, 60) / 50f) + center, (vector3_2 + vector3_1) * (float) this.rr.Next(50, 50 + num2) / 10f);
      }
    }

    private void sparkSpray(Vector3 center, Vector3 direction, float scale, float div)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(95, 165) / div;
      int num2 = (int) ((float) this.rr.Next(1800, 9550) * scale);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-250, 250) / 400f, (float) this.rr.Next(-50, 250) / 400f, (float) this.rr.Next(-250, 250) / 400f);
        this.sparks2.AddParticle(new Vector3((float) this.rr.Next(-70, 70) / 50f, (float) this.rr.Next(-60, 60) / 50f, (float) this.rr.Next(-60, 60) / 50f) + center, (vector3_2 + vector3_1) * (float) this.rr.Next(50, 50 + num2) / 10f);
      }
    }

    private void bloodSprayRem(Vector3 center, Vector3 direction, float scale, int ii)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(200, 420) / 3f;
      int num2 = (int) (float) ((double) this.rr.Next(300, 550) * (double) scale * 0.800000011920929) * this.rr.Next(2, 5);
      int mycolor = 6;
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3_1 += new Vector3((float) this.rr.Next(-50, 50) / 140f, (float) this.rr.Next(-5, 11) / 120f, (float) this.rr.Next(-50, 50) / 140f);
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-70, 70) / 100f, (float) this.rr.Next(-60, 60) / 100f, (float) this.rr.Next(-60, 60) / 100f);
        this.remPlayer[ii].r.bloodrem.AddParticle3(vector3_2 + center, vector3_1 * (float) this.rr.Next(20, 20 + num2) / 10f, mycolor);
      }
    }

    private void bloodSprayRem2(Vector3 center, Vector3 direction, float scale, int ii)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = 400f;
      int num2 = (int) ((float) this.rr.Next(350, 500) * scale);
      int mycolor = this.rr.Next(4, 6);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3_1 += new Vector3((float) this.rr.Next(-50, 50) / 140f, (float) this.rr.Next(-6, 11) / 120f, (float) this.rr.Next(-50, 50) / 140f);
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-70, 70) / 100f, (float) this.rr.Next(-60, 60) / 100f, (float) this.rr.Next(-60, 60) / 100f);
        this.remPlayer[ii].r.bloodrem.AddParticle3(vector3_2 + center, vector3_1 * (float) this.rr.Next(20, 20 + num2) / 10f, mycolor);
      }
    }

    private void bossbloodSpray(
      Vector3 center,
      Vector3 direction,
      float gush,
      float amtadjust,
      Vector3 inherit,
      int cc,
      bool islocal,
      int ii)
    {
      Vector3 vector3_1 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(400, 620) * amtadjust;
      int num2 = (int) ((float) this.rr.Next(300, 550) * gush);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3_1 += new Vector3((float) this.rr.Next(-50, 50) / 240f, (float) this.rr.Next(-5, 11) / 220f, (float) this.rr.Next(-50, 50) / 240f);
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-170, 170) / 30f, (float) this.rr.Next(-160, 160) / 30f, (float) this.rr.Next(-160, 160) / 30f);
        if (islocal)
          this.blood.AddParticle3(vector3_2 + center, inherit + vector3_1 * (float) this.rr.Next(20, 20 + num2) / 10f, cc);
        else
          this.remPlayer[ii].r.bloodrem.AddParticle3(vector3_2 + center, inherit + vector3_1 * (float) this.rr.Next(20, 20 + num2) / 10f, cc);
      }
    }

    private void cuttyChunkSpray(Vector3 center, Vector3 direction, float scale, float amtadjust)
    {
      Vector3 vector3 = Vector3.Normalize(center - direction);
      float num1 = (float) this.rr.Next(350, 550) * amtadjust;
      int num2 = (int) ((float) this.rr.Next(300, 550) * scale);
      int mycolor = this.rr.Next(1, 7);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-50, 50) / 240f, (float) this.rr.Next(-5, 11) / 220f, (float) this.rr.Next(-50, 50) / 240f);
        this.blood.AddParticle3(new Vector3((float) this.rr.Next(-170, 170) / 20f, (float) this.rr.Next(-160, 160) / 20f, (float) this.rr.Next(-160, 160) / 20f) + center, vector3 * (float) this.rr.Next(20, 20 + num2) / 10f, mycolor);
      }
    }

    private void cuttyChunkSpray2(Vector3 edge2, Vector3 center2, float scale, float amtadjust)
    {
      Vector3 vector3 = Vector3.Normalize(edge2 - center2);
      float num1 = (float) this.rr.Next(250, 520) * amtadjust;
      int num2 = (int) ((float) this.rr.Next(360, 600) * scale);
      int mycolor = this.rr.Next(1, 7);
      int mysize = this.rr.Next(40, 80);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-50, 50) / 230f, (float) this.rr.Next(-3, 11) / 220f, (float) this.rr.Next(-50, 50) / 230f);
        this.headblood.AddParticle2(new Vector3((float) this.rr.Next(-170, 170) / 20f, (float) this.rr.Next(-160, 160) / 20f, (float) this.rr.Next(-160, 160) / 20f) + edge2, vector3 * (float) this.rr.Next(30, 30 + num2) / 10f, mysize, mycolor);
      }
    }

    private void cuttyFragments(Vector3 point, Vector3 normal)
    {
      Vector3 vector3_1 = Vector3.Normalize(normal);
      int maxValue1 = this.rr.Next(15, 55);
      float num = (float) this.rr.Next(55, 95);
      int maxValue2 = this.rr.Next(950, 1650);
      for (int index = 0; (double) index < (double) num; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 90f, (float) this.rr.Next(-maxValue1, maxValue1) / 90f, (float) this.rr.Next(-maxValue1, maxValue1) / 90f);
        this.electric.AddParticle(point + vector3_2 * 5f, new Vector3(vector3_1.X + vector3_2.X, vector3_1.Y + vector3_2.Y, vector3_1.Z + vector3_2.Z) * (float) this.rr.Next(90, maxValue2) / 10f);
        if ((double) index < (double) num / 3.0)
          this.electric.AddParticle(point + vector3_2 * 6f, new Vector3(-vector3_1.X + vector3_2.X, -vector3_1.Y + vector3_2.Y, -vector3_1.Z + vector3_2.Z) * (float) this.rr.Next(20, maxValue2) / 16f);
      }
    }

    private void fenceSparks(Vector3 point, Vector3 normal)
    {
      Vector3 vector3_1 = Vector3.Normalize(normal);
      int maxValue1 = this.rr.Next(25, 75);
      float num = (float) this.rr.Next(5, 25);
      int maxValue2 = this.rr.Next(550, 1250);
      for (int index = 0; (double) index < (double) num; ++index)
      {
        Vector3 vector3_2 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 90f, (float) this.rr.Next(-maxValue1, maxValue1) / 90f, (float) this.rr.Next(-maxValue1, maxValue1) / 90f);
        this.electric.AddParticle(point + vector3_2 * 1f, new Vector3(vector3_1.X + vector3_2.X, vector3_1.Y + vector3_2.Y, vector3_1.Z + vector3_2.Z) * (float) this.rr.Next(90, maxValue2) / 10f);
      }
    }

    private void ChunkSpray(Vector3 hit, Vector3 target, float scale, float div)
    {
      Vector3 vector3 = Vector3.Normalize(hit - target);
      float num1 = (float) this.rr.Next(200, 420) / div;
      int num2 = (int) ((float) this.rr.Next(300, 550) * scale);
      for (int index = 0; (double) index < (double) num1; ++index)
      {
        vector3 += new Vector3((float) this.rr.Next(-70, 70) / 140f, (float) this.rr.Next(-5, 11) / 120f, (float) this.rr.Next(-70, 70) / 140f);
        this.bloodg.AddParticle3(new Vector3((float) this.rr.Next(-270, 270) / 100f, (float) this.rr.Next(-160, 460) / 100f, (float) this.rr.Next(-260, 260) / 100f) + hit, vector3 * (float) this.rr.Next(20, 20 + num2) / 10f, 6);
      }
    }

    private void miniSpray(Vector3 hit, Vector3 target, float scale)
    {
      Vector3 velocity = hit - target + new Vector3((float) this.rr.Next(-70, 70) / 140f, 0.0f, (float) this.rr.Next(-70, 70) / 140f);
      this.bloodg.AddParticle3(new Vector3((float) this.rr.Next(-270, 270) / 100f, (float) this.rr.Next(-160, 160) / 100f, (float) this.rr.Next(-260, 260) / 100f) + hit, velocity, 6);
    }

    private void headBlood(ref dupeItem d, float dist)
    {
      float num1 = 35f;
      dist = MathHelper.Clamp(dist, 1000000f, 7000000f);
      dist = (float) (((double) dist - 1000000.0) / 6000000.0);
      float num2 = MathHelper.Lerp(1.2f, 0.2f, dist);
      if (this.pim1.mirvSeeStreaks || this.pim2.mirvSeeStreaks)
        num1 = MathHelper.Lerp(3f, 1f, dist);
      float num3;
      if (this.sc.gorelevel > 0)
      {
        num3 = 20f;
        num2 = MathHelper.Lerp(1.2f, 0.8f, dist);
      }
      else
        num3 = (int) this.boar.alive >= this.breakPoint ? MathHelper.Lerp(10f, 1f, dist) : MathHelper.Lerp(20f, 4f, dist);
      float num4 = Vector3.Distance(d.mypos, d.oldpos) * num2;
      if ((double) num4 > (double) num3)
        num4 = num3;
      float num5 = 0.0f;
      float num6 = (float) this.rr.Next(60, 140) / 100f;
      for (float amount = 0.0f; (double) amount < 1.0; amount += 1f / num4)
      {
        Vector3 result1;
        Vector3.Lerp(ref d.mypos, ref d.oldpos, amount, out result1);
        Matrix result2;
        Matrix.Lerp(ref d.myRot, ref d.oldRot, amount, out result2);
        num5 += 3.7f;
        Vector3 position = new Vector3((float) -Math.Cos((double) num5) * d.scale * num6, (float) (-(double) d.scale * 1.2000000476837158 * (double) this.rr.Next(80, 120) / 100.0), (float) Math.Sin((double) num5) * d.scale * num6);
        Matrix.CreateTranslation(ref result1, out this.m1);
        Matrix.Multiply(ref result2, ref this.m1, out this.m2);
        Vector3.Transform(ref position, ref this.m2, out this.v1);
        this.headblood.AddParticle2(this.v1, Vector3.Zero, (int) ((double) d.scale * 10.0), (int) d.tint);
      }
      d.oldpos = d.mypos;
      d.oldRot = d.myRot;
    }

    private void humanpartBlood2(ref humanPart d, float dist)
    {
    }

    private void debrisBlood(
      ref Vector3 spin,
      ref Vector3 old,
      ref Vector3 mypos,
      float scale,
      float dist,
      int cc,
      float age,
      bool poofy)
    {
      if ((double) Vector3.Distance(old, mypos) < (double) scale * 0.10000000149011612)
        return;
      if ((double) age <= 100.0 && poofy)
        scale += (float) (190.0 * (1.0 - (double) age / 50.0));
      scale = MathHelper.Clamp(scale, 45f, 240f);
      this.debrisblood.AddParticle2(spin, Vector3.Zero, (int) scale, cc);
      old = mypos;
    }

    private void debrisSparks(Vector3 point)
    {
      int num = 2900;
      for (int index = 0; index < num; ++index)
      {
        int maxValue1 = this.rr.Next(25, 100);
        int maxValue2 = this.rr.Next(2550, 4250);
        Vector3 vector3 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 50f, (float) this.rr.Next(0, maxValue1) / 200f, (float) this.rr.Next(-maxValue1, maxValue1) / 50f);
        this.debrisFire.AddParticle5(point + vector3 * 15f, new Vector3(0.0f + vector3.X, 0.1f + vector3.Y, 0.0f + vector3.Z) * (float) this.rr.Next(120, maxValue2) / 10f, 125, 250, 210, 211);
      }
    }

    private void debrisSparks2(Vector3 point)
    {
      int num = 2000;
      for (int index = 0; index < num; ++index)
      {
        int maxValue1 = this.rr.Next(25, 100);
        int maxValue2 = this.rr.Next(1650, 3550);
        Vector3 vector3 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 50f, (float) this.rr.Next(-10, maxValue1) / 100f, (float) this.rr.Next(-maxValue1, maxValue1) / 50f);
        this.debrisFire.AddParticle5(point + vector3 * 20f, new Vector3(0.0f + vector3.X, 0.0f + vector3.Y, 0.0f + vector3.Z) * (float) this.rr.Next(120, maxValue2) / 10f, 125, 250, 244, 231);
      }
    }

    private void debrisSparks3(Vector3 point)
    {
      int num = 1200;
      for (int index = 0; index < num; ++index)
      {
        int maxValue1 = this.rr.Next(10, 90);
        int maxValue2 = this.rr.Next(2550, 4550);
        Vector3 vector3 = new Vector3((float) this.rr.Next(-maxValue1, maxValue1) / 50f, (float) this.rr.Next(-maxValue1, maxValue1) / 50f, (float) this.rr.Next(-maxValue1, maxValue1) / 50f);
        this.debrisFire.AddParticle5(point + vector3 * 20f, new Vector3(0.0f + vector3.X, 0.0f + vector3.Y, 0.0f + vector3.Z) * (float) this.rr.Next(120, maxValue2) / 10f, 125, 250, 214, 211);
      }
    }

    private void gunsmokeDrift(Vector3 drift)
    {
      Matrix matrix = Matrix.CreateTranslation((float) this.rr.Next(380, 900) / 100f, -1f, 0.0f) * Matrix.CreateFromYawPitchRoll(MathHelper.ToRadians(11f), MathHelper.ToRadians(-86f), MathHelper.ToRadians(-180f)) * Matrix.CreateTranslation(-24.784f, 42.639f, 2.188f);
      Vector3 vector3 = Vector3.Transform(Vector3.Zero, this.sc.flashOffset[this.myPlayer.lastWeapon] * this.myPlayer.pistolHand);
      Vector3 velocity = (float) this.rr.Next(150, 1950) / 100f * drift;
      for (int index = 0; index < 3; ++index)
      {
        velocity += new Vector3(0.0f, (float) this.rr.Next(-180, -60) / 100f, 0.0f);
        this.gunsmoke.AddParticle(vector3 + new Vector3((float) this.rr.Next(-150, 150) / 100f, (float) this.rr.Next(-50, 50) / 100f, (float) this.rr.Next(-150, 150) / 100f), velocity);
      }
    }

    private void gunsmokeDriftRemote(Vector3 drift, int ii)
    {
      Vector3 vector3 = Vector3.Transform(Vector3.Zero, this.sc.flashOffset[this.remPlayer[ii].r.lastWeapon] * this.remPlayer[ii].r.pistolHand);
      Vector3 velocity = (float) this.rr.Next(150, 1850) / 100f * drift;
      for (int index = 0; index < 3; ++index)
      {
        velocity += new Vector3(0.0f, (float) this.rr.Next(-180, -60) / 100f, 0.0f);
        this.gunsmoke.AddParticle(vector3 + new Vector3((float) this.rr.Next(-150, 150) / 100f, (float) this.rr.Next(-50, 50) / 100f, (float) this.rr.Next(-150, 150) / 100f), velocity);
      }
    }

    public void GetHeightFast(ref float[,] heights, Vector3 position, ref float height)
    {
      int index1 = (int) MathHelper.Clamp(position.X / this.unit, 0.0f, (float) (this.bitmap - 2));
      int index2 = (int) MathHelper.Clamp(position.Z / this.unit, 0.0f, (float) (this.bitmap - 2));
      float num1 = position.X % this.unit / this.unit;
      float num2 = position.Z % this.unit / this.unit;
      float num3 = (float) ((1.0 - (double) num1) * (double) heights[index1, index2] + (double) num1 * (double) heights[index1 + 1, index2]);
      float num4 = (float) ((1.0 - (double) num1) * (double) heights[index1, index2 + 1] + (double) num1 * (double) heights[index1 + 1, index2 + 1]);
      height = (float) ((1.0 - (double) num2) * (double) num3 + (double) num2 * (double) num4);
    }

    private void addPlayer(CSteamID remoteid, CSteamID lobbyid)
    {
      bool flag = false;
      for (int iMember = 0; iMember < SteamMatchmaking.GetNumLobbyMembers(lobbyid); ++iMember)
      {
        if (SteamMatchmaking.GetLobbyMemberByIndex(lobbyid, iMember) == remoteid)
          flag = true;
      }
      if (!flag)
        return;
      this.HostOwner = SteamMatchmaking.GetLobbyOwner(lobbyid);
      this.sc.hostowner = this.HostOwner;
      if (this.remPlayer.Exists((Predicate<dummyOwner>) (a => a.id == remoteid)))
        return;
      this.remPlayer.Add(new dummyOwner(new remotePlayer4(this.Content, this.startpositions[0], this.sc), remoteid));
      this.remPlayer.Sort();
      if (this.remPlayer.Count > 0)
      {
        for (int index = 0; index < this.remPlayer.Count; ++index)
        {
          if (this.mysteamID == this.remPlayer[index].id)
            this.sc.myplayerindex = index;
          if (this.remPlayer[index].id == remoteid)
          {
            if (this.remPlayer[index].id != this.HostOwner)
            {
              this.remPlayer[index].r.simulationState.npcPosition = this.startpositions[index];
              this.remPlayer[index].r.isHost = false;
            }
            else
            {
              this.remPlayer[index].r.simulationState.npcPosition = this.hostPosition;
              this.remPlayer[index].r.isHost = true;
            }
            this.remPlayer[index].r.now.bonusnpc = (byte) 6;
            this.remPlayer[index].r.remgamertag = "No Name";
            this.buildSecondaryWeaponRemote(this.remPlayer[index].r.secondaryChoice, index);
            this.buildPrimaryWeaponRemote(this.remPlayer[index].r.primaryChoice, index);
            this.buildCharSkin(index);
          }
        }
      }
      this.sc.reColorChatBox(ref this.remPlayer);
    }

    private void delPlayer(CSteamID remoteid, CSteamID lobbyid)
    {
      this.sc.lobby.closeSession(remoteid);
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (this.remPlayer[index].id == remoteid)
          this.remPlayer.RemoveAt(index);
      }
      this.remPlayer.Sort();
      this.sc.reColorChatBox(ref this.remPlayer);
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (this.mysteamID == this.remPlayer[index].id)
          this.sc.myplayerindex = index;
      }
    }

    private int getplayerIndex(CSteamID remoteid)
    {
      int num = -1;
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (this.remPlayer[index].id == remoteid)
        {
          num = index;
          break;
        }
      }
      return num;
    }

    private void closeallSessions()
    {
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (this.mysteamID != this.remPlayer[index].id)
          this.sc.lobby.closeSession(this.remPlayer[index].id);
      }
      this.sc.lobby.leaveLobby();
      this.sc.lobby.uncreateLobby();
      try
      {
        this.connectRequest.Unregister();
      }
      catch
      {
      }
    }

    private void SendP2PPacket(ref byte[] packetB, EP2PSend val)
    {
      for (int index = 0; index < this.remPlayer.Count; ++index)
      {
        if (this.mysteamID != this.remPlayer[index].id)
          SteamNetworking.SendP2PPacket(this.remPlayer[index].id, packetB, (uint) packetB.Length, val);
      }
    }

    public class blobbo
    {
      public Vector2 pos;
      public float scale;
      public float rot;
    }

    public class emitters
    {
      public bool found;
      public Vector3 emitterPos;
      public Matrix emitterMatrix;
      public Matrix rotMatrix;
      public Vector3 triggerPos;
      public int freq;
      public int amt;
      public bool placeit;
      public int amtorig;
      public int repeat;
    }

    public class interact
    {
      public Model photo1;
      public Texture2D photo1Texture;
      public int atPhoto1;
      public static int atPhotoTimer;
      public int length;
      public int indexer;
      public string info;
      public bool foundPhoto1;
      public SoundEffect soundEffect_0;
      public Matrix photo1Matrix;
      public Vector3 vector3_0;
    }

    public class myDoor
    {
      public Vector3 doortrans;
      public bool doorlock;
      public bool doorlockComplete;
      public bool doorFlag;
      public bool doornetsend;
      public float doorrot;
      public int tumbler1state;
      public int tumbler2state;
      public int tumbler3state;
      public Vector3 tumbler1trans;
      public Vector3 tumbler2trans;
      public Vector3 tumbler3trans;
      public Matrix doorMatrix;
      public Matrix rotMatrix;
      public BloodnBacon4PT.hole doorholes;
      public float frame;
    }

    private class Flare
    {
      public float Position;
      public float Scale;
      public Color Color;
      public string TextureName;
      public Texture2D Texture;

      public Flare(float position, float scale, Color color, string textureName)
      {
        this.Position = position;
        this.Scale = scale;
        this.Color = color;
        this.TextureName = textureName;
      }
    }

    private struct npcanim
    {
      public float animCount;
      public float animTween;
      public List<int> animList;
      public bool looped;
      public int animClip;
      public int animMax;
      public int animMin;
      public int animLoop;
      public float tweenspeed;
    }

    public struct hitStream : IVertexType
    {
      public Matrix Trans;
      public float Fade;
      public Vector4 Coord;
      private static readonly VertexDeclaration VertexDeclaration = new VertexDeclaration(new VertexElement[6]
      {
        new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 0),
        new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
        new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
        new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
        new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
        new VertexElement(68, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4)
      });

      VertexDeclaration IVertexType.VertexDeclaration => BloodnBacon4PT.hitStream.VertexDeclaration;
    }

    public struct hole
    {
      public bool[] inAir;
      public bool[] isLocal;
      public float[] drift;
      public float[] a;
      public float[] b;
      public float[] c;
      public Vector3 location;
      public BloodnBacon4PT.hitStream[] stainTrans;
      public int[] frame;
      public Matrix[] scaleRot;
      public int stainIndex;
      public int stainMax;
      public int stainCapacity;
      public DynamicVertexBuffer stainBuffer;
      public Vector4[] stainR;
    }

    public struct instancedObject : IVertexType
    {
      public Matrix Trans;
      public float tint;
      private static readonly VertexDeclaration InstanceVertexDeclaration = new VertexDeclaration(new VertexElement[5]
      {
        new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 0),
        new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
        new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
        new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
        new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0)
      });

      VertexDeclaration IVertexType.VertexDeclaration
      {
        get => BloodnBacon4PT.instancedObject.InstanceVertexDeclaration;
      }
    }

    public struct humans
    {
      public int bone;
      public Matrix mm;
      public int max;
      public int tempindex;
      public int index;
      public int maxCapacity;
      public humanPart dupe;
      public Model model;
    }

    public struct shell
    {
      public int type;
      public int max;
      public int tempindex;
      public int tempindex2;
      public int index;
      public int maxCapacity;
      public BloodnBacon4PT.instancedObject[] stream;
      public SoundEffect sound;
      public SoundEffect soundx;
      public DynamicVertexBuffer buffer;
      public DynamicVertexBuffer buffer2;
      public BloodnBacon4PT.instancedObject[] displayList;
      public BloodnBacon4PT.instancedObject[] displayList2;
      public dupeItem[] dupe;
      public Model model1;
      public Model model2;
    }

    public struct pickup
    {
      public int type;
      public int max;
      public int tempindex;
      public int index;
      public int maxCapacity;
      public BloodnBacon4PT.instancedObject[] stream;
      public SoundEffect sound;
      public DynamicVertexBuffer buffer;
      public BloodnBacon4PT.instancedObject[] displayList;
      public invDupe[] dupe;
      public Model model;
    }

    public struct goreDrop
    {
      public int max;
      public int tempindex;
      public int index;
      public int maxCapacity;
      public BloodnBacon4PT.instancedObject[] stream;
      public DynamicVertexBuffer buffer;
      public BloodnBacon4PT.instancedObject[] displayList;
      public goreDupe[] dupe;
      public Model model;
    }

    public struct liveShell
    {
      public int max;
      public int tempindex;
      public int index;
      public int maxCapacity;
      public BloodnBacon4PT.instancedObject[] stream;
      public DynamicVertexBuffer buffer;
      public BloodnBacon4PT.instancedObject[] displayList;
      public Matrix[] trans;
      public Model model;
    }

    public struct streak
    {
      public int max;
      public int index;
      public int maxCapacity;
      public BloodnBacon4PT.instancedObject[] stream;
      public float[] slide;
      public bool[] fall;
      public bool[] bomb;
      public float[] fallSpeed;
      public int[] trigger;
      public DynamicVertexBuffer buffer;
      public Matrix[] trans;
      public Model model;
    }

    public struct atari
    {
      public Matrix mirvTrans;
      public Matrix mirvRot;
      public Vector3 mirvDest;
      public float mirvVeloc;
      public Vector3 mirvPos;
      public Vector3 mirvOld;
      public float mirvAge;
      public float mirvTimer;
      public float mirvUp;
      public float mirvFreq1;
      public float mirvFreq2;
      public float mirvTwist;
      public float mirvBank;
      public float mirvUpLock;
      public bool mirvGoUp;
      public bool mirvMoving;
      public bool mirvLevel;
      public bool mirvSeeStreaks;
      public int mirvStreakTimer;
      public float mirvFader;
    }

    public struct skinstream : IVertexType
    {
      public Matrix Transformation;
      public float frame1;
      public float frame2;
      public float tween;
      public float blood;
      public float tint;
      private static readonly VertexDeclaration VertexDeclaration = new VertexDeclaration(new VertexElement[9]
      {
        new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
        new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
        new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
        new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4),
        new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
        new VertexElement(68, VertexElementFormat.Single, VertexElementUsage.Fog, 1),
        new VertexElement(72, VertexElementFormat.Single, VertexElementUsage.Fog, 2),
        new VertexElement(76, VertexElementFormat.Single, VertexElementUsage.Fog, 3),
        new VertexElement(80, VertexElementFormat.Single, VertexElementUsage.Fog, 4)
      });

      VertexDeclaration IVertexType.VertexDeclaration
      {
        get => BloodnBacon4PT.skinstream.VertexDeclaration;
      }
    }

    public struct conductor
    {
      public byte type;
      public int id;
      public byte action;
      public byte bodypart;
      public int frame;
      public int time;
      public bool died;
      public float rot;
      public byte speed;
      public Vector3 veloc;
      public int remIndex;
    }

    public struct npc
    {
      public ushort alive;
      public ushort alive2;
      public Model model1;
      public Model model2;
      public Model model3;
      public Model model4;
      public Model skelmodel;
      public Model charModel;
      public Model zombieModel;
      public BloodnBacon4PT.skinstream[] display1;
      public BloodnBacon4PT.skinstream[] display2;
      public BloodnBacon4PT.skinstream[] display3;
      public BloodnBacon4PT.skinstream[] display4;
      public BloodnBacon4PT.skinstream[] displayS;
      public BloodnBacon4PT.skinstream[] displayC;
      public BloodnBacon4PT.skinstream[] displayZ;
      public List<int> explodelist;
      public List<int> shockList;
      public List<int> shatterList;
      public List<boarDupe> dupe;
      public List<BloodnBacon4PT.conductor> conductor;
      public int max;
      public int index1;
      public int index2;
      public int index3;
      public int index4;
      public int indexS;
      public int indexC;
      public int indexZ;
      public DynamicVertexBuffer buffer1;
      public DynamicVertexBuffer buffer2;
      public DynamicVertexBuffer buffer3;
      public DynamicVertexBuffer buffer4;
      public DynamicVertexBuffer bufferS;
      public DynamicVertexBuffer bufferC;
      public DynamicVertexBuffer bufferZ;
      public SkinningDataX data;
      public Texture2D bitmap;
      public Texture2D boar1Texture;
      public Texture2D boar2Texture;
      public Texture2D boneTexture;
      public Texture2D charTexture;
      public Effect eff;
      public Vector3[] uv;
      public Matrix[] targ;
      public int[] bone;
      public int hitindex;
      public float npcDist;
    }

    public struct simplestream : IVertexType
    {
      public Matrix Transformation;
      public float frame1;
      public float tint;
      private static readonly VertexDeclaration VertexDeclaration = new VertexDeclaration(new VertexElement[6]
      {
        new VertexElement(0, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 1),
        new VertexElement(16, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 2),
        new VertexElement(32, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 3),
        new VertexElement(48, VertexElementFormat.Vector4, VertexElementUsage.BlendWeight, 4),
        new VertexElement(64, VertexElementFormat.Single, VertexElementUsage.Fog, 0),
        new VertexElement(68, VertexElementFormat.Single, VertexElementUsage.Fog, 1)
      });

      VertexDeclaration IVertexType.VertexDeclaration
      {
        get => BloodnBacon4PT.simplestream.VertexDeclaration;
      }
    }

    public struct simpleNPC
    {
      public ushort alive;
      public ushort alive2;
      public Model model1;
      public BloodnBacon4PT.simplestream[] display1;
      public List<batDupe> dupe;
      public int max;
      public int index1;
      public DynamicVertexBuffer buffer1;
      public SkinningDataX data;
      public Texture2D bitmap;
      public Texture2D model1Texture;
      public Effect eff;
      public Vector3[] uv;
      public Matrix[] targ;
      public int[] bone;
      public int hitindex;
      public float npcDist;
    }

    public struct npcWeb
    {
      public ushort alive;
      public ushort alive2;
      public Model model1;
      public BloodnBacon4PT.skinstream[] display1;
      public List<int> explodelist;
      public List<int> shockList;
      public List<int> shatterList;
      public List<webDupe> dupe;
      public List<BloodnBacon4PT.conductor> conductor;
      public int max;
      public int index1;
      public DynamicVertexBuffer buffer1;
      public SkinningDataX data;
      public Texture2D bitmap;
      public Texture2D boar1Texture;
      public Effect eff;
      public Vector3[] uv;
      public Matrix[] targ;
      public int[] bone;
      public int hitindex;
      public float npcDist;
    }

    public class fireEvent
    {
      public Vector3 pos;
      public Color color;
      public float size;
      public float count;
      public string type;
      public float timer;
      public bool hot;
    }

    public class streakCopy
    {
      public Vector3 position;
      public float age;
      public float Gravity;
      public Vector3 velocity;
      public float Duration;
    }

    private struct paintBody
    {
      public List<int> index;
      public List<float> x;
      public List<float> z;
    }
  }
}
